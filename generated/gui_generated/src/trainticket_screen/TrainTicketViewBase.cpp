/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/trainticket_screen/TrainTicketViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

TrainTicketViewBase::TrainTicketViewBase() :
    updateItemCallback(this, &TrainTicketViewBase::updateItemCallbackHandler),
    flexButtonCallback(this, &TrainTicketViewBase::flexButtonCallbackHandler),
    buttonCallback(this, &TrainTicketViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_CONTAINERS_LARGE_WIDE_DARK_ID));
    add(background);

    scrollTrain.setPosition(11, 36, 210, 200);
    scrollTrain.setHorizontal(false);
    scrollTrain.setCircular(false);
    scrollTrain.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollTrain.setSwipeAcceleration(10);
    scrollTrain.setDragAcceleration(10);
    scrollTrain.setNumberOfItems(7);
    scrollTrain.setSelectedItemOffset(0);
    scrollTrain.setOvershootPercentage(75);
    scrollTrain.setDrawableSize(40, 0);
    scrollTrain.setDrawables(scrollTrainListItems, updateItemCallback);
    scrollTrain.animateToItem(0, 0);
    add(scrollTrain);

    textTicketNo.setXY(249, 23);
    textTicketNo.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textTicketNo.setLinespacing(0);
    Unicode::snprintf(textTicketNoBuffer, TEXTTICKETNO_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QQ70).getText());
    textTicketNo.setWildcard(textTicketNoBuffer);
    textTicketNo.resizeToCurrentText();
    textTicketNo.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QORF));
    add(textTicketNo);

    buttonDown.setBoxWithBorderPosition(0, 0, 70, 50);
    buttonDown.setBorderSize(5);
    buttonDown.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonDown.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_000000_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_000000_SVG_ID));
    buttonDown.setIconXY(10, 0);
    buttonDown.setAction(flexButtonCallback);
    buttonDown.setPosition(249, 69, 70, 50);
    add(buttonDown);

    buttonUp.setBoxWithBorderPosition(0, 0, 70, 50);
    buttonUp.setBorderSize(5);
    buttonUp.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonUp.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_UP_50_50_000000_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
    buttonUp.setIconXY(11, 0);
    buttonUp.setAction(flexButtonCallback);
    buttonUp.setPosition(379, 69, 70, 50);
    add(buttonUp);

    textSelectedDest.setXY(238, 136);
    textSelectedDest.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textSelectedDest.setLinespacing(0);
    textSelectedDest.setWildcard(touchgfx::TypedText(T_RESOURCEID1).getText());
    textSelectedDest.resizeToCurrentText();
    textSelectedDest.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NJBN));
    add(textSelectedDest);

    buttonNext.setXY(262, 211);
    buttonNext.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_INACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_DISABLED_ID));
    buttonNext.setLabelText(touchgfx::TypedText(T___SINGLEUSE_2RSW));
    buttonNext.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonNext.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonNext.setAction(buttonCallback);
    add(buttonNext);
}

TrainTicketViewBase::~TrainTicketViewBase()
{

}

void TrainTicketViewBase::setupScreen()
{
    scrollTrain.initialize();
    for (int i = 0; i < scrollTrainListItems.getNumberOfDrawables(); i++)
    {
        scrollTrainListItems[i].initialize();
    }
}

void TrainTicketViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &buttonDown)
    {
        //buttonDownPressed
        //When buttonDown clicked call virtual function
        //Call buttonDownPressed
        buttonDownPressed();
    }
    if (&src == &buttonUp)
    {
        //buttonUpPressed
        //When buttonUp clicked call virtual function
        //Call buttonUpPressed
        buttonUpPressed();
    }
}

void TrainTicketViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonNext)
    {
        //buttonNextPressed
        //When buttonNext clicked change screen to ReviewTicket
        //Go to ReviewTicket with no screen transition
        application().gotoReviewTicketScreenNoTransition();
    }
}

void TrainTicketViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollTrainListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        ListItemContainer* cc = (ListItemContainer*)d;
        scrollTrainUpdateItem(*cc, itemIndex);
    }
}
