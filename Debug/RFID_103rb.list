
RFID_103rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002000  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800210c  0800210c  0001210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002138  08002138  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002138  08002138  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002138  08002138  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002138  08002138  00012138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800213c  0800213c  0001213c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  0800214c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  0800214c  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c3b  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f2  00000000  00000000  00028cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002a4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068c  00000000  00000000  0002ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e78  00000000  00000000  0002b3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e97  00000000  00000000  00042234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083711  00000000  00000000  0004c0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002200  00000000  00000000  000cf7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d19dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080020f4 	.word	0x080020f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080020f4 	.word	0x080020f4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc8a 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f828 	bl	80001a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c8 	bl	80002ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f89c 	bl	8000298 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000160:	f000 f864 	bl	800022c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  MFRC522_Init();
 8000164:	f000 fa10 	bl	8000588 <MFRC522_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = MFRC522_Request(PICC_REQIDL,str);
 8000168:	490c      	ldr	r1, [pc, #48]	; (800019c <main+0x50>)
 800016a:	2026      	movs	r0, #38	; 0x26
 800016c:	f000 fb03 	bl	8000776 <MFRC522_Request>
 8000170:	4603      	mov	r3, r0
 8000172:	461a      	mov	r2, r3
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <main+0x54>)
 8000176:	701a      	strb	r2, [r3, #0]
	  status = MFRC522_Anticoll(str);
 8000178:	4808      	ldr	r0, [pc, #32]	; (800019c <main+0x50>)
 800017a:	f000 fb21 	bl	80007c0 <MFRC522_Anticoll>
 800017e:	4603      	mov	r3, r0
 8000180:	461a      	mov	r2, r3
 8000182:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <main+0x54>)
 8000184:	701a      	strb	r2, [r3, #0]
	  memcpy(sNum,str,5);
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <main+0x58>)
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <main+0x50>)
 800018a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800018e:	6018      	str	r0, [r3, #0]
 8000190:	3304      	adds	r3, #4
 8000192:	7019      	strb	r1, [r3, #0]
	  HAL_Delay(100);
 8000194:	2064      	movs	r0, #100	; 0x64
 8000196:	f000 fcc9 	bl	8000b2c <HAL_Delay>
	  status = MFRC522_Request(PICC_REQIDL,str);
 800019a:	e7e5      	b.n	8000168 <main+0x1c>
 800019c:	200000cc 	.word	0x200000cc
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	200000dc 	.word	0x200000dc

080001a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b090      	sub	sp, #64	; 0x40
 80001ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	2228      	movs	r2, #40	; 0x28
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f001 ff70 	bl	800209c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]
 80001c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ca:	2302      	movs	r3, #2
 80001cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ce:	2301      	movs	r3, #1
 80001d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d2:	2310      	movs	r3, #16
 80001d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d6:	2302      	movs	r3, #2
 80001d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001da:	2300      	movs	r3, #0
 80001dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001de:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e4:	f107 0318 	add.w	r3, r7, #24
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 ff8f 	bl	800110c <HAL_RCC_OscConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001f4:	f000 f910 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f8:	230f      	movs	r3, #15
 80001fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fc:	2302      	movs	r3, #2
 80001fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2102      	movs	r1, #2
 8000212:	4618      	mov	r0, r3
 8000214:	f001 f9fc 	bl	8001610 <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800021e:	f000 f8fb 	bl	8000418 <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3740      	adds	r7, #64	; 0x40
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <MX_SPI1_Init+0x64>)
 8000232:	4a18      	ldr	r2, [pc, #96]	; (8000294 <MX_SPI1_Init+0x68>)
 8000234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <MX_SPI1_Init+0x64>)
 8000238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800023c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800023e:	4b14      	ldr	r3, [pc, #80]	; (8000290 <MX_SPI1_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <MX_SPI1_Init+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <MX_SPI1_Init+0x64>)
 800024c:	2200      	movs	r2, #0
 800024e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <MX_SPI1_Init+0x64>)
 8000252:	2200      	movs	r2, #0
 8000254:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MX_SPI1_Init+0x64>)
 8000258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800025c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <MX_SPI1_Init+0x64>)
 8000260:	2210      	movs	r2, #16
 8000262:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <MX_SPI1_Init+0x64>)
 8000266:	2200      	movs	r2, #0
 8000268:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <MX_SPI1_Init+0x64>)
 800026c:	2200      	movs	r2, #0
 800026e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <MX_SPI1_Init+0x64>)
 8000272:	2200      	movs	r2, #0
 8000274:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <MX_SPI1_Init+0x64>)
 8000278:	220a      	movs	r2, #10
 800027a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <MX_SPI1_Init+0x64>)
 800027e:	f001 fb55 	bl	800192c <HAL_SPI_Init>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000288:	f000 f8c6 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000028 	.word	0x20000028
 8000294:	40013000 	.word	0x40013000

08000298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 800029e:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <MX_USART2_UART_Init+0x50>)
 80002a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002be:	220c      	movs	r2, #12
 80002c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002d0:	f001 fe06 	bl	8001ee0 <HAL_UART_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002da:	f000 f89d 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000080 	.word	0x20000080
 80002e8:	40004400 	.word	0x40004400

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4b40      	ldr	r3, [pc, #256]	; (8000404 <MX_GPIO_Init+0x118>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a3f      	ldr	r2, [pc, #252]	; (8000404 <MX_GPIO_Init+0x118>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b3d      	ldr	r3, [pc, #244]	; (8000404 <MX_GPIO_Init+0x118>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0310 	and.w	r3, r3, #16
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	4b3a      	ldr	r3, [pc, #232]	; (8000404 <MX_GPIO_Init+0x118>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a39      	ldr	r2, [pc, #228]	; (8000404 <MX_GPIO_Init+0x118>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b37      	ldr	r3, [pc, #220]	; (8000404 <MX_GPIO_Init+0x118>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b34      	ldr	r3, [pc, #208]	; (8000404 <MX_GPIO_Init+0x118>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a33      	ldr	r2, [pc, #204]	; (8000404 <MX_GPIO_Init+0x118>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b31      	ldr	r3, [pc, #196]	; (8000404 <MX_GPIO_Init+0x118>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <MX_GPIO_Init+0x118>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a2d      	ldr	r2, [pc, #180]	; (8000404 <MX_GPIO_Init+0x118>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <MX_GPIO_Init+0x118>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0308 	and.w	r3, r3, #8
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2110      	movs	r1, #16
 8000364:	4828      	ldr	r0, [pc, #160]	; (8000408 <MX_GPIO_Init+0x11c>)
 8000366:	f000 fe97 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2120      	movs	r1, #32
 800036e:	4827      	ldr	r0, [pc, #156]	; (800040c <MX_GPIO_Init+0x120>)
 8000370:	f000 fe92 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2101      	movs	r1, #1
 8000378:	4825      	ldr	r0, [pc, #148]	; (8000410 <MX_GPIO_Init+0x124>)
 800037a:	f000 fe8d 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800037e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_GPIO_Init+0x128>)
 8000386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000388:	2300      	movs	r3, #0
 800038a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	4619      	mov	r1, r3
 8000392:	481e      	ldr	r0, [pc, #120]	; (800040c <MX_GPIO_Init+0x120>)
 8000394:	f000 fcfc 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000398:	2310      	movs	r3, #16
 800039a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	2301      	movs	r3, #1
 800039e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a4:	2302      	movs	r3, #2
 80003a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	4619      	mov	r1, r3
 80003ae:	4816      	ldr	r0, [pc, #88]	; (8000408 <MX_GPIO_Init+0x11c>)
 80003b0:	f000 fcee 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003b4:	2320      	movs	r3, #32
 80003b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	4810      	ldr	r0, [pc, #64]	; (800040c <MX_GPIO_Init+0x120>)
 80003cc:	f000 fce0 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003d0:	2301      	movs	r3, #1
 80003d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2302      	movs	r3, #2
 80003de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	480a      	ldr	r0, [pc, #40]	; (8000410 <MX_GPIO_Init+0x124>)
 80003e8:	f000 fcd2 	bl	8000d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2100      	movs	r1, #0
 80003f0:	2028      	movs	r0, #40	; 0x28
 80003f2:	f000 fc96 	bl	8000d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003f6:	2028      	movs	r0, #40	; 0x28
 80003f8:	f000 fcaf 	bl	8000d5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003fc:	bf00      	nop
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000
 8000408:	40010800 	.word	0x40010800
 800040c:	40011000 	.word	0x40011000
 8000410:	40010c00 	.word	0x40010c00
 8000414:	10110000 	.word	0x10110000

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af02      	add	r7, sp, #8
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800042e:	f107 020f 	add.w	r2, r7, #15
 8000432:	1df9      	adds	r1, r7, #7
 8000434:	2364      	movs	r3, #100	; 0x64
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2301      	movs	r3, #1
 800043a:	4804      	ldr	r0, [pc, #16]	; (800044c <RC522_SPI_Transfer+0x28>)
 800043c:	f001 fafa 	bl	8001a34 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000440:	7bfb      	ldrb	r3, [r7, #15]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000028 	.word	0x20000028

08000450 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	460a      	mov	r2, r1
 800045a:	71fb      	strb	r3, [r7, #7]
 800045c:	4613      	mov	r3, r2
 800045e:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2110      	movs	r1, #16
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <Write_MFRC522+0x48>)
 8000466:	f000 fe17 	bl	8001098 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	b2db      	uxtb	r3, r3
 8000470:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffd4 	bl	8000424 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ffd0 	bl	8000424 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2110      	movs	r1, #16
 8000488:	4803      	ldr	r0, [pc, #12]	; (8000498 <Write_MFRC522+0x48>)
 800048a:	f000 fe05 	bl	8001098 <HAL_GPIO_WritePin>
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40010800 	.word	0x40010800

0800049c <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2110      	movs	r1, #16
 80004aa:	480f      	ldr	r0, [pc, #60]	; (80004e8 <Read_MFRC522+0x4c>)
 80004ac:	f000 fdf4 	bl	8001098 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	b25b      	sxtb	r3, r3
 80004b6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80004ba:	b25b      	sxtb	r3, r3
 80004bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004c0:	b25b      	sxtb	r3, r3
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ffad 	bl	8000424 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff ffaa 	bl	8000424 <RC522_SPI_Transfer>
 80004d0:	4603      	mov	r3, r0
 80004d2:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2110      	movs	r1, #16
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <Read_MFRC522+0x4c>)
 80004da:	f000 fddd 	bl	8001098 <HAL_GPIO_WritePin>

	return val;
 80004de:	7bfb      	ldrb	r3, [r7, #15]

}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40010800 	.word	0x40010800

080004ec <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	460a      	mov	r2, r1
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	4613      	mov	r3, r2
 80004fa:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ffcc 	bl	800049c <Read_MFRC522>
 8000504:	4603      	mov	r3, r0
 8000506:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000508:	7bfa      	ldrb	r2, [r7, #15]
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	4313      	orrs	r3, r2
 800050e:	b2da      	uxtb	r2, r3
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4611      	mov	r1, r2
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff9b 	bl	8000450 <Write_MFRC522>
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b084      	sub	sp, #16
 8000526:	af00      	add	r7, sp, #0
 8000528:	4603      	mov	r3, r0
 800052a:	460a      	mov	r2, r1
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	4613      	mov	r3, r2
 8000530:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ffb1 	bl	800049c <Read_MFRC522>
 800053a:	4603      	mov	r3, r0
 800053c:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800053e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000542:	43db      	mvns	r3, r3
 8000544:	b25a      	sxtb	r2, r3
 8000546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800054a:	4013      	ands	r3, r2
 800054c:	b25b      	sxtb	r3, r3
 800054e:	b2da      	uxtb	r2, r3
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	4611      	mov	r1, r2
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ff7b 	bl	8000450 <Write_MFRC522>
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000566:	2014      	movs	r0, #20
 8000568:	f7ff ff98 	bl	800049c <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 800056c:	2103      	movs	r1, #3
 800056e:	2014      	movs	r0, #20
 8000570:	f7ff ffbc 	bl	80004ec <SetBitMask>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800057c:	210f      	movs	r1, #15
 800057e:	2001      	movs	r0, #1
 8000580:	f7ff ff66 	bl	8000450 <Write_MFRC522>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	4812      	ldr	r0, [pc, #72]	; (80005dc <MFRC522_Init+0x54>)
 8000592:	f000 fd81 	bl	8001098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2101      	movs	r1, #1
 800059a:	4811      	ldr	r0, [pc, #68]	; (80005e0 <MFRC522_Init+0x58>)
 800059c:	f000 fd7c 	bl	8001098 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80005a0:	f7ff ffea 	bl	8000578 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80005a4:	218d      	movs	r1, #141	; 0x8d
 80005a6:	202a      	movs	r0, #42	; 0x2a
 80005a8:	f7ff ff52 	bl	8000450 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80005ac:	213e      	movs	r1, #62	; 0x3e
 80005ae:	202b      	movs	r0, #43	; 0x2b
 80005b0:	f7ff ff4e 	bl	8000450 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80005b4:	211e      	movs	r1, #30
 80005b6:	202d      	movs	r0, #45	; 0x2d
 80005b8:	f7ff ff4a 	bl	8000450 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80005bc:	2100      	movs	r1, #0
 80005be:	202c      	movs	r0, #44	; 0x2c
 80005c0:	f7ff ff46 	bl	8000450 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	2015      	movs	r0, #21
 80005c8:	f7ff ff42 	bl	8000450 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80005cc:	213d      	movs	r1, #61	; 0x3d
 80005ce:	2011      	movs	r0, #17
 80005d0:	f7ff ff3e 	bl	8000450 <Write_MFRC522>

	AntennaOn();
 80005d4:	f7ff ffc5 	bl	8000562 <AntennaOn>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40010800 	.word	0x40010800
 80005e0:	40010c00 	.word	0x40010c00

080005e4 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	4613      	mov	r3, r2
 80005f4:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 80005f6:	2302      	movs	r3, #2
 80005f8:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 80005fa:	2300      	movs	r3, #0
 80005fc:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 80005fe:	2300      	movs	r3, #0
 8000600:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	2b0c      	cmp	r3, #12
 8000606:	d006      	beq.n	8000616 <MFRC522_ToCard+0x32>
 8000608:	2b0e      	cmp	r3, #14
 800060a:	d109      	bne.n	8000620 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 800060c:	2312      	movs	r3, #18
 800060e:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000610:	2310      	movs	r3, #16
 8000612:	777b      	strb	r3, [r7, #29]
			break;
 8000614:	e005      	b.n	8000622 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000616:	2377      	movs	r3, #119	; 0x77
 8000618:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800061a:	2330      	movs	r3, #48	; 0x30
 800061c:	777b      	strb	r3, [r7, #29]
			break;
 800061e:	e000      	b.n	8000622 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000620:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000622:	7fbb      	ldrb	r3, [r7, #30]
 8000624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	2002      	movs	r0, #2
 800062e:	f7ff ff0f 	bl	8000450 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	2004      	movs	r0, #4
 8000636:	f7ff ff74 	bl	8000522 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	200a      	movs	r0, #10
 800063e:	f7ff ff55 	bl	80004ec <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000642:	2100      	movs	r1, #0
 8000644:	2001      	movs	r0, #1
 8000646:	f7ff ff03 	bl	8000450 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	e00a      	b.n	8000666 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	2009      	movs	r0, #9
 800065c:	f7ff fef8 	bl	8000450 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	3301      	adds	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	69ba      	ldr	r2, [r7, #24]
 800066a:	429a      	cmp	r2, r3
 800066c:	d3f0      	bcc.n	8000650 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4619      	mov	r1, r3
 8000672:	2001      	movs	r0, #1
 8000674:	f7ff feec 	bl	8000450 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2b0c      	cmp	r3, #12
 800067c:	d103      	bne.n	8000686 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	200d      	movs	r0, #13
 8000682:	f7ff ff33 	bl	80004ec <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000686:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800068a:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 800068c:	2004      	movs	r0, #4
 800068e:	f7ff ff05 	bl	800049c <Read_MFRC522>
 8000692:	4603      	mov	r3, r0
 8000694:	773b      	strb	r3, [r7, #28]
        i--;
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	3b01      	subs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00a      	beq.n	80006b8 <MFRC522_ToCard+0xd4>
 80006a2:	7f3b      	ldrb	r3, [r7, #28]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d105      	bne.n	80006b8 <MFRC522_ToCard+0xd4>
 80006ac:	7f3a      	ldrb	r2, [r7, #28]
 80006ae:	7f7b      	ldrb	r3, [r7, #29]
 80006b0:	4013      	ands	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0e9      	beq.n	800068c <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	200d      	movs	r0, #13
 80006bc:	f7ff ff31 	bl	8000522 <ClearBitMask>

    if (i != 0)
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d052      	beq.n	800076c <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80006c6:	2006      	movs	r0, #6
 80006c8:	f7ff fee8 	bl	800049c <Read_MFRC522>
 80006cc:	4603      	mov	r3, r0
 80006ce:	f003 031b 	and.w	r3, r3, #27
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d148      	bne.n	8000768 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80006da:	7f3a      	ldrb	r2, [r7, #28]
 80006dc:	7fbb      	ldrb	r3, [r7, #30]
 80006de:	4013      	ands	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b0c      	cmp	r3, #12
 80006f2:	d13b      	bne.n	800076c <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 80006f4:	200a      	movs	r0, #10
 80006f6:	f7ff fed1 	bl	800049c <Read_MFRC522>
 80006fa:	4603      	mov	r3, r0
 80006fc:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80006fe:	200c      	movs	r0, #12
 8000700:	f7ff fecc 	bl	800049c <Read_MFRC522>
 8000704:	4603      	mov	r3, r0
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 800070c:	7dfb      	ldrb	r3, [r7, #23]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d008      	beq.n	8000724 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8000712:	7f3b      	ldrb	r3, [r7, #28]
 8000714:	3b01      	subs	r3, #1
 8000716:	00da      	lsls	r2, r3, #3
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	4413      	add	r3, r2
 800071c:	461a      	mov	r2, r3
 800071e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	e004      	b.n	800072e <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8000724:	7f3b      	ldrb	r3, [r7, #28]
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	461a      	mov	r2, r3
 800072a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800072c:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800072e:	7f3b      	ldrb	r3, [r7, #28]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d101      	bne.n	8000738 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000738:	7f3b      	ldrb	r3, [r7, #28]
 800073a:	2b10      	cmp	r3, #16
 800073c:	d901      	bls.n	8000742 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 800073e:	2310      	movs	r3, #16
 8000740:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	e00a      	b.n	800075e <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	18d4      	adds	r4, r2, r3
 800074e:	2009      	movs	r0, #9
 8000750:	f7ff fea4 	bl	800049c <Read_MFRC522>
 8000754:	4603      	mov	r3, r0
 8000756:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	3301      	adds	r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	7f3b      	ldrb	r3, [r7, #28]
 8000760:	69ba      	ldr	r2, [r7, #24]
 8000762:	429a      	cmp	r2, r3
 8000764:	d3f0      	bcc.n	8000748 <MFRC522_ToCard+0x164>
 8000766:	e001      	b.n	800076c <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000768:	2302      	movs	r3, #2
 800076a:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 800076c:	7ffb      	ldrb	r3, [r7, #31]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3724      	adds	r7, #36	; 0x24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}

08000776 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b086      	sub	sp, #24
 800077a:	af02      	add	r7, sp, #8
 800077c:	4603      	mov	r3, r0
 800077e:	6039      	str	r1, [r7, #0]
 8000780:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000782:	2107      	movs	r1, #7
 8000784:	200d      	movs	r0, #13
 8000786:	f7ff fe63 	bl	8000450 <Write_MFRC522>

	TagType[0] = reqMode;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	2201      	movs	r2, #1
 800079a:	6839      	ldr	r1, [r7, #0]
 800079c:	200c      	movs	r0, #12
 800079e:	f7ff ff21 	bl	80005e4 <MFRC522_ToCard>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <MFRC522_Request+0x3c>
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	2b10      	cmp	r3, #16
 80007b0:	d001      	beq.n	80007b6 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80007b2:	2302      	movs	r3, #2
 80007b4:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80007cc:	2100      	movs	r1, #0
 80007ce:	200d      	movs	r0, #13
 80007d0:	f7ff fe3e 	bl	8000450 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2293      	movs	r2, #147	; 0x93
 80007d8:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3301      	adds	r3, #1
 80007de:	2220      	movs	r2, #32
 80007e0:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2202      	movs	r2, #2
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	200c      	movs	r0, #12
 80007f0:	f7ff fef8 	bl	80005e4 <MFRC522_ToCard>
 80007f4:	4603      	mov	r3, r0
 80007f6:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d118      	bne.n	8000830 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80007fe:	2300      	movs	r3, #0
 8000800:	73bb      	strb	r3, [r7, #14]
 8000802:	e009      	b.n	8000818 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	7b7b      	ldrb	r3, [r7, #13]
 800080e:	4053      	eors	r3, r2
 8000810:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	3301      	adds	r3, #1
 8000816:	73bb      	strb	r3, [r7, #14]
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	2b03      	cmp	r3, #3
 800081c:	d9f2      	bls.n	8000804 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4413      	add	r3, r2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	7b7a      	ldrb	r2, [r7, #13]
 8000828:	429a      	cmp	r2, r3
 800082a:	d001      	beq.n	8000830 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 800082c:	2302      	movs	r3, #2
 800082e:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <HAL_MspInit+0x5c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x5c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x5c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x5c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x60>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_MspInit+0x60>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000

080008a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <HAL_SPI_MspInit+0x88>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d12f      	bne.n	8000920 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a19      	ldr	r2, [pc, #100]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008f0:	23a0      	movs	r3, #160	; 0xa0
 80008f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <HAL_SPI_MspInit+0x90>)
 8000904:	f000 fa44 	bl	8000d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	4619      	mov	r1, r3
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <HAL_SPI_MspInit+0x90>)
 800091c:	f000 fa38 	bl	8000d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40013000 	.word	0x40013000
 800092c:	40021000 	.word	0x40021000
 8000930:	40010800 	.word	0x40010800

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <HAL_UART_MspInit+0x70>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d123      	bne.n	800099c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_UART_MspInit+0x74>)
 8000956:	69db      	ldr	r3, [r3, #28]
 8000958:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <HAL_UART_MspInit+0x74>)
 800095a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095e:	61d3      	str	r3, [r2, #28]
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_UART_MspInit+0x74>)
 8000962:	69db      	ldr	r3, [r3, #28]
 8000964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_UART_MspInit+0x74>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <HAL_UART_MspInit+0x74>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_UART_MspInit+0x74>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000984:	230c      	movs	r3, #12
 8000986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2302      	movs	r3, #2
 800098e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4619      	mov	r1, r3
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_UART_MspInit+0x78>)
 8000998:	f000 f9fa 	bl	8000d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40004400 	.word	0x40004400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f6:	f000 f87d 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}

080009fe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a02:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a06:	f000 fb5f 	bl	80010c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
	...

08000a1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a1c:	f7ff fff7 	bl	8000a0e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a22:	490c      	ldr	r1, [pc, #48]	; (8000a54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a24:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a38:	4c09      	ldr	r4, [pc, #36]	; (8000a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a46:	f001 fb31 	bl	80020ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4a:	f7ff fb7f 	bl	800014c <main>
  bx lr
 8000a4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a58:	08002140 	.word	0x08002140
  ldr r2, =_sbss
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a60:	200000e8 	.word	0x200000e8

08000a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC1_2_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_Init+0x28>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_Init+0x28>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f947 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff feda 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40022000 	.word	0x40022000

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f95f 	bl	8000d76 <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f927 	bl	8000d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x1c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x20>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <HAL_IncTick+0x20>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	20000008 	.word	0x20000008
 8000b14:	200000e4 	.word	0x200000e4

08000b18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <HAL_GetTick+0x10>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	200000e4 	.word	0x200000e4

08000b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b34:	f7ff fff0 	bl	8000b18 <HAL_GetTick>
 8000b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b44:	d005      	beq.n	8000b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_Delay+0x44>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4413      	add	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b52:	bf00      	nop
 8000b54:	f7ff ffe0 	bl	8000b18 <HAL_GetTick>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d8f7      	bhi.n	8000b54 <HAL_Delay+0x28>
  {
  }
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4906      	ldr	r1, [pc, #24]	; (8000c0c <__NVIC_EnableIRQ+0x34>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff90 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff2d 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff42 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff90 	bl	8000c64 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5f 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff35 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffa2 	bl	8000cc8 <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b08b      	sub	sp, #44	; 0x2c
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da2:	e169      	b.n	8001078 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000da4:	2201      	movs	r2, #1
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	69fa      	ldr	r2, [r7, #28]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 8158 	bne.w	8001072 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	4a9a      	ldr	r2, [pc, #616]	; (8001030 <HAL_GPIO_Init+0x2a0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d05e      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
 8000dcc:	4a98      	ldr	r2, [pc, #608]	; (8001030 <HAL_GPIO_Init+0x2a0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d875      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000dd2:	4a98      	ldr	r2, [pc, #608]	; (8001034 <HAL_GPIO_Init+0x2a4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d058      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
 8000dd8:	4a96      	ldr	r2, [pc, #600]	; (8001034 <HAL_GPIO_Init+0x2a4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d86f      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000dde:	4a96      	ldr	r2, [pc, #600]	; (8001038 <HAL_GPIO_Init+0x2a8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d052      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
 8000de4:	4a94      	ldr	r2, [pc, #592]	; (8001038 <HAL_GPIO_Init+0x2a8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d869      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000dea:	4a94      	ldr	r2, [pc, #592]	; (800103c <HAL_GPIO_Init+0x2ac>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d04c      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
 8000df0:	4a92      	ldr	r2, [pc, #584]	; (800103c <HAL_GPIO_Init+0x2ac>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d863      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000df6:	4a92      	ldr	r2, [pc, #584]	; (8001040 <HAL_GPIO_Init+0x2b0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d046      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
 8000dfc:	4a90      	ldr	r2, [pc, #576]	; (8001040 <HAL_GPIO_Init+0x2b0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d85d      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000e02:	2b12      	cmp	r3, #18
 8000e04:	d82a      	bhi.n	8000e5c <HAL_GPIO_Init+0xcc>
 8000e06:	2b12      	cmp	r3, #18
 8000e08:	d859      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000e0a:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <HAL_GPIO_Init+0x80>)
 8000e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e10:	08000e8b 	.word	0x08000e8b
 8000e14:	08000e65 	.word	0x08000e65
 8000e18:	08000e77 	.word	0x08000e77
 8000e1c:	08000eb9 	.word	0x08000eb9
 8000e20:	08000ebf 	.word	0x08000ebf
 8000e24:	08000ebf 	.word	0x08000ebf
 8000e28:	08000ebf 	.word	0x08000ebf
 8000e2c:	08000ebf 	.word	0x08000ebf
 8000e30:	08000ebf 	.word	0x08000ebf
 8000e34:	08000ebf 	.word	0x08000ebf
 8000e38:	08000ebf 	.word	0x08000ebf
 8000e3c:	08000ebf 	.word	0x08000ebf
 8000e40:	08000ebf 	.word	0x08000ebf
 8000e44:	08000ebf 	.word	0x08000ebf
 8000e48:	08000ebf 	.word	0x08000ebf
 8000e4c:	08000ebf 	.word	0x08000ebf
 8000e50:	08000ebf 	.word	0x08000ebf
 8000e54:	08000e6d 	.word	0x08000e6d
 8000e58:	08000e81 	.word	0x08000e81
 8000e5c:	4a79      	ldr	r2, [pc, #484]	; (8001044 <HAL_GPIO_Init+0x2b4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e62:	e02c      	b.n	8000ebe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	623b      	str	r3, [r7, #32]
          break;
 8000e6a:	e029      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	3304      	adds	r3, #4
 8000e72:	623b      	str	r3, [r7, #32]
          break;
 8000e74:	e024      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	623b      	str	r3, [r7, #32]
          break;
 8000e7e:	e01f      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	330c      	adds	r3, #12
 8000e86:	623b      	str	r3, [r7, #32]
          break;
 8000e88:	e01a      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e92:	2304      	movs	r3, #4
 8000e94:	623b      	str	r3, [r7, #32]
          break;
 8000e96:	e013      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d105      	bne.n	8000eac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	611a      	str	r2, [r3, #16]
          break;
 8000eaa:	e009      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eac:	2308      	movs	r3, #8
 8000eae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	615a      	str	r2, [r3, #20]
          break;
 8000eb6:	e003      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
          break;
 8000ebc:	e000      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          break;
 8000ebe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2bff      	cmp	r3, #255	; 0xff
 8000ec4:	d801      	bhi.n	8000eca <HAL_GPIO_Init+0x13a>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	e001      	b.n	8000ece <HAL_GPIO_Init+0x13e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	2bff      	cmp	r3, #255	; 0xff
 8000ed4:	d802      	bhi.n	8000edc <HAL_GPIO_Init+0x14c>
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	e002      	b.n	8000ee2 <HAL_GPIO_Init+0x152>
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	3b08      	subs	r3, #8
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	210f      	movs	r1, #15
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	6a39      	ldr	r1, [r7, #32]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	431a      	orrs	r2, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 80b1 	beq.w	8001072 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f10:	4b4d      	ldr	r3, [pc, #308]	; (8001048 <HAL_GPIO_Init+0x2b8>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a4c      	ldr	r2, [pc, #304]	; (8001048 <HAL_GPIO_Init+0x2b8>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b4a      	ldr	r3, [pc, #296]	; (8001048 <HAL_GPIO_Init+0x2b8>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f28:	4a48      	ldr	r2, [pc, #288]	; (800104c <HAL_GPIO_Init+0x2bc>)
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a40      	ldr	r2, [pc, #256]	; (8001050 <HAL_GPIO_Init+0x2c0>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d013      	beq.n	8000f7c <HAL_GPIO_Init+0x1ec>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a3f      	ldr	r2, [pc, #252]	; (8001054 <HAL_GPIO_Init+0x2c4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d00d      	beq.n	8000f78 <HAL_GPIO_Init+0x1e8>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a3e      	ldr	r2, [pc, #248]	; (8001058 <HAL_GPIO_Init+0x2c8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d007      	beq.n	8000f74 <HAL_GPIO_Init+0x1e4>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a3d      	ldr	r2, [pc, #244]	; (800105c <HAL_GPIO_Init+0x2cc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d101      	bne.n	8000f70 <HAL_GPIO_Init+0x1e0>
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f70:	2304      	movs	r3, #4
 8000f72:	e004      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e002      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f80:	f002 0203 	and.w	r2, r2, #3
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	4093      	lsls	r3, r2
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f8e:	492f      	ldr	r1, [pc, #188]	; (800104c <HAL_GPIO_Init+0x2bc>)
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	492c      	ldr	r1, [pc, #176]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	608b      	str	r3, [r1, #8]
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	4928      	ldr	r1, [pc, #160]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	4922      	ldr	r1, [pc, #136]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	60cb      	str	r3, [r1, #12]
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	491e      	ldr	r1, [pc, #120]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	4918      	ldr	r1, [pc, #96]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	43db      	mvns	r3, r3
 800100e:	4914      	ldr	r1, [pc, #80]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8001010:	4013      	ands	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d021      	beq.n	8001064 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	490e      	ldr	r1, [pc, #56]	; (8001060 <HAL_GPIO_Init+0x2d0>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	600b      	str	r3, [r1, #0]
 800102c:	e021      	b.n	8001072 <HAL_GPIO_Init+0x2e2>
 800102e:	bf00      	nop
 8001030:	10320000 	.word	0x10320000
 8001034:	10310000 	.word	0x10310000
 8001038:	10220000 	.word	0x10220000
 800103c:	10210000 	.word	0x10210000
 8001040:	10120000 	.word	0x10120000
 8001044:	10110000 	.word	0x10110000
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000
 8001050:	40010800 	.word	0x40010800
 8001054:	40010c00 	.word	0x40010c00
 8001058:	40011000 	.word	0x40011000
 800105c:	40011400 	.word	0x40011400
 8001060:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_GPIO_Init+0x304>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	43db      	mvns	r3, r3
 800106c:	4909      	ldr	r1, [pc, #36]	; (8001094 <HAL_GPIO_Init+0x304>)
 800106e:	4013      	ands	r3, r2
 8001070:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	3301      	adds	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	fa22 f303 	lsr.w	r3, r2, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	f47f ae8e 	bne.w	8000da4 <HAL_GPIO_Init+0x14>
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	372c      	adds	r7, #44	; 0x2c
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010b4:	e003      	b.n	80010be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	041a      	lsls	r2, r3, #16
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	611a      	str	r2, [r3, #16]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d4:	695a      	ldr	r2, [r3, #20]
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	4013      	ands	r3, r2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d006      	beq.n	80010ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f806 	bl	80010f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e272      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8087 	beq.w	800123a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800112c:	4b92      	ldr	r3, [pc, #584]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b04      	cmp	r3, #4
 8001136:	d00c      	beq.n	8001152 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001138:	4b8f      	ldr	r3, [pc, #572]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b08      	cmp	r3, #8
 8001142:	d112      	bne.n	800116a <HAL_RCC_OscConfig+0x5e>
 8001144:	4b8c      	ldr	r3, [pc, #560]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001150:	d10b      	bne.n	800116a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001152:	4b89      	ldr	r3, [pc, #548]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d06c      	beq.n	8001238 <HAL_RCC_OscConfig+0x12c>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d168      	bne.n	8001238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e24c      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x76>
 8001174:	4b80      	ldr	r3, [pc, #512]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a7f      	ldr	r2, [pc, #508]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 800117a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e02e      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x98>
 800118a:	4b7b      	ldr	r3, [pc, #492]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a7a      	ldr	r2, [pc, #488]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b78      	ldr	r3, [pc, #480]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a77      	ldr	r2, [pc, #476]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 800119c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e01d      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0xbc>
 80011ae:	4b72      	ldr	r3, [pc, #456]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a71      	ldr	r2, [pc, #452]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b6f      	ldr	r3, [pc, #444]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a6e      	ldr	r2, [pc, #440]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e00b      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 80011c8:	4b6b      	ldr	r3, [pc, #428]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a6a      	ldr	r2, [pc, #424]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b68      	ldr	r3, [pc, #416]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a67      	ldr	r2, [pc, #412]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d013      	beq.n	8001210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fc96 	bl	8000b18 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fc92 	bl	8000b18 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e200      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b5d      	ldr	r3, [pc, #372]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0xe4>
 800120e:	e014      	b.n	800123a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fc82 	bl	8000b18 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fc7e 	bl	8000b18 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e1ec      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122a:	4b53      	ldr	r3, [pc, #332]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x10c>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d063      	beq.n	800130e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001246:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001252:	4b49      	ldr	r3, [pc, #292]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b08      	cmp	r3, #8
 800125c:	d11c      	bne.n	8001298 <HAL_RCC_OscConfig+0x18c>
 800125e:	4b46      	ldr	r3, [pc, #280]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d116      	bne.n	8001298 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	4b43      	ldr	r3, [pc, #268]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <HAL_RCC_OscConfig+0x176>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d001      	beq.n	8001282 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e1c0      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001282:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4939      	ldr	r1, [pc, #228]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001296:	e03a      	b.n	800130e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a0:	4b36      	ldr	r3, [pc, #216]	; (800137c <HAL_RCC_OscConfig+0x270>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fc37 	bl	8000b18 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff fc33 	bl	8000b18 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e1a1      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c0:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012cc:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4927      	ldr	r1, [pc, #156]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_RCC_OscConfig+0x270>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc16 	bl	8000b18 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc12 	bl	8000b18 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e180      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d03a      	beq.n	8001390 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d019      	beq.n	8001356 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <HAL_RCC_OscConfig+0x274>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001328:	f7ff fbf6 	bl	8000b18 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff fbf2 	bl	8000b18 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e160      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f000 face 	bl	80018f0 <RCC_Delay>
 8001354:	e01c      	b.n	8001390 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_RCC_OscConfig+0x274>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135c:	f7ff fbdc 	bl	8000b18 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001362:	e00f      	b.n	8001384 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001364:	f7ff fbd8 	bl	8000b18 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d908      	bls.n	8001384 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e146      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	42420000 	.word	0x42420000
 8001380:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001384:	4b92      	ldr	r3, [pc, #584]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e9      	bne.n	8001364 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80a6 	beq.w	80014ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a2:	4b8b      	ldr	r3, [pc, #556]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10d      	bne.n	80013ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b88      	ldr	r3, [pc, #544]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a87      	ldr	r2, [pc, #540]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b85      	ldr	r3, [pc, #532]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b82      	ldr	r3, [pc, #520]	; (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d118      	bne.n	8001408 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d6:	4b7f      	ldr	r3, [pc, #508]	; (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7e      	ldr	r2, [pc, #504]	; (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fb99 	bl	8000b18 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ea:	f7ff fb95 	bl	8000b18 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	; 0x64
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e103      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	4b75      	ldr	r3, [pc, #468]	; (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x312>
 8001410:	4b6f      	ldr	r3, [pc, #444]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	4a6e      	ldr	r2, [pc, #440]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6213      	str	r3, [r2, #32]
 800141c:	e02d      	b.n	800147a <HAL_RCC_OscConfig+0x36e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x334>
 8001426:	4b6a      	ldr	r3, [pc, #424]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4a69      	ldr	r2, [pc, #420]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6213      	str	r3, [r2, #32]
 8001432:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a66      	ldr	r2, [pc, #408]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6213      	str	r3, [r2, #32]
 800143e:	e01c      	b.n	800147a <HAL_RCC_OscConfig+0x36e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b05      	cmp	r3, #5
 8001446:	d10c      	bne.n	8001462 <HAL_RCC_OscConfig+0x356>
 8001448:	4b61      	ldr	r3, [pc, #388]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4a60      	ldr	r2, [pc, #384]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6213      	str	r3, [r2, #32]
 8001454:	4b5e      	ldr	r3, [pc, #376]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4a5d      	ldr	r2, [pc, #372]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6213      	str	r3, [r2, #32]
 8001460:	e00b      	b.n	800147a <HAL_RCC_OscConfig+0x36e>
 8001462:	4b5b      	ldr	r3, [pc, #364]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4a5a      	ldr	r2, [pc, #360]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	6213      	str	r3, [r2, #32]
 800146e:	4b58      	ldr	r3, [pc, #352]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4a57      	ldr	r2, [pc, #348]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	f023 0304 	bic.w	r3, r3, #4
 8001478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d015      	beq.n	80014ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff fb49 	bl	8000b18 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fb45 	bl	8000b18 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	; 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e0b1      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a0:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0ee      	beq.n	800148a <HAL_RCC_OscConfig+0x37e>
 80014ac:	e014      	b.n	80014d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fb33 	bl	8000b18 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff fb2f 	bl	8000b18 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e09b      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014cc:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1ee      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d105      	bne.n	80014ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a3b      	ldr	r2, [pc, #236]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8087 	beq.w	8001602 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f4:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d061      	beq.n	80015c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d146      	bne.n	8001596 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001508:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <HAL_RCC_OscConfig+0x4cc>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff fb03 	bl	8000b18 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff faff 	bl	8000b18 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e06d      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f0      	bne.n	8001516 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153c:	d108      	bne.n	8001550 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4921      	ldr	r1, [pc, #132]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a19      	ldr	r1, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	430b      	orrs	r3, r1
 8001562:	491b      	ldr	r1, [pc, #108]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x4cc>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fad3 	bl	8000b18 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff facf 	bl	8000b18 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e03d      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x46a>
 8001594:	e035      	b.n	8001602 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_RCC_OscConfig+0x4cc>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fabc 	bl	8000b18 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff fab8 	bl	8000b18 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e026      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x498>
 80015c2:	e01e      	b.n	8001602 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e019      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40007000 	.word	0x40007000
 80015d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_RCC_OscConfig+0x500>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0d0      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b6a      	ldr	r3, [pc, #424]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d910      	bls.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b67      	ldr	r3, [pc, #412]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0207 	bic.w	r2, r3, #7
 800163a:	4965      	ldr	r1, [pc, #404]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b63      	ldr	r3, [pc, #396]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0b8      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d020      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800166c:	4b59      	ldr	r3, [pc, #356]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a58      	ldr	r2, [pc, #352]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001684:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800168e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001690:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	494d      	ldr	r1, [pc, #308]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d040      	beq.n	8001730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d115      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e07f      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e073      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e06b      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f023 0203 	bic.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4936      	ldr	r1, [pc, #216]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001700:	f7ff fa0a 	bl	8000b18 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	e00a      	b.n	800171e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7ff fa06 	bl	8000b18 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e053      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 020c 	and.w	r2, r3, #12
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	429a      	cmp	r2, r3
 800172e:	d1eb      	bne.n	8001708 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d210      	bcs.n	8001760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0207 	bic.w	r2, r3, #7
 8001746:	4922      	ldr	r1, [pc, #136]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e032      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4916      	ldr	r1, [pc, #88]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d009      	beq.n	800179e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	490e      	ldr	r1, [pc, #56]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800179e:	f000 f821 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80017a2:	4602      	mov	r2, r0
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	490a      	ldr	r1, [pc, #40]	; (80017d8 <HAL_RCC_ClockConfig+0x1c8>)
 80017b0:	5ccb      	ldrb	r3, [r1, r3]
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	4a09      	ldr	r2, [pc, #36]	; (80017dc <HAL_RCC_ClockConfig+0x1cc>)
 80017b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_RCC_ClockConfig+0x1d0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f968 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40022000 	.word	0x40022000
 80017d4:	40021000 	.word	0x40021000
 80017d8:	0800210c 	.word	0x0800210c
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000004 	.word	0x20000004

080017e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <HAL_RCC_GetSysClockFreq+0x94>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b04      	cmp	r3, #4
 800180c:	d002      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x30>
 800180e:	2b08      	cmp	r3, #8
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x36>
 8001812:	e027      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_GetSysClockFreq+0x98>)
 8001816:	613b      	str	r3, [r7, #16]
      break;
 8001818:	e027      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	0c9b      	lsrs	r3, r3, #18
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d010      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_RCC_GetSysClockFreq+0x94>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	0c5b      	lsrs	r3, r3, #17
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	4a11      	ldr	r2, [pc, #68]	; (8001884 <HAL_RCC_GetSysClockFreq+0xa0>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_RCC_GetSysClockFreq+0x98>)
 8001846:	fb03 f202 	mul.w	r2, r3, r2
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e004      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	613b      	str	r3, [r7, #16]
      break;
 8001862:	e002      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_RCC_GetSysClockFreq+0x98>)
 8001866:	613b      	str	r3, [r7, #16]
      break;
 8001868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800186a:	693b      	ldr	r3, [r7, #16]
}
 800186c:	4618      	mov	r0, r3
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	007a1200 	.word	0x007a1200
 8001880:	08002124 	.word	0x08002124
 8001884:	08002134 	.word	0x08002134
 8001888:	003d0900 	.word	0x003d0900

0800188c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <HAL_RCC_GetHCLKFreq+0x10>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018a4:	f7ff fff2 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	4903      	ldr	r1, [pc, #12]	; (80018c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	0800211c 	.word	0x0800211c

080018c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018cc:	f7ff ffde 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	0adb      	lsrs	r3, r3, #11
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	4903      	ldr	r1, [pc, #12]	; (80018ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000
 80018ec:	0800211c 	.word	0x0800211c

080018f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <RCC_Delay+0x34>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <RCC_Delay+0x38>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0a5b      	lsrs	r3, r3, #9
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800190c:	bf00      	nop
  }
  while (Delay --);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1e5a      	subs	r2, r3, #1
 8001912:	60fa      	str	r2, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f9      	bne.n	800190c <RCC_Delay+0x1c>
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	20000000 	.word	0x20000000
 8001928:	10624dd3 	.word	0x10624dd3

0800192c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e076      	b.n	8001a2c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	2b00      	cmp	r3, #0
 8001944:	d108      	bne.n	8001958 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800194e:	d009      	beq.n	8001964 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
 8001956:	e005      	b.n	8001964 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d106      	bne.n	8001984 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7fe ff8e 	bl	80008a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800199a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e8:	ea42 0103 	orr.w	r1, r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	0c1a      	lsrs	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f002 0204 	and.w	r2, r2, #4
 8001a0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	69da      	ldr	r2, [r3, #28]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001a42:	2301      	movs	r3, #1
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_SPI_TransmitReceive+0x26>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e198      	b.n	8001d8c <HAL_SPI_TransmitReceive+0x358>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a62:	f7ff f859 	bl	8000b18 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d00f      	beq.n	8001aa4 <HAL_SPI_TransmitReceive+0x70>
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a8a:	d107      	bne.n	8001a9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d103      	bne.n	8001a9c <HAL_SPI_TransmitReceive+0x68>
 8001a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d003      	beq.n	8001aa4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001aa2:	e16d      	b.n	8001d80 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_SPI_TransmitReceive+0x82>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HAL_SPI_TransmitReceive+0x82>
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001abc:	e160      	b.n	8001d80 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d003      	beq.n	8001ad2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2205      	movs	r2, #5
 8001ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	887a      	ldrh	r2, [r7, #2]
 8001ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	887a      	ldrh	r2, [r7, #2]
 8001afa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b12:	2b40      	cmp	r3, #64	; 0x40
 8001b14:	d007      	beq.n	8001b26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b2e:	d17c      	bne.n	8001c2a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_SPI_TransmitReceive+0x10a>
 8001b38:	8b7b      	ldrh	r3, [r7, #26]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d16a      	bne.n	8001c14 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	881a      	ldrh	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	1c9a      	adds	r2, r3, #2
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b62:	e057      	b.n	8001c14 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d11b      	bne.n	8001baa <HAL_SPI_TransmitReceive+0x176>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d016      	beq.n	8001baa <HAL_SPI_TransmitReceive+0x176>
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d113      	bne.n	8001baa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	1c9a      	adds	r2, r3, #2
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d119      	bne.n	8001bec <HAL_SPI_TransmitReceive+0x1b8>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d014      	beq.n	8001bec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	1c9a      	adds	r2, r3, #2
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001be8:	2301      	movs	r3, #1
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001bec:	f7fe ff94 	bl	8000b18 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d80b      	bhi.n	8001c14 <HAL_SPI_TransmitReceive+0x1e0>
 8001bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c02:	d007      	beq.n	8001c14 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001c12:	e0b5      	b.n	8001d80 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1a2      	bne.n	8001b64 <HAL_SPI_TransmitReceive+0x130>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d19d      	bne.n	8001b64 <HAL_SPI_TransmitReceive+0x130>
 8001c28:	e080      	b.n	8001d2c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_SPI_TransmitReceive+0x204>
 8001c32:	8b7b      	ldrh	r3, [r7, #26]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d16f      	bne.n	8001d18 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	330c      	adds	r3, #12
 8001c42:	7812      	ldrb	r2, [r2, #0]
 8001c44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c5e:	e05b      	b.n	8001d18 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d11c      	bne.n	8001ca8 <HAL_SPI_TransmitReceive+0x274>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d017      	beq.n	8001ca8 <HAL_SPI_TransmitReceive+0x274>
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d114      	bne.n	8001ca8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	330c      	adds	r3, #12
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d119      	bne.n	8001cea <HAL_SPI_TransmitReceive+0x2b6>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001cea:	f7fe ff15 	bl	8000b18 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d803      	bhi.n	8001d02 <HAL_SPI_TransmitReceive+0x2ce>
 8001cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d102      	bne.n	8001d08 <HAL_SPI_TransmitReceive+0x2d4>
 8001d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d107      	bne.n	8001d18 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001d16:	e033      	b.n	8001d80 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d19e      	bne.n	8001c60 <HAL_SPI_TransmitReceive+0x22c>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d199      	bne.n	8001c60 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f8b7 	bl	8001ea4 <SPI_EndRxTxTransaction>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001d48:	e01a      	b.n	8001d80 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10a      	bne.n	8001d68 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001d76:	e003      	b.n	8001d80 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3730      	adds	r7, #48	; 0x30
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001da4:	f7fe feb8 	bl	8000b18 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001db4:	f7fe feb0 	bl	8000b18 <HAL_GetTick>
 8001db8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	015b      	lsls	r3, r3, #5
 8001dc0:	0d1b      	lsrs	r3, r3, #20
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	fb02 f303 	mul.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dca:	e054      	b.n	8001e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd2:	d050      	beq.n	8001e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001dd4:	f7fe fea0 	bl	8000b18 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d902      	bls.n	8001dea <SPI_WaitFlagStateUntilTimeout+0x56>
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d13d      	bne.n	8001e66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001df8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e02:	d111      	bne.n	8001e28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e0c:	d004      	beq.n	8001e18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e16:	d107      	bne.n	8001e28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e30:	d10f      	bne.n	8001e52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e017      	b.n	8001e96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d19b      	bne.n	8001dcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f7ff ff6a 	bl	8001d94 <SPI_WaitFlagStateUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0220 	orr.w	r2, r3, #32
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e000      	b.n	8001ed8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e042      	b.n	8001f78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fd14 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	; 0x24
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f82b 	bl	8001f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fba:	f023 030c 	bic.w	r3, r3, #12
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a2c      	ldr	r2, [pc, #176]	; (8002094 <UART_SetConfig+0x114>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d103      	bne.n	8001ff0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fe8:	f7ff fc6e 	bl	80018c8 <HAL_RCC_GetPCLK2Freq>
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	e002      	b.n	8001ff6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ff0:	f7ff fc56 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8001ff4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009a      	lsls	r2, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	4a22      	ldr	r2, [pc, #136]	; (8002098 <UART_SetConfig+0x118>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	0119      	lsls	r1, r3, #4
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	009a      	lsls	r2, r3, #2
 8002020:	441a      	add	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	fbb2 f2f3 	udiv	r2, r2, r3
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <UART_SetConfig+0x118>)
 800202e:	fba3 0302 	umull	r0, r3, r3, r2
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2064      	movs	r0, #100	; 0x64
 8002036:	fb00 f303 	mul.w	r3, r0, r3
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	3332      	adds	r3, #50	; 0x32
 8002040:	4a15      	ldr	r2, [pc, #84]	; (8002098 <UART_SetConfig+0x118>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800204c:	4419      	add	r1, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	009a      	lsls	r2, r3, #2
 8002058:	441a      	add	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	fbb2 f2f3 	udiv	r2, r2, r3
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <UART_SetConfig+0x118>)
 8002066:	fba3 0302 	umull	r0, r3, r3, r2
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2064      	movs	r0, #100	; 0x64
 800206e:	fb00 f303 	mul.w	r3, r0, r3
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	3332      	adds	r3, #50	; 0x32
 8002078:	4a07      	ldr	r2, [pc, #28]	; (8002098 <UART_SetConfig+0x118>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	f003 020f 	and.w	r2, r3, #15
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	440a      	add	r2, r1
 800208a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40013800 	.word	0x40013800
 8002098:	51eb851f 	.word	0x51eb851f

0800209c <memset>:
 800209c:	4603      	mov	r3, r0
 800209e:	4402      	add	r2, r0
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d100      	bne.n	80020a6 <memset+0xa>
 80020a4:	4770      	bx	lr
 80020a6:	f803 1b01 	strb.w	r1, [r3], #1
 80020aa:	e7f9      	b.n	80020a0 <memset+0x4>

080020ac <__libc_init_array>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	2600      	movs	r6, #0
 80020b0:	4d0c      	ldr	r5, [pc, #48]	; (80020e4 <__libc_init_array+0x38>)
 80020b2:	4c0d      	ldr	r4, [pc, #52]	; (80020e8 <__libc_init_array+0x3c>)
 80020b4:	1b64      	subs	r4, r4, r5
 80020b6:	10a4      	asrs	r4, r4, #2
 80020b8:	42a6      	cmp	r6, r4
 80020ba:	d109      	bne.n	80020d0 <__libc_init_array+0x24>
 80020bc:	f000 f81a 	bl	80020f4 <_init>
 80020c0:	2600      	movs	r6, #0
 80020c2:	4d0a      	ldr	r5, [pc, #40]	; (80020ec <__libc_init_array+0x40>)
 80020c4:	4c0a      	ldr	r4, [pc, #40]	; (80020f0 <__libc_init_array+0x44>)
 80020c6:	1b64      	subs	r4, r4, r5
 80020c8:	10a4      	asrs	r4, r4, #2
 80020ca:	42a6      	cmp	r6, r4
 80020cc:	d105      	bne.n	80020da <__libc_init_array+0x2e>
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d4:	4798      	blx	r3
 80020d6:	3601      	adds	r6, #1
 80020d8:	e7ee      	b.n	80020b8 <__libc_init_array+0xc>
 80020da:	f855 3b04 	ldr.w	r3, [r5], #4
 80020de:	4798      	blx	r3
 80020e0:	3601      	adds	r6, #1
 80020e2:	e7f2      	b.n	80020ca <__libc_init_array+0x1e>
 80020e4:	08002138 	.word	0x08002138
 80020e8:	08002138 	.word	0x08002138
 80020ec:	08002138 	.word	0x08002138
 80020f0:	0800213c 	.word	0x0800213c

080020f4 <_init>:
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	bf00      	nop
 80020f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fa:	bc08      	pop	{r3}
 80020fc:	469e      	mov	lr, r3
 80020fe:	4770      	bx	lr

08002100 <_fini>:
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002102:	bf00      	nop
 8002104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002106:	bc08      	pop	{r3}
 8002108:	469e      	mov	lr, r3
 800210a:	4770      	bx	lr
