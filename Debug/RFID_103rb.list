
RFID_103rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005678  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005788  08005788  00006788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800589c  0800589c  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  0800589c  0800589c  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800589c  0800589c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800589c  0800589c  0000689c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058a0  080058a0  000068a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080058a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b44  20000010  080058b4  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b54  080058b4  00007b54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b21  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e39  00000000  00000000  00019b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0001c998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c73  00000000  00000000  0001d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033b1  00000000  00000000  0001e633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012aa7  00000000  00000000  000219e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d795  00000000  00000000  0003448b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1c20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004250  00000000  00000000  000c1c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c5eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005770 	.word	0x08005770

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005770 	.word	0x08005770

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initializeUsers();
 8000154:	f000 fd60 	bl	8000c18 <initializeUsers>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000158:	f000 fdfa 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015c:	f000 f844 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000160:	f000 f8e4 	bl	800032c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000164:	f000 f882 	bl	800026c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f8b6 	bl	80002d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  MFRC522_Init();
 800016c:	f000 faf6 	bl	800075c <MFRC522_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f002 fa8c 	bl	800268c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dataQueue */
  dataQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &dataQueue_attributes);
 8000174:	4a11      	ldr	r2, [pc, #68]	@ (80001bc <main+0x6c>)
 8000176:	2102      	movs	r1, #2
 8000178:	2010      	movs	r0, #16
 800017a:	f002 fbc5 	bl	8002908 <osMessageQueueNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0f      	ldr	r2, [pc, #60]	@ (80001c0 <main+0x70>)
 8000182:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of waitingSignal */
  waitingSignalHandle = osThreadNew(StartWaitingSignalTask, NULL, &waitingSignal_attributes);
 8000184:	4a0f      	ldr	r2, [pc, #60]	@ (80001c4 <main+0x74>)
 8000186:	2100      	movs	r1, #0
 8000188:	480f      	ldr	r0, [pc, #60]	@ (80001c8 <main+0x78>)
 800018a:	f002 fae5 	bl	8002758 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0e      	ldr	r2, [pc, #56]	@ (80001cc <main+0x7c>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of readRFID */
  readRFIDHandle = osThreadNew(StartReadRFID, NULL, &readRFID_attributes);
 8000194:	4a0e      	ldr	r2, [pc, #56]	@ (80001d0 <main+0x80>)
 8000196:	2100      	movs	r1, #0
 8000198:	480e      	ldr	r0, [pc, #56]	@ (80001d4 <main+0x84>)
 800019a:	f002 fadd 	bl	8002758 <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a0d      	ldr	r2, [pc, #52]	@ (80001d8 <main+0x88>)
 80001a2:	6013      	str	r3, [r2, #0]

  /* creation of sendDataH */
  sendDataHandle = osThreadNew(StartSendData, NULL, &sendDataH_attributes);
 80001a4:	4a0d      	ldr	r2, [pc, #52]	@ (80001dc <main+0x8c>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	480d      	ldr	r0, [pc, #52]	@ (80001e0 <main+0x90>)
 80001aa:	f002 fad5 	bl	8002758 <osThreadNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a0c      	ldr	r2, [pc, #48]	@ (80001e4 <main+0x94>)
 80001b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001b4:	f002 fa9c 	bl	80026f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b8:	bf00      	nop
 80001ba:	e7fd      	b.n	80001b8 <main+0x68>
 80001bc:	08005858 	.word	0x08005858
 80001c0:	200000d8 	.word	0x200000d8
 80001c4:	080057ec 	.word	0x080057ec
 80001c8:	08000471 	.word	0x08000471
 80001cc:	200000cc 	.word	0x200000cc
 80001d0:	08005810 	.word	0x08005810
 80001d4:	080004d1 	.word	0x080004d1
 80001d8:	200000d0 	.word	0x200000d0
 80001dc:	08005834 	.word	0x08005834
 80001e0:	08000599 	.word	0x08000599
 80001e4:	200000d4 	.word	0x200000d4

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b090      	sub	sp, #64	@ 0x40
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	2228      	movs	r2, #40	@ 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f005 fa80 	bl	80056fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
 8000208:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020a:	2302      	movs	r3, #2
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000212:	2310      	movs	r3, #16
 8000214:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000216:	2302      	movs	r3, #2
 8000218:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800021a:	2300      	movs	r3, #0
 800021c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800021e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000224:	f107 0318 	add.w	r3, r7, #24
 8000228:	4618      	mov	r0, r3
 800022a:	f001 f8e3 	bl	80013f4 <HAL_RCC_OscConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000234:	f000 f9da 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000238:	230f      	movs	r3, #15
 800023a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023c:	2302      	movs	r3, #2
 800023e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2102      	movs	r1, #2
 8000252:	4618      	mov	r0, r3
 8000254:	f001 fb50 	bl	80018f8 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800025e:	f000 f9c5 	bl	80005ec <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	@ 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000270:	4b17      	ldr	r3, [pc, #92]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000272:	4a18      	ldr	r2, [pc, #96]	@ (80002d4 <MX_SPI1_Init+0x68>)
 8000274:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000276:	4b16      	ldr	r3, [pc, #88]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000278:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800027c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800027e:	4b14      	ldr	r3, [pc, #80]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000284:	4b12      	ldr	r3, [pc, #72]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800028a:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <MX_SPI1_Init+0x64>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000290:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000292:	2200      	movs	r2, #0
 8000294:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000296:	4b0e      	ldr	r3, [pc, #56]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800029c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800029e:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002a0:	2210      	movs	r2, #16
 80002a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002aa:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002b6:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002b8:	220a      	movs	r2, #10
 80002ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002be:	f001 fca9 	bl	8001c14 <HAL_SPI_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002c8:	f000 f990 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000002c 	.word	0x2000002c
 80002d4:	40013000 	.word	0x40013000

080002d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002dc:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002de:	4a12      	ldr	r2, [pc, #72]	@ (8000328 <MX_USART1_UART_Init+0x50>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002e2:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002fc:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002fe:	220c      	movs	r2, #12
 8000300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000302:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800030e:	4805      	ldr	r0, [pc, #20]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 8000310:	f001 ff5a 	bl	80021c8 <HAL_UART_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800031a:	f000 f967 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000084 	.word	0x20000084
 8000328:	40013800 	.word	0x40013800

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000340:	4b46      	ldr	r3, [pc, #280]	@ (800045c <MX_GPIO_Init+0x130>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a45      	ldr	r2, [pc, #276]	@ (800045c <MX_GPIO_Init+0x130>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b43      	ldr	r3, [pc, #268]	@ (800045c <MX_GPIO_Init+0x130>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000358:	4b40      	ldr	r3, [pc, #256]	@ (800045c <MX_GPIO_Init+0x130>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a3f      	ldr	r2, [pc, #252]	@ (800045c <MX_GPIO_Init+0x130>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b3d      	ldr	r3, [pc, #244]	@ (800045c <MX_GPIO_Init+0x130>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b3a      	ldr	r3, [pc, #232]	@ (800045c <MX_GPIO_Init+0x130>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a39      	ldr	r2, [pc, #228]	@ (800045c <MX_GPIO_Init+0x130>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b37      	ldr	r3, [pc, #220]	@ (800045c <MX_GPIO_Init+0x130>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b34      	ldr	r3, [pc, #208]	@ (800045c <MX_GPIO_Init+0x130>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a33      	ldr	r2, [pc, #204]	@ (800045c <MX_GPIO_Init+0x130>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b31      	ldr	r3, [pc, #196]	@ (800045c <MX_GPIO_Init+0x130>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2110      	movs	r1, #16
 80003a4:	482e      	ldr	r0, [pc, #184]	@ (8000460 <MX_GPIO_Init+0x134>)
 80003a6:	f000 ffeb 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2120      	movs	r1, #32
 80003ae:	482d      	ldr	r0, [pc, #180]	@ (8000464 <MX_GPIO_Init+0x138>)
 80003b0:	f000 ffe6 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2101      	movs	r1, #1
 80003b8:	482b      	ldr	r0, [pc, #172]	@ (8000468 <MX_GPIO_Init+0x13c>)
 80003ba:	f000 ffe1 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c4:	4b29      	ldr	r3, [pc, #164]	@ (800046c <MX_GPIO_Init+0x140>)
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	4824      	ldr	r0, [pc, #144]	@ (8000464 <MX_GPIO_Init+0x138>)
 80003d4:	f000 fe50 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003d8:	230c      	movs	r3, #12
 80003da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003dc:	2302      	movs	r3, #2
 80003de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e0:	2302      	movs	r3, #2
 80003e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	4619      	mov	r1, r3
 80003ea:	481d      	ldr	r0, [pc, #116]	@ (8000460 <MX_GPIO_Init+0x134>)
 80003ec:	f000 fe44 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80003f0:	2310      	movs	r3, #16
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2302      	movs	r3, #2
 80003fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	4816      	ldr	r0, [pc, #88]	@ (8000460 <MX_GPIO_Init+0x134>)
 8000408:	f000 fe36 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800040c:	2320      	movs	r3, #32
 800040e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2302      	movs	r3, #2
 800041a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	4619      	mov	r1, r3
 8000422:	4810      	ldr	r0, [pc, #64]	@ (8000464 <MX_GPIO_Init+0x138>)
 8000424:	f000 fe28 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000428:	2301      	movs	r3, #1
 800042a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000434:	2302      	movs	r3, #2
 8000436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	480a      	ldr	r0, [pc, #40]	@ (8000468 <MX_GPIO_Init+0x13c>)
 8000440:	f000 fe1a 	bl	8001078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2105      	movs	r1, #5
 8000448:	2028      	movs	r0, #40	@ 0x28
 800044a:	f000 fdde 	bl	800100a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800044e:	2028      	movs	r0, #40	@ 0x28
 8000450:	f000 fdf7 	bl	8001042 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000454:	bf00      	nop
 8000456:	3720      	adds	r7, #32
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800
 8000464:	40011000 	.word	0x40011000
 8000468:	40010c00 	.word	0x40010c00
 800046c:	10110000 	.word	0x10110000

08000470 <StartWaitingSignalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartWaitingSignalTask */
void StartWaitingSignalTask(void *argument)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b09e      	sub	sp, #120	@ 0x78
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	h750Data firstData;
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive(&huart1, (uint8_t *)&firstData, sizeof(firstData), 100);
 8000478:	f107 0108 	add.w	r1, r7, #8
 800047c:	2364      	movs	r3, #100	@ 0x64
 800047e:	2270      	movs	r2, #112	@ 0x70
 8000480:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <StartWaitingSignalTask+0x50>)
 8000482:	f001 ff74 	bl	800236e <HAL_UART_Receive>
	  if(boardData.len>0){
 8000486:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <StartWaitingSignalTask+0x54>)
 8000488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800048a:	2b00      	cmp	r3, #0
 800048c:	dd13      	ble.n	80004b6 <StartWaitingSignalTask+0x46>
		  osMessageQueuePut(dataQueueHandle, &firstData, 0, 0);
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <StartWaitingSignalTask+0x58>)
 8000490:	6818      	ldr	r0, [r3, #0]
 8000492:	f107 0108 	add.w	r1, r7, #8
 8000496:	2300      	movs	r3, #0
 8000498:	2200      	movs	r2, #0
 800049a:	f002 fabb 	bl	8002a14 <osMessageQueuePut>
		  xTaskNotifyGive(readRFIDHandle);
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <StartWaitingSignalTask+0x5c>)
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	2300      	movs	r3, #0
 80004a4:	2202      	movs	r2, #2
 80004a6:	2100      	movs	r1, #0
 80004a8:	f004 f930 	bl	800470c <xTaskGenericNotify>
		  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80004ac:	f04f 31ff 	mov.w	r1, #4294967295
 80004b0:	2001      	movs	r0, #1
 80004b2:	f004 f8e3 	bl	800467c <ulTaskNotifyTake>
	  }
    osDelay(1);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f002 f9f8 	bl	80028ac <osDelay>
	  HAL_UART_Receive(&huart1, (uint8_t *)&firstData, sizeof(firstData), 100);
 80004bc:	e7dc      	b.n	8000478 <StartWaitingSignalTask+0x8>
 80004be:	bf00      	nop
 80004c0:	20000084 	.word	0x20000084
 80004c4:	200000f8 	.word	0x200000f8
 80004c8:	200000d8 	.word	0x200000d8
 80004cc:	200000d0 	.word	0x200000d0

080004d0 <StartReadRFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadRFID */
void StartReadRFID(void *argument)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b0a0      	sub	sp, #128	@ 0x80
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	h750Data bData;
	answerData ans;
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80004d8:	f04f 31ff 	mov.w	r1, #4294967295
 80004dc:	2001      	movs	r0, #1
 80004de:	f004 f8cd 	bl	800467c <ulTaskNotifyTake>

	  osMessageQueueGet(dataQueueHandle,&bData,0,0);
 80004e2:	4b28      	ldr	r3, [pc, #160]	@ (8000584 <StartReadRFID+0xb4>)
 80004e4:	6818      	ldr	r0, [r3, #0]
 80004e6:	f107 0110 	add.w	r1, r7, #16
 80004ea:	2300      	movs	r3, #0
 80004ec:	2200      	movs	r2, #0
 80004ee:	f002 fb05 	bl	8002afc <osMessageQueueGet>

	  status = MFRC522_Request(PICC_REQIDL,str);
 80004f2:	4925      	ldr	r1, [pc, #148]	@ (8000588 <StartReadRFID+0xb8>)
 80004f4:	2026      	movs	r0, #38	@ 0x26
 80004f6:	f000 fa28 	bl	800094a <MFRC522_Request>
 80004fa:	4603      	mov	r3, r0
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b23      	ldr	r3, [pc, #140]	@ (800058c <StartReadRFID+0xbc>)
 8000500:	701a      	strb	r2, [r3, #0]
	  status = MFRC522_Anticoll(str);
 8000502:	4821      	ldr	r0, [pc, #132]	@ (8000588 <StartReadRFID+0xb8>)
 8000504:	f000 fa46 	bl	8000994 <MFRC522_Anticoll>
 8000508:	4603      	mov	r3, r0
 800050a:	461a      	mov	r2, r3
 800050c:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <StartReadRFID+0xbc>)
 800050e:	701a      	strb	r2, [r3, #0]
	  memcpy(sNum,str,5);
 8000510:	4b1f      	ldr	r3, [pc, #124]	@ (8000590 <StartReadRFID+0xc0>)
 8000512:	4a1d      	ldr	r2, [pc, #116]	@ (8000588 <StartReadRFID+0xb8>)
 8000514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000518:	6018      	str	r0, [r3, #0]
 800051a:	3304      	adds	r3, #4
 800051c:	7019      	strb	r1, [r3, #0]
	  HAL_Delay(100);
 800051e:	2064      	movs	r0, #100	@ 0x64
 8000520:	f000 fc78 	bl	8000e14 <HAL_Delay>

//	  h750Data data;
//	  osMessageQueueGet(dataQueueHandle, &data, 0, 0);
//	  answerData ans;
	  if(getBalance(sNum)<bData.totalPrice){
 8000524:	481a      	ldr	r0, [pc, #104]	@ (8000590 <StartReadRFID+0xc0>)
 8000526:	f000 fbdf 	bl	8000ce8 <getBalance>
 800052a:	4602      	mov	r2, r0
 800052c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800052e:	429a      	cmp	r2, r3
 8000530:	da07      	bge.n	8000542 <StartReadRFID+0x72>
		  ans.flag=0;
 8000532:	2300      	movs	r3, #0
 8000534:	733b      	strb	r3, [r7, #12]
		  ans.updatedFunds=getBalance(sNum);
 8000536:	4816      	ldr	r0, [pc, #88]	@ (8000590 <StartReadRFID+0xc0>)
 8000538:	f000 fbd6 	bl	8000ce8 <getBalance>
 800053c:	4603      	mov	r3, r0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	e00c      	b.n	800055c <StartReadRFID+0x8c>
	  }else{
		  updateUserBalance(sNum, 0-bData.totalPrice);
 8000542:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000544:	425b      	negs	r3, r3
 8000546:	4619      	mov	r1, r3
 8000548:	4811      	ldr	r0, [pc, #68]	@ (8000590 <StartReadRFID+0xc0>)
 800054a:	f000 fbb7 	bl	8000cbc <updateUserBalance>
		  ans.flag=1;
 800054e:	2301      	movs	r3, #1
 8000550:	733b      	strb	r3, [r7, #12]
		  ans.updatedFunds=getBalance(sNum);
 8000552:	480f      	ldr	r0, [pc, #60]	@ (8000590 <StartReadRFID+0xc0>)
 8000554:	f000 fbc8 	bl	8000ce8 <getBalance>
 8000558:	4603      	mov	r3, r0
 800055a:	60bb      	str	r3, [r7, #8]
	  }


	  osMessageQueuePut(dataQueueHandle, &ans, 0,0);
 800055c:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <StartReadRFID+0xb4>)
 800055e:	6818      	ldr	r0, [r3, #0]
 8000560:	f107 0108 	add.w	r1, r7, #8
 8000564:	2300      	movs	r3, #0
 8000566:	2200      	movs	r2, #0
 8000568:	f002 fa54 	bl	8002a14 <osMessageQueuePut>
	  xTaskNotifyGive(sendDataHandle);
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <StartReadRFID+0xc4>)
 800056e:	6818      	ldr	r0, [r3, #0]
 8000570:	2300      	movs	r3, #0
 8000572:	2202      	movs	r2, #2
 8000574:	2100      	movs	r1, #0
 8000576:	f004 f8c9 	bl	800470c <xTaskGenericNotify>
    osDelay(1);
 800057a:	2001      	movs	r0, #1
 800057c:	f002 f996 	bl	80028ac <osDelay>
	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8000580:	e7aa      	b.n	80004d8 <StartReadRFID+0x8>
 8000582:	bf00      	nop
 8000584:	200000d8 	.word	0x200000d8
 8000588:	200000e0 	.word	0x200000e0
 800058c:	200000dc 	.word	0x200000dc
 8000590:	200000f0 	.word	0x200000f0
 8000594:	200000d4 	.word	0x200000d4

08000598 <StartSendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendData */
void StartSendData(void *argument)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendData */
	answerData finalAns;
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80005a0:	f04f 31ff 	mov.w	r1, #4294967295
 80005a4:	2001      	movs	r0, #1
 80005a6:	f004 f869 	bl	800467c <ulTaskNotifyTake>

	  osMessageQueueGet(dataQueueHandle, &finalAns, 0, 0);
 80005aa:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <StartSendData+0x48>)
 80005ac:	6818      	ldr	r0, [r3, #0]
 80005ae:	f107 0108 	add.w	r1, r7, #8
 80005b2:	2300      	movs	r3, #0
 80005b4:	2200      	movs	r2, #0
 80005b6:	f002 faa1 	bl	8002afc <osMessageQueueGet>

	  //xQueueReceive(dataQueueHandle, &data,0);

	  HAL_UART_Transmit(&huart1, (uint8_t *)&finalAns, sizeof(finalAns),100);
 80005ba:	f107 0108 	add.w	r1, r7, #8
 80005be:	2364      	movs	r3, #100	@ 0x64
 80005c0:	2208      	movs	r2, #8
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <StartSendData+0x4c>)
 80005c4:	f001 fe50 	bl	8002268 <HAL_UART_Transmit>

	  xTaskNotifyGive(waitingSignalHandle);
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <StartSendData+0x50>)
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	2202      	movs	r2, #2
 80005d0:	2100      	movs	r1, #0
 80005d2:	f004 f89b 	bl	800470c <xTaskGenericNotify>
    osDelay(1);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f002 f968 	bl	80028ac <osDelay>
	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80005dc:	bf00      	nop
 80005de:	e7df      	b.n	80005a0 <StartSendData+0x8>
 80005e0:	200000d8 	.word	0x200000d8
 80005e4:	20000084 	.word	0x20000084
 80005e8:	200000cc 	.word	0x200000cc

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <Error_Handler+0x8>

080005f8 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000602:	f107 020f 	add.w	r2, r7, #15
 8000606:	1df9      	adds	r1, r7, #7
 8000608:	2364      	movs	r3, #100	@ 0x64
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2301      	movs	r3, #1
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <RC522_SPI_Transfer+0x28>)
 8000610:	f001 fb84 	bl	8001d1c <HAL_SPI_TransmitReceive>

	return rx_data;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000002c 	.word	0x2000002c

08000624 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	460a      	mov	r2, r1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	4613      	mov	r3, r2
 8000632:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2110      	movs	r1, #16
 8000638:	480c      	ldr	r0, [pc, #48]	@ (800066c <Write_MFRC522+0x48>)
 800063a:	f000 fea1 	bl	8001380 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffd4 	bl	80005f8 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffd0 	bl	80005f8 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	4803      	ldr	r0, [pc, #12]	@ (800066c <Write_MFRC522+0x48>)
 800065e:	f000 fe8f 	bl	8001380 <HAL_GPIO_WritePin>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40010800 	.word	0x40010800

08000670 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2110      	movs	r1, #16
 800067e:	480f      	ldr	r0, [pc, #60]	@ (80006bc <Read_MFRC522+0x4c>)
 8000680:	f000 fe7e 	bl	8001380 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	b25b      	sxtb	r3, r3
 800068a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800068e:	b25b      	sxtb	r3, r3
 8000690:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000694:	b25b      	sxtb	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffad 	bl	80005f8 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ffaa 	bl	80005f8 <RC522_SPI_Transfer>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2110      	movs	r1, #16
 80006ac:	4803      	ldr	r0, [pc, #12]	@ (80006bc <Read_MFRC522+0x4c>)
 80006ae:	f000 fe67 	bl	8001380 <HAL_GPIO_WritePin>

	return val;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]

}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40010800 	.word	0x40010800

080006c0 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	460a      	mov	r2, r1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4613      	mov	r3, r2
 80006ce:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ffcc 	bl	8000670 <Read_MFRC522>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80006dc:	7bfa      	ldrb	r2, [r7, #15]
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4611      	mov	r1, r2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff9b 	bl	8000624 <Write_MFRC522>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	460a      	mov	r2, r1
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	4613      	mov	r3, r2
 8000704:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffb1 	bl	8000670 <Read_MFRC522>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000712:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000716:	43db      	mvns	r3, r3
 8000718:	b25a      	sxtb	r2, r3
 800071a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800071e:	4013      	ands	r3, r2
 8000720:	b25b      	sxtb	r3, r3
 8000722:	b2da      	uxtb	r2, r3
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	4611      	mov	r1, r2
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff7b 	bl	8000624 <Write_MFRC522>
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800073a:	2014      	movs	r0, #20
 800073c:	f7ff ff98 	bl	8000670 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000740:	2103      	movs	r1, #3
 8000742:	2014      	movs	r0, #20
 8000744:	f7ff ffbc 	bl	80006c0 <SetBitMask>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000750:	210f      	movs	r1, #15
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff ff66 	bl	8000624 <Write_MFRC522>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	4812      	ldr	r0, [pc, #72]	@ (80007b0 <MFRC522_Init+0x54>)
 8000766:	f000 fe0b 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2101      	movs	r1, #1
 800076e:	4811      	ldr	r0, [pc, #68]	@ (80007b4 <MFRC522_Init+0x58>)
 8000770:	f000 fe06 	bl	8001380 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000774:	f7ff ffea 	bl	800074c <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000778:	218d      	movs	r1, #141	@ 0x8d
 800077a:	202a      	movs	r0, #42	@ 0x2a
 800077c:	f7ff ff52 	bl	8000624 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000780:	213e      	movs	r1, #62	@ 0x3e
 8000782:	202b      	movs	r0, #43	@ 0x2b
 8000784:	f7ff ff4e 	bl	8000624 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000788:	211e      	movs	r1, #30
 800078a:	202d      	movs	r0, #45	@ 0x2d
 800078c:	f7ff ff4a 	bl	8000624 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000790:	2100      	movs	r1, #0
 8000792:	202c      	movs	r0, #44	@ 0x2c
 8000794:	f7ff ff46 	bl	8000624 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000798:	2140      	movs	r1, #64	@ 0x40
 800079a:	2015      	movs	r0, #21
 800079c:	f7ff ff42 	bl	8000624 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80007a0:	213d      	movs	r1, #61	@ 0x3d
 80007a2:	2011      	movs	r0, #17
 80007a4:	f7ff ff3e 	bl	8000624 <Write_MFRC522>

	AntennaOn();
 80007a8:	f7ff ffc5 	bl	8000736 <AntennaOn>
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010800 	.word	0x40010800
 80007b4:	40010c00 	.word	0x40010c00

080007b8 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b089      	sub	sp, #36	@ 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
 80007c6:	4613      	mov	r3, r2
 80007c8:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 80007ca:	2302      	movs	r3, #2
 80007cc:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 80007ce:	2300      	movs	r3, #0
 80007d0:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 80007d2:	2300      	movs	r3, #0
 80007d4:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	2b0c      	cmp	r3, #12
 80007da:	d006      	beq.n	80007ea <MFRC522_ToCard+0x32>
 80007dc:	2b0e      	cmp	r3, #14
 80007de:	d109      	bne.n	80007f4 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 80007e0:	2312      	movs	r3, #18
 80007e2:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80007e4:	2310      	movs	r3, #16
 80007e6:	777b      	strb	r3, [r7, #29]
			break;
 80007e8:	e005      	b.n	80007f6 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 80007ea:	2377      	movs	r3, #119	@ 0x77
 80007ec:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80007ee:	2330      	movs	r3, #48	@ 0x30
 80007f0:	777b      	strb	r3, [r7, #29]
			break;
 80007f2:	e000      	b.n	80007f6 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80007f4:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80007f6:	7fbb      	ldrb	r3, [r7, #30]
 80007f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	2002      	movs	r0, #2
 8000802:	f7ff ff0f 	bl	8000624 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000806:	2180      	movs	r1, #128	@ 0x80
 8000808:	2004      	movs	r0, #4
 800080a:	f7ff ff74 	bl	80006f6 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800080e:	2180      	movs	r1, #128	@ 0x80
 8000810:	200a      	movs	r0, #10
 8000812:	f7ff ff55 	bl	80006c0 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000816:	2100      	movs	r1, #0
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff ff03 	bl	8000624 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	e00a      	b.n	800083a <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	2009      	movs	r0, #9
 8000830:	f7ff fef8 	bl	8000624 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	3301      	adds	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	429a      	cmp	r2, r3
 8000840:	d3f0      	bcc.n	8000824 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	4619      	mov	r1, r3
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff feec 	bl	8000624 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	2b0c      	cmp	r3, #12
 8000850:	d103      	bne.n	800085a <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000852:	2180      	movs	r1, #128	@ 0x80
 8000854:	200d      	movs	r0, #13
 8000856:	f7ff ff33 	bl	80006c0 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800085a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800085e:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000860:	2004      	movs	r0, #4
 8000862:	f7ff ff05 	bl	8000670 <Read_MFRC522>
 8000866:	4603      	mov	r3, r0
 8000868:	773b      	strb	r3, [r7, #28]
        i--;
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	3b01      	subs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00a      	beq.n	800088c <MFRC522_ToCard+0xd4>
 8000876:	7f3b      	ldrb	r3, [r7, #28]
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	2b00      	cmp	r3, #0
 800087e:	d105      	bne.n	800088c <MFRC522_ToCard+0xd4>
 8000880:	7f3a      	ldrb	r2, [r7, #28]
 8000882:	7f7b      	ldrb	r3, [r7, #29]
 8000884:	4013      	ands	r3, r2
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0e9      	beq.n	8000860 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 800088c:	2180      	movs	r1, #128	@ 0x80
 800088e:	200d      	movs	r0, #13
 8000890:	f7ff ff31 	bl	80006f6 <ClearBitMask>

    if (i != 0)
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d052      	beq.n	8000940 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800089a:	2006      	movs	r0, #6
 800089c:	f7ff fee8 	bl	8000670 <Read_MFRC522>
 80008a0:	4603      	mov	r3, r0
 80008a2:	f003 031b 	and.w	r3, r3, #27
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d148      	bne.n	800093c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80008ae:	7f3a      	ldrb	r2, [r7, #28]
 80008b0:	7fbb      	ldrb	r3, [r7, #30]
 80008b2:	4013      	ands	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 80008be:	2301      	movs	r3, #1
 80008c0:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	2b0c      	cmp	r3, #12
 80008c6:	d13b      	bne.n	8000940 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f7ff fed1 	bl	8000670 <Read_MFRC522>
 80008ce:	4603      	mov	r3, r0
 80008d0:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80008d2:	200c      	movs	r0, #12
 80008d4:	f7ff fecc 	bl	8000670 <Read_MFRC522>
 80008d8:	4603      	mov	r3, r0
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d008      	beq.n	80008f8 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 80008e6:	7f3b      	ldrb	r3, [r7, #28]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	00da      	lsls	r2, r3, #3
 80008ec:	7dfb      	ldrb	r3, [r7, #23]
 80008ee:	4413      	add	r3, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	e004      	b.n	8000902 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 80008f8:	7f3b      	ldrb	r3, [r7, #28]
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	461a      	mov	r2, r3
 80008fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000900:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000902:	7f3b      	ldrb	r3, [r7, #28]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d101      	bne.n	800090c <MFRC522_ToCard+0x154>
                {
					n = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 800090c:	7f3b      	ldrb	r3, [r7, #28]
 800090e:	2b10      	cmp	r3, #16
 8000910:	d901      	bls.n	8000916 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8000912:	2310      	movs	r3, #16
 8000914:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
 800091a:	e00a      	b.n	8000932 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	18d4      	adds	r4, r2, r3
 8000922:	2009      	movs	r0, #9
 8000924:	f7ff fea4 	bl	8000670 <Read_MFRC522>
 8000928:	4603      	mov	r3, r0
 800092a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	3301      	adds	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
 8000932:	7f3b      	ldrb	r3, [r7, #28]
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	429a      	cmp	r2, r3
 8000938:	d3f0      	bcc.n	800091c <MFRC522_ToCard+0x164>
 800093a:	e001      	b.n	8000940 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 800093c:	2302      	movs	r3, #2
 800093e:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000940:	7ffb      	ldrb	r3, [r7, #31]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3724      	adds	r7, #36	@ 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd90      	pop	{r4, r7, pc}

0800094a <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af02      	add	r7, sp, #8
 8000950:	4603      	mov	r3, r0
 8000952:	6039      	str	r1, [r7, #0]
 8000954:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000956:	2107      	movs	r1, #7
 8000958:	200d      	movs	r0, #13
 800095a:	f7ff fe63 	bl	8000624 <Write_MFRC522>

	TagType[0] = reqMode;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	2201      	movs	r2, #1
 800096e:	6839      	ldr	r1, [r7, #0]
 8000970:	200c      	movs	r0, #12
 8000972:	f7ff ff21 	bl	80007b8 <MFRC522_ToCard>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <MFRC522_Request+0x3c>
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	2b10      	cmp	r3, #16
 8000984:	d001      	beq.n	800098a <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000986:	2302      	movs	r3, #2
 8000988:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800098a:	7bfb      	ldrb	r3, [r7, #15]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af02      	add	r7, sp, #8
 800099a:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 800099c:	2300      	movs	r3, #0
 800099e:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80009a0:	2100      	movs	r1, #0
 80009a2:	200d      	movs	r0, #13
 80009a4:	f7ff fe3e 	bl	8000624 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2293      	movs	r2, #147	@ 0x93
 80009ac:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3301      	adds	r3, #1
 80009b2:	2220      	movs	r2, #32
 80009b4:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2202      	movs	r2, #2
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	200c      	movs	r0, #12
 80009c4:	f7ff fef8 	bl	80007b8 <MFRC522_ToCard>
 80009c8:	4603      	mov	r3, r0
 80009ca:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d118      	bne.n	8000a04 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	73bb      	strb	r3, [r7, #14]
 80009d6:	e009      	b.n	80009ec <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 80009d8:	7bbb      	ldrb	r3, [r7, #14]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	7b7b      	ldrb	r3, [r7, #13]
 80009e2:	4053      	eors	r3, r2
 80009e4:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	3301      	adds	r3, #1
 80009ea:	73bb      	strb	r3, [r7, #14]
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d9f2      	bls.n	80009d8 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	7b7a      	ldrb	r2, [r7, #13]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d001      	beq.n	8000a04 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000a00:	2302      	movs	r3, #2
 8000a02:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <HAL_MspInit+0x68>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a17      	ldr	r2, [pc, #92]	@ (8000a78 <HAL_MspInit+0x68>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <HAL_MspInit+0x68>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_MspInit+0x68>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a11      	ldr	r2, [pc, #68]	@ (8000a78 <HAL_MspInit+0x68>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <HAL_MspInit+0x68>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	f06f 0001 	mvn.w	r0, #1
 8000a4e:	f000 fadc 	bl	800100a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_MspInit+0x6c>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <HAL_MspInit+0x6c>)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010000 	.word	0x40010000

08000a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000b08 <HAL_SPI_MspInit+0x88>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d12f      	bne.n	8000b00 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	@ (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000aa6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a13      	ldr	r2, [pc, #76]	@ (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ad0:	23a0      	movs	r3, #160	@ 0xa0
 8000ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480b      	ldr	r0, [pc, #44]	@ (8000b10 <HAL_SPI_MspInit+0x90>)
 8000ae4:	f000 fac8 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ae8:	2340      	movs	r3, #64	@ 0x40
 8000aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <HAL_SPI_MspInit+0x90>)
 8000afc:	f000 fabc 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40013000 	.word	0x40013000
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010800 	.word	0x40010800

08000b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <HAL_UART_MspInit+0x8c>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d131      	bne.n	8000b98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a14      	ldr	r2, [pc, #80]	@ (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4619      	mov	r1, r3
 8000b78:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <HAL_UART_MspInit+0x94>)
 8000b7a:	f000 fa7d 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <HAL_UART_MspInit+0x94>)
 8000b94:	f000 fa70 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40013800 	.word	0x40013800
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010800 	.word	0x40010800

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f8fa 	bl	8000ddc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000be8:	f003 fcba 	bl	8004560 <xTaskGetSchedulerState>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d001      	beq.n	8000bf6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bf2:	f004 fb11 	bl	8005218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bfe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c02:	f000 fbd5 	bl	80013b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
	...

08000c18 <initializeUsers>:
#include "user.h"
#include <string.h>

user_t users[MAX_USERS] = { 0 };

void initializeUsers(void) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
	uint8_t rfid1[10] = {0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF, 0x00, 0x01};
 8000c1e:	4a11      	ldr	r2, [pc, #68]	@ (8000c64 <initializeUsers+0x4c>)
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c26:	c303      	stmia	r3!, {r0, r1}
 8000c28:	801a      	strh	r2, [r3, #0]
	    memcpy(users[0].rfidCode, rfid1, 10);
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <initializeUsers+0x50>)
 8000c2c:	f107 020c 	add.w	r2, r7, #12
 8000c30:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c32:	c303      	stmia	r3!, {r0, r1}
 8000c34:	801a      	strh	r2, [r3, #0]
	    users[0].balance = 100;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <initializeUsers+0x50>)
 8000c38:	2264      	movs	r2, #100	@ 0x64
 8000c3a:	60da      	str	r2, [r3, #12]


	    uint8_t rfid2[10] = {0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x09, 0x08};
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c6c <initializeUsers+0x54>)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c42:	c303      	stmia	r3!, {r0, r1}
 8000c44:	801a      	strh	r2, [r3, #0]
	    memcpy(users[1].rfidCode, rfid2, 10);
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <initializeUsers+0x50>)
 8000c48:	3310      	adds	r3, #16
 8000c4a:	463a      	mov	r2, r7
 8000c4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c4e:	c303      	stmia	r3!, {r0, r1}
 8000c50:	801a      	strh	r2, [r3, #0]
	    users[1].balance = 200;
 8000c52:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <initializeUsers+0x50>)
 8000c54:	22c8      	movs	r2, #200	@ 0xc8
 8000c56:	61da      	str	r2, [r3, #28]
}
 8000c58:	bf00      	nop
 8000c5a:	371c      	adds	r7, #28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	080057bc 	.word	0x080057bc
 8000c68:	20000168 	.word	0x20000168
 8000c6c:	080057c8 	.word	0x080057c8

08000c70 <findUserByRFID>:

user_t* findUserByRFID(const uint8_t* rfid) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MAX_USERS; i++) {
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e013      	b.n	8000ca6 <findUserByRFID+0x36>
        // Compare the RFID code using memcmp for binary comparison
        if (memcmp(users[i].rfidCode, rfid, 10) == 0) {
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <findUserByRFID+0x48>)
 8000c84:	4413      	add	r3, r2
 8000c86:	220a      	movs	r2, #10
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f004 fd26 	bl	80056dc <memcmp>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d104      	bne.n	8000ca0 <findUserByRFID+0x30>
            return &users[i];  // Return pointer to the user if RFID matches
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <findUserByRFID+0x48>)
 8000c9c:	4413      	add	r3, r2
 8000c9e:	e006      	b.n	8000cae <findUserByRFID+0x3e>
    for (int i = 0; i < MAX_USERS; i++) {
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b09      	cmp	r3, #9
 8000caa:	dde8      	ble.n	8000c7e <findUserByRFID+0xe>
        }
    }
    return NULL;  // User not found
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000168 	.word	0x20000168

08000cbc <updateUserBalance>:


void updateUserBalance(const uint8_t* rfid, int amount) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
    user_t* user = findUserByRFID(rfid);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffd2 	bl	8000c70 <findUserByRFID>
 8000ccc:	60f8      	str	r0, [r7, #12]
    if (user != NULL) {
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d005      	beq.n	8000ce0 <updateUserBalance+0x24>
        user->balance += amount;  // Adjust the user's balance
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	441a      	add	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	60da      	str	r2, [r3, #12]
    }
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <getBalance>:

int getBalance(const uint8_t *rfid) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	user_t* user = findUserByRFID(rfid);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ffbd 	bl	8000c70 <findUserByRFID>
 8000cf6:	60f8      	str	r0, [r7, #12]
	return user->balance;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	68db      	ldr	r3, [r3, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d04:	f7ff ff81 	bl	8000c0a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d0a:	490c      	ldr	r1, [pc, #48]	@ (8000d3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a09      	ldr	r2, [pc, #36]	@ (8000d44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d20:	4c09      	ldr	r4, [pc, #36]	@ (8000d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f004 fced 	bl	800570c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d32:	f7ff fa0d 	bl	8000150 <main>
  bx lr
 8000d36:	4770      	bx	lr
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d40:	080058a4 	.word	0x080058a4
  ldr r2, =_sbss
 8000d44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d48:	20001b54 	.word	0x20001b54

08000d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_2_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_Init+0x28>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_Init+0x28>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f947 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fe50 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f95f 	bl	800105e <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f927 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <HAL_IncTick+0x1c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <HAL_IncTick+0x20>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a03      	ldr	r2, [pc, #12]	@ (8000dfc <HAL_IncTick+0x20>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000208 	.word	0x20000208

08000e00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b02      	ldr	r3, [pc, #8]	@ (8000e10 <HAL_GetTick+0x10>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000208 	.word	0x20000208

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff fff0 	bl	8000e00 <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffe0 	bl	8000e00 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4906      	ldr	r1, [pc, #24]	@ (8000ef4 <__NVIC_EnableIRQ+0x34>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	@ (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	@ (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	@ 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	@ 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f7ff ff90 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff2d 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff42 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff90 	bl	8000f4c <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5f 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff35 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffa2 	bl	8000fb0 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b08b      	sub	sp, #44	@ 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	e169      	b.n	8001360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800108c:	2201      	movs	r2, #1
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f040 8158 	bne.w	800135a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4a9a      	ldr	r2, [pc, #616]	@ (8001318 <HAL_GPIO_Init+0x2a0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d05e      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010b4:	4a98      	ldr	r2, [pc, #608]	@ (8001318 <HAL_GPIO_Init+0x2a0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d875      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010ba:	4a98      	ldr	r2, [pc, #608]	@ (800131c <HAL_GPIO_Init+0x2a4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d058      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010c0:	4a96      	ldr	r2, [pc, #600]	@ (800131c <HAL_GPIO_Init+0x2a4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d86f      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010c6:	4a96      	ldr	r2, [pc, #600]	@ (8001320 <HAL_GPIO_Init+0x2a8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d052      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010cc:	4a94      	ldr	r2, [pc, #592]	@ (8001320 <HAL_GPIO_Init+0x2a8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d869      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010d2:	4a94      	ldr	r2, [pc, #592]	@ (8001324 <HAL_GPIO_Init+0x2ac>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d04c      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010d8:	4a92      	ldr	r2, [pc, #584]	@ (8001324 <HAL_GPIO_Init+0x2ac>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d863      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010de:	4a92      	ldr	r2, [pc, #584]	@ (8001328 <HAL_GPIO_Init+0x2b0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d046      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010e4:	4a90      	ldr	r2, [pc, #576]	@ (8001328 <HAL_GPIO_Init+0x2b0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d85d      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d82a      	bhi.n	8001144 <HAL_GPIO_Init+0xcc>
 80010ee:	2b12      	cmp	r3, #18
 80010f0:	d859      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010f2:	a201      	add	r2, pc, #4	@ (adr r2, 80010f8 <HAL_GPIO_Init+0x80>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001173 	.word	0x08001173
 80010fc:	0800114d 	.word	0x0800114d
 8001100:	0800115f 	.word	0x0800115f
 8001104:	080011a1 	.word	0x080011a1
 8001108:	080011a7 	.word	0x080011a7
 800110c:	080011a7 	.word	0x080011a7
 8001110:	080011a7 	.word	0x080011a7
 8001114:	080011a7 	.word	0x080011a7
 8001118:	080011a7 	.word	0x080011a7
 800111c:	080011a7 	.word	0x080011a7
 8001120:	080011a7 	.word	0x080011a7
 8001124:	080011a7 	.word	0x080011a7
 8001128:	080011a7 	.word	0x080011a7
 800112c:	080011a7 	.word	0x080011a7
 8001130:	080011a7 	.word	0x080011a7
 8001134:	080011a7 	.word	0x080011a7
 8001138:	080011a7 	.word	0x080011a7
 800113c:	08001155 	.word	0x08001155
 8001140:	08001169 	.word	0x08001169
 8001144:	4a79      	ldr	r2, [pc, #484]	@ (800132c <HAL_GPIO_Init+0x2b4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114a:	e02c      	b.n	80011a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	623b      	str	r3, [r7, #32]
          break;
 8001152:	e029      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	3304      	adds	r3, #4
 800115a:	623b      	str	r3, [r7, #32]
          break;
 800115c:	e024      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	3308      	adds	r3, #8
 8001164:	623b      	str	r3, [r7, #32]
          break;
 8001166:	e01f      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	330c      	adds	r3, #12
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e01a      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800117a:	2304      	movs	r3, #4
 800117c:	623b      	str	r3, [r7, #32]
          break;
 800117e:	e013      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d105      	bne.n	8001194 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001188:	2308      	movs	r3, #8
 800118a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	611a      	str	r2, [r3, #16]
          break;
 8001192:	e009      	b.n	80011a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001194:	2308      	movs	r3, #8
 8001196:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	615a      	str	r2, [r3, #20]
          break;
 800119e:	e003      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          break;
 80011a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2bff      	cmp	r3, #255	@ 0xff
 80011ac:	d801      	bhi.n	80011b2 <HAL_GPIO_Init+0x13a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	e001      	b.n	80011b6 <HAL_GPIO_Init+0x13e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3304      	adds	r3, #4
 80011b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2bff      	cmp	r3, #255	@ 0xff
 80011bc:	d802      	bhi.n	80011c4 <HAL_GPIO_Init+0x14c>
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x152>
 80011c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c6:	3b08      	subs	r3, #8
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	210f      	movs	r1, #15
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	6a39      	ldr	r1, [r7, #32]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80b1 	beq.w	800135a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001330 <HAL_GPIO_Init+0x2b8>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001330 <HAL_GPIO_Init+0x2b8>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b4a      	ldr	r3, [pc, #296]	@ (8001330 <HAL_GPIO_Init+0x2b8>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001210:	4a48      	ldr	r2, [pc, #288]	@ (8001334 <HAL_GPIO_Init+0x2bc>)
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a40      	ldr	r2, [pc, #256]	@ (8001338 <HAL_GPIO_Init+0x2c0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d013      	beq.n	8001264 <HAL_GPIO_Init+0x1ec>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a3f      	ldr	r2, [pc, #252]	@ (800133c <HAL_GPIO_Init+0x2c4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d00d      	beq.n	8001260 <HAL_GPIO_Init+0x1e8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a3e      	ldr	r2, [pc, #248]	@ (8001340 <HAL_GPIO_Init+0x2c8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_Init+0x1e4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3d      	ldr	r2, [pc, #244]	@ (8001344 <HAL_GPIO_Init+0x2cc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_GPIO_Init+0x1e0>
 8001254:	2303      	movs	r3, #3
 8001256:	e006      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001258:	2304      	movs	r3, #4
 800125a:	e004      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 800125c:	2302      	movs	r3, #2
 800125e:	e002      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001264:	2300      	movs	r3, #0
 8001266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001268:	f002 0203 	and.w	r2, r2, #3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4093      	lsls	r3, r2
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001276:	492f      	ldr	r1, [pc, #188]	@ (8001334 <HAL_GPIO_Init+0x2bc>)
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001290:	4b2d      	ldr	r3, [pc, #180]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	492c      	ldr	r1, [pc, #176]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	608b      	str	r3, [r1, #8]
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4928      	ldr	r1, [pc, #160]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012b8:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	4922      	ldr	r1, [pc, #136]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	60cb      	str	r3, [r1, #12]
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	491e      	ldr	r1, [pc, #120]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4918      	ldr	r1, [pc, #96]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ee:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4914      	ldr	r1, [pc, #80]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d021      	beq.n	800134c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	490e      	ldr	r1, [pc, #56]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
 8001314:	e021      	b.n	800135a <HAL_GPIO_Init+0x2e2>
 8001316:	bf00      	nop
 8001318:	10320000 	.word	0x10320000
 800131c:	10310000 	.word	0x10310000
 8001320:	10220000 	.word	0x10220000
 8001324:	10210000 	.word	0x10210000
 8001328:	10120000 	.word	0x10120000
 800132c:	10110000 	.word	0x10110000
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000
 8001338:	40010800 	.word	0x40010800
 800133c:	40010c00 	.word	0x40010c00
 8001340:	40011000 	.word	0x40011000
 8001344:	40011400 	.word	0x40011400
 8001348:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_GPIO_Init+0x304>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	43db      	mvns	r3, r3
 8001354:	4909      	ldr	r1, [pc, #36]	@ (800137c <HAL_GPIO_Init+0x304>)
 8001356:	4013      	ands	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f ae8e 	bne.w	800108c <HAL_GPIO_Init+0x14>
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	372c      	adds	r7, #44	@ 0x2c
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800139c:	e003      	b.n	80013a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013bc:	695a      	ldr	r2, [r3, #20]
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f806 	bl	80013e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e272      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8087 	beq.w	8001522 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001414:	4b92      	ldr	r3, [pc, #584]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b04      	cmp	r3, #4
 800141e:	d00c      	beq.n	800143a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001420:	4b8f      	ldr	r3, [pc, #572]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 030c 	and.w	r3, r3, #12
 8001428:	2b08      	cmp	r3, #8
 800142a:	d112      	bne.n	8001452 <HAL_RCC_OscConfig+0x5e>
 800142c:	4b8c      	ldr	r3, [pc, #560]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001438:	d10b      	bne.n	8001452 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143a:	4b89      	ldr	r3, [pc, #548]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d06c      	beq.n	8001520 <HAL_RCC_OscConfig+0x12c>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d168      	bne.n	8001520 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e24c      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x76>
 800145c:	4b80      	ldr	r3, [pc, #512]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a7f      	ldr	r2, [pc, #508]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	e02e      	b.n	80014c8 <HAL_RCC_OscConfig+0xd4>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x98>
 8001472:	4b7b      	ldr	r3, [pc, #492]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7a      	ldr	r2, [pc, #488]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b78      	ldr	r3, [pc, #480]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a77      	ldr	r2, [pc, #476]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001484:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e01d      	b.n	80014c8 <HAL_RCC_OscConfig+0xd4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0xbc>
 8001496:	4b72      	ldr	r3, [pc, #456]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a71      	ldr	r2, [pc, #452]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0xd4>
 80014b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b68      	ldr	r3, [pc, #416]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a67      	ldr	r2, [pc, #412]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc96 	bl	8000e00 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fc92 	bl	8000e00 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	@ 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e200      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0xe4>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fc82 	bl	8000e00 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fc7e 	bl	8000e00 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	@ 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1ec      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x10c>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d063      	beq.n	80015f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800152e:	4b4c      	ldr	r3, [pc, #304]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800153a:	4b49      	ldr	r3, [pc, #292]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b08      	cmp	r3, #8
 8001544:	d11c      	bne.n	8001580 <HAL_RCC_OscConfig+0x18c>
 8001546:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d116      	bne.n	8001580 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <HAL_RCC_OscConfig+0x176>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e1c0      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4939      	ldr	r1, [pc, #228]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	e03a      	b.n	80015f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d020      	beq.n	80015ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001588:	4b36      	ldr	r3, [pc, #216]	@ (8001664 <HAL_RCC_OscConfig+0x270>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fc37 	bl	8000e00 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fc33 	bl	8000e00 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1a1      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4927      	ldr	r1, [pc, #156]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
 80015c8:	e015      	b.n	80015f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ca:	4b26      	ldr	r3, [pc, #152]	@ (8001664 <HAL_RCC_OscConfig+0x270>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fc16 	bl	8000e00 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc12 	bl	8000e00 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e180      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d03a      	beq.n	8001678 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d019      	beq.n	800163e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160a:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <HAL_RCC_OscConfig+0x274>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fbf6 	bl	8000e00 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff fbf2 	bl	8000e00 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e160      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001636:	2001      	movs	r0, #1
 8001638:	f000 face 	bl	8001bd8 <RCC_Delay>
 800163c:	e01c      	b.n	8001678 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_RCC_OscConfig+0x274>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff fbdc 	bl	8000e00 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164a:	e00f      	b.n	800166c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fbd8 	bl	8000e00 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d908      	bls.n	800166c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e146      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	42420000 	.word	0x42420000
 8001668:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	4b92      	ldr	r3, [pc, #584]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1e9      	bne.n	800164c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a6 	beq.w	80017d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168a:	4b8b      	ldr	r3, [pc, #556]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b88      	ldr	r3, [pc, #544]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a87      	ldr	r2, [pc, #540]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b85      	ldr	r3, [pc, #532]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b82      	ldr	r3, [pc, #520]	@ (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4b7f      	ldr	r3, [pc, #508]	@ (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7e      	ldr	r2, [pc, #504]	@ (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb99 	bl	8000e00 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fb95 	bl	8000e00 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	@ 0x64
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e103      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	4b75      	ldr	r3, [pc, #468]	@ (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x312>
 80016f8:	4b6f      	ldr	r3, [pc, #444]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4a6e      	ldr	r2, [pc, #440]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	e02d      	b.n	8001762 <HAL_RCC_OscConfig+0x36e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x334>
 800170e:	4b6a      	ldr	r3, [pc, #424]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a69      	ldr	r2, [pc, #420]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6213      	str	r3, [r2, #32]
 800171a:	4b67      	ldr	r3, [pc, #412]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4a66      	ldr	r2, [pc, #408]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	f023 0304 	bic.w	r3, r3, #4
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	e01c      	b.n	8001762 <HAL_RCC_OscConfig+0x36e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d10c      	bne.n	800174a <HAL_RCC_OscConfig+0x356>
 8001730:	4b61      	ldr	r3, [pc, #388]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a60      	ldr	r2, [pc, #384]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	4b5e      	ldr	r3, [pc, #376]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a5d      	ldr	r2, [pc, #372]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0x36e>
 800174a:	4b5b      	ldr	r3, [pc, #364]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4a5a      	ldr	r2, [pc, #360]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	6213      	str	r3, [r2, #32]
 8001756:	4b58      	ldr	r3, [pc, #352]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a57      	ldr	r2, [pc, #348]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d015      	beq.n	8001796 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff fb49 	bl	8000e00 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fb45 	bl	8000e00 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e0b1      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0ee      	beq.n	8001772 <HAL_RCC_OscConfig+0x37e>
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fb33 	bl	8000e00 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff fb2f 	bl	8000e00 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e09b      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b4:	4b40      	ldr	r3, [pc, #256]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ee      	bne.n	800179e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d105      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c6:	4b3c      	ldr	r3, [pc, #240]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a3b      	ldr	r2, [pc, #236]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8087 	beq.w	80018ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017dc:	4b36      	ldr	r3, [pc, #216]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d061      	beq.n	80018ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d146      	bne.n	800187e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f0:	4b33      	ldr	r3, [pc, #204]	@ (80018c0 <HAL_RCC_OscConfig+0x4cc>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fb03 	bl	8000e00 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff faff 	bl	8000e00 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e06d      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001810:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001824:	d108      	bne.n	8001838 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	4921      	ldr	r1, [pc, #132]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a19      	ldr	r1, [r3, #32]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001848:	430b      	orrs	r3, r1
 800184a:	491b      	ldr	r1, [pc, #108]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <HAL_RCC_OscConfig+0x4cc>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fad3 	bl	8000e00 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff facf 	bl	8000e00 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e03d      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x46a>
 800187c:	e035      	b.n	80018ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <HAL_RCC_OscConfig+0x4cc>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fabc 	bl	8000e00 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff fab8 	bl	8000e00 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e026      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x498>
 80018aa:	e01e      	b.n	80018ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e019      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_RCC_OscConfig+0x500>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0d0      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d910      	bls.n	800193c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b67      	ldr	r3, [pc, #412]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0207 	bic.w	r2, r3, #7
 8001922:	4965      	ldr	r1, [pc, #404]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b63      	ldr	r3, [pc, #396]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0b8      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d020      	beq.n	800198a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001954:	4b59      	ldr	r3, [pc, #356]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a58      	ldr	r2, [pc, #352]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800195e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800196c:	4b53      	ldr	r3, [pc, #332]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4a52      	ldr	r2, [pc, #328]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001976:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001978:	4b50      	ldr	r3, [pc, #320]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	494d      	ldr	r1, [pc, #308]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d040      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b47      	ldr	r3, [pc, #284]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d115      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e07f      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b41      	ldr	r3, [pc, #260]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e073      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	4b3d      	ldr	r3, [pc, #244]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06b      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d6:	4b39      	ldr	r3, [pc, #228]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f023 0203 	bic.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4936      	ldr	r1, [pc, #216]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e8:	f7ff fa0a 	bl	8000e00 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f7ff fa06 	bl	8000e00 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e053      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	4b2d      	ldr	r3, [pc, #180]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 020c 	and.w	r2, r3, #12
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1eb      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a18:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d210      	bcs.n	8001a48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 0207 	bic.w	r2, r3, #7
 8001a2e:	4922      	ldr	r1, [pc, #136]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e032      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4916      	ldr	r1, [pc, #88]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d009      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	490e      	ldr	r1, [pc, #56]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a86:	f000 f821 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	490a      	ldr	r1, [pc, #40]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	5ccb      	ldrb	r3, [r1, r3]
 8001a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1cc>)
 8001aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1d0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f968 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40022000 	.word	0x40022000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	08005870 	.word	0x08005870
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x30>
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x36>
 8001afa:	e027      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001afe:	613b      	str	r3, [r7, #16]
      break;
 8001b00:	e027      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	0c9b      	lsrs	r3, r3, #18
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	4a17      	ldr	r2, [pc, #92]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d010      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	0c5b      	lsrs	r3, r3, #17
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	4a11      	ldr	r2, [pc, #68]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b2e:	fb03 f202 	mul.w	r2, r3, r2
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e004      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b40:	fb02 f303 	mul.w	r3, r2, r3
 8001b44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	613b      	str	r3, [r7, #16]
      break;
 8001b4a:	e002      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4e:	613b      	str	r3, [r7, #16]
      break;
 8001b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b52:	693b      	ldr	r3, [r7, #16]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	007a1200 	.word	0x007a1200
 8001b68:	08005888 	.word	0x08005888
 8001b6c:	08005898 	.word	0x08005898
 8001b70:	003d0900 	.word	0x003d0900

08001b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b78:	4b02      	ldr	r3, [pc, #8]	@ (8001b84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000000 	.word	0x20000000

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b8c:	f7ff fff2 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4903      	ldr	r1, [pc, #12]	@ (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08005880 	.word	0x08005880

08001bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bb4:	f7ff ffde 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	0adb      	lsrs	r3, r3, #11
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	@ (8001bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	08005880 	.word	0x08005880

08001bd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001be0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <RCC_Delay+0x34>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <RCC_Delay+0x38>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0a5b      	lsrs	r3, r3, #9
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf4:	bf00      	nop
  }
  while (Delay --);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	60fa      	str	r2, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f9      	bne.n	8001bf4 <RCC_Delay+0x1c>
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	10624dd3 	.word	0x10624dd3

08001c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e076      	b.n	8001d14 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d108      	bne.n	8001c40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c36:	d009      	beq.n	8001c4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
 8001c3e:	e005      	b.n	8001c4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe ff0a 	bl	8000a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd0:	ea42 0103 	orr.w	r1, r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	0c1a      	lsrs	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f002 0204 	and.w	r2, r2, #4
 8001cf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	@ 0x30
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_SPI_TransmitReceive+0x26>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e198      	b.n	8002074 <HAL_SPI_TransmitReceive+0x358>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d4a:	f7ff f859 	bl	8000e00 <HAL_GetTick>
 8001d4e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d00f      	beq.n	8001d8c <HAL_SPI_TransmitReceive+0x70>
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d72:	d107      	bne.n	8001d84 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d103      	bne.n	8001d84 <HAL_SPI_TransmitReceive+0x68>
 8001d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d003      	beq.n	8001d8c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
 8001d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001d8a:	e16d      	b.n	8002068 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_SPI_TransmitReceive+0x82>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_SPI_TransmitReceive+0x82>
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d103      	bne.n	8001da6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001da4:	e160      	b.n	8002068 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d003      	beq.n	8001dba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2205      	movs	r2, #5
 8001db6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	887a      	ldrh	r2, [r7, #2]
 8001dca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	887a      	ldrh	r2, [r7, #2]
 8001de2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dfa:	2b40      	cmp	r3, #64	@ 0x40
 8001dfc:	d007      	beq.n	8001e0e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e16:	d17c      	bne.n	8001f12 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <HAL_SPI_TransmitReceive+0x10a>
 8001e20:	8b7b      	ldrh	r3, [r7, #26]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d16a      	bne.n	8001efc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	881a      	ldrh	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	1c9a      	adds	r2, r3, #2
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e4a:	e057      	b.n	8001efc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d11b      	bne.n	8001e92 <HAL_SPI_TransmitReceive+0x176>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d016      	beq.n	8001e92 <HAL_SPI_TransmitReceive+0x176>
 8001e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d113      	bne.n	8001e92 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	881a      	ldrh	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	1c9a      	adds	r2, r3, #2
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d119      	bne.n	8001ed4 <HAL_SPI_TransmitReceive+0x1b8>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d014      	beq.n	8001ed4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ebc:	1c9a      	adds	r2, r3, #2
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ed4:	f7fe ff94 	bl	8000e00 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d80b      	bhi.n	8001efc <HAL_SPI_TransmitReceive+0x1e0>
 8001ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eea:	d007      	beq.n	8001efc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8001efa:	e0b5      	b.n	8002068 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1a2      	bne.n	8001e4c <HAL_SPI_TransmitReceive+0x130>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d19d      	bne.n	8001e4c <HAL_SPI_TransmitReceive+0x130>
 8001f10:	e080      	b.n	8002014 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_SPI_TransmitReceive+0x204>
 8001f1a:	8b7b      	ldrh	r3, [r7, #26]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d16f      	bne.n	8002000 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	330c      	adds	r3, #12
 8001f2a:	7812      	ldrb	r2, [r2, #0]
 8001f2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f46:	e05b      	b.n	8002000 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d11c      	bne.n	8001f90 <HAL_SPI_TransmitReceive+0x274>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <HAL_SPI_TransmitReceive+0x274>
 8001f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d114      	bne.n	8001f90 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	330c      	adds	r3, #12
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d119      	bne.n	8001fd2 <HAL_SPI_TransmitReceive+0x2b6>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d014      	beq.n	8001fd2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001fd2:	f7fe ff15 	bl	8000e00 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d803      	bhi.n	8001fea <HAL_SPI_TransmitReceive+0x2ce>
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d102      	bne.n	8001ff0 <HAL_SPI_TransmitReceive+0x2d4>
 8001fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8001ffe:	e033      	b.n	8002068 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d19e      	bne.n	8001f48 <HAL_SPI_TransmitReceive+0x22c>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d199      	bne.n	8001f48 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002016:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f8b7 	bl	800218c <SPI_EndRxTxTransaction>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2220      	movs	r2, #32
 800202e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002030:	e01a      	b.n	8002068 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800205e:	e003      	b.n	8002068 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002070:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002074:	4618      	mov	r0, r3
 8002076:	3730      	adds	r7, #48	@ 0x30
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800208c:	f7fe feb8 	bl	8000e00 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	4413      	add	r3, r2
 800209a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800209c:	f7fe feb0 	bl	8000e00 <HAL_GetTick>
 80020a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020a2:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	015b      	lsls	r3, r3, #5
 80020a8:	0d1b      	lsrs	r3, r3, #20
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	fb02 f303 	mul.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020b2:	e054      	b.n	800215e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ba:	d050      	beq.n	800215e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020bc:	f7fe fea0 	bl	8000e00 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d902      	bls.n	80020d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d13d      	bne.n	800214e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80020e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020ea:	d111      	bne.n	8002110 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020f4:	d004      	beq.n	8002100 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fe:	d107      	bne.n	8002110 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800210e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002118:	d10f      	bne.n	800213a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002138:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e017      	b.n	800217e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3b01      	subs	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4013      	ands	r3, r2
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	bf0c      	ite	eq
 800216e:	2301      	moveq	r3, #1
 8002170:	2300      	movne	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	429a      	cmp	r2, r3
 800217a:	d19b      	bne.n	80020b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000000 	.word	0x20000000

0800218c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2200      	movs	r2, #0
 80021a0:	2180      	movs	r1, #128	@ 0x80
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff ff6a 	bl	800207c <SPI_WaitFlagStateUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b2:	f043 0220 	orr.w	r2, r3, #32
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e000      	b.n	80021c0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e042      	b.n	8002260 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fc90 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2224      	movs	r2, #36	@ 0x24
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800220a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f9af 	bl	8002570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002230:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002240:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	@ 0x28
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b20      	cmp	r3, #32
 8002286:	d16d      	bne.n	8002364 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_UART_Transmit+0x2c>
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e066      	b.n	8002366 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2221      	movs	r2, #33	@ 0x21
 80022a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022a6:	f7fe fdab 	bl	8000e00 <HAL_GetTick>
 80022aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022c0:	d108      	bne.n	80022d4 <HAL_UART_Transmit+0x6c>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d104      	bne.n	80022d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e003      	b.n	80022dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022dc:	e02a      	b.n	8002334 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2200      	movs	r2, #0
 80022e6:	2180      	movs	r1, #128	@ 0x80
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f8d2 	bl	8002492 <UART_WaitOnFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e036      	b.n	8002366 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10b      	bne.n	8002316 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800230c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	3302      	adds	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	e007      	b.n	8002326 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	3301      	adds	r3, #1
 8002324:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1cf      	bne.n	80022de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2200      	movs	r2, #0
 8002346:	2140      	movs	r1, #64	@ 0x40
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f8a2 	bl	8002492 <UART_WaitOnFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e006      	b.n	8002366 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	e000      	b.n	8002366 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002364:	2302      	movs	r3, #2
  }
}
 8002366:	4618      	mov	r0, r3
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b08a      	sub	sp, #40	@ 0x28
 8002372:	af02      	add	r7, sp, #8
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	4613      	mov	r3, r2
 800237c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b20      	cmp	r3, #32
 800238c:	d17c      	bne.n	8002488 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_UART_Receive+0x2c>
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e075      	b.n	800248a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2222      	movs	r2, #34	@ 0x22
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023b2:	f7fe fd25 	bl	8000e00 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	88fa      	ldrh	r2, [r7, #6]
 80023c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023cc:	d108      	bne.n	80023e0 <HAL_UART_Receive+0x72>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d104      	bne.n	80023e0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	e003      	b.n	80023e8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80023e8:	e043      	b.n	8002472 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2120      	movs	r1, #32
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f84c 	bl	8002492 <UART_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e042      	b.n	800248a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	b29b      	uxth	r3, r3
 8002412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002416:	b29a      	uxth	r2, r3
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	3302      	adds	r3, #2
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	e01f      	b.n	8002464 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800242c:	d007      	beq.n	800243e <HAL_UART_Receive+0xd0>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <HAL_UART_Receive+0xde>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	e008      	b.n	800245e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002458:	b2da      	uxtb	r2, r3
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3301      	adds	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1b6      	bne.n	80023ea <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	e000      	b.n	800248a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002488:	2302      	movs	r3, #2
  }
}
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b090      	sub	sp, #64	@ 0x40
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a2:	e050      	b.n	8002546 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d04c      	beq.n	8002546 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80024b2:	f7fe fca5 	bl	8000e00 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024be:	429a      	cmp	r2, r3
 80024c0:	d241      	bcs.n	8002546 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	330c      	adds	r3, #12
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024cc:	e853 3f00 	ldrex	r3, [r3]
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80024d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	330c      	adds	r3, #12
 80024e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80024e4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024ea:	e841 2300 	strex	r3, r2, [r1]
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80024f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1e5      	bne.n	80024c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3314      	adds	r3, #20
 80024fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	e853 3f00 	ldrex	r3, [r3]
 8002504:	613b      	str	r3, [r7, #16]
   return(result);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3314      	adds	r3, #20
 8002514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002516:	623a      	str	r2, [r7, #32]
 8002518:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251a:	69f9      	ldr	r1, [r7, #28]
 800251c:	6a3a      	ldr	r2, [r7, #32]
 800251e:	e841 2300 	strex	r3, r2, [r1]
 8002522:	61bb      	str	r3, [r7, #24]
   return(result);
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1e5      	bne.n	80024f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e00f      	b.n	8002566 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4013      	ands	r3, r2
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	429a      	cmp	r2, r3
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	429a      	cmp	r2, r3
 8002562:	d09f      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3740      	adds	r7, #64	@ 0x40
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80025aa:	f023 030c 	bic.w	r3, r3, #12
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002684 <UART_SetConfig+0x114>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d103      	bne.n	80025e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025d8:	f7ff faea 	bl	8001bb0 <HAL_RCC_GetPCLK2Freq>
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	e002      	b.n	80025e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025e0:	f7ff fad2 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 80025e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009a      	lsls	r2, r3, #2
 80025f0:	441a      	add	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <UART_SetConfig+0x118>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	0119      	lsls	r1, r3, #4
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fbb2 f2f3 	udiv	r2, r2, r3
 800261c:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <UART_SetConfig+0x118>)
 800261e:	fba3 0302 	umull	r0, r3, r3, r2
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2064      	movs	r0, #100	@ 0x64
 8002626:	fb00 f303 	mul.w	r3, r0, r3
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	3332      	adds	r3, #50	@ 0x32
 8002630:	4a15      	ldr	r2, [pc, #84]	@ (8002688 <UART_SetConfig+0x118>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800263c:	4419      	add	r1, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	fbb2 f2f3 	udiv	r2, r2, r3
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <UART_SetConfig+0x118>)
 8002656:	fba3 0302 	umull	r0, r3, r3, r2
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2064      	movs	r0, #100	@ 0x64
 800265e:	fb00 f303 	mul.w	r3, r0, r3
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	3332      	adds	r3, #50	@ 0x32
 8002668:	4a07      	ldr	r2, [pc, #28]	@ (8002688 <UART_SetConfig+0x118>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	f003 020f 	and.w	r2, r3, #15
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	440a      	add	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40013800 	.word	0x40013800
 8002688:	51eb851f 	.word	0x51eb851f

0800268c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002692:	f3ef 8305 	mrs	r3, IPSR
 8002696:	60bb      	str	r3, [r7, #8]
  return(result);
 8002698:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800269e:	f3ef 8310 	mrs	r3, PRIMASK
 80026a2:	607b      	str	r3, [r7, #4]
  return(result);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <osKernelInitialize+0x32>
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <osKernelInitialize+0x60>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d109      	bne.n	80026c6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026b2:	f3ef 8311 	mrs	r3, BASEPRI
 80026b6:	603b      	str	r3, [r7, #0]
  return(result);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80026be:	f06f 0305 	mvn.w	r3, #5
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	e00c      	b.n	80026e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <osKernelInitialize+0x60>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <osKernelInitialize+0x60>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	e002      	b.n	80026e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80026e0:	68fb      	ldr	r3, [r7, #12]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	2000020c 	.word	0x2000020c

080026f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026f6:	f3ef 8305 	mrs	r3, IPSR
 80026fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80026fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10f      	bne.n	8002722 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002702:	f3ef 8310 	mrs	r3, PRIMASK
 8002706:	607b      	str	r3, [r7, #4]
  return(result);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <osKernelStart+0x32>
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <osKernelStart+0x64>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d109      	bne.n	800272a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002716:	f3ef 8311 	mrs	r3, BASEPRI
 800271a:	603b      	str	r3, [r7, #0]
  return(result);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002722:	f06f 0305 	mvn.w	r3, #5
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e00e      	b.n	8002748 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800272a:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <osKernelStart+0x64>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d107      	bne.n	8002742 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002732:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <osKernelStart+0x64>)
 8002734:	2202      	movs	r2, #2
 8002736:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002738:	f001 fabc 	bl	8003cb4 <vTaskStartScheduler>
      stat = osOK;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e002      	b.n	8002748 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002748:	68fb      	ldr	r3, [r7, #12]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000020c 	.word	0x2000020c

08002758 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b092      	sub	sp, #72	@ 0x48
 800275c:	af04      	add	r7, sp, #16
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002768:	f3ef 8305 	mrs	r3, IPSR
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 8094 	bne.w	800289e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002776:	f3ef 8310 	mrs	r3, PRIMASK
 800277a:	623b      	str	r3, [r7, #32]
  return(result);
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 808d 	bne.w	800289e <osThreadNew+0x146>
 8002784:	4b48      	ldr	r3, [pc, #288]	@ (80028a8 <osThreadNew+0x150>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d106      	bne.n	800279a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800278c:	f3ef 8311 	mrs	r3, BASEPRI
 8002790:	61fb      	str	r3, [r7, #28]
  return(result);
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f040 8082 	bne.w	800289e <osThreadNew+0x146>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d07e      	beq.n	800289e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80027a0:	2380      	movs	r3, #128	@ 0x80
 80027a2:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80027a4:	2318      	movs	r3, #24
 80027a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80027a8:	2300      	movs	r3, #0
 80027aa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80027ac:	f107 031b 	add.w	r3, r7, #27
 80027b0:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d045      	beq.n	800284a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <osThreadNew+0x74>
        name = attr->name;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <osThreadNew+0x9a>
 80027e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e2:	2b38      	cmp	r3, #56	@ 0x38
 80027e4:	d805      	bhi.n	80027f2 <osThreadNew+0x9a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <osThreadNew+0x9e>
        return (NULL);
 80027f2:	2300      	movs	r3, #0
 80027f4:	e054      	b.n	80028a0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00e      	beq.n	800282c <osThreadNew+0xd4>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b5b      	cmp	r3, #91	@ 0x5b
 8002814:	d90a      	bls.n	800282c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <osThreadNew+0xd4>
        mem = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800282a:	e010      	b.n	800284e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10c      	bne.n	800284e <osThreadNew+0xf6>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d108      	bne.n	800284e <osThreadNew+0xf6>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <osThreadNew+0xf6>
          mem = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002848:	e001      	b.n	800284e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800284e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002850:	2b01      	cmp	r3, #1
 8002852:	d110      	bne.n	8002876 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800285c:	9202      	str	r2, [sp, #8]
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002868:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f001 f850 	bl	8003910 <xTaskCreateStatic>
 8002870:	4603      	mov	r3, r0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e013      	b.n	800289e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002878:	2b00      	cmp	r3, #0
 800287a:	d110      	bne.n	800289e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800287c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287e:	b29a      	uxth	r2, r3
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f001 f89d 	bl	80039ce <xTaskCreate>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d001      	beq.n	800289e <osThreadNew+0x146>
          hTask = NULL;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800289e:	697b      	ldr	r3, [r7, #20]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3738      	adds	r7, #56	@ 0x38
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	2000020c 	.word	0x2000020c

080028ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028b4:	f3ef 8305 	mrs	r3, IPSR
 80028b8:	613b      	str	r3, [r7, #16]
  return(result);
 80028ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10f      	bne.n	80028e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c0:	f3ef 8310 	mrs	r3, PRIMASK
 80028c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d109      	bne.n	80028e0 <osDelay+0x34>
 80028cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <osDelay+0x58>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d109      	bne.n	80028e8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028d4:	f3ef 8311 	mrs	r3, BASEPRI
 80028d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <osDelay+0x3c>
    stat = osErrorISR;
 80028e0:	f06f 0305 	mvn.w	r3, #5
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e007      	b.n	80028f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f001 f9a8 	bl	8003c48 <vTaskDelay>
    }
  }

  return (stat);
 80028f8:	697b      	ldr	r3, [r7, #20]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2000020c 	.word	0x2000020c

08002908 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	@ 0x30
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002918:	f3ef 8305 	mrs	r3, IPSR
 800291c:	61bb      	str	r3, [r7, #24]
  return(result);
 800291e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002920:	2b00      	cmp	r3, #0
 8002922:	d16f      	bne.n	8002a04 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002924:	f3ef 8310 	mrs	r3, PRIMASK
 8002928:	617b      	str	r3, [r7, #20]
  return(result);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d169      	bne.n	8002a04 <osMessageQueueNew+0xfc>
 8002930:	4b37      	ldr	r3, [pc, #220]	@ (8002a10 <osMessageQueueNew+0x108>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d105      	bne.n	8002944 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002938:	f3ef 8311 	mrs	r3, BASEPRI
 800293c:	613b      	str	r3, [r7, #16]
  return(result);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d15f      	bne.n	8002a04 <osMessageQueueNew+0xfc>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d05c      	beq.n	8002a04 <osMessageQueueNew+0xfc>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d059      	beq.n	8002a04 <osMessageQueueNew+0xfc>
    mem = -1;
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
 8002954:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d029      	beq.n	80029b0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d012      	beq.n	800298a <osMessageQueueNew+0x82>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b4f      	cmp	r3, #79	@ 0x4f
 800296a:	d90e      	bls.n	800298a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	429a      	cmp	r2, r3
 8002982:	d302      	bcc.n	800298a <osMessageQueueNew+0x82>
        mem = 1;
 8002984:	2301      	movs	r3, #1
 8002986:	623b      	str	r3, [r7, #32]
 8002988:	e014      	b.n	80029b4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d110      	bne.n	80029b4 <osMessageQueueNew+0xac>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10c      	bne.n	80029b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d108      	bne.n	80029b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <osMessageQueueNew+0xac>
          mem = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
 80029ae:	e001      	b.n	80029b4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d10b      	bne.n	80029d2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2100      	movs	r1, #0
 80029c4:	9100      	str	r1, [sp, #0]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fa55 	bl	8002e78 <xQueueGenericCreateStatic>
 80029ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80029d0:	e008      	b.n	80029e4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d105      	bne.n	80029e4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80029d8:	2200      	movs	r2, #0
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fac7 	bl	8002f70 <xQueueGenericCreate>
 80029e2:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	e001      	b.n	80029fc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80029fc:	69f9      	ldr	r1, [r7, #28]
 80029fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a00:	f000 ff2a 	bl	8003858 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3728      	adds	r7, #40	@ 0x28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000020c 	.word	0x2000020c

08002a14 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	@ 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a2c:	f3ef 8305 	mrs	r3, IPSR
 8002a30:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a32:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10f      	bne.n	8002a58 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a38:	f3ef 8310 	mrs	r3, PRIMASK
 8002a3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <osMessageQueuePut+0x44>
 8002a44:	4b2b      	ldr	r3, [pc, #172]	@ (8002af4 <osMessageQueuePut+0xe0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d12e      	bne.n	8002aaa <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a4c:	f3ef 8311 	mrs	r3, BASEPRI
 8002a50:	617b      	str	r3, [r7, #20]
  return(result);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d028      	beq.n	8002aaa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <osMessageQueuePut+0x56>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <osMessageQueuePut+0x56>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002a6a:	f06f 0303 	mvn.w	r3, #3
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002a70:	e039      	b.n	8002ae6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002a76:	f107 0210 	add.w	r2, r7, #16
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6a38      	ldr	r0, [r7, #32]
 8002a80:	f000 fbda 	bl	8003238 <xQueueGenericSendFromISR>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d003      	beq.n	8002a92 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002a8a:	f06f 0302 	mvn.w	r3, #2
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002a90:	e029      	b.n	8002ae6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d026      	beq.n	8002ae6 <osMessageQueuePut+0xd2>
 8002a98:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <osMessageQueuePut+0xe4>)
 8002a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002aa8:	e01d      	b.n	8002ae6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <osMessageQueuePut+0xa2>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d103      	bne.n	8002abe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002ab6:	f06f 0303 	mvn.w	r3, #3
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002abc:	e014      	b.n	8002ae8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002abe:	2300      	movs	r3, #0
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	6a38      	ldr	r0, [r7, #32]
 8002ac6:	f000 fab5 	bl	8003034 <xQueueGenericSend>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d00b      	beq.n	8002ae8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002ad6:	f06f 0301 	mvn.w	r3, #1
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8002adc:	e004      	b.n	8002ae8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002ade:	f06f 0302 	mvn.w	r3, #2
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae4:	e000      	b.n	8002ae8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ae6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3728      	adds	r7, #40	@ 0x28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000020c 	.word	0x2000020c
 8002af8:	e000ed04 	.word	0xe000ed04

08002afc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b12:	f3ef 8305 	mrs	r3, IPSR
 8002b16:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b18:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b22:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <osMessageQueueGet+0x42>
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd8 <osMessageQueueGet+0xdc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d12e      	bne.n	8002b90 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b32:	f3ef 8311 	mrs	r3, BASEPRI
 8002b36:	617b      	str	r3, [r7, #20]
  return(result);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d028      	beq.n	8002b90 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <osMessageQueueGet+0x54>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <osMessageQueueGet+0x54>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002b50:	f06f 0303 	mvn.w	r3, #3
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002b56:	e038      	b.n	8002bca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	461a      	mov	r2, r3
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	6a38      	ldr	r0, [r7, #32]
 8002b66:	f000 fce5 	bl	8003534 <xQueueReceiveFromISR>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d003      	beq.n	8002b78 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002b70:	f06f 0302 	mvn.w	r3, #2
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002b76:	e028      	b.n	8002bca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d025      	beq.n	8002bca <osMessageQueueGet+0xce>
 8002b7e:	4b17      	ldr	r3, [pc, #92]	@ (8002bdc <osMessageQueueGet+0xe0>)
 8002b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002b8e:	e01c      	b.n	8002bca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <osMessageQueueGet+0xa0>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002b9c:	f06f 0303 	mvn.w	r3, #3
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba2:	e013      	b.n	8002bcc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	6a38      	ldr	r0, [r7, #32]
 8002baa:	f000 fbe1 	bl	8003370 <xQueueReceive>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d00b      	beq.n	8002bcc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002bba:	f06f 0301 	mvn.w	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc0:	e004      	b.n	8002bcc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8002bc2:	f06f 0302 	mvn.w	r3, #2
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc8:	e000      	b.n	8002bcc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002bca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3728      	adds	r7, #40	@ 0x28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000020c 	.word	0x2000020c
 8002bdc:	e000ed04 	.word	0xe000ed04

08002be0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a06      	ldr	r2, [pc, #24]	@ (8002c08 <vApplicationGetIdleTaskMemory+0x28>)
 8002bf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	4a05      	ldr	r2, [pc, #20]	@ (8002c0c <vApplicationGetIdleTaskMemory+0x2c>)
 8002bf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2280      	movs	r2, #128	@ 0x80
 8002bfc:	601a      	str	r2, [r3, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	20000210 	.word	0x20000210
 8002c0c:	2000026c 	.word	0x2000026c

08002c10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <vApplicationGetTimerTaskMemory+0x2c>)
 8002c20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4a06      	ldr	r2, [pc, #24]	@ (8002c40 <vApplicationGetTimerTaskMemory+0x30>)
 8002c26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	2000046c 	.word	0x2000046c
 8002c40:	200004c8 	.word	0x200004c8

08002c44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f103 0208 	add.w	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f103 0208 	add.w	r2, r3, #8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f103 0208 	add.w	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	601a      	str	r2, [r3, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d103      	bne.n	8002d00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e00c      	b.n	8002d1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3308      	adds	r3, #8
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e002      	b.n	8002d0e <vListInsert+0x2e>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d2f6      	bcs.n	8002d08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	601a      	str	r2, [r3, #0]
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6892      	ldr	r2, [r2, #8]
 8002d66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6852      	ldr	r2, [r2, #4]
 8002d70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d103      	bne.n	8002d84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	1e5a      	subs	r2, r3, #1
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
	...

08002da4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10b      	bne.n	8002dd0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dca:	bf00      	nop
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dd0:	f002 f9a4 	bl	800511c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	441a      	add	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e00:	3b01      	subs	r3, #1
 8002e02:	68f9      	ldr	r1, [r7, #12]
 8002e04:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	22ff      	movs	r2, #255	@ 0xff
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	22ff      	movs	r2, #255	@ 0xff
 8002e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d114      	bne.n	8002e50 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01a      	beq.n	8002e64 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3310      	adds	r3, #16
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 f9d0 	bl	80041d8 <xTaskRemoveFromEventList>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d012      	beq.n	8002e64 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e74 <xQueueGenericReset+0xd0>)
 8002e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	e009      	b.n	8002e64 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3310      	adds	r3, #16
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fef5 	bl	8002c44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3324      	adds	r3, #36	@ 0x24
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fef0 	bl	8002c44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e64:	f002 f98a 	bl	800517c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e68:	2301      	movs	r3, #1
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	e000ed04 	.word	0xe000ed04

08002e78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08e      	sub	sp, #56	@ 0x38
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e9e:	bf00      	nop
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	e7fd      	b.n	8002ebe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <xQueueGenericCreateStatic+0x56>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <xQueueGenericCreateStatic+0x5a>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <xQueueGenericCreateStatic+0x5c>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10b      	bne.n	8002ef0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	623b      	str	r3, [r7, #32]
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <xQueueGenericCreateStatic+0x84>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <xQueueGenericCreateStatic+0x88>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <xQueueGenericCreateStatic+0x8a>
 8002f00:	2300      	movs	r3, #0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10b      	bne.n	8002f1e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	61fb      	str	r3, [r7, #28]
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	e7fd      	b.n	8002f1a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f1e:	2350      	movs	r3, #80	@ 0x50
 8002f20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b50      	cmp	r3, #80	@ 0x50
 8002f26:	d00b      	beq.n	8002f40 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	61bb      	str	r3, [r7, #24]
}
 8002f3a:	bf00      	nop
 8002f3c:	bf00      	nop
 8002f3e:	e7fd      	b.n	8002f3c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f52:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f844 	bl	8002fee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3730      	adds	r7, #48	@ 0x30
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	@ 0x28
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <xQueueGenericCreate+0x2c>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	613b      	str	r3, [r7, #16]
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e004      	b.n	8002fb2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3350      	adds	r3, #80	@ 0x50
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 f9b2 	bl	8005320 <pvPortMalloc>
 8002fbc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00f      	beq.n	8002fe4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	3350      	adds	r3, #80	@ 0x50
 8002fc8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fd2:	79fa      	ldrb	r2, [r7, #7]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f805 	bl	8002fee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
	}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e002      	b.n	8003010 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800301c:	2101      	movs	r1, #1
 800301e:	69b8      	ldr	r0, [r7, #24]
 8003020:	f7ff fec0 	bl	8002da4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08e      	sub	sp, #56	@ 0x38
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003042:	2300      	movs	r3, #0
 8003044:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <xQueueGenericSend+0x34>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003062:	bf00      	nop
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <xQueueGenericSend+0x42>
 800306e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <xQueueGenericSend+0x46>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <xQueueGenericSend+0x48>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <xQueueGenericSend+0x64>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d103      	bne.n	80030a6 <xQueueGenericSend+0x72>
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <xQueueGenericSend+0x76>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <xQueueGenericSend+0x78>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <xQueueGenericSend+0x94>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	623b      	str	r3, [r7, #32]
}
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030c8:	f001 fa4a 	bl	8004560 <xTaskGetSchedulerState>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <xQueueGenericSend+0xa4>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <xQueueGenericSend+0xa8>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <xQueueGenericSend+0xaa>
 80030dc:	2300      	movs	r3, #0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <xQueueGenericSend+0xc6>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	61fb      	str	r3, [r7, #28]
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	e7fd      	b.n	80030f6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030fa:	f002 f80f 	bl	800511c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <xQueueGenericSend+0xdc>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d129      	bne.n	8003164 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003116:	f000 fa8f 	bl	8003638 <prvCopyDataToQueue>
 800311a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003126:	3324      	adds	r3, #36	@ 0x24
 8003128:	4618      	mov	r0, r3
 800312a:	f001 f855 	bl	80041d8 <xTaskRemoveFromEventList>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003134:	4b3f      	ldr	r3, [pc, #252]	@ (8003234 <xQueueGenericSend+0x200>)
 8003136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	e00a      	b.n	800315c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800314c:	4b39      	ldr	r3, [pc, #228]	@ (8003234 <xQueueGenericSend+0x200>)
 800314e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800315c:	f002 f80e 	bl	800517c <vPortExitCritical>
				return pdPASS;
 8003160:	2301      	movs	r3, #1
 8003162:	e063      	b.n	800322c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800316a:	f002 f807 	bl	800517c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800316e:	2300      	movs	r3, #0
 8003170:	e05c      	b.n	800322c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003174:	2b00      	cmp	r3, #0
 8003176:	d106      	bne.n	8003186 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4618      	mov	r0, r3
 800317e:	f001 f88f 	bl	80042a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003182:	2301      	movs	r3, #1
 8003184:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003186:	f001 fff9 	bl	800517c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800318a:	f000 fdfb 	bl	8003d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800318e:	f001 ffc5 	bl	800511c <vPortEnterCritical>
 8003192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003194:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003198:	b25b      	sxtb	r3, r3
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d103      	bne.n	80031a8 <xQueueGenericSend+0x174>
 80031a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031ae:	b25b      	sxtb	r3, r3
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d103      	bne.n	80031be <xQueueGenericSend+0x18a>
 80031b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031be:	f001 ffdd 	bl	800517c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031c2:	1d3a      	adds	r2, r7, #4
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 f87e 	bl	80042cc <xTaskCheckForTimeOut>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d124      	bne.n	8003220 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031d8:	f000 fb26 	bl	8003828 <prvIsQueueFull>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d018      	beq.n	8003214 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e4:	3310      	adds	r3, #16
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 ffa2 	bl	8004134 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031f2:	f000 fab1 	bl	8003758 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031f6:	f000 fdd3 	bl	8003da0 <xTaskResumeAll>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f47f af7c 	bne.w	80030fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003202:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <xQueueGenericSend+0x200>)
 8003204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	e772      	b.n	80030fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003214:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003216:	f000 fa9f 	bl	8003758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800321a:	f000 fdc1 	bl	8003da0 <xTaskResumeAll>
 800321e:	e76c      	b.n	80030fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003222:	f000 fa99 	bl	8003758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003226:	f000 fdbb 	bl	8003da0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800322a:	2300      	movs	r3, #0
		}
	}
}
 800322c:	4618      	mov	r0, r3
 800322e:	3738      	adds	r7, #56	@ 0x38
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	e000ed04 	.word	0xe000ed04

08003238 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08e      	sub	sp, #56	@ 0x38
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	e7fd      	b.n	8003264 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d103      	bne.n	8003276 <xQueueGenericSendFromISR+0x3e>
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <xQueueGenericSendFromISR+0x42>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <xQueueGenericSendFromISR+0x44>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	623b      	str	r3, [r7, #32]
}
 8003292:	bf00      	nop
 8003294:	bf00      	nop
 8003296:	e7fd      	b.n	8003294 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d103      	bne.n	80032a6 <xQueueGenericSendFromISR+0x6e>
 800329e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <xQueueGenericSendFromISR+0x72>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <xQueueGenericSendFromISR+0x74>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10b      	bne.n	80032c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	61fb      	str	r3, [r7, #28]
}
 80032c2:	bf00      	nop
 80032c4:	bf00      	nop
 80032c6:	e7fd      	b.n	80032c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032c8:	f001 ffea 	bl	80052a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032cc:	f3ef 8211 	mrs	r2, BASEPRI
 80032d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	61ba      	str	r2, [r7, #24]
 80032e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <xQueueGenericSendFromISR+0xc2>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d12c      	bne.n	8003354 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003300:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800330a:	f000 f995 	bl	8003638 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800330e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003316:	d112      	bne.n	800333e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	d016      	beq.n	800334e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003322:	3324      	adds	r3, #36	@ 0x24
 8003324:	4618      	mov	r0, r3
 8003326:	f000 ff57 	bl	80041d8 <xTaskRemoveFromEventList>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00e      	beq.n	800334e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e007      	b.n	800334e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800333e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003342:	3301      	adds	r3, #1
 8003344:	b2db      	uxtb	r3, r3
 8003346:	b25a      	sxtb	r2, r3
 8003348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800334e:	2301      	movs	r3, #1
 8003350:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003352:	e001      	b.n	8003358 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003354:	2300      	movs	r3, #0
 8003356:	637b      	str	r3, [r7, #52]	@ 0x34
 8003358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003362:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003366:	4618      	mov	r0, r3
 8003368:	3738      	adds	r7, #56	@ 0x38
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08c      	sub	sp, #48	@ 0x30
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800337c:	2300      	movs	r3, #0
 800337e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <xQueueReceive+0x32>
	__asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	623b      	str	r3, [r7, #32]
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	e7fd      	b.n	800339e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d103      	bne.n	80033b0 <xQueueReceive+0x40>
 80033a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <xQueueReceive+0x44>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <xQueueReceive+0x46>
 80033b4:	2300      	movs	r3, #0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <xQueueReceive+0x62>
	__asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	61fb      	str	r3, [r7, #28]
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	e7fd      	b.n	80033ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033d2:	f001 f8c5 	bl	8004560 <xTaskGetSchedulerState>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <xQueueReceive+0x72>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <xQueueReceive+0x76>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <xQueueReceive+0x78>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <xQueueReceive+0x94>
	__asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	61bb      	str	r3, [r7, #24]
}
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
 8003402:	e7fd      	b.n	8003400 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003404:	f001 fe8a 	bl	800511c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01f      	beq.n	8003454 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003418:	f000 f978 	bl	800370c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	1e5a      	subs	r2, r3, #1
 8003420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00f      	beq.n	800344c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342e:	3310      	adds	r3, #16
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fed1 	bl	80041d8 <xTaskRemoveFromEventList>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800343c:	4b3c      	ldr	r3, [pc, #240]	@ (8003530 <xQueueReceive+0x1c0>)
 800343e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800344c:	f001 fe96 	bl	800517c <vPortExitCritical>
				return pdPASS;
 8003450:	2301      	movs	r3, #1
 8003452:	e069      	b.n	8003528 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800345a:	f001 fe8f 	bl	800517c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800345e:	2300      	movs	r3, #0
 8003460:	e062      	b.n	8003528 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003468:	f107 0310 	add.w	r3, r7, #16
 800346c:	4618      	mov	r0, r3
 800346e:	f000 ff17 	bl	80042a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003472:	2301      	movs	r3, #1
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003476:	f001 fe81 	bl	800517c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800347a:	f000 fc83 	bl	8003d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800347e:	f001 fe4d 	bl	800511c <vPortEnterCritical>
 8003482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003484:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003488:	b25b      	sxtb	r3, r3
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d103      	bne.n	8003498 <xQueueReceive+0x128>
 8003490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800349e:	b25b      	sxtb	r3, r3
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d103      	bne.n	80034ae <xQueueReceive+0x13e>
 80034a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034ae:	f001 fe65 	bl	800517c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034b2:	1d3a      	adds	r2, r7, #4
 80034b4:	f107 0310 	add.w	r3, r7, #16
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 ff06 	bl	80042cc <xTaskCheckForTimeOut>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d123      	bne.n	800350e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034c8:	f000 f998 	bl	80037fc <prvIsQueueEmpty>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d017      	beq.n	8003502 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d4:	3324      	adds	r3, #36	@ 0x24
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fe2a 	bl	8004134 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034e2:	f000 f939 	bl	8003758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034e6:	f000 fc5b 	bl	8003da0 <xTaskResumeAll>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d189      	bne.n	8003404 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80034f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003530 <xQueueReceive+0x1c0>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	e780      	b.n	8003404 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003504:	f000 f928 	bl	8003758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003508:	f000 fc4a 	bl	8003da0 <xTaskResumeAll>
 800350c:	e77a      	b.n	8003404 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800350e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003510:	f000 f922 	bl	8003758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003514:	f000 fc44 	bl	8003da0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800351a:	f000 f96f 	bl	80037fc <prvIsQueueEmpty>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	f43f af6f 	beq.w	8003404 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003526:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003528:	4618      	mov	r0, r3
 800352a:	3730      	adds	r7, #48	@ 0x30
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	e000ed04 	.word	0xe000ed04

08003534 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08e      	sub	sp, #56	@ 0x38
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	623b      	str	r3, [r7, #32]
}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	e7fd      	b.n	800355e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <xQueueReceiveFromISR+0x3c>
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <xQueueReceiveFromISR+0x40>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <xQueueReceiveFromISR+0x42>
 8003574:	2300      	movs	r3, #0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	61fb      	str	r3, [r7, #28]
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	e7fd      	b.n	800358e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003592:	f001 fe85 	bl	80052a0 <vPortValidateInterruptPriority>
	__asm volatile
 8003596:	f3ef 8211 	mrs	r2, BASEPRI
 800359a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	61ba      	str	r2, [r7, #24]
 80035ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80035ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02f      	beq.n	800361e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80035be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035cc:	f000 f89e 	bl	800370c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d2:	1e5a      	subs	r2, r3, #1
 80035d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80035d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d112      	bne.n	8003608 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d016      	beq.n	8003618 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ec:	3310      	adds	r3, #16
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fdf2 	bl	80041d8 <xTaskRemoveFromEventList>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00e      	beq.n	8003618 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e007      	b.n	8003618 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800360c:	3301      	adds	r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	b25a      	sxtb	r2, r3
 8003612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003618:	2301      	movs	r3, #1
 800361a:	637b      	str	r3, [r7, #52]	@ 0x34
 800361c:	e001      	b.n	8003622 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800361e:	2300      	movs	r3, #0
 8003620:	637b      	str	r3, [r7, #52]	@ 0x34
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f383 8811 	msr	BASEPRI, r3
}
 800362c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800362e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003630:	4618      	mov	r0, r3
 8003632:	3738      	adds	r7, #56	@ 0x38
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10d      	bne.n	8003672 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d14d      	bne.n	80036fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 ff9a 	bl	800459c <xTaskPriorityDisinherit>
 8003668:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	e043      	b.n	80036fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d119      	bne.n	80036ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6898      	ldr	r0, [r3, #8]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	461a      	mov	r2, r3
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	f002 f866 	bl	8005754 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	441a      	add	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d32b      	bcc.n	80036fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	e026      	b.n	80036fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	68d8      	ldr	r0, [r3, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	461a      	mov	r2, r3
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	f002 f84c 	bl	8005754 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	425b      	negs	r3, r3
 80036c6:	441a      	add	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d207      	bcs.n	80036e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	425b      	negs	r3, r3
 80036e2:	441a      	add	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d105      	bne.n	80036fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003702:	697b      	ldr	r3, [r7, #20]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d018      	beq.n	8003750 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	441a      	add	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d303      	bcc.n	8003740 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68d9      	ldr	r1, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	461a      	mov	r2, r3
 800374a:	6838      	ldr	r0, [r7, #0]
 800374c:	f002 f802 	bl	8005754 <memcpy>
	}
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003760:	f001 fcdc 	bl	800511c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800376a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800376c:	e011      	b.n	8003792 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3324      	adds	r3, #36	@ 0x24
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fd2c 	bl	80041d8 <xTaskRemoveFromEventList>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003786:	f000 fe05 	bl	8004394 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	3b01      	subs	r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	dce9      	bgt.n	800376e <prvUnlockQueue+0x16>
 800379a:	e000      	b.n	800379e <prvUnlockQueue+0x46>
					break;
 800379c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	22ff      	movs	r2, #255	@ 0xff
 80037a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80037a6:	f001 fce9 	bl	800517c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037aa:	f001 fcb7 	bl	800511c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037b6:	e011      	b.n	80037dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d012      	beq.n	80037e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3310      	adds	r3, #16
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fd07 	bl	80041d8 <xTaskRemoveFromEventList>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037d0:	f000 fde0 	bl	8004394 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037d4:	7bbb      	ldrb	r3, [r7, #14]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	dce9      	bgt.n	80037b8 <prvUnlockQueue+0x60>
 80037e4:	e000      	b.n	80037e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	22ff      	movs	r2, #255	@ 0xff
 80037ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80037f0:	f001 fcc4 	bl	800517c <vPortExitCritical>
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003804:	f001 fc8a 	bl	800511c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003810:	2301      	movs	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e001      	b.n	800381a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800381a:	f001 fcaf 	bl	800517c <vPortExitCritical>

	return xReturn;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003830:	f001 fc74 	bl	800511c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383c:	429a      	cmp	r2, r3
 800383e:	d102      	bne.n	8003846 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003840:	2301      	movs	r3, #1
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e001      	b.n	800384a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800384a:	f001 fc97 	bl	800517c <vPortExitCritical>

	return xReturn;
 800384e:	68fb      	ldr	r3, [r7, #12]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e014      	b.n	8003892 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003868:	4a0e      	ldr	r2, [pc, #56]	@ (80038a4 <vQueueAddToRegistry+0x4c>)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10b      	bne.n	800388c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003874:	490b      	ldr	r1, [pc, #44]	@ (80038a4 <vQueueAddToRegistry+0x4c>)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800387e:	4a09      	ldr	r2, [pc, #36]	@ (80038a4 <vQueueAddToRegistry+0x4c>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800388a:	e006      	b.n	800389a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3301      	adds	r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b07      	cmp	r3, #7
 8003896:	d9e7      	bls.n	8003868 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	200008c8 	.word	0x200008c8

080038a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038b8:	f001 fc30 	bl	800511c <vPortEnterCritical>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038c2:	b25b      	sxtb	r3, r3
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d103      	bne.n	80038d2 <vQueueWaitForMessageRestricted+0x2a>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d103      	bne.n	80038e8 <vQueueWaitForMessageRestricted+0x40>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038e8:	f001 fc48 	bl	800517c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3324      	adds	r3, #36	@ 0x24
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fc3f 	bl	8004180 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003902:	6978      	ldr	r0, [r7, #20]
 8003904:	f7ff ff28 	bl	8003758 <prvUnlockQueue>
	}
 8003908:	bf00      	nop
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08e      	sub	sp, #56	@ 0x38
 8003914:	af04      	add	r7, sp, #16
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800391e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	623b      	str	r3, [r7, #32]
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800393c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	61fb      	str	r3, [r7, #28]
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	e7fd      	b.n	8003956 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800395a:	235c      	movs	r3, #92	@ 0x5c
 800395c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b5c      	cmp	r3, #92	@ 0x5c
 8003962:	d00b      	beq.n	800397c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	61bb      	str	r3, [r7, #24]
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800397c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397e:	2b00      	cmp	r3, #0
 8003980:	d01e      	beq.n	80039c0 <xTaskCreateStatic+0xb0>
 8003982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01b      	beq.n	80039c0 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003990:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	2202      	movs	r2, #2
 8003996:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800399a:	2300      	movs	r3, #0
 800399c:	9303      	str	r3, [sp, #12]
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	9302      	str	r3, [sp, #8]
 80039a2:	f107 0314 	add.w	r3, r7, #20
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f850 	bl	8003a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039ba:	f000 f8d5 	bl	8003b68 <prvAddNewTaskToReadyList>
 80039be:	e001      	b.n	80039c4 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039c4:	697b      	ldr	r3, [r7, #20]
	}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3728      	adds	r7, #40	@ 0x28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b08c      	sub	sp, #48	@ 0x30
 80039d2:	af04      	add	r7, sp, #16
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	4613      	mov	r3, r2
 80039dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 fc9c 	bl	8005320 <pvPortMalloc>
 80039e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00e      	beq.n	8003a0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039f0:	205c      	movs	r0, #92	@ 0x5c
 80039f2:	f001 fc95 	bl	8005320 <pvPortMalloc>
 80039f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a04:	e005      	b.n	8003a12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a06:	6978      	ldr	r0, [r7, #20]
 8003a08:	f001 fd52 	bl	80054b0 <vPortFree>
 8003a0c:	e001      	b.n	8003a12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d017      	beq.n	8003a48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	2300      	movs	r3, #0
 8003a24:	9303      	str	r3, [sp, #12]
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	9302      	str	r3, [sp, #8]
 8003a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f80e 	bl	8003a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a3c:	69f8      	ldr	r0, [r7, #28]
 8003a3e:	f000 f893 	bl	8003b68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a42:	2301      	movs	r3, #1
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e002      	b.n	8003a4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a68:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	461a      	mov	r2, r3
 8003a70:	21a5      	movs	r1, #165	@ 0xa5
 8003a72:	f001 fe43 	bl	80056fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a80:	3b01      	subs	r3, #1
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	617b      	str	r3, [r7, #20]
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	e7fd      	b.n	8003aae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	e012      	b.n	8003ade <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	7819      	ldrb	r1, [r3, #0]
 8003ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3334      	adds	r3, #52	@ 0x34
 8003ac8:	460a      	mov	r2, r1
 8003aca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d006      	beq.n	8003ae6 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	3301      	adds	r3, #1
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2b0f      	cmp	r3, #15
 8003ae2:	d9e9      	bls.n	8003ab8 <prvInitialiseNewTask+0x60>
 8003ae4:	e000      	b.n	8003ae8 <prvInitialiseNewTask+0x90>
		{
			break;
 8003ae6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af2:	2b37      	cmp	r3, #55	@ 0x37
 8003af4:	d901      	bls.n	8003afa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003af6:	2337      	movs	r3, #55	@ 0x37
 8003af8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003afe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b08:	2200      	movs	r2, #0
 8003b0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff f8b6 	bl	8002c82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b18:	3318      	adds	r3, #24
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff f8b1 	bl	8002c82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	2200      	movs	r2, #0
 8003b3a:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	68f9      	ldr	r1, [r7, #12]
 8003b48:	69b8      	ldr	r0, [r7, #24]
 8003b4a:	f001 f9f9 	bl	8004f40 <pxPortInitialiseStack>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b60:	bf00      	nop
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b70:	f001 fad4 	bl	800511c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b74:	4b2d      	ldr	r3, [pc, #180]	@ (8003c2c <prvAddNewTaskToReadyList+0xc4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c2c <prvAddNewTaskToReadyList+0xc4>)
 8003b7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003c30 <prvAddNewTaskToReadyList+0xc8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b86:	4a2a      	ldr	r2, [pc, #168]	@ (8003c30 <prvAddNewTaskToReadyList+0xc8>)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b8c:	4b27      	ldr	r3, [pc, #156]	@ (8003c2c <prvAddNewTaskToReadyList+0xc4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d110      	bne.n	8003bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b94:	f000 fc22 	bl	80043dc <prvInitialiseTaskLists>
 8003b98:	e00d      	b.n	8003bb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b9a:	4b26      	ldr	r3, [pc, #152]	@ (8003c34 <prvAddNewTaskToReadyList+0xcc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ba2:	4b23      	ldr	r3, [pc, #140]	@ (8003c30 <prvAddNewTaskToReadyList+0xc8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d802      	bhi.n	8003bb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c30 <prvAddNewTaskToReadyList+0xc8>)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bb6:	4b20      	ldr	r3, [pc, #128]	@ (8003c38 <prvAddNewTaskToReadyList+0xd0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8003c38 <prvAddNewTaskToReadyList+0xd0>)
 8003bbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c38 <prvAddNewTaskToReadyList+0xd0>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <prvAddNewTaskToReadyList+0xd4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d903      	bls.n	8003bdc <prvAddNewTaskToReadyList+0x74>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	4a18      	ldr	r2, [pc, #96]	@ (8003c3c <prvAddNewTaskToReadyList+0xd4>)
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4a15      	ldr	r2, [pc, #84]	@ (8003c40 <prvAddNewTaskToReadyList+0xd8>)
 8003bea:	441a      	add	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7ff f851 	bl	8002c9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bf8:	f001 fac0 	bl	800517c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8003c34 <prvAddNewTaskToReadyList+0xcc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00e      	beq.n	8003c22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c04:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <prvAddNewTaskToReadyList+0xc8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d207      	bcs.n	8003c22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c12:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <prvAddNewTaskToReadyList+0xdc>)
 8003c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000ddc 	.word	0x20000ddc
 8003c30:	20000908 	.word	0x20000908
 8003c34:	20000de8 	.word	0x20000de8
 8003c38:	20000df8 	.word	0x20000df8
 8003c3c:	20000de4 	.word	0x20000de4
 8003c40:	2000090c 	.word	0x2000090c
 8003c44:	e000ed04 	.word	0xe000ed04

08003c48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d018      	beq.n	8003c8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c5a:	4b14      	ldr	r3, [pc, #80]	@ (8003cac <vTaskDelay+0x64>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <vTaskDelay+0x32>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	60bb      	str	r3, [r7, #8]
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	e7fd      	b.n	8003c76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c7a:	f000 f883 	bl	8003d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c7e:	2100      	movs	r1, #0
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fde9 	bl	8004858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c86:	f000 f88b 	bl	8003da0 <xTaskResumeAll>
 8003c8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003c92:	4b07      	ldr	r3, [pc, #28]	@ (8003cb0 <vTaskDelay+0x68>)
 8003c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000e04 	.word	0x20000e04
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	@ 0x28
 8003cb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cc2:	463a      	mov	r2, r7
 8003cc4:	1d39      	adds	r1, r7, #4
 8003cc6:	f107 0308 	add.w	r3, r7, #8
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe ff88 	bl	8002be0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	9202      	str	r2, [sp, #8]
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	460a      	mov	r2, r1
 8003ce2:	4922      	ldr	r1, [pc, #136]	@ (8003d6c <vTaskStartScheduler+0xb8>)
 8003ce4:	4822      	ldr	r0, [pc, #136]	@ (8003d70 <vTaskStartScheduler+0xbc>)
 8003ce6:	f7ff fe13 	bl	8003910 <xTaskCreateStatic>
 8003cea:	4603      	mov	r3, r0
 8003cec:	4a21      	ldr	r2, [pc, #132]	@ (8003d74 <vTaskStartScheduler+0xc0>)
 8003cee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cf0:	4b20      	ldr	r3, [pc, #128]	@ (8003d74 <vTaskStartScheduler+0xc0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e001      	b.n	8003d02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d102      	bne.n	8003d0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d08:	f000 fdfa 	bl	8004900 <xTimerCreateTimerTask>
 8003d0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d116      	bne.n	8003d42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	613b      	str	r3, [r7, #16]
}
 8003d26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d28:	4b13      	ldr	r3, [pc, #76]	@ (8003d78 <vTaskStartScheduler+0xc4>)
 8003d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d30:	4b12      	ldr	r3, [pc, #72]	@ (8003d7c <vTaskStartScheduler+0xc8>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d36:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <vTaskStartScheduler+0xcc>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d3c:	f001 f97c 	bl	8005038 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d40:	e00f      	b.n	8003d62 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d10b      	bne.n	8003d62 <vTaskStartScheduler+0xae>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	60fb      	str	r3, [r7, #12]
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	e7fd      	b.n	8003d5e <vTaskStartScheduler+0xaa>
}
 8003d62:	bf00      	nop
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	080057d4 	.word	0x080057d4
 8003d70:	080043ad 	.word	0x080043ad
 8003d74:	20000e00 	.word	0x20000e00
 8003d78:	20000dfc 	.word	0x20000dfc
 8003d7c:	20000de8 	.word	0x20000de8
 8003d80:	20000de0 	.word	0x20000de0

08003d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d88:	4b04      	ldr	r3, [pc, #16]	@ (8003d9c <vTaskSuspendAll+0x18>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	4a03      	ldr	r2, [pc, #12]	@ (8003d9c <vTaskSuspendAll+0x18>)
 8003d90:	6013      	str	r3, [r2, #0]
}
 8003d92:	bf00      	nop
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000e04 	.word	0x20000e04

08003da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dae:	4b42      	ldr	r3, [pc, #264]	@ (8003eb8 <xTaskResumeAll+0x118>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <xTaskResumeAll+0x2e>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	603b      	str	r3, [r7, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	e7fd      	b.n	8003dca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dce:	f001 f9a5 	bl	800511c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dd2:	4b39      	ldr	r3, [pc, #228]	@ (8003eb8 <xTaskResumeAll+0x118>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	4a37      	ldr	r2, [pc, #220]	@ (8003eb8 <xTaskResumeAll+0x118>)
 8003dda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ddc:	4b36      	ldr	r3, [pc, #216]	@ (8003eb8 <xTaskResumeAll+0x118>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d162      	bne.n	8003eaa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003de4:	4b35      	ldr	r3, [pc, #212]	@ (8003ebc <xTaskResumeAll+0x11c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05e      	beq.n	8003eaa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dec:	e02f      	b.n	8003e4e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003dee:	4b34      	ldr	r3, [pc, #208]	@ (8003ec0 <xTaskResumeAll+0x120>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3318      	adds	r3, #24
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe ffa8 	bl	8002d50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe ffa3 	bl	8002d50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec4 <xTaskResumeAll+0x124>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d903      	bls.n	8003e1e <xTaskResumeAll+0x7e>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ec4 <xTaskResumeAll+0x124>)
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4a27      	ldr	r2, [pc, #156]	@ (8003ec8 <xTaskResumeAll+0x128>)
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3304      	adds	r3, #4
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f7fe ff30 	bl	8002c9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3e:	4b23      	ldr	r3, [pc, #140]	@ (8003ecc <xTaskResumeAll+0x12c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d302      	bcc.n	8003e4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003e48:	4b21      	ldr	r3, [pc, #132]	@ (8003ed0 <xTaskResumeAll+0x130>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec0 <xTaskResumeAll+0x120>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1cb      	bne.n	8003dee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e5c:	f000 fb5c 	bl	8004518 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e60:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed4 <xTaskResumeAll+0x134>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d010      	beq.n	8003e8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e6c:	f000 f844 	bl	8003ef8 <xTaskIncrementTick>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003e76:	4b16      	ldr	r3, [pc, #88]	@ (8003ed0 <xTaskResumeAll+0x130>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f1      	bne.n	8003e6c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003e88:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <xTaskResumeAll+0x134>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <xTaskResumeAll+0x130>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <xTaskResumeAll+0x138>)
 8003e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eaa:	f001 f967 	bl	800517c <vPortExitCritical>

	return xAlreadyYielded;
 8003eae:	68bb      	ldr	r3, [r7, #8]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000e04 	.word	0x20000e04
 8003ebc:	20000ddc 	.word	0x20000ddc
 8003ec0:	20000d9c 	.word	0x20000d9c
 8003ec4:	20000de4 	.word	0x20000de4
 8003ec8:	2000090c 	.word	0x2000090c
 8003ecc:	20000908 	.word	0x20000908
 8003ed0:	20000df0 	.word	0x20000df0
 8003ed4:	20000dec 	.word	0x20000dec
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ee2:	4b04      	ldr	r3, [pc, #16]	@ (8003ef4 <xTaskGetTickCount+0x18>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ee8:	687b      	ldr	r3, [r7, #4]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	20000de0 	.word	0x20000de0

08003ef8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f02:	4b52      	ldr	r3, [pc, #328]	@ (800404c <xTaskIncrementTick+0x154>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 808f 	bne.w	800402a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f0c:	4b50      	ldr	r3, [pc, #320]	@ (8004050 <xTaskIncrementTick+0x158>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3301      	adds	r3, #1
 8003f12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f14:	4a4e      	ldr	r2, [pc, #312]	@ (8004050 <xTaskIncrementTick+0x158>)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d121      	bne.n	8003f64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f20:	4b4c      	ldr	r3, [pc, #304]	@ (8004054 <xTaskIncrementTick+0x15c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	603b      	str	r3, [r7, #0]
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	e7fd      	b.n	8003f3e <xTaskIncrementTick+0x46>
 8003f42:	4b44      	ldr	r3, [pc, #272]	@ (8004054 <xTaskIncrementTick+0x15c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	4b43      	ldr	r3, [pc, #268]	@ (8004058 <xTaskIncrementTick+0x160>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a41      	ldr	r2, [pc, #260]	@ (8004054 <xTaskIncrementTick+0x15c>)
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	4a41      	ldr	r2, [pc, #260]	@ (8004058 <xTaskIncrementTick+0x160>)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b41      	ldr	r3, [pc, #260]	@ (800405c <xTaskIncrementTick+0x164>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	4a3f      	ldr	r2, [pc, #252]	@ (800405c <xTaskIncrementTick+0x164>)
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	f000 fada 	bl	8004518 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f64:	4b3e      	ldr	r3, [pc, #248]	@ (8004060 <xTaskIncrementTick+0x168>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d34e      	bcc.n	800400c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6e:	4b39      	ldr	r3, [pc, #228]	@ (8004054 <xTaskIncrementTick+0x15c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <xTaskIncrementTick+0x84>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <xTaskIncrementTick+0x86>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f82:	4b37      	ldr	r3, [pc, #220]	@ (8004060 <xTaskIncrementTick+0x168>)
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295
 8003f88:	601a      	str	r2, [r3, #0]
					break;
 8003f8a:	e03f      	b.n	800400c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f8c:	4b31      	ldr	r3, [pc, #196]	@ (8004054 <xTaskIncrementTick+0x15c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d203      	bcs.n	8003fac <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fa4:	4a2e      	ldr	r2, [pc, #184]	@ (8004060 <xTaskIncrementTick+0x168>)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6013      	str	r3, [r2, #0]
						break;
 8003faa:	e02f      	b.n	800400c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe fecd 	bl	8002d50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	3318      	adds	r3, #24
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fec4 	bl	8002d50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fcc:	4b25      	ldr	r3, [pc, #148]	@ (8004064 <xTaskIncrementTick+0x16c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d903      	bls.n	8003fdc <xTaskIncrementTick+0xe4>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	4a22      	ldr	r2, [pc, #136]	@ (8004064 <xTaskIncrementTick+0x16c>)
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8004068 <xTaskIncrementTick+0x170>)
 8003fea:	441a      	add	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f7fe fe51 	bl	8002c9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800406c <xTaskIncrementTick+0x174>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	429a      	cmp	r2, r3
 8004004:	d3b3      	bcc.n	8003f6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004006:	2301      	movs	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800400a:	e7b0      	b.n	8003f6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800400c:	4b17      	ldr	r3, [pc, #92]	@ (800406c <xTaskIncrementTick+0x174>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004012:	4915      	ldr	r1, [pc, #84]	@ (8004068 <xTaskIncrementTick+0x170>)
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d907      	bls.n	8004034 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004024:	2301      	movs	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e004      	b.n	8004034 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800402a:	4b11      	ldr	r3, [pc, #68]	@ (8004070 <xTaskIncrementTick+0x178>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3301      	adds	r3, #1
 8004030:	4a0f      	ldr	r2, [pc, #60]	@ (8004070 <xTaskIncrementTick+0x178>)
 8004032:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004034:	4b0f      	ldr	r3, [pc, #60]	@ (8004074 <xTaskIncrementTick+0x17c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004040:	697b      	ldr	r3, [r7, #20]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000e04 	.word	0x20000e04
 8004050:	20000de0 	.word	0x20000de0
 8004054:	20000d94 	.word	0x20000d94
 8004058:	20000d98 	.word	0x20000d98
 800405c:	20000df4 	.word	0x20000df4
 8004060:	20000dfc 	.word	0x20000dfc
 8004064:	20000de4 	.word	0x20000de4
 8004068:	2000090c 	.word	0x2000090c
 800406c:	20000908 	.word	0x20000908
 8004070:	20000dec 	.word	0x20000dec
 8004074:	20000df0 	.word	0x20000df0

08004078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800407e:	4b28      	ldr	r3, [pc, #160]	@ (8004120 <vTaskSwitchContext+0xa8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004086:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <vTaskSwitchContext+0xac>)
 8004088:	2201      	movs	r2, #1
 800408a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800408c:	e042      	b.n	8004114 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800408e:	4b25      	ldr	r3, [pc, #148]	@ (8004124 <vTaskSwitchContext+0xac>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004094:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <vTaskSwitchContext+0xb0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e011      	b.n	80040c0 <vTaskSwitchContext+0x48>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <vTaskSwitchContext+0x42>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	607b      	str	r3, [r7, #4]
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <vTaskSwitchContext+0x3e>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3b01      	subs	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	491a      	ldr	r1, [pc, #104]	@ (800412c <vTaskSwitchContext+0xb4>)
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0e3      	beq.n	800409c <vTaskSwitchContext+0x24>
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4a13      	ldr	r2, [pc, #76]	@ (800412c <vTaskSwitchContext+0xb4>)
 80040e0:	4413      	add	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3308      	adds	r3, #8
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d104      	bne.n	8004104 <vTaskSwitchContext+0x8c>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	4a09      	ldr	r2, [pc, #36]	@ (8004130 <vTaskSwitchContext+0xb8>)
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4a06      	ldr	r2, [pc, #24]	@ (8004128 <vTaskSwitchContext+0xb0>)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6013      	str	r3, [r2, #0]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000e04 	.word	0x20000e04
 8004124:	20000df0 	.word	0x20000df0
 8004128:	20000de4 	.word	0x20000de4
 800412c:	2000090c 	.word	0x2000090c
 8004130:	20000908 	.word	0x20000908

08004134 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	60fb      	str	r3, [r7, #12]
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	e7fd      	b.n	8004158 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800415c:	4b07      	ldr	r3, [pc, #28]	@ (800417c <vTaskPlaceOnEventList+0x48>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3318      	adds	r3, #24
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fe fdbb 	bl	8002ce0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800416a:	2101      	movs	r1, #1
 800416c:	6838      	ldr	r0, [r7, #0]
 800416e:	f000 fb73 	bl	8004858 <prvAddCurrentTaskToDelayedList>
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000908 	.word	0x20000908

08004180 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	617b      	str	r3, [r7, #20]
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	e7fd      	b.n	80041a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041aa:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3318      	adds	r3, #24
 80041b0:	4619      	mov	r1, r3
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7fe fd71 	bl	8002c9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	68b8      	ldr	r0, [r7, #8]
 80041c8:	f000 fb46 	bl	8004858 <prvAddCurrentTaskToDelayedList>
	}
 80041cc:	bf00      	nop
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20000908 	.word	0x20000908

080041d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	60fb      	str	r3, [r7, #12]
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	e7fd      	b.n	8004202 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	3318      	adds	r3, #24
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fda0 	bl	8002d50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004210:	4b1d      	ldr	r3, [pc, #116]	@ (8004288 <xTaskRemoveFromEventList+0xb0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d11d      	bne.n	8004254 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	3304      	adds	r3, #4
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe fd97 	bl	8002d50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004226:	4b19      	ldr	r3, [pc, #100]	@ (800428c <xTaskRemoveFromEventList+0xb4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d903      	bls.n	8004236 <xTaskRemoveFromEventList+0x5e>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	4a16      	ldr	r2, [pc, #88]	@ (800428c <xTaskRemoveFromEventList+0xb4>)
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4a13      	ldr	r2, [pc, #76]	@ (8004290 <xTaskRemoveFromEventList+0xb8>)
 8004244:	441a      	add	r2, r3
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	3304      	adds	r3, #4
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f7fe fd24 	bl	8002c9a <vListInsertEnd>
 8004252:	e005      	b.n	8004260 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3318      	adds	r3, #24
 8004258:	4619      	mov	r1, r3
 800425a:	480e      	ldr	r0, [pc, #56]	@ (8004294 <xTaskRemoveFromEventList+0xbc>)
 800425c:	f7fe fd1d 	bl	8002c9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004264:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <xTaskRemoveFromEventList+0xc0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	429a      	cmp	r2, r3
 800426c:	d905      	bls.n	800427a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800426e:	2301      	movs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <xTaskRemoveFromEventList+0xc4>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e001      	b.n	800427e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800427e:	697b      	ldr	r3, [r7, #20]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000e04 	.word	0x20000e04
 800428c:	20000de4 	.word	0x20000de4
 8004290:	2000090c 	.word	0x2000090c
 8004294:	20000d9c 	.word	0x20000d9c
 8004298:	20000908 	.word	0x20000908
 800429c:	20000df0 	.word	0x20000df0

080042a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042a8:	4b06      	ldr	r3, [pc, #24]	@ (80042c4 <vTaskInternalSetTimeOutState+0x24>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042b0:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <vTaskInternalSetTimeOutState+0x28>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	605a      	str	r2, [r3, #4]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000df4 	.word	0x20000df4
 80042c8:	20000de0 	.word	0x20000de0

080042cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10b      	bne.n	80042f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	613b      	str	r3, [r7, #16]
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	e7fd      	b.n	80042f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60fb      	str	r3, [r7, #12]
}
 800430c:	bf00      	nop
 800430e:	bf00      	nop
 8004310:	e7fd      	b.n	800430e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004312:	f000 ff03 	bl	800511c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004316:	4b1d      	ldr	r3, [pc, #116]	@ (800438c <xTaskCheckForTimeOut+0xc0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d102      	bne.n	8004336 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	e023      	b.n	800437e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b15      	ldr	r3, [pc, #84]	@ (8004390 <xTaskCheckForTimeOut+0xc4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d007      	beq.n	8004352 <xTaskCheckForTimeOut+0x86>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	429a      	cmp	r2, r3
 800434a:	d302      	bcc.n	8004352 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800434c:	2301      	movs	r3, #1
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	e015      	b.n	800437e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	429a      	cmp	r2, r3
 800435a:	d20b      	bcs.n	8004374 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	1ad2      	subs	r2, r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ff99 	bl	80042a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	e004      	b.n	800437e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800437a:	2301      	movs	r3, #1
 800437c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800437e:	f000 fefd 	bl	800517c <vPortExitCritical>

	return xReturn;
 8004382:	69fb      	ldr	r3, [r7, #28]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000de0 	.word	0x20000de0
 8004390:	20000df4 	.word	0x20000df4

08004394 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004398:	4b03      	ldr	r3, [pc, #12]	@ (80043a8 <vTaskMissedYield+0x14>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
}
 800439e:	bf00      	nop
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000df0 	.word	0x20000df0

080043ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043b4:	f000 f852 	bl	800445c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043b8:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <prvIdleTask+0x28>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d9f9      	bls.n	80043b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043c0:	4b05      	ldr	r3, [pc, #20]	@ (80043d8 <prvIdleTask+0x2c>)
 80043c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043d0:	e7f0      	b.n	80043b4 <prvIdleTask+0x8>
 80043d2:	bf00      	nop
 80043d4:	2000090c 	.word	0x2000090c
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043e2:	2300      	movs	r3, #0
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	e00c      	b.n	8004402 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4a12      	ldr	r2, [pc, #72]	@ (800443c <prvInitialiseTaskLists+0x60>)
 80043f4:	4413      	add	r3, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fc24 	bl	8002c44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3301      	adds	r3, #1
 8004400:	607b      	str	r3, [r7, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b37      	cmp	r3, #55	@ 0x37
 8004406:	d9ef      	bls.n	80043e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004408:	480d      	ldr	r0, [pc, #52]	@ (8004440 <prvInitialiseTaskLists+0x64>)
 800440a:	f7fe fc1b 	bl	8002c44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800440e:	480d      	ldr	r0, [pc, #52]	@ (8004444 <prvInitialiseTaskLists+0x68>)
 8004410:	f7fe fc18 	bl	8002c44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004414:	480c      	ldr	r0, [pc, #48]	@ (8004448 <prvInitialiseTaskLists+0x6c>)
 8004416:	f7fe fc15 	bl	8002c44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800441a:	480c      	ldr	r0, [pc, #48]	@ (800444c <prvInitialiseTaskLists+0x70>)
 800441c:	f7fe fc12 	bl	8002c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004420:	480b      	ldr	r0, [pc, #44]	@ (8004450 <prvInitialiseTaskLists+0x74>)
 8004422:	f7fe fc0f 	bl	8002c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004426:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <prvInitialiseTaskLists+0x78>)
 8004428:	4a05      	ldr	r2, [pc, #20]	@ (8004440 <prvInitialiseTaskLists+0x64>)
 800442a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800442c:	4b0a      	ldr	r3, [pc, #40]	@ (8004458 <prvInitialiseTaskLists+0x7c>)
 800442e:	4a05      	ldr	r2, [pc, #20]	@ (8004444 <prvInitialiseTaskLists+0x68>)
 8004430:	601a      	str	r2, [r3, #0]
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	2000090c 	.word	0x2000090c
 8004440:	20000d6c 	.word	0x20000d6c
 8004444:	20000d80 	.word	0x20000d80
 8004448:	20000d9c 	.word	0x20000d9c
 800444c:	20000db0 	.word	0x20000db0
 8004450:	20000dc8 	.word	0x20000dc8
 8004454:	20000d94 	.word	0x20000d94
 8004458:	20000d98 	.word	0x20000d98

0800445c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004462:	e019      	b.n	8004498 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004464:	f000 fe5a 	bl	800511c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004468:	4b10      	ldr	r3, [pc, #64]	@ (80044ac <prvCheckTasksWaitingTermination+0x50>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe fc6b 	bl	8002d50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <prvCheckTasksWaitingTermination+0x54>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3b01      	subs	r3, #1
 8004480:	4a0b      	ldr	r2, [pc, #44]	@ (80044b0 <prvCheckTasksWaitingTermination+0x54>)
 8004482:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004484:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <prvCheckTasksWaitingTermination+0x58>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3b01      	subs	r3, #1
 800448a:	4a0a      	ldr	r2, [pc, #40]	@ (80044b4 <prvCheckTasksWaitingTermination+0x58>)
 800448c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800448e:	f000 fe75 	bl	800517c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f810 	bl	80044b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <prvCheckTasksWaitingTermination+0x58>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e1      	bne.n	8004464 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000db0 	.word	0x20000db0
 80044b0:	20000ddc 	.word	0x20000ddc
 80044b4:	20000dc4 	.word	0x20000dc4

080044b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d108      	bne.n	80044dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 ffee 	bl	80054b0 <vPortFree>
				vPortFree( pxTCB );
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 ffeb 	bl	80054b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044da:	e019      	b.n	8004510 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d103      	bne.n	80044ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 ffe2 	bl	80054b0 <vPortFree>
	}
 80044ec:	e010      	b.n	8004510 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d00b      	beq.n	8004510 <prvDeleteTCB+0x58>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	60fb      	str	r3, [r7, #12]
}
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	e7fd      	b.n	800450c <prvDeleteTCB+0x54>
	}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800451e:	4b0e      	ldr	r3, [pc, #56]	@ (8004558 <prvResetNextTaskUnblockTime+0x40>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <prvResetNextTaskUnblockTime+0x14>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <prvResetNextTaskUnblockTime+0x16>
 800452c:	2300      	movs	r3, #0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004532:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <prvResetNextTaskUnblockTime+0x44>)
 8004534:	f04f 32ff 	mov.w	r2, #4294967295
 8004538:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800453a:	e008      	b.n	800454e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800453c:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <prvResetNextTaskUnblockTime+0x40>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4a04      	ldr	r2, [pc, #16]	@ (800455c <prvResetNextTaskUnblockTime+0x44>)
 800454c:	6013      	str	r3, [r2, #0]
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	20000d94 	.word	0x20000d94
 800455c:	20000dfc 	.word	0x20000dfc

08004560 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004566:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <xTaskGetSchedulerState+0x34>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800456e:	2301      	movs	r3, #1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	e008      	b.n	8004586 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004574:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <xTaskGetSchedulerState+0x38>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800457c:	2302      	movs	r3, #2
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	e001      	b.n	8004586 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004586:	687b      	ldr	r3, [r7, #4]
	}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000de8 	.word	0x20000de8
 8004598:	20000e04 	.word	0x20000e04

0800459c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d058      	beq.n	8004664 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004670 <xTaskPriorityDisinherit+0xd4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d00b      	beq.n	80045d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	60fb      	str	r3, [r7, #12]
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	60bb      	str	r3, [r7, #8]
}
 80045ee:	bf00      	nop
 80045f0:	bf00      	nop
 80045f2:	e7fd      	b.n	80045f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f8:	1e5a      	subs	r2, r3, #1
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004606:	429a      	cmp	r2, r3
 8004608:	d02c      	beq.n	8004664 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460e:	2b00      	cmp	r3, #0
 8004610:	d128      	bne.n	8004664 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	3304      	adds	r3, #4
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe fb9a 	bl	8002d50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004634:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <xTaskPriorityDisinherit+0xd8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d903      	bls.n	8004644 <xTaskPriorityDisinherit+0xa8>
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	4a0c      	ldr	r2, [pc, #48]	@ (8004674 <xTaskPriorityDisinherit+0xd8>)
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4a09      	ldr	r2, [pc, #36]	@ (8004678 <xTaskPriorityDisinherit+0xdc>)
 8004652:	441a      	add	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f7fe fb1d 	bl	8002c9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004660:	2301      	movs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004664:	697b      	ldr	r3, [r7, #20]
	}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000908 	.word	0x20000908
 8004674:	20000de4 	.word	0x20000de4
 8004678:	2000090c 	.word	0x2000090c

0800467c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004686:	f000 fd49 	bl	800511c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800468a:	4b1e      	ldr	r3, [pc, #120]	@ (8004704 <ulTaskNotifyTake+0x88>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004690:	2b00      	cmp	r3, #0
 8004692:	d113      	bne.n	80046bc <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004694:	4b1b      	ldr	r3, [pc, #108]	@ (8004704 <ulTaskNotifyTake+0x88>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046a4:	2101      	movs	r1, #1
 80046a6:	6838      	ldr	r0, [r7, #0]
 80046a8:	f000 f8d6 	bl	8004858 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80046ac:	4b16      	ldr	r3, [pc, #88]	@ (8004708 <ulTaskNotifyTake+0x8c>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80046bc:	f000 fd5e 	bl	800517c <vPortExitCritical>

		taskENTER_CRITICAL();
 80046c0:	f000 fd2c 	bl	800511c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80046c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004704 <ulTaskNotifyTake+0x88>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ca:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80046d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004704 <ulTaskNotifyTake+0x88>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2200      	movs	r2, #0
 80046de:	655a      	str	r2, [r3, #84]	@ 0x54
 80046e0:	e004      	b.n	80046ec <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80046e2:	4b08      	ldr	r3, [pc, #32]	@ (8004704 <ulTaskNotifyTake+0x88>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	3a01      	subs	r2, #1
 80046ea:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046ec:	4b05      	ldr	r3, [pc, #20]	@ (8004704 <ulTaskNotifyTake+0x88>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 80046f6:	f000 fd41 	bl	800517c <vPortExitCritical>

		return ulReturn;
 80046fa:	68fb      	ldr	r3, [r7, #12]
	}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	20000908 	.word	0x20000908
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	@ 0x28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800471c:	2301      	movs	r3, #1
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10b      	bne.n	800473e <xTaskGenericNotify+0x32>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	61bb      	str	r3, [r7, #24]
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	e7fd      	b.n	800473a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004742:	f000 fceb 	bl	800511c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800475a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	2b04      	cmp	r3, #4
 8004768:	d827      	bhi.n	80047ba <xTaskGenericNotify+0xae>
 800476a:	a201      	add	r2, pc, #4	@ (adr r2, 8004770 <xTaskGenericNotify+0x64>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	080047bb 	.word	0x080047bb
 8004774:	08004785 	.word	0x08004785
 8004778:	08004793 	.word	0x08004793
 800477c:	0800479f 	.word	0x0800479f
 8004780:	080047a7 	.word	0x080047a7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	431a      	orrs	r2, r3
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8004790:	e013      	b.n	80047ba <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800479c:	e00d      	b.n	80047ba <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80047a4:	e009      	b.n	80047ba <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80047a6:	7ffb      	ldrb	r3, [r7, #31]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d003      	beq.n	80047b4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80047b2:	e001      	b.n	80047b8 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80047b8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80047ba:	7ffb      	ldrb	r3, [r7, #31]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d13b      	bne.n	8004838 <xTaskGenericNotify+0x12c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe fac3 	bl	8002d50 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004848 <xTaskGenericNotify+0x13c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d903      	bls.n	80047de <xTaskGenericNotify+0xd2>
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	4a1b      	ldr	r2, [pc, #108]	@ (8004848 <xTaskGenericNotify+0x13c>)
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4a18      	ldr	r2, [pc, #96]	@ (800484c <xTaskGenericNotify+0x140>)
 80047ec:	441a      	add	r2, r3
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7fe fa50 	bl	8002c9a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00b      	beq.n	800481a <xTaskGenericNotify+0x10e>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	617b      	str	r3, [r7, #20]
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop
 8004818:	e7fd      	b.n	8004816 <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481e:	4b0c      	ldr	r3, [pc, #48]	@ (8004850 <xTaskGenericNotify+0x144>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	429a      	cmp	r2, r3
 8004826:	d907      	bls.n	8004838 <xTaskGenericNotify+0x12c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004828:	4b0a      	ldr	r3, [pc, #40]	@ (8004854 <xTaskGenericNotify+0x148>)
 800482a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004838:	f000 fca0 	bl	800517c <vPortExitCritical>

		return xReturn;
 800483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800483e:	4618      	mov	r0, r3
 8004840:	3728      	adds	r7, #40	@ 0x28
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000de4 	.word	0x20000de4
 800484c:	2000090c 	.word	0x2000090c
 8004850:	20000908 	.word	0x20000908
 8004854:	e000ed04 	.word	0xe000ed04

08004858 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004862:	4b21      	ldr	r3, [pc, #132]	@ (80048e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004868:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <prvAddCurrentTaskToDelayedList+0x94>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3304      	adds	r3, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fa6e 	bl	8002d50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d10a      	bne.n	8004892 <prvAddCurrentTaskToDelayedList+0x3a>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004882:	4b1a      	ldr	r3, [pc, #104]	@ (80048ec <prvAddCurrentTaskToDelayedList+0x94>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3304      	adds	r3, #4
 8004888:	4619      	mov	r1, r3
 800488a:	4819      	ldr	r0, [pc, #100]	@ (80048f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800488c:	f7fe fa05 	bl	8002c9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004890:	e026      	b.n	80048e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4413      	add	r3, r2
 8004898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800489a:	4b14      	ldr	r3, [pc, #80]	@ (80048ec <prvAddCurrentTaskToDelayedList+0x94>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d209      	bcs.n	80048be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b0f      	ldr	r3, [pc, #60]	@ (80048ec <prvAddCurrentTaskToDelayedList+0x94>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f7fe fa12 	bl	8002ce0 <vListInsert>
}
 80048bc:	e010      	b.n	80048e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048be:	4b0e      	ldr	r3, [pc, #56]	@ (80048f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b0a      	ldr	r3, [pc, #40]	@ (80048ec <prvAddCurrentTaskToDelayedList+0x94>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f7fe fa08 	bl	8002ce0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048d0:	4b0a      	ldr	r3, [pc, #40]	@ (80048fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d202      	bcs.n	80048e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80048da:	4a08      	ldr	r2, [pc, #32]	@ (80048fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000de0 	.word	0x20000de0
 80048ec:	20000908 	.word	0x20000908
 80048f0:	20000dc8 	.word	0x20000dc8
 80048f4:	20000d98 	.word	0x20000d98
 80048f8:	20000d94 	.word	0x20000d94
 80048fc:	20000dfc 	.word	0x20000dfc

08004900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800490a:	f000 fad9 	bl	8004ec0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800490e:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <xTimerCreateTimerTask+0x84>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d021      	beq.n	800495a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800491e:	1d3a      	adds	r2, r7, #4
 8004920:	f107 0108 	add.w	r1, r7, #8
 8004924:	f107 030c 	add.w	r3, r7, #12
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe f971 	bl	8002c10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	9202      	str	r2, [sp, #8]
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	2302      	movs	r3, #2
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2300      	movs	r3, #0
 800493e:	460a      	mov	r2, r1
 8004940:	4911      	ldr	r1, [pc, #68]	@ (8004988 <xTimerCreateTimerTask+0x88>)
 8004942:	4812      	ldr	r0, [pc, #72]	@ (800498c <xTimerCreateTimerTask+0x8c>)
 8004944:	f7fe ffe4 	bl	8003910 <xTaskCreateStatic>
 8004948:	4603      	mov	r3, r0
 800494a:	4a11      	ldr	r2, [pc, #68]	@ (8004990 <xTimerCreateTimerTask+0x90>)
 800494c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800494e:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <xTimerCreateTimerTask+0x90>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004956:	2301      	movs	r3, #1
 8004958:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10b      	bne.n	8004978 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	613b      	str	r3, [r7, #16]
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004978:	697b      	ldr	r3, [r7, #20]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000e38 	.word	0x20000e38
 8004988:	080057dc 	.word	0x080057dc
 800498c:	08004ab5 	.word	0x08004ab5
 8004990:	20000e3c 	.word	0x20000e3c

08004994 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	@ 0x28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	623b      	str	r3, [r7, #32]
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	e7fd      	b.n	80049c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049c4:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <xTimerGenericCommand+0x98>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02a      	beq.n	8004a22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b05      	cmp	r3, #5
 80049dc:	dc18      	bgt.n	8004a10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049de:	f7ff fdbf 	bl	8004560 <xTaskGetSchedulerState>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d109      	bne.n	80049fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049e8:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <xTimerGenericCommand+0x98>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	f107 0110 	add.w	r1, r7, #16
 80049f0:	2300      	movs	r3, #0
 80049f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f4:	f7fe fb1e 	bl	8003034 <xQueueGenericSend>
 80049f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80049fa:	e012      	b.n	8004a22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049fc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <xTimerGenericCommand+0x98>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	f107 0110 	add.w	r1, r7, #16
 8004a04:	2300      	movs	r3, #0
 8004a06:	2200      	movs	r2, #0
 8004a08:	f7fe fb14 	bl	8003034 <xQueueGenericSend>
 8004a0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a0e:	e008      	b.n	8004a22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a10:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <xTimerGenericCommand+0x98>)
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	f107 0110 	add.w	r1, r7, #16
 8004a18:	2300      	movs	r3, #0
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	f7fe fc0c 	bl	8003238 <xQueueGenericSendFromISR>
 8004a20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3728      	adds	r7, #40	@ 0x28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000e38 	.word	0x20000e38

08004a30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab0 <prvProcessExpiredTimer+0x80>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe f981 	bl	8002d50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d123      	bne.n	8004a9e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	18d1      	adds	r1, r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	6978      	ldr	r0, [r7, #20]
 8004a64:	f000 f8cc 	bl	8004c00 <prvInsertTimerInActiveList>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d017      	beq.n	8004a9e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a6e:	2300      	movs	r3, #0
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	2100      	movs	r1, #0
 8004a78:	6978      	ldr	r0, [r7, #20]
 8004a7a:	f7ff ff8b 	bl	8004994 <xTimerGenericCommand>
 8004a7e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10b      	bne.n	8004a9e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	60fb      	str	r3, [r7, #12]
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	e7fd      	b.n	8004a9a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	6978      	ldr	r0, [r7, #20]
 8004aa4:	4798      	blx	r3
}
 8004aa6:	bf00      	nop
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000e30 	.word	0x20000e30

08004ab4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004abc:	f107 0308 	add.w	r3, r7, #8
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f859 	bl	8004b78 <prvGetNextExpireTime>
 8004ac6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4619      	mov	r1, r3
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f805 	bl	8004adc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ad2:	f000 f8d7 	bl	8004c84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ad6:	bf00      	nop
 8004ad8:	e7f0      	b.n	8004abc <prvTimerTask+0x8>
	...

08004adc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ae6:	f7ff f94d 	bl	8003d84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004aea:	f107 0308 	add.w	r3, r7, #8
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f866 	bl	8004bc0 <prvSampleTimeNow>
 8004af4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d130      	bne.n	8004b5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <prvProcessTimerOrBlockTask+0x3c>
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d806      	bhi.n	8004b18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b0a:	f7ff f949 	bl	8003da0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff8d 	bl	8004a30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b16:	e024      	b.n	8004b62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b1e:	4b13      	ldr	r3, [pc, #76]	@ (8004b6c <prvProcessTimerOrBlockTask+0x90>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b30:	4b0f      	ldr	r3, [pc, #60]	@ (8004b70 <prvProcessTimerOrBlockTask+0x94>)
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f7fe feb3 	bl	80038a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b42:	f7ff f92d 	bl	8003da0 <xTaskResumeAll>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b4c:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <prvProcessTimerOrBlockTask+0x98>)
 8004b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	f3bf 8f6f 	isb	sy
}
 8004b5c:	e001      	b.n	8004b62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b5e:	f7ff f91f 	bl	8003da0 <xTaskResumeAll>
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000e34 	.word	0x20000e34
 8004b70:	20000e38 	.word	0x20000e38
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b80:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <prvGetNextExpireTime+0x44>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf0c      	ite	eq
 8004b8a:	2301      	moveq	r3, #1
 8004b8c:	2300      	movne	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d105      	bne.n	8004baa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b9e:	4b07      	ldr	r3, [pc, #28]	@ (8004bbc <prvGetNextExpireTime+0x44>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e001      	b.n	8004bae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004bae:	68fb      	ldr	r3, [r7, #12]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000e30 	.word	0x20000e30

08004bc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bc8:	f7ff f988 	bl	8003edc <xTaskGetTickCount>
 8004bcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bce:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <prvSampleTimeNow+0x3c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d205      	bcs.n	8004be4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bd8:	f000 f910 	bl	8004dfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e002      	b.n	8004bea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bea:	4a04      	ldr	r2, [pc, #16]	@ (8004bfc <prvSampleTimeNow+0x3c>)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000e40 	.word	0x20000e40

08004c00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d812      	bhi.n	8004c4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d302      	bcc.n	8004c3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	e01b      	b.n	8004c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c3a:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <prvInsertTimerInActiveList+0x7c>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4619      	mov	r1, r3
 8004c44:	4610      	mov	r0, r2
 8004c46:	f7fe f84b 	bl	8002ce0 <vListInsert>
 8004c4a:	e012      	b.n	8004c72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d206      	bcs.n	8004c62 <prvInsertTimerInActiveList+0x62>
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d302      	bcc.n	8004c62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e007      	b.n	8004c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c62:	4b07      	ldr	r3, [pc, #28]	@ (8004c80 <prvInsertTimerInActiveList+0x80>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7fe f837 	bl	8002ce0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c72:	697b      	ldr	r3, [r7, #20]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000e34 	.word	0x20000e34
 8004c80:	20000e30 	.word	0x20000e30

08004c84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08e      	sub	sp, #56	@ 0x38
 8004c88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c8a:	e0a5      	b.n	8004dd8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	da19      	bge.n	8004cc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c92:	1d3b      	adds	r3, r7, #4
 8004c94:	3304      	adds	r3, #4
 8004c96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	61fb      	str	r3, [r7, #28]
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	e7fd      	b.n	8004cb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cbc:	6850      	ldr	r0, [r2, #4]
 8004cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f2c0 8085 	blt.w	8004dd8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d004      	beq.n	8004ce4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe f836 	bl	8002d50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff ff6a 	bl	8004bc0 <prvSampleTimeNow>
 8004cec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b09      	cmp	r3, #9
 8004cf2:	d86c      	bhi.n	8004dce <prvProcessReceivedCommands+0x14a>
 8004cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cfc <prvProcessReceivedCommands+0x78>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004dcf 	.word	0x08004dcf
 8004d0c:	08004d83 	.word	0x08004d83
 8004d10:	08004dbd 	.word	0x08004dbd
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d25 	.word	0x08004d25
 8004d1c:	08004dcf 	.word	0x08004dcf
 8004d20:	08004d83 	.word	0x08004d83
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	18d1      	adds	r1, r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d32:	f7ff ff65 	bl	8004c00 <prvInsertTimerInActiveList>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d04a      	beq.n	8004dd2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d42:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d142      	bne.n	8004dd2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	441a      	add	r2, r3
 8004d54:	2300      	movs	r3, #0
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d5e:	f7ff fe19 	bl	8004994 <xTimerGenericCommand>
 8004d62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d133      	bne.n	8004dd2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	61bb      	str	r3, [r7, #24]
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	e7fd      	b.n	8004d7e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	617b      	str	r3, [r7, #20]
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004daa:	699a      	ldr	r2, [r3, #24]
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	18d1      	adds	r1, r2, r3
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004db6:	f7ff ff23 	bl	8004c00 <prvInsertTimerInActiveList>
					break;
 8004dba:	e00d      	b.n	8004dd8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d107      	bne.n	8004dd6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8004dc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dc8:	f000 fb72 	bl	80054b0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004dcc:	e003      	b.n	8004dd6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8004dce:	bf00      	nop
 8004dd0:	e002      	b.n	8004dd8 <prvProcessReceivedCommands+0x154>
					break;
 8004dd2:	bf00      	nop
 8004dd4:	e000      	b.n	8004dd8 <prvProcessReceivedCommands+0x154>
					break;
 8004dd6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dd8:	4b07      	ldr	r3, [pc, #28]	@ (8004df8 <prvProcessReceivedCommands+0x174>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	1d39      	adds	r1, r7, #4
 8004dde:	2200      	movs	r2, #0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe fac5 	bl	8003370 <xQueueReceive>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f47f af4f 	bne.w	8004c8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004dee:	bf00      	nop
 8004df0:	bf00      	nop
 8004df2:	3730      	adds	r7, #48	@ 0x30
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000e38 	.word	0x20000e38

08004dfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e02:	e046      	b.n	8004e92 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e04:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb8 <prvSwitchTimerLists+0xbc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb8 <prvSwitchTimerLists+0xbc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fd ff97 	bl	8002d50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d12f      	bne.n	8004e92 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d90e      	bls.n	8004e62 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e50:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <prvSwitchTimerLists+0xbc>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f7fd ff40 	bl	8002ce0 <vListInsert>
 8004e60:	e017      	b.n	8004e92 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e62:	2300      	movs	r3, #0
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	2300      	movs	r3, #0
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f7ff fd91 	bl	8004994 <xTimerGenericCommand>
 8004e72:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <prvSwitchTimerLists+0x96>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	603b      	str	r3, [r7, #0]
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	e7fd      	b.n	8004e8e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e92:	4b09      	ldr	r3, [pc, #36]	@ (8004eb8 <prvSwitchTimerLists+0xbc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1b3      	bne.n	8004e04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <prvSwitchTimerLists+0xbc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ea2:	4b06      	ldr	r3, [pc, #24]	@ (8004ebc <prvSwitchTimerLists+0xc0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a04      	ldr	r2, [pc, #16]	@ (8004eb8 <prvSwitchTimerLists+0xbc>)
 8004ea8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004eaa:	4a04      	ldr	r2, [pc, #16]	@ (8004ebc <prvSwitchTimerLists+0xc0>)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	6013      	str	r3, [r2, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20000e30 	.word	0x20000e30
 8004ebc:	20000e34 	.word	0x20000e34

08004ec0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ec6:	f000 f929 	bl	800511c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004eca:	4b15      	ldr	r3, [pc, #84]	@ (8004f20 <prvCheckForValidListAndQueue+0x60>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d120      	bne.n	8004f14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ed2:	4814      	ldr	r0, [pc, #80]	@ (8004f24 <prvCheckForValidListAndQueue+0x64>)
 8004ed4:	f7fd feb6 	bl	8002c44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ed8:	4813      	ldr	r0, [pc, #76]	@ (8004f28 <prvCheckForValidListAndQueue+0x68>)
 8004eda:	f7fd feb3 	bl	8002c44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ede:	4b13      	ldr	r3, [pc, #76]	@ (8004f2c <prvCheckForValidListAndQueue+0x6c>)
 8004ee0:	4a10      	ldr	r2, [pc, #64]	@ (8004f24 <prvCheckForValidListAndQueue+0x64>)
 8004ee2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ee4:	4b12      	ldr	r3, [pc, #72]	@ (8004f30 <prvCheckForValidListAndQueue+0x70>)
 8004ee6:	4a10      	ldr	r2, [pc, #64]	@ (8004f28 <prvCheckForValidListAndQueue+0x68>)
 8004ee8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004eea:	2300      	movs	r3, #0
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	4b11      	ldr	r3, [pc, #68]	@ (8004f34 <prvCheckForValidListAndQueue+0x74>)
 8004ef0:	4a11      	ldr	r2, [pc, #68]	@ (8004f38 <prvCheckForValidListAndQueue+0x78>)
 8004ef2:	2110      	movs	r1, #16
 8004ef4:	200a      	movs	r0, #10
 8004ef6:	f7fd ffbf 	bl	8002e78 <xQueueGenericCreateStatic>
 8004efa:	4603      	mov	r3, r0
 8004efc:	4a08      	ldr	r2, [pc, #32]	@ (8004f20 <prvCheckForValidListAndQueue+0x60>)
 8004efe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f00:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <prvCheckForValidListAndQueue+0x60>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <prvCheckForValidListAndQueue+0x60>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	490b      	ldr	r1, [pc, #44]	@ (8004f3c <prvCheckForValidListAndQueue+0x7c>)
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe fca2 	bl	8003858 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f14:	f000 f932 	bl	800517c <vPortExitCritical>
}
 8004f18:	bf00      	nop
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000e38 	.word	0x20000e38
 8004f24:	20000e08 	.word	0x20000e08
 8004f28:	20000e1c 	.word	0x20000e1c
 8004f2c:	20000e30 	.word	0x20000e30
 8004f30:	20000e34 	.word	0x20000e34
 8004f34:	20000ee4 	.word	0x20000ee4
 8004f38:	20000e44 	.word	0x20000e44
 8004f3c:	080057e4 	.word	0x080057e4

08004f40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3b04      	subs	r3, #4
 8004f50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3b04      	subs	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f023 0201 	bic.w	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3b04      	subs	r3, #4
 8004f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f70:	4a08      	ldr	r2, [pc, #32]	@ (8004f94 <pxPortInitialiseStack+0x54>)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3b14      	subs	r3, #20
 8004f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3b20      	subs	r3, #32
 8004f86:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f88:	68fb      	ldr	r3, [r7, #12]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	08004f99 	.word	0x08004f99

08004f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fa2:	4b12      	ldr	r3, [pc, #72]	@ (8004fec <prvTaskExitError+0x54>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d00b      	beq.n	8004fc4 <prvTaskExitError+0x2c>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60fb      	str	r3, [r7, #12]
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	e7fd      	b.n	8004fc0 <prvTaskExitError+0x28>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	60bb      	str	r3, [r7, #8]
}
 8004fd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fd8:	bf00      	nop
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0fc      	beq.n	8004fda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr
 8004fec:	2000000c 	.word	0x2000000c

08004ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ff0:	4b07      	ldr	r3, [pc, #28]	@ (8005010 <pxCurrentTCBConst2>)
 8004ff2:	6819      	ldr	r1, [r3, #0]
 8004ff4:	6808      	ldr	r0, [r1, #0]
 8004ff6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ffa:	f380 8809 	msr	PSP, r0
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f380 8811 	msr	BASEPRI, r0
 800500a:	f04e 0e0d 	orr.w	lr, lr, #13
 800500e:	4770      	bx	lr

08005010 <pxCurrentTCBConst2>:
 8005010:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005018:	4806      	ldr	r0, [pc, #24]	@ (8005034 <prvPortStartFirstTask+0x1c>)
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	6800      	ldr	r0, [r0, #0]
 800501e:	f380 8808 	msr	MSP, r0
 8005022:	b662      	cpsie	i
 8005024:	b661      	cpsie	f
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	df00      	svc	0
 8005030:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005032:	bf00      	nop
 8005034:	e000ed08 	.word	0xe000ed08

08005038 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800503e:	4b32      	ldr	r3, [pc, #200]	@ (8005108 <xPortStartScheduler+0xd0>)
 8005040:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	22ff      	movs	r2, #255	@ 0xff
 800504e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005060:	b2da      	uxtb	r2, r3
 8005062:	4b2a      	ldr	r3, [pc, #168]	@ (800510c <xPortStartScheduler+0xd4>)
 8005064:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005066:	4b2a      	ldr	r3, [pc, #168]	@ (8005110 <xPortStartScheduler+0xd8>)
 8005068:	2207      	movs	r2, #7
 800506a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800506c:	e009      	b.n	8005082 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800506e:	4b28      	ldr	r3, [pc, #160]	@ (8005110 <xPortStartScheduler+0xd8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3b01      	subs	r3, #1
 8005074:	4a26      	ldr	r2, [pc, #152]	@ (8005110 <xPortStartScheduler+0xd8>)
 8005076:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	2b80      	cmp	r3, #128	@ 0x80
 800508c:	d0ef      	beq.n	800506e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800508e:	4b20      	ldr	r3, [pc, #128]	@ (8005110 <xPortStartScheduler+0xd8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1c3 0307 	rsb	r3, r3, #7
 8005096:	2b04      	cmp	r3, #4
 8005098:	d00b      	beq.n	80050b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	60bb      	str	r3, [r7, #8]
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050b2:	4b17      	ldr	r3, [pc, #92]	@ (8005110 <xPortStartScheduler+0xd8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	4a15      	ldr	r2, [pc, #84]	@ (8005110 <xPortStartScheduler+0xd8>)
 80050ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050bc:	4b14      	ldr	r3, [pc, #80]	@ (8005110 <xPortStartScheduler+0xd8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050c4:	4a12      	ldr	r2, [pc, #72]	@ (8005110 <xPortStartScheduler+0xd8>)
 80050c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050d0:	4b10      	ldr	r3, [pc, #64]	@ (8005114 <xPortStartScheduler+0xdc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a0f      	ldr	r2, [pc, #60]	@ (8005114 <xPortStartScheduler+0xdc>)
 80050d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <xPortStartScheduler+0xdc>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005114 <xPortStartScheduler+0xdc>)
 80050e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80050e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050e8:	f000 f8b8 	bl	800525c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005118 <xPortStartScheduler+0xe0>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050f2:	f7ff ff91 	bl	8005018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050f6:	f7fe ffbf 	bl	8004078 <vTaskSwitchContext>
	prvTaskExitError();
 80050fa:	f7ff ff4d 	bl	8004f98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	e000e400 	.word	0xe000e400
 800510c:	20000f34 	.word	0x20000f34
 8005110:	20000f38 	.word	0x20000f38
 8005114:	e000ed20 	.word	0xe000ed20
 8005118:	2000000c 	.word	0x2000000c

0800511c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	607b      	str	r3, [r7, #4]
}
 8005134:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005136:	4b0f      	ldr	r3, [pc, #60]	@ (8005174 <vPortEnterCritical+0x58>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3301      	adds	r3, #1
 800513c:	4a0d      	ldr	r2, [pc, #52]	@ (8005174 <vPortEnterCritical+0x58>)
 800513e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005140:	4b0c      	ldr	r3, [pc, #48]	@ (8005174 <vPortEnterCritical+0x58>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d110      	bne.n	800516a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005148:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <vPortEnterCritical+0x5c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <vPortEnterCritical+0x4e>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	603b      	str	r3, [r7, #0]
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <vPortEnterCritical+0x4a>
	}
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr
 8005174:	2000000c 	.word	0x2000000c
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005182:	4b12      	ldr	r3, [pc, #72]	@ (80051cc <vPortExitCritical+0x50>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <vPortExitCritical+0x26>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	607b      	str	r3, [r7, #4]
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051a2:	4b0a      	ldr	r3, [pc, #40]	@ (80051cc <vPortExitCritical+0x50>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	4a08      	ldr	r2, [pc, #32]	@ (80051cc <vPortExitCritical+0x50>)
 80051aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051ac:	4b07      	ldr	r3, [pc, #28]	@ (80051cc <vPortExitCritical+0x50>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d105      	bne.n	80051c0 <vPortExitCritical+0x44>
 80051b4:	2300      	movs	r3, #0
 80051b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f383 8811 	msr	BASEPRI, r3
}
 80051be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	2000000c 	.word	0x2000000c

080051d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051d0:	f3ef 8009 	mrs	r0, PSP
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <pxCurrentTCBConst>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051e0:	6010      	str	r0, [r2, #0]
 80051e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80051ea:	f380 8811 	msr	BASEPRI, r0
 80051ee:	f7fe ff43 	bl	8004078 <vTaskSwitchContext>
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8811 	msr	BASEPRI, r0
 80051fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	6808      	ldr	r0, [r1, #0]
 8005202:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005206:	f380 8809 	msr	PSP, r0
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	4770      	bx	lr

08005210 <pxCurrentTCBConst>:
 8005210:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop

08005218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005232:	f7fe fe61 	bl	8003ef8 <xTaskIncrementTick>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800523c:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <xPortSysTickHandler+0x40>)
 800523e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	2300      	movs	r3, #0
 8005246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f383 8811 	msr	BASEPRI, r3
}
 800524e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005260:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <vPortSetupTimerInterrupt+0x30>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005266:	4b0a      	ldr	r3, [pc, #40]	@ (8005290 <vPortSetupTimerInterrupt+0x34>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800526c:	4b09      	ldr	r3, [pc, #36]	@ (8005294 <vPortSetupTimerInterrupt+0x38>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a09      	ldr	r2, [pc, #36]	@ (8005298 <vPortSetupTimerInterrupt+0x3c>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	4a08      	ldr	r2, [pc, #32]	@ (800529c <vPortSetupTimerInterrupt+0x40>)
 800527a:	3b01      	subs	r3, #1
 800527c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800527e:	4b03      	ldr	r3, [pc, #12]	@ (800528c <vPortSetupTimerInterrupt+0x30>)
 8005280:	2207      	movs	r2, #7
 8005282:	601a      	str	r2, [r3, #0]
}
 8005284:	bf00      	nop
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr
 800528c:	e000e010 	.word	0xe000e010
 8005290:	e000e018 	.word	0xe000e018
 8005294:	20000000 	.word	0x20000000
 8005298:	10624dd3 	.word	0x10624dd3
 800529c:	e000e014 	.word	0xe000e014

080052a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052a6:	f3ef 8305 	mrs	r3, IPSR
 80052aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b0f      	cmp	r3, #15
 80052b0:	d915      	bls.n	80052de <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052b2:	4a17      	ldr	r2, [pc, #92]	@ (8005310 <vPortValidateInterruptPriority+0x70>)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052bc:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <vPortValidateInterruptPriority+0x74>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	7afa      	ldrb	r2, [r7, #11]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d20b      	bcs.n	80052de <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	607b      	str	r3, [r7, #4]
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	e7fd      	b.n	80052da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052de:	4b0e      	ldr	r3, [pc, #56]	@ (8005318 <vPortValidateInterruptPriority+0x78>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052e6:	4b0d      	ldr	r3, [pc, #52]	@ (800531c <vPortValidateInterruptPriority+0x7c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d90b      	bls.n	8005306 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	603b      	str	r3, [r7, #0]
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <vPortValidateInterruptPriority+0x62>
	}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr
 8005310:	e000e3f0 	.word	0xe000e3f0
 8005314:	20000f34 	.word	0x20000f34
 8005318:	e000ed0c 	.word	0xe000ed0c
 800531c:	20000f38 	.word	0x20000f38

08005320 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	@ 0x28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800532c:	f7fe fd2a 	bl	8003d84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005330:	4b5a      	ldr	r3, [pc, #360]	@ (800549c <pvPortMalloc+0x17c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005338:	f000 f916 	bl	8005568 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800533c:	4b58      	ldr	r3, [pc, #352]	@ (80054a0 <pvPortMalloc+0x180>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4013      	ands	r3, r2
 8005344:	2b00      	cmp	r3, #0
 8005346:	f040 8090 	bne.w	800546a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01e      	beq.n	800538e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005350:	2208      	movs	r2, #8
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4413      	add	r3, r2
 8005356:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b00      	cmp	r3, #0
 8005360:	d015      	beq.n	800538e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f023 0307 	bic.w	r3, r3, #7
 8005368:	3308      	adds	r3, #8
 800536a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <pvPortMalloc+0x6e>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	617b      	str	r3, [r7, #20]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d06a      	beq.n	800546a <pvPortMalloc+0x14a>
 8005394:	4b43      	ldr	r3, [pc, #268]	@ (80054a4 <pvPortMalloc+0x184>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d865      	bhi.n	800546a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800539e:	4b42      	ldr	r3, [pc, #264]	@ (80054a8 <pvPortMalloc+0x188>)
 80053a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053a2:	4b41      	ldr	r3, [pc, #260]	@ (80054a8 <pvPortMalloc+0x188>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053a8:	e004      	b.n	80053b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d903      	bls.n	80053c6 <pvPortMalloc+0xa6>
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f1      	bne.n	80053aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053c6:	4b35      	ldr	r3, [pc, #212]	@ (800549c <pvPortMalloc+0x17c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d04c      	beq.n	800546a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2208      	movs	r2, #8
 80053d6:	4413      	add	r3, r2
 80053d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	1ad2      	subs	r2, r2, r3
 80053ea:	2308      	movs	r3, #8
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d920      	bls.n	8005434 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4413      	add	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <pvPortMalloc+0xfc>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	613b      	str	r3, [r7, #16]
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800542e:	69b8      	ldr	r0, [r7, #24]
 8005430:	f000 f8fc 	bl	800562c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005434:	4b1b      	ldr	r3, [pc, #108]	@ (80054a4 <pvPortMalloc+0x184>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	4a19      	ldr	r2, [pc, #100]	@ (80054a4 <pvPortMalloc+0x184>)
 8005440:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005442:	4b18      	ldr	r3, [pc, #96]	@ (80054a4 <pvPortMalloc+0x184>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	4b19      	ldr	r3, [pc, #100]	@ (80054ac <pvPortMalloc+0x18c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d203      	bcs.n	8005456 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800544e:	4b15      	ldr	r3, [pc, #84]	@ (80054a4 <pvPortMalloc+0x184>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a16      	ldr	r2, [pc, #88]	@ (80054ac <pvPortMalloc+0x18c>)
 8005454:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	4b11      	ldr	r3, [pc, #68]	@ (80054a0 <pvPortMalloc+0x180>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	431a      	orrs	r2, r3
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800546a:	f7fe fc99 	bl	8003da0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <pvPortMalloc+0x170>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	60fb      	str	r3, [r7, #12]
}
 800548a:	bf00      	nop
 800548c:	bf00      	nop
 800548e:	e7fd      	b.n	800548c <pvPortMalloc+0x16c>
	return pvReturn;
 8005490:	69fb      	ldr	r3, [r7, #28]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3728      	adds	r7, #40	@ 0x28
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20001b44 	.word	0x20001b44
 80054a0:	20001b50 	.word	0x20001b50
 80054a4:	20001b48 	.word	0x20001b48
 80054a8:	20001b3c 	.word	0x20001b3c
 80054ac:	20001b4c 	.word	0x20001b4c

080054b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d04a      	beq.n	8005558 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054c2:	2308      	movs	r3, #8
 80054c4:	425b      	negs	r3, r3
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4413      	add	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	4b22      	ldr	r3, [pc, #136]	@ (8005560 <vPortFree+0xb0>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10b      	bne.n	80054f6 <vPortFree+0x46>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	60fb      	str	r3, [r7, #12]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <vPortFree+0x66>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	60bb      	str	r3, [r7, #8]
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	e7fd      	b.n	8005512 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	4b11      	ldr	r3, [pc, #68]	@ (8005560 <vPortFree+0xb0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d019      	beq.n	8005558 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d115      	bne.n	8005558 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <vPortFree+0xb0>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	43db      	mvns	r3, r3
 8005536:	401a      	ands	r2, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800553c:	f7fe fc22 	bl	8003d84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <vPortFree+0xb4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4413      	add	r3, r2
 800554a:	4a06      	ldr	r2, [pc, #24]	@ (8005564 <vPortFree+0xb4>)
 800554c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800554e:	6938      	ldr	r0, [r7, #16]
 8005550:	f000 f86c 	bl	800562c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005554:	f7fe fc24 	bl	8003da0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005558:	bf00      	nop
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20001b50 	.word	0x20001b50
 8005564:	20001b48 	.word	0x20001b48

08005568 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800556e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005572:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005574:	4b27      	ldr	r3, [pc, #156]	@ (8005614 <prvHeapInit+0xac>)
 8005576:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3307      	adds	r3, #7
 8005586:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0307 	bic.w	r3, r3, #7
 800558e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	4a1f      	ldr	r2, [pc, #124]	@ (8005614 <prvHeapInit+0xac>)
 8005598:	4413      	add	r3, r2
 800559a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005618 <prvHeapInit+0xb0>)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005618 <prvHeapInit+0xb0>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4413      	add	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055b4:	2208      	movs	r2, #8
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0307 	bic.w	r3, r3, #7
 80055c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a15      	ldr	r2, [pc, #84]	@ (800561c <prvHeapInit+0xb4>)
 80055c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055ca:	4b14      	ldr	r3, [pc, #80]	@ (800561c <prvHeapInit+0xb4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2200      	movs	r2, #0
 80055d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055d2:	4b12      	ldr	r3, [pc, #72]	@ (800561c <prvHeapInit+0xb4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	1ad2      	subs	r2, r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055e8:	4b0c      	ldr	r3, [pc, #48]	@ (800561c <prvHeapInit+0xb4>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005620 <prvHeapInit+0xb8>)
 80055f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4a09      	ldr	r2, [pc, #36]	@ (8005624 <prvHeapInit+0xbc>)
 80055fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005600:	4b09      	ldr	r3, [pc, #36]	@ (8005628 <prvHeapInit+0xc0>)
 8005602:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005606:	601a      	str	r2, [r3, #0]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000f3c 	.word	0x20000f3c
 8005618:	20001b3c 	.word	0x20001b3c
 800561c:	20001b44 	.word	0x20001b44
 8005620:	20001b4c 	.word	0x20001b4c
 8005624:	20001b48 	.word	0x20001b48
 8005628:	20001b50 	.word	0x20001b50

0800562c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005634:	4b27      	ldr	r3, [pc, #156]	@ (80056d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e002      	b.n	8005640 <prvInsertBlockIntoFreeList+0x14>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	429a      	cmp	r2, r3
 8005648:	d8f7      	bhi.n	800563a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	4413      	add	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	429a      	cmp	r2, r3
 800565a:	d108      	bne.n	800566e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	441a      	add	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	441a      	add	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d118      	bne.n	80056b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b14      	ldr	r3, [pc, #80]	@ (80056d8 <prvInsertBlockIntoFreeList+0xac>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d00d      	beq.n	80056aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e008      	b.n	80056bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056aa:	4b0b      	ldr	r3, [pc, #44]	@ (80056d8 <prvInsertBlockIntoFreeList+0xac>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e003      	b.n	80056bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d002      	beq.n	80056ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr
 80056d4:	20001b3c 	.word	0x20001b3c
 80056d8:	20001b44 	.word	0x20001b44

080056dc <memcmp>:
 80056dc:	b510      	push	{r4, lr}
 80056de:	3901      	subs	r1, #1
 80056e0:	4402      	add	r2, r0
 80056e2:	4290      	cmp	r0, r2
 80056e4:	d101      	bne.n	80056ea <memcmp+0xe>
 80056e6:	2000      	movs	r0, #0
 80056e8:	e005      	b.n	80056f6 <memcmp+0x1a>
 80056ea:	7803      	ldrb	r3, [r0, #0]
 80056ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80056f0:	42a3      	cmp	r3, r4
 80056f2:	d001      	beq.n	80056f8 <memcmp+0x1c>
 80056f4:	1b18      	subs	r0, r3, r4
 80056f6:	bd10      	pop	{r4, pc}
 80056f8:	3001      	adds	r0, #1
 80056fa:	e7f2      	b.n	80056e2 <memcmp+0x6>

080056fc <memset>:
 80056fc:	4603      	mov	r3, r0
 80056fe:	4402      	add	r2, r0
 8005700:	4293      	cmp	r3, r2
 8005702:	d100      	bne.n	8005706 <memset+0xa>
 8005704:	4770      	bx	lr
 8005706:	f803 1b01 	strb.w	r1, [r3], #1
 800570a:	e7f9      	b.n	8005700 <memset+0x4>

0800570c <__libc_init_array>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	2600      	movs	r6, #0
 8005710:	4d0c      	ldr	r5, [pc, #48]	@ (8005744 <__libc_init_array+0x38>)
 8005712:	4c0d      	ldr	r4, [pc, #52]	@ (8005748 <__libc_init_array+0x3c>)
 8005714:	1b64      	subs	r4, r4, r5
 8005716:	10a4      	asrs	r4, r4, #2
 8005718:	42a6      	cmp	r6, r4
 800571a:	d109      	bne.n	8005730 <__libc_init_array+0x24>
 800571c:	f000 f828 	bl	8005770 <_init>
 8005720:	2600      	movs	r6, #0
 8005722:	4d0a      	ldr	r5, [pc, #40]	@ (800574c <__libc_init_array+0x40>)
 8005724:	4c0a      	ldr	r4, [pc, #40]	@ (8005750 <__libc_init_array+0x44>)
 8005726:	1b64      	subs	r4, r4, r5
 8005728:	10a4      	asrs	r4, r4, #2
 800572a:	42a6      	cmp	r6, r4
 800572c:	d105      	bne.n	800573a <__libc_init_array+0x2e>
 800572e:	bd70      	pop	{r4, r5, r6, pc}
 8005730:	f855 3b04 	ldr.w	r3, [r5], #4
 8005734:	4798      	blx	r3
 8005736:	3601      	adds	r6, #1
 8005738:	e7ee      	b.n	8005718 <__libc_init_array+0xc>
 800573a:	f855 3b04 	ldr.w	r3, [r5], #4
 800573e:	4798      	blx	r3
 8005740:	3601      	adds	r6, #1
 8005742:	e7f2      	b.n	800572a <__libc_init_array+0x1e>
 8005744:	0800589c 	.word	0x0800589c
 8005748:	0800589c 	.word	0x0800589c
 800574c:	0800589c 	.word	0x0800589c
 8005750:	080058a0 	.word	0x080058a0

08005754 <memcpy>:
 8005754:	440a      	add	r2, r1
 8005756:	4291      	cmp	r1, r2
 8005758:	f100 33ff 	add.w	r3, r0, #4294967295
 800575c:	d100      	bne.n	8005760 <memcpy+0xc>
 800575e:	4770      	bx	lr
 8005760:	b510      	push	{r4, lr}
 8005762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005766:	4291      	cmp	r1, r2
 8005768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800576c:	d1f9      	bne.n	8005762 <memcpy+0xe>
 800576e:	bd10      	pop	{r4, pc}

08005770 <_init>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr

0800577c <_fini>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	bf00      	nop
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr
