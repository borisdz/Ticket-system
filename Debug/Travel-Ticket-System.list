
Travel-Ticket-System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010700  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080109a0  080109a0  000119a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010ac4  08010ac4  00011ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010acc  08010acc  00011acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010ad0  08010ad0  00011ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08010ad4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  08010b38  00012064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  08010b98  000120c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b28  24000124  08010bf8  00012124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24005c4c  08010bf8  00012c4c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00012124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fae8  00000000  00000000  00012152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062fb  00000000  00000000  00051c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000030a8  00000000  00000000  00057f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000025ff  00000000  00000000  0005afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000091b5  00000000  00000000  0005d5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c1c0  00000000  00000000  00066794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b233a  00000000  00000000  000a2954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00254c8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000da2c  00000000  00000000  00254cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00262700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010988 	.word	0x08010988

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	08010988 	.word	0x08010988

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f002 fb0a 	bl	8002bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f852 	bl	8000680 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005dc:	f000 f8d2 	bl	8000784 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 fea4 	bl	800132c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005e4:	f000 f8fe 	bl	80007e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005e8:	f000 f972 	bl	80008d0 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005ec:	f000 f9d4 	bl	8000998 <MX_ADC3_Init>
  MX_ETH_Init();
 80005f0:	f000 fa34 	bl	8000a5c <MX_ETH_Init>
  MX_FDCAN1_Init();
 80005f4:	f000 fa7e 	bl	8000af4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80005f8:	f000 fae0 	bl	8000bbc <MX_FDCAN2_Init>
  MX_FMC_Init();
 80005fc:	f000 fe48 	bl	8001290 <MX_FMC_Init>
  MX_LTDC_Init();
 8000600:	f000 fb40 	bl	8000c84 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000604:	f000 fbf0 	bl	8000de8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000608:	f000 fc1a 	bl	8000e40 <MX_RTC_Init>
  MX_SAI2_Init();
 800060c:	f000 fc40 	bl	8000e90 <MX_SAI2_Init>
  MX_SDMMC1_MMC_Init();
 8000610:	f000 fcfc 	bl	800100c <MX_SDMMC1_MMC_Init>
  MX_SPI2_Init();
 8000614:	f000 fd1e 	bl	8001054 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000618:	f000 fdbc 	bl	8001194 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800061c:	f000 fe06 	bl	800122c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000620:	f000 fd6c 	bl	80010fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000624:	f00d f92c 	bl	800d880 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of scrDataQueue */
  scrDataQueueHandle = osMessageQueueNew (2, sizeof(scData), &scrDataQueue_attributes);
 8000628:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <main+0x90>)
 800062a:	2170      	movs	r1, #112	@ 0x70
 800062c:	2002      	movs	r0, #2
 800062e:	f00d fa1e 	bl	800da6e <osMessageQueueNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a0b      	ldr	r2, [pc, #44]	@ (8000664 <main+0x94>)
 8000636:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000638:	4a0b      	ldr	r2, [pc, #44]	@ (8000668 <main+0x98>)
 800063a:	2100      	movs	r1, #0
 800063c:	480b      	ldr	r0, [pc, #44]	@ (800066c <main+0x9c>)
 800063e:	f00d f969 	bl	800d914 <osThreadNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <main+0xa0>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of scrDataTask */
  scrDataTaskHandle = osThreadNew(StartScrDataTask, NULL, &scrDataTask_attributes);
 8000648:	4a0a      	ldr	r2, [pc, #40]	@ (8000674 <main+0xa4>)
 800064a:	2100      	movs	r1, #0
 800064c:	480a      	ldr	r0, [pc, #40]	@ (8000678 <main+0xa8>)
 800064e:	f00d f961 	bl	800d914 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a09      	ldr	r2, [pc, #36]	@ (800067c <main+0xac>)
 8000656:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000658:	f00d f936 	bl	800d8c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <main+0x8c>
 8000660:	08010a74 	.word	0x08010a74
 8000664:	24001048 	.word	0x24001048
 8000668:	08010a2c 	.word	0x08010a2c
 800066c:	08001681 	.word	0x08001681
 8000670:	24001040 	.word	0x24001040
 8000674:	08010a50 	.word	0x08010a50
 8000678:	08001691 	.word	0x08001691
 800067c:	24001044 	.word	0x24001044

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	@ 0x70
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068a:	224c      	movs	r2, #76	@ 0x4c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f010 f892 	bl	80107b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2220      	movs	r2, #32
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f010 f88c 	bl	80107b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a0:	2002      	movs	r0, #2
 80006a2:	f006 f933 	bl	800690c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b34      	ldr	r3, [pc, #208]	@ (800077c <SystemClock_Config+0xfc>)
 80006ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ae:	4a33      	ldr	r2, [pc, #204]	@ (800077c <SystemClock_Config+0xfc>)
 80006b0:	f023 0301 	bic.w	r3, r3, #1
 80006b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006b6:	4b31      	ldr	r3, [pc, #196]	@ (800077c <SystemClock_Config+0xfc>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000780 <SystemClock_Config+0x100>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c8:	4a2d      	ldr	r2, [pc, #180]	@ (8000780 <SystemClock_Config+0x100>)
 80006ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <SystemClock_Config+0x100>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006dc:	bf00      	nop
 80006de:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <SystemClock_Config+0x100>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ea:	d1f8      	bne.n	80006de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80006ec:	230b      	movs	r3, #11
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	2340      	movs	r3, #64	@ 0x40
 80006fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006fe:	2301      	movs	r3, #1
 8000700:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	2302      	movs	r3, #2
 8000708:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 800070a:	2316      	movs	r3, #22
 800070c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 800070e:	23a9      	movs	r3, #169	@ 0xa9
 8000710:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000716:	2304      	movs	r3, #4
 8000718:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800071e:	2300      	movs	r3, #0
 8000720:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000722:	2300      	movs	r3, #0
 8000724:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072e:	4618      	mov	r0, r3
 8000730:	f006 f9f0 	bl	8006b14 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800073a:	f000 ffe1 	bl	8001700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	233f      	movs	r3, #63	@ 0x3f
 8000740:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2101      	movs	r1, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f006 fe30 	bl	80073c8 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800076e:	f000 ffc7 	bl	8001700 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3770      	adds	r7, #112	@ 0x70
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	58000400 	.word	0x58000400
 8000780:	58024800 	.word	0x58024800

08000784 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b0b0      	sub	sp, #192	@ 0xc0
 8000788:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	22c0      	movs	r2, #192	@ 0xc0
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f010 f811 	bl	80107b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000796:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80007a6:	230c      	movs	r3, #12
 80007a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80007aa:	2305      	movs	r3, #5
 80007ac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007b6:	23c0      	movs	r3, #192	@ 0xc0
 80007b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007ba:	2320      	movs	r3, #32
 80007bc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4618      	mov	r0, r3
 80007cc:	f007 f9ca 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80007d6:	f000 ff93 	bl	8001700 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	37c0      	adds	r7, #192	@ 0xc0
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	615a      	str	r2, [r3, #20]
 8000806:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000808:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 800080a:	4a30      	ldr	r2, [pc, #192]	@ (80008cc <MX_ADC1_Init+0xe8>)
 800080c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800080e:	4b2e      	ldr	r3, [pc, #184]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000814:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800081a:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000820:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 8000822:	2204      	movs	r2, #4
 8000824:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000826:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800082c:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000832:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 8000834:	2201      	movs	r2, #1
 8000836:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000838:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 800083a:	2200      	movs	r2, #0
 800083c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083e:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000844:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 800084c:	2200      	movs	r2, #0
 800084e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000850:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 8000852:	2200      	movs	r2, #0
 8000854:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000856:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 8000858:	2200      	movs	r2, #0
 800085a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800085c:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000864:	4818      	ldr	r0, [pc, #96]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 8000866:	f002 fc03 	bl	8003070 <HAL_ADC_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000870:	f000 ff46 	bl	8001700 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4812      	ldr	r0, [pc, #72]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 8000880:	f003 fa1a 	bl	8003cb8 <HAL_ADCEx_MultiModeConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800088a:	f000 ff39 	bl	8001700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800088e:	2301      	movs	r3, #1
 8000890:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000892:	2306      	movs	r3, #6
 8000894:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800089a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800089e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a0:	2304      	movs	r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_ADC1_Init+0xe4>)
 80008b2:	f002 fd7f 	bl	80033b4 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80008bc:	f000 ff20 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	@ 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	24000178 	.word	0x24000178
 80008cc:	40022000 	.word	0x40022000

080008d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008e8:	4b29      	ldr	r3, [pc, #164]	@ (8000990 <MX_ADC2_Init+0xc0>)
 80008ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000994 <MX_ADC2_Init+0xc4>)
 80008ec:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008ee:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <MX_ADC2_Init+0xc0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008f4:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <MX_ADC2_Init+0xc0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008fa:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <MX_ADC2_Init+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000900:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <MX_ADC2_Init+0xc0>)
 8000902:	2204      	movs	r2, #4
 8000904:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000906:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <MX_ADC2_Init+0xc0>)
 8000908:	2200      	movs	r2, #0
 800090a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800090c:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <MX_ADC2_Init+0xc0>)
 800090e:	2200      	movs	r2, #0
 8000910:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_ADC2_Init+0xc0>)
 8000914:	2201      	movs	r2, #1
 8000916:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_ADC2_Init+0xc0>)
 800091a:	2200      	movs	r2, #0
 800091c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_ADC2_Init+0xc0>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_ADC2_Init+0xc0>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_ADC2_Init+0xc0>)
 800092c:	2200      	movs	r2, #0
 800092e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_ADC2_Init+0xc0>)
 8000932:	2200      	movs	r2, #0
 8000934:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_ADC2_Init+0xc0>)
 8000938:	2200      	movs	r2, #0
 800093a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_ADC2_Init+0xc0>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000944:	4812      	ldr	r0, [pc, #72]	@ (8000990 <MX_ADC2_Init+0xc0>)
 8000946:	f002 fb93 	bl	8003070 <HAL_ADC_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000950:	f000 fed6 	bl	8001700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000954:	2301      	movs	r3, #1
 8000956:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000958:	2306      	movs	r3, #6
 800095a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000960:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000964:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000966:	2304      	movs	r3, #4
 8000968:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_ADC2_Init+0xc0>)
 8000978:	f002 fd1c 	bl	80033b4 <HAL_ADC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000982:	f000 febd 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	240001dc 	.word	0x240001dc
 8000994:	40022100 	.word	0x40022100

08000998 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009b2:	4a28      	ldr	r2, [pc, #160]	@ (8000a54 <MX_ADC3_Init+0xbc>)
 80009b4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80009b6:	4b26      	ldr	r3, [pc, #152]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009bc:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c2:	4b23      	ldr	r3, [pc, #140]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009c4:	2204      	movs	r2, #4
 80009c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009c8:	4b21      	ldr	r3, [pc, #132]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009ce:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80009d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009da:	4b1d      	ldr	r3, [pc, #116]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009ec:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a06:	4812      	ldr	r0, [pc, #72]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 8000a08:	f002 fb32 	bl	8003070 <HAL_ADC_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000a12:	f000 fe75 	bl	8001700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_ADC3_Init+0xc0>)
 8000a18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a1a:	2306      	movs	r3, #6
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a22:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a26:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_ADC3_Init+0xb8>)
 8000a3a:	f002 fcbb 	bl	80033b4 <HAL_ADC_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000a44:	f000 fe5c 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	24000240 	.word	0x24000240
 8000a54:	58026000 	.word	0x58026000
 8000a58:	1d500080 	.word	0x1d500080

08000a5c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_ETH_Init+0x80>)
 8000a62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae0 <MX_ETH_Init+0x84>)
 8000a64:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_ETH_Init+0x88>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <MX_ETH_Init+0x88>)
 8000a6e:	2280      	movs	r2, #128	@ 0x80
 8000a70:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <MX_ETH_Init+0x88>)
 8000a74:	22e1      	movs	r2, #225	@ 0xe1
 8000a76:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_ETH_Init+0x88>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <MX_ETH_Init+0x88>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a84:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_ETH_Init+0x88>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_ETH_Init+0x80>)
 8000a8c:	4a15      	ldr	r2, [pc, #84]	@ (8000ae4 <MX_ETH_Init+0x88>)
 8000a8e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <MX_ETH_Init+0x80>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_ETH_Init+0x80>)
 8000a98:	4a13      	ldr	r2, [pc, #76]	@ (8000ae8 <MX_ETH_Init+0x8c>)
 8000a9a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_ETH_Init+0x80>)
 8000a9e:	4a13      	ldr	r2, [pc, #76]	@ (8000aec <MX_ETH_Init+0x90>)
 8000aa0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_ETH_Init+0x80>)
 8000aa4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000aa8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000aaa:	480c      	ldr	r0, [pc, #48]	@ (8000adc <MX_ETH_Init+0x80>)
 8000aac:	f003 fac2 	bl	8004034 <HAL_ETH_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ab6:	f000 fe23 	bl	8001700 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000aba:	2238      	movs	r2, #56	@ 0x38
 8000abc:	2100      	movs	r1, #0
 8000abe:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <MX_ETH_Init+0x94>)
 8000ac0:	f00f fe7a 	bl	80107b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <MX_ETH_Init+0x94>)
 8000ac6:	2221      	movs	r2, #33	@ 0x21
 8000ac8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_ETH_Init+0x94>)
 8000acc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ad0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <MX_ETH_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	240002a4 	.word	0x240002a4
 8000ae0:	40028000 	.word	0x40028000
 8000ae4:	240010bc 	.word	0x240010bc
 8000ae8:	240000c4 	.word	0x240000c4
 8000aec:	24000064 	.word	0x24000064
 8000af0:	24000140 	.word	0x24000140

08000af4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000af8:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000afa:	4a2f      	ldr	r2, [pc, #188]	@ (8000bb8 <MX_FDCAN1_Init+0xc4>)
 8000afc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000afe:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b04:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b10:	4b28      	ldr	r3, [pc, #160]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b16:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000b1c:	4b25      	ldr	r3, [pc, #148]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b1e:	2210      	movs	r2, #16
 8000b20:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b22:	4b24      	ldr	r3, [pc, #144]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000b28:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b46:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b52:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000ba2:	f003 fe6b 	bl	800487c <HAL_FDCAN_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000bac:	f000 fda8 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	24000354 	.word	0x24000354
 8000bb8:	4000a000 	.word	0x4000a000

08000bbc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000bc2:	4a2f      	ldr	r2, [pc, #188]	@ (8000c80 <MX_FDCAN2_Init+0xc4>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bd8:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bde:	4b27      	ldr	r3, [pc, #156]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000be4:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000be6:	2210      	movs	r2, #16
 8000be8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000bea:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c14:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c38:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c46:	2204      	movs	r2, #4
 8000c48:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c64:	2204      	movs	r2, #4
 8000c66:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <MX_FDCAN2_Init+0xc0>)
 8000c6a:	f003 fe07 	bl	800487c <HAL_FDCAN_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c74:	f000 fd44 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	240003f4 	.word	0x240003f4
 8000c80:	4000a400 	.word	0x4000a400

08000c84 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09a      	sub	sp, #104	@ 0x68
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c8e:	2234      	movs	r2, #52	@ 0x34
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00f fd90 	bl	80107b8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2234      	movs	r2, #52	@ 0x34
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00f fd8a 	bl	80107b8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ca4:	4b4e      	ldr	r3, [pc, #312]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000ca6:	4a4f      	ldr	r2, [pc, #316]	@ (8000de4 <MX_LTDC_Init+0x160>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000caa:	4b4d      	ldr	r3, [pc, #308]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cbc:	4b48      	ldr	r3, [pc, #288]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000cc2:	4b47      	ldr	r3, [pc, #284]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000cc8:	4b45      	ldr	r3, [pc, #276]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cca:	2203      	movs	r2, #3
 8000ccc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000cce:	4b44      	ldr	r3, [pc, #272]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cd0:	220e      	movs	r2, #14
 8000cd2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000cd4:	4b42      	ldr	r3, [pc, #264]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cd6:	2205      	movs	r2, #5
 8000cd8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000cda:	4b41      	ldr	r3, [pc, #260]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cdc:	f240 228e 	movw	r2, #654	@ 0x28e
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000ce4:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8000cea:	4b3d      	ldr	r3, [pc, #244]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cec:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cf4:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8000cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cfa:	4b39      	ldr	r3, [pc, #228]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d02:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d0a:	4b35      	ldr	r3, [pc, #212]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d12:	4833      	ldr	r0, [pc, #204]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000d14:	f004 fae0 	bl	80052d8 <HAL_LTDC_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000d1e:	f000 fcef 	bl	8001700 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d32:	2300      	movs	r3, #0
 8000d34:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d42:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d44:	2305      	movs	r3, #5
 8000d46:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481c      	ldr	r0, [pc, #112]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000d70:	f004 fb82 	bl	8005478 <HAL_LTDC_ConfigLayer>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000d7a:	f000 fcc1 	bl	8001700 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d9e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000da0:	2305      	movs	r3, #5
 8000da2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_LTDC_Init+0x15c>)
 8000dca:	f004 fb55 	bl	8005478 <HAL_LTDC_ConfigLayer>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000dd4:	f000 fc94 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3768      	adds	r7, #104	@ 0x68
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	24000494 	.word	0x24000494
 8000de4:	50001000 	.word	0x50001000

08000de8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_QUADSPI_Init+0x50>)
 8000dee:	4a13      	ldr	r2, [pc, #76]	@ (8000e3c <MX_QUADSPI_Init+0x54>)
 8000df0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <MX_QUADSPI_Init+0x50>)
 8000df4:	22ff      	movs	r2, #255	@ 0xff
 8000df6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_QUADSPI_Init+0x50>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <MX_QUADSPI_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_QUADSPI_Init+0x50>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <MX_QUADSPI_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_QUADSPI_Init+0x50>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <MX_QUADSPI_Init+0x50>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_QUADSPI_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_QUADSPI_Init+0x50>)
 8000e24:	f005 fdbc 	bl	80069a0 <HAL_QSPI_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000e2e:	f000 fc67 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2400053c 	.word	0x2400053c
 8000e3c:	52005000 	.word	0x52005000

08000e40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e44:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <MX_RTC_Init+0x48>)
 8000e46:	4a11      	ldr	r2, [pc, #68]	@ (8000e8c <MX_RTC_Init+0x4c>)
 8000e48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <MX_RTC_Init+0x48>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e50:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <MX_RTC_Init+0x48>)
 8000e52:	227f      	movs	r2, #127	@ 0x7f
 8000e54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <MX_RTC_Init+0x48>)
 8000e58:	22ff      	movs	r2, #255	@ 0xff
 8000e5a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <MX_RTC_Init+0x48>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <MX_RTC_Init+0x48>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e68:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <MX_RTC_Init+0x48>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <MX_RTC_Init+0x48>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	@ (8000e88 <MX_RTC_Init+0x48>)
 8000e76:	f009 fb73 	bl	800a560 <HAL_RTC_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000e80:	f000 fc3e 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	24000588 	.word	0x24000588
 8000e8c:	58004000 	.word	0x58004000

08000e90 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e94:	4b58      	ldr	r3, [pc, #352]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000e96:	4a59      	ldr	r2, [pc, #356]	@ (8000ffc <MX_SAI2_Init+0x16c>)
 8000e98:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e9a:	4b57      	ldr	r3, [pc, #348]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ea0:	4b55      	ldr	r3, [pc, #340]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000ea6:	4b54      	ldr	r3, [pc, #336]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000ea8:	2240      	movs	r2, #64	@ 0x40
 8000eaa:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000eac:	4b52      	ldr	r3, [pc, #328]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000eb2:	4b51      	ldr	r3, [pc, #324]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000eb8:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ec4:	4b4c      	ldr	r3, [pc, #304]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000eca:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ed0:	4b49      	ldr	r3, [pc, #292]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000ed2:	4a4b      	ldr	r2, [pc, #300]	@ (8001000 <MX_SAI2_Init+0x170>)
 8000ed4:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ed6:	4b48      	ldr	r3, [pc, #288]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000edc:	4b46      	ldr	r3, [pc, #280]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ee2:	4b45      	ldr	r3, [pc, #276]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ee8:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000eee:	4b42      	ldr	r3, [pc, #264]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8000ef6:	4b40      	ldr	r3, [pc, #256]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000efc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f02:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000f04:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000f06:	2208      	movs	r2, #8
 8000f08:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f10:	4b39      	ldr	r3, [pc, #228]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f16:	4b38      	ldr	r3, [pc, #224]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f1c:	4b36      	ldr	r3, [pc, #216]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000f22:	4b35      	ldr	r3, [pc, #212]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f28:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000f2e:	4b32      	ldr	r3, [pc, #200]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000f34:	4b30      	ldr	r3, [pc, #192]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000f3a:	482f      	ldr	r0, [pc, #188]	@ (8000ff8 <MX_SAI2_Init+0x168>)
 8000f3c:	f009 fc28 	bl	800a790 <HAL_SAI_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8000f46:	f000 fbdb 	bl	8001700 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001008 <MX_SAI2_Init+0x178>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f50:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f58:	2203      	movs	r2, #3
 8000f5a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f5e:	2240      	movs	r2, #64	@ 0x40
 8000f60:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f62:	4b28      	ldr	r3, [pc, #160]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f68:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000f6e:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f80:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fac:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000fe4:	4807      	ldr	r0, [pc, #28]	@ (8001004 <MX_SAI2_Init+0x174>)
 8000fe6:	f009 fbd3 	bl	800a790 <HAL_SAI_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8000ff0:	f000 fb86 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	240005ac 	.word	0x240005ac
 8000ffc:	40015c04 	.word	0x40015c04
 8001000:	0002ee00 	.word	0x0002ee00
 8001004:	24000644 	.word	0x24000644
 8001008:	40015c24 	.word	0x40015c24

0800100c <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8001010:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <MX_SDMMC1_MMC_Init+0x40>)
 8001012:	4a0f      	ldr	r2, [pc, #60]	@ (8001050 <MX_SDMMC1_MMC_Init+0x44>)
 8001014:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001016:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <MX_SDMMC1_MMC_Init+0x40>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <MX_SDMMC1_MMC_Init+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <MX_SDMMC1_MMC_Init+0x40>)
 8001024:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001028:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <MX_SDMMC1_MMC_Init+0x40>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MX_SDMMC1_MMC_Init+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_SDMMC1_MMC_Init+0x40>)
 8001038:	f004 fbf6 	bl	8005828 <HAL_MMC_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 8001042:	f000 fb5d 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	240006dc 	.word	0x240006dc
 8001050:	52007000 	.word	0x52007000

08001054 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001058:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 800105a:	4a27      	ldr	r2, [pc, #156]	@ (80010f8 <MX_SPI2_Init+0xa4>)
 800105c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800105e:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 8001060:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001064:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001066:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800106c:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 800106e:	2203      	movs	r2, #3
 8001070:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001072:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001078:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 8001098:	2200      	movs	r2, #0
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 80010a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010b0:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_SPI2_Init+0xa0>)
 80010e2:	f009 fe75 	bl	800add0 <HAL_SPI_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80010ec:	f000 fb08 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	24000950 	.word	0x24000950
 80010f8:	40003800 	.word	0x40003800

080010fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001102:	4a23      	ldr	r2, [pc, #140]	@ (8001190 <MX_USART2_UART_Init+0x94>)
 8001104:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800111a:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <MX_USART2_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_USART2_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_USART2_UART_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001144:	4811      	ldr	r0, [pc, #68]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001146:	f00a fa5b 	bl	800b600 <HAL_UART_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001150:	f000 fad6 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001154:	2100      	movs	r1, #0
 8001156:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001158:	f00b faeb 	bl	800c732 <HAL_UARTEx_SetTxFifoThreshold>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001162:	f000 facd 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001166:	2100      	movs	r1, #0
 8001168:	4808      	ldr	r0, [pc, #32]	@ (800118c <MX_USART2_UART_Init+0x90>)
 800116a:	f00b fb20 	bl	800c7ae <HAL_UARTEx_SetRxFifoThreshold>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001174:	f000 fac4 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_USART2_UART_Init+0x90>)
 800117a:	f00b faa1 	bl	800c6c0 <HAL_UARTEx_DisableFifoMode>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 fabc 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	240009d8 	.word	0x240009d8
 8001190:	40004400 	.word	0x40004400

08001194 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001198:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 800119a:	4a23      	ldr	r2, [pc, #140]	@ (8001228 <MX_USART3_UART_Init+0x94>)
 800119c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800119e:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011dc:	4811      	ldr	r0, [pc, #68]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011de:	f00a fa0f 	bl	800b600 <HAL_UART_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011e8:	f000 fa8a 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ec:	2100      	movs	r1, #0
 80011ee:	480d      	ldr	r0, [pc, #52]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 80011f0:	f00b fa9f 	bl	800c732 <HAL_UARTEx_SetTxFifoThreshold>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011fa:	f000 fa81 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4808      	ldr	r0, [pc, #32]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 8001202:	f00b fad4 	bl	800c7ae <HAL_UARTEx_SetRxFifoThreshold>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800120c:	f000 fa78 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <MX_USART3_UART_Init+0x90>)
 8001212:	f00b fa55 	bl	800c6c0 <HAL_UARTEx_DisableFifoMode>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800121c:	f000 fa70 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	24000a6c 	.word	0x24000a6c
 8001228:	40004800 	.word	0x40004800

0800122c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001232:	4a16      	ldr	r2, [pc, #88]	@ (800128c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001234:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001236:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001238:	2209      	movs	r2, #9
 800123a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800123e:	2202      	movs	r2, #2
 8001240:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001242:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800124a:	2202      	movs	r2, #2
 800124c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001262:	2201      	movs	r2, #1
 8001264:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001268:	2201      	movs	r2, #1
 800126a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800126e:	2200      	movs	r2, #0
 8001270:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001274:	f005 fa02 	bl	800667c <HAL_PCD_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800127e:	f000 fa3f 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	24000b00 	.word	0x24000b00
 800128c:	40080000 	.word	0x40080000

08001290 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <MX_FMC_Init+0x94>)
 80012aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001328 <MX_FMC_Init+0x98>)
 80012ac:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_FMC_Init+0x94>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_FMC_Init+0x94>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_FMC_Init+0x94>)
 80012bc:	2204      	movs	r2, #4
 80012be:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_FMC_Init+0x94>)
 80012c2:	2210      	movs	r2, #16
 80012c4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <MX_FMC_Init+0x94>)
 80012c8:	2240      	movs	r2, #64	@ 0x40
 80012ca:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <MX_FMC_Init+0x94>)
 80012ce:	2280      	movs	r2, #128	@ 0x80
 80012d0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <MX_FMC_Init+0x94>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <MX_FMC_Init+0x94>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <MX_FMC_Init+0x94>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <MX_FMC_Init+0x94>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80012ea:	2310      	movs	r3, #16
 80012ec:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80012ee:	2310      	movs	r3, #16
 80012f0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80012f2:	2310      	movs	r3, #16
 80012f4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80012f6:	2310      	movs	r3, #16
 80012f8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80012fa:	2310      	movs	r3, #16
 80012fc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80012fe:	2310      	movs	r3, #16
 8001300:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001302:	2310      	movs	r3, #16
 8001304:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	@ (8001324 <MX_FMC_Init+0x94>)
 800130c:	f009 fd24 	bl	800ad58 <HAL_SDRAM_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001316:	f000 f9f3 	bl	8001700 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2400100c 	.word	0x2400100c
 8001328:	52004140 	.word	0x52004140

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b090      	sub	sp, #64	@ 0x40
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001342:	4bbf      	ldr	r3, [pc, #764]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	4abd      	ldr	r2, [pc, #756]	@ (8001640 <MX_GPIO_Init+0x314>)
 800134a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800134e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001352:	4bbb      	ldr	r3, [pc, #748]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800135e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001360:	4bb7      	ldr	r3, [pc, #732]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	4ab6      	ldr	r2, [pc, #728]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001370:	4bb3      	ldr	r3, [pc, #716]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
 800137c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800137e:	4bb0      	ldr	r3, [pc, #704]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001384:	4aae      	ldr	r2, [pc, #696]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001386:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800138a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800138e:	4bac      	ldr	r3, [pc, #688]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001398:	623b      	str	r3, [r7, #32]
 800139a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800139c:	4ba8      	ldr	r3, [pc, #672]	@ (8001640 <MX_GPIO_Init+0x314>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	4aa7      	ldr	r2, [pc, #668]	@ (8001640 <MX_GPIO_Init+0x314>)
 80013a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ac:	4ba4      	ldr	r3, [pc, #656]	@ (8001640 <MX_GPIO_Init+0x314>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001640 <MX_GPIO_Init+0x314>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c0:	4a9f      	ldr	r2, [pc, #636]	@ (8001640 <MX_GPIO_Init+0x314>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ca:	4b9d      	ldr	r3, [pc, #628]	@ (8001640 <MX_GPIO_Init+0x314>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	4b99      	ldr	r3, [pc, #612]	@ (8001640 <MX_GPIO_Init+0x314>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013de:	4a98      	ldr	r2, [pc, #608]	@ (8001640 <MX_GPIO_Init+0x314>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e8:	4b95      	ldr	r3, [pc, #596]	@ (8001640 <MX_GPIO_Init+0x314>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b92      	ldr	r3, [pc, #584]	@ (8001640 <MX_GPIO_Init+0x314>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fc:	4a90      	ldr	r2, [pc, #576]	@ (8001640 <MX_GPIO_Init+0x314>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001406:	4b8e      	ldr	r3, [pc, #568]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001414:	4b8a      	ldr	r3, [pc, #552]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141a:	4a89      	ldr	r2, [pc, #548]	@ (8001640 <MX_GPIO_Init+0x314>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001424:	4b86      	ldr	r3, [pc, #536]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001432:	4b83      	ldr	r3, [pc, #524]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001438:	4a81      	ldr	r2, [pc, #516]	@ (8001640 <MX_GPIO_Init+0x314>)
 800143a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001442:	4b7f      	ldr	r3, [pc, #508]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001448:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001450:	4b7b      	ldr	r3, [pc, #492]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001456:	4a7a      	ldr	r2, [pc, #488]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001460:	4b77      	ldr	r3, [pc, #476]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146e:	4b74      	ldr	r3, [pc, #464]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001474:	4a72      	ldr	r2, [pc, #456]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001476:	f043 0320 	orr.w	r3, r3, #32
 800147a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800147e:	4b70      	ldr	r3, [pc, #448]	@ (8001640 <MX_GPIO_Init+0x314>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001492:	486c      	ldr	r0, [pc, #432]	@ (8001644 <MX_GPIO_Init+0x318>)
 8001494:	f003 ff06 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f241 0104 	movw	r1, #4100	@ 0x1004
 800149e:	486a      	ldr	r0, [pc, #424]	@ (8001648 <MX_GPIO_Init+0x31c>)
 80014a0:	f003 ff00 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2104      	movs	r1, #4
 80014a8:	4868      	ldr	r0, [pc, #416]	@ (800164c <MX_GPIO_Init+0x320>)
 80014aa:	f003 fefb 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014c0:	2303      	movs	r3, #3
 80014c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014c8:	4619      	mov	r1, r3
 80014ca:	4861      	ldr	r0, [pc, #388]	@ (8001650 <MX_GPIO_Init+0x324>)
 80014cc:	f003 fd3a 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014e0:	4619      	mov	r1, r3
 80014e2:	485c      	ldr	r0, [pc, #368]	@ (8001654 <MX_GPIO_Init+0x328>)
 80014e4:	f003 fd2e 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80014e8:	2330      	movs	r3, #48	@ 0x30
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80014f8:	230a      	movs	r3, #10
 80014fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001500:	4619      	mov	r1, r3
 8001502:	4855      	ldr	r0, [pc, #340]	@ (8001658 <MX_GPIO_Init+0x32c>)
 8001504:	f003 fd1e 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001508:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800151a:	4619      	mov	r1, r3
 800151c:	484f      	ldr	r0, [pc, #316]	@ (800165c <MX_GPIO_Init+0x330>)
 800151e:	f003 fd11 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001522:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001528:	2300      	movs	r3, #0
 800152a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001534:	4619      	mov	r1, r3
 8001536:	484a      	ldr	r0, [pc, #296]	@ (8001660 <MX_GPIO_Init+0x334>)
 8001538:	f003 fd04 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800153c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800154e:	2301      	movs	r3, #1
 8001550:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001556:	4619      	mov	r1, r3
 8001558:	4840      	ldr	r0, [pc, #256]	@ (800165c <MX_GPIO_Init+0x330>)
 800155a:	f003 fcf3 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800156e:	2306      	movs	r3, #6
 8001570:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001576:	4619      	mov	r1, r3
 8001578:	483a      	ldr	r0, [pc, #232]	@ (8001664 <MX_GPIO_Init+0x338>)
 800157a:	f003 fce3 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800157e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001594:	4619      	mov	r1, r3
 8001596:	482b      	ldr	r0, [pc, #172]	@ (8001644 <MX_GPIO_Init+0x318>)
 8001598:	f003 fcd4 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800159c:	2304      	movs	r3, #4
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ae:	4619      	mov	r1, r3
 80015b0:	482c      	ldr	r0, [pc, #176]	@ (8001664 <MX_GPIO_Init+0x338>)
 80015b2:	f003 fcc7 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80015b6:	2301      	movs	r3, #1
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015c6:	4619      	mov	r1, r3
 80015c8:	4827      	ldr	r0, [pc, #156]	@ (8001668 <MX_GPIO_Init+0x33c>)
 80015ca:	f003 fcbb 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80015ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015e2:	4619      	mov	r1, r3
 80015e4:	481a      	ldr	r0, [pc, #104]	@ (8001650 <MX_GPIO_Init+0x324>)
 80015e6:	f003 fcad 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015ea:	2340      	movs	r3, #64	@ 0x40
 80015ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80015fa:	2309      	movs	r3, #9
 80015fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001602:	4619      	mov	r1, r3
 8001604:	4815      	ldr	r0, [pc, #84]	@ (800165c <MX_GPIO_Init+0x330>)
 8001606:	f003 fc9d 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 800160a:	f241 0304 	movw	r3, #4100	@ 0x1004
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001620:	4619      	mov	r1, r3
 8001622:	4809      	ldr	r0, [pc, #36]	@ (8001648 <MX_GPIO_Init+0x31c>)
 8001624:	f003 fc8e 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001628:	2304      	movs	r3, #4
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800163c:	4619      	mov	r1, r3
 800163e:	e015      	b.n	800166c <MX_GPIO_Init+0x340>
 8001640:	58024400 	.word	0x58024400
 8001644:	58022000 	.word	0x58022000
 8001648:	58020400 	.word	0x58020400
 800164c:	58022400 	.word	0x58022400
 8001650:	58021c00 	.word	0x58021c00
 8001654:	58020c00 	.word	0x58020c00
 8001658:	58021000 	.word	0x58021000
 800165c:	58020000 	.word	0x58020000
 8001660:	58020800 	.word	0x58020800
 8001664:	58021800 	.word	0x58021800
 8001668:	58022800 	.word	0x58022800
 800166c:	4803      	ldr	r0, [pc, #12]	@ (800167c <MX_GPIO_Init+0x350>)
 800166e:	f003 fc69 	bl	8004f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001672:	bf00      	nop
 8001674:	3740      	adds	r7, #64	@ 0x40
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	58022400 	.word	0x58022400

08001680 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001688:	2001      	movs	r0, #1
 800168a:	f00c f9d5 	bl	800da38 <osDelay>
 800168e:	e7fb      	b.n	8001688 <StartDefaultTask+0x8>

08001690 <StartScrDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartScrDataTask */
void StartScrDataTask(void *argument)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartScrDataTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osMessageQueueGetCount(scrDataQueueHandle)>0){
 8001698:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <StartScrDataTask+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f00c fab7 	bl	800dc10 <osMessageQueueGetCount>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00f      	beq.n	80016c8 <StartScrDataTask+0x38>
		  if(osMessageQueueGet(scrDataQueueHandle, &scrData, 0, 0)==osOK){
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <StartScrDataTask+0x40>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	2300      	movs	r3, #0
 80016ae:	2200      	movs	r2, #0
 80016b0:	4908      	ldr	r1, [pc, #32]	@ (80016d4 <StartScrDataTask+0x44>)
 80016b2:	f00c fa4f 	bl	800db54 <osMessageQueueGet>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <StartScrDataTask+0x38>
			  HAL_UART_Transmit(&huart2, (uint8_t *)&scrData, sizeof(scrData), 100);
 80016bc:	2364      	movs	r3, #100	@ 0x64
 80016be:	2270      	movs	r2, #112	@ 0x70
 80016c0:	4904      	ldr	r1, [pc, #16]	@ (80016d4 <StartScrDataTask+0x44>)
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <StartScrDataTask+0x48>)
 80016c4:	f009 ffec 	bl	800b6a0 <HAL_UART_Transmit>
		  }
	  }
    osDelay(1);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f00c f9b5 	bl	800da38 <osDelay>
	  if(osMessageQueueGetCount(scrDataQueueHandle)>0){
 80016ce:	e7e3      	b.n	8001698 <StartScrDataTask+0x8>
 80016d0:	24001048 	.word	0x24001048
 80016d4:	2400104c 	.word	0x2400104c
 80016d8:	240009d8 	.word	0x240009d8

080016dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ee:	f001 fab9 	bl	8002c64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40001000 	.word	0x40001000

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <Error_Handler+0x8>

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <HAL_MspInit+0x38>)
 8001714:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001718:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <HAL_MspInit+0x38>)
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001722:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <HAL_MspInit+0x38>)
 8001724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	210f      	movs	r1, #15
 8001734:	f06f 0001 	mvn.w	r0, #1
 8001738:	f002 fc54 	bl	8003fe4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	58024400 	.word	0x58024400

08001748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b090      	sub	sp, #64	@ 0x40
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a72      	ldr	r2, [pc, #456]	@ (8001930 <HAL_ADC_MspInit+0x1e8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d14e      	bne.n	8001808 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800176a:	4b72      	ldr	r3, [pc, #456]	@ (8001934 <HAL_ADC_MspInit+0x1ec>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	4a70      	ldr	r2, [pc, #448]	@ (8001934 <HAL_ADC_MspInit+0x1ec>)
 8001772:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001774:	4b6f      	ldr	r3, [pc, #444]	@ (8001934 <HAL_ADC_MspInit+0x1ec>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d10e      	bne.n	800179a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800177c:	4b6e      	ldr	r3, [pc, #440]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 800177e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001782:	4a6d      	ldr	r2, [pc, #436]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 8001784:	f043 0320 	orr.w	r3, r3, #32
 8001788:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800178c:	4b6a      	ldr	r3, [pc, #424]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 800178e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4b67      	ldr	r3, [pc, #412]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a0:	4a65      	ldr	r2, [pc, #404]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017aa:	4b63      	ldr	r3, [pc, #396]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017be:	4a5e      	ldr	r2, [pc, #376]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	623b      	str	r3, [r7, #32]
 80017d4:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017d6:	2301      	movs	r3, #1
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017da:	2303      	movs	r3, #3
 80017dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e6:	4619      	mov	r1, r3
 80017e8:	4854      	ldr	r0, [pc, #336]	@ (800193c <HAL_ADC_MspInit+0x1f4>)
 80017ea:	f003 fbab 	bl	8004f44 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80017ee:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80017f2:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80017f6:	f001 fa99 	bl	8002d2c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80017fa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80017fe:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8001802:	f001 fa93 	bl	8002d2c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001806:	e08f      	b.n	8001928 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a4c      	ldr	r2, [pc, #304]	@ (8001940 <HAL_ADC_MspInit+0x1f8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d133      	bne.n	800187a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001812:	4b48      	ldr	r3, [pc, #288]	@ (8001934 <HAL_ADC_MspInit+0x1ec>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	4a46      	ldr	r2, [pc, #280]	@ (8001934 <HAL_ADC_MspInit+0x1ec>)
 800181a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800181c:	4b45      	ldr	r3, [pc, #276]	@ (8001934 <HAL_ADC_MspInit+0x1ec>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d10e      	bne.n	8001842 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001824:	4b44      	ldr	r3, [pc, #272]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 8001826:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800182a:	4a43      	ldr	r2, [pc, #268]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 800182c:	f043 0320 	orr.w	r3, r3, #32
 8001830:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001834:	4b40      	ldr	r3, [pc, #256]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 8001836:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b3d      	ldr	r3, [pc, #244]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001848:	4a3b      	ldr	r2, [pc, #236]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001852:	4b39      	ldr	r3, [pc, #228]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001860:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001864:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8001868:	f001 fa60 	bl	8002d2c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800186c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001870:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8001874:	f001 fa5a 	bl	8002d2c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001878:	e056      	b.n	8001928 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a31      	ldr	r2, [pc, #196]	@ (8001944 <HAL_ADC_MspInit+0x1fc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d151      	bne.n	8001928 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001884:	4b2c      	ldr	r3, [pc, #176]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188a:	4a2b      	ldr	r2, [pc, #172]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 800188c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001894:	4b28      	ldr	r3, [pc, #160]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018a2:	4b25      	ldr	r3, [pc, #148]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a8:	4a23      	ldr	r2, [pc, #140]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 80018aa:	f043 0320 	orr.w	r3, r3, #32
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b2:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_ADC_MspInit+0x1f0>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e4:	2303      	movs	r3, #3
 80018e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018f0:	4619      	mov	r1, r3
 80018f2:	4815      	ldr	r0, [pc, #84]	@ (8001948 <HAL_ADC_MspInit+0x200>)
 80018f4:	f003 fb26 	bl	8004f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fc:	2303      	movs	r3, #3
 80018fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001908:	4619      	mov	r1, r3
 800190a:	480c      	ldr	r0, [pc, #48]	@ (800193c <HAL_ADC_MspInit+0x1f4>)
 800190c:	f003 fb1a 	bl	8004f44 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001910:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001914:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001918:	f001 fa08 	bl	8002d2c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800191c:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001920:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001924:	f001 fa02 	bl	8002d2c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001928:	bf00      	nop
 800192a:	3740      	adds	r7, #64	@ 0x40
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40022000 	.word	0x40022000
 8001934:	240010c4 	.word	0x240010c4
 8001938:	58024400 	.word	0x58024400
 800193c:	58020800 	.word	0x58020800
 8001940:	40022100 	.word	0x40022100
 8001944:	58026000 	.word	0x58026000
 8001948:	58021400 	.word	0x58021400

0800194c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b092      	sub	sp, #72	@ 0x48
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a87      	ldr	r2, [pc, #540]	@ (8001b88 <HAL_ETH_MspInit+0x23c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	f040 8108 	bne.w	8001b80 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001970:	4b86      	ldr	r3, [pc, #536]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001976:	4a85      	ldr	r2, [pc, #532]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800197c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001980:	4b82      	ldr	r3, [pc, #520]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
 800198c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800198e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001990:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001994:	4a7d      	ldr	r2, [pc, #500]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800199e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 80019a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80019ac:	4b77      	ldr	r3, [pc, #476]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 80019ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019b2:	4a76      	ldr	r2, [pc, #472]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80019bc:	4b73      	ldr	r3, [pc, #460]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 80019be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ca:	4b70      	ldr	r3, [pc, #448]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 80019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 80019d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019da:	4b6c      	ldr	r3, [pc, #432]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e8:	4b68      	ldr	r3, [pc, #416]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ee:	4a67      	ldr	r2, [pc, #412]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019f8:	4b64      	ldr	r3, [pc, #400]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a06:	4b61      	ldr	r3, [pc, #388]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0c:	4a5f      	ldr	r2, [pc, #380]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a16:	4b5d      	ldr	r3, [pc, #372]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a24:	4b59      	ldr	r3, [pc, #356]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2a:	4a58      	ldr	r2, [pc, #352]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a34:	4b55      	ldr	r3, [pc, #340]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a42:	4b52      	ldr	r3, [pc, #328]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a48:	4a50      	ldr	r2, [pc, #320]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a52:	4b4e      	ldr	r3, [pc, #312]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	4b4a      	ldr	r3, [pc, #296]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a66:	4a49      	ldr	r2, [pc, #292]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a70:	4b46      	ldr	r3, [pc, #280]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b43      	ldr	r3, [pc, #268]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a84:	4a41      	ldr	r2, [pc, #260]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b8c <HAL_ETH_MspInit+0x240>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001a9c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001aa0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aae:	230b      	movs	r3, #11
 8001ab0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ab2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4835      	ldr	r0, [pc, #212]	@ (8001b90 <HAL_ETH_MspInit+0x244>)
 8001aba:	f003 fa43 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ace:	230b      	movs	r3, #11
 8001ad0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	482e      	ldr	r0, [pc, #184]	@ (8001b94 <HAL_ETH_MspInit+0x248>)
 8001ada:	f003 fa33 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ae2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001af0:	230b      	movs	r3, #11
 8001af2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001af8:	4619      	mov	r1, r3
 8001afa:	4827      	ldr	r0, [pc, #156]	@ (8001b98 <HAL_ETH_MspInit+0x24c>)
 8001afc:	f003 fa22 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001b00:	233e      	movs	r3, #62	@ 0x3e
 8001b02:	637b      	str	r3, [r7, #52]	@ 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b10:	230b      	movs	r3, #11
 8001b12:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4820      	ldr	r0, [pc, #128]	@ (8001b9c <HAL_ETH_MspInit+0x250>)
 8001b1c:	f003 fa12 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001b20:	230c      	movs	r3, #12
 8001b22:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b30:	230b      	movs	r3, #11
 8001b32:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4819      	ldr	r0, [pc, #100]	@ (8001ba0 <HAL_ETH_MspInit+0x254>)
 8001b3c:	f003 fa02 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001b40:	2386      	movs	r3, #134	@ 0x86
 8001b42:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b50:	230b      	movs	r3, #11
 8001b52:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4812      	ldr	r0, [pc, #72]	@ (8001ba4 <HAL_ETH_MspInit+0x258>)
 8001b5c:	f003 f9f2 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001b60:	2303      	movs	r3, #3
 8001b62:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b70:	230b      	movs	r3, #11
 8001b72:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480b      	ldr	r0, [pc, #44]	@ (8001ba8 <HAL_ETH_MspInit+0x25c>)
 8001b7c:	f003 f9e2 	bl	8004f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	3748      	adds	r7, #72	@ 0x48
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40028000 	.word	0x40028000
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	58021800 	.word	0x58021800
 8001b94:	58021000 	.word	0x58021000
 8001b98:	58022000 	.word	0x58022000
 8001b9c:	58020800 	.word	0x58020800
 8001ba0:	58021c00 	.word	0x58021c00
 8001ba4:	58020000 	.word	0x58020000
 8001ba8:	58020400 	.word	0x58020400

08001bac <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0bc      	sub	sp, #240	@ 0xf0
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc4:	f107 0318 	add.w	r3, r7, #24
 8001bc8:	22c0      	movs	r2, #192	@ 0xc0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00e fdf3 	bl	80107b8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a57      	ldr	r2, [pc, #348]	@ (8001d34 <HAL_FDCAN_MspInit+0x188>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d151      	bne.n	8001c80 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001bdc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001be8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001bec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf0:	f107 0318 	add.w	r3, r7, #24
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f005 ffb5 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001c00:	f7ff fd7e 	bl	8001700 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c04:	4b4c      	ldr	r3, [pc, #304]	@ (8001d38 <HAL_FDCAN_MspInit+0x18c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d38 <HAL_FDCAN_MspInit+0x18c>)
 8001c0c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d38 <HAL_FDCAN_MspInit+0x18c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d10e      	bne.n	8001c34 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c16:	4b49      	ldr	r3, [pc, #292]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001c18:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001c1c:	4a47      	ldr	r2, [pc, #284]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c22:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001c26:	4b45      	ldr	r3, [pc, #276]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001c28:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c34:	4b41      	ldr	r3, [pc, #260]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c3a:	4a40      	ldr	r2, [pc, #256]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c44:	4b3d      	ldr	r3, [pc, #244]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001c52:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001c56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c6c:	2309      	movs	r3, #9
 8001c6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c72:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c76:	4619      	mov	r1, r3
 8001c78:	4831      	ldr	r0, [pc, #196]	@ (8001d40 <HAL_FDCAN_MspInit+0x194>)
 8001c7a:	f003 f963 	bl	8004f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001c7e:	e055      	b.n	8001d2c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2f      	ldr	r2, [pc, #188]	@ (8001d44 <HAL_FDCAN_MspInit+0x198>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d150      	bne.n	8001d2c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c8a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001c96:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001c9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9e:	f107 0318 	add.w	r3, r7, #24
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f005 ff5e 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001cae:	f7ff fd27 	bl	8001700 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001cb2:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <HAL_FDCAN_MspInit+0x18c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d38 <HAL_FDCAN_MspInit+0x18c>)
 8001cba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <HAL_FDCAN_MspInit+0x18c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d10e      	bne.n	8001ce2 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001cc6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001cca:	4a1c      	ldr	r2, [pc, #112]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001cd6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce8:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_FDCAN_MspInit+0x190>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001d00:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001d04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001d1a:	2309      	movs	r3, #9
 8001d1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d20:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d24:	4619      	mov	r1, r3
 8001d26:	4808      	ldr	r0, [pc, #32]	@ (8001d48 <HAL_FDCAN_MspInit+0x19c>)
 8001d28:	f003 f90c 	bl	8004f44 <HAL_GPIO_Init>
}
 8001d2c:	bf00      	nop
 8001d2e:	37f0      	adds	r7, #240	@ 0xf0
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	4000a000 	.word	0x4000a000
 8001d38:	240010c8 	.word	0x240010c8
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	58021c00 	.word	0x58021c00
 8001d44:	4000a400 	.word	0x4000a400
 8001d48:	58020400 	.word	0x58020400

08001d4c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0be      	sub	sp, #248	@ 0xf8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d64:	f107 0320 	add.w	r3, r7, #32
 8001d68:	22c0      	movs	r2, #192	@ 0xc0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f00e fd23 	bl	80107b8 <memset>
  if(hltdc->Instance==LTDC)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a66      	ldr	r2, [pc, #408]	@ (8001f10 <HAL_LTDC_MspInit+0x1c4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	f040 80c4 	bne.w	8001f06 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d7e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001d8e:	23c0      	movs	r3, #192	@ 0xc0
 8001d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001d92:	2302      	movs	r3, #2
 8001d94:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001d96:	2302      	movs	r3, #2
 8001d98:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001d9e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001da8:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dae:	f107 0320 	add.w	r3, r7, #32
 8001db2:	4618      	mov	r0, r3
 8001db4:	f005 fed6 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001dbe:	f7ff fc9f 	bl	8001700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001dc2:	4b54      	ldr	r3, [pc, #336]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001dc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001dc8:	4a52      	ldr	r2, [pc, #328]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001dd2:	4b50      	ldr	r3, [pc, #320]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001dd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001de0:	4b4c      	ldr	r3, [pc, #304]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de6:	4a4b      	ldr	r2, [pc, #300]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001de8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df0:	4b48      	ldr	r3, [pc, #288]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dfe:	4b45      	ldr	r3, [pc, #276]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e04:	4a43      	ldr	r2, [pc, #268]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0e:	4b41      	ldr	r3, [pc, #260]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e22:	4a3c      	ldr	r2, [pc, #240]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001e24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e2c:	4b39      	ldr	r3, [pc, #228]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3a:	4b36      	ldr	r3, [pc, #216]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e40:	4a34      	ldr	r2, [pc, #208]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e4a:	4b32      	ldr	r3, [pc, #200]	@ (8001f14 <HAL_LTDC_MspInit+0x1c8>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8001e58:	23fc      	movs	r3, #252	@ 0xfc
 8001e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e70:	230e      	movs	r3, #14
 8001e72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e76:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4826      	ldr	r0, [pc, #152]	@ (8001f18 <HAL_LTDC_MspInit+0x1cc>)
 8001e7e:	f003 f861 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001e82:	f24d 2303 	movw	r3, #53763	@ 0xd203
 8001e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e9c:	230e      	movs	r3, #14
 8001e9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ea2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	481c      	ldr	r0, [pc, #112]	@ (8001f1c <HAL_LTDC_MspInit+0x1d0>)
 8001eaa:	f003 f84b 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001eae:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8001eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ec8:	230e      	movs	r3, #14
 8001eca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ece:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4812      	ldr	r0, [pc, #72]	@ (8001f20 <HAL_LTDC_MspInit+0x1d4>)
 8001ed6:	f003 f835 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ef4:	230e      	movs	r3, #14
 8001ef6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001efa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4808      	ldr	r0, [pc, #32]	@ (8001f24 <HAL_LTDC_MspInit+0x1d8>)
 8001f02:	f003 f81f 	bl	8004f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	37f8      	adds	r7, #248	@ 0xf8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	50001000 	.word	0x50001000
 8001f14:	58024400 	.word	0x58024400
 8001f18:	58022800 	.word	0x58022800
 8001f1c:	58022000 	.word	0x58022000
 8001f20:	58022400 	.word	0x58022400
 8001f24:	58021c00 	.word	0x58021c00

08001f28 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0bc      	sub	sp, #240	@ 0xf0
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	22c0      	movs	r2, #192	@ 0xc0
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00e fc35 	bl	80107b8 <memset>
  if(hqspi->Instance==QUADSPI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a56      	ldr	r2, [pc, #344]	@ (80020ac <HAL_QSPI_MspInit+0x184>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	f040 80a5 	bne.w	80020a4 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001f5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6a:	f107 0318 	add.w	r3, r7, #24
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f005 fdf8 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001f7a:	f7ff fbc1 	bl	8001700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001f80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f84:	4a4a      	ldr	r2, [pc, #296]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001f86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f8a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001f8e:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001f90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9c:	4b44      	ldr	r3, [pc, #272]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa2:	4a43      	ldr	r2, [pc, #268]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fac:	4b40      	ldr	r3, [pc, #256]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fba:	4b3d      	ldr	r3, [pc, #244]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc0:	4a3b      	ldr	r2, [pc, #236]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001fc2:	f043 0320 	orr.w	r3, r3, #32
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fca:	4b39      	ldr	r3, [pc, #228]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd8:	4b35      	ldr	r3, [pc, #212]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fde:	4a34      	ldr	r2, [pc, #208]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001fe0:	f043 0308 	orr.w	r3, r3, #8
 8001fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fe8:	4b31      	ldr	r3, [pc, #196]	@ (80020b0 <HAL_QSPI_MspInit+0x188>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ff6:	2340      	movs	r3, #64	@ 0x40
 8001ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800200e:	230a      	movs	r3, #10
 8002010:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002018:	4619      	mov	r1, r3
 800201a:	4826      	ldr	r0, [pc, #152]	@ (80020b4 <HAL_QSPI_MspInit+0x18c>)
 800201c:	f002 ff92 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002020:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002024:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800203a:	2309      	movs	r3, #9
 800203c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002040:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002044:	4619      	mov	r1, r3
 8002046:	481c      	ldr	r0, [pc, #112]	@ (80020b8 <HAL_QSPI_MspInit+0x190>)
 8002048:	f002 ff7c 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800204c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002050:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002066:	230a      	movs	r3, #10
 8002068:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800206c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002070:	4619      	mov	r1, r3
 8002072:	4811      	ldr	r0, [pc, #68]	@ (80020b8 <HAL_QSPI_MspInit+0x190>)
 8002074:	f002 ff66 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002078:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800207c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002092:	2309      	movs	r3, #9
 8002094:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002098:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800209c:	4619      	mov	r1, r3
 800209e:	4807      	ldr	r0, [pc, #28]	@ (80020bc <HAL_QSPI_MspInit+0x194>)
 80020a0:	f002 ff50 	bl	8004f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80020a4:	bf00      	nop
 80020a6:	37f0      	adds	r7, #240	@ 0xf0
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	52005000 	.word	0x52005000
 80020b0:	58024400 	.word	0x58024400
 80020b4:	58020400 	.word	0x58020400
 80020b8:	58021400 	.word	0x58021400
 80020bc:	58020c00 	.word	0x58020c00

080020c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b0b2      	sub	sp, #200	@ 0xc8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c8:	f107 0308 	add.w	r3, r7, #8
 80020cc:	22c0      	movs	r2, #192	@ 0xc0
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f00e fb71 	bl	80107b8 <memset>
  if(hrtc->Instance==RTC)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a10      	ldr	r2, [pc, #64]	@ (800211c <HAL_RTC_MspInit+0x5c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d119      	bne.n	8002114 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f4:	f107 0308 	add.w	r3, r7, #8
 80020f8:	4618      	mov	r0, r3
 80020fa:	f005 fd33 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002104:	f7ff fafc 	bl	8001700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <HAL_RTC_MspInit+0x60>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <HAL_RTC_MspInit+0x60>)
 800210e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002112:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002114:	bf00      	nop
 8002116:	37c8      	adds	r7, #200	@ 0xc8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	58004000 	.word	0x58004000
 8002120:	58024400 	.word	0x58024400

08002124 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0bc      	sub	sp, #240	@ 0xf0
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800213c:	f107 0318 	add.w	r3, r7, #24
 8002140:	22c0      	movs	r2, #192	@ 0xc0
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f00e fb37 	bl	80107b8 <memset>
  if(hmmc->Instance==SDMMC1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a4b      	ldr	r2, [pc, #300]	@ (800227c <HAL_MMC_MspInit+0x158>)
 8002150:	4293      	cmp	r3, r2
 8002152:	f040 808f 	bne.w	8002274 <HAL_MMC_MspInit+0x150>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002156:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002162:	2300      	movs	r3, #0
 8002164:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002166:	f107 0318 	add.w	r3, r7, #24
 800216a:	4618      	mov	r0, r3
 800216c:	f005 fcfa 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 8002176:	f7ff fac3 	bl	8001700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800217a:	4b41      	ldr	r3, [pc, #260]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 800217c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002180:	4a3f      	ldr	r2, [pc, #252]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002186:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800218a:	4b3d      	ldr	r3, [pc, #244]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 800218c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002198:	4b39      	ldr	r3, [pc, #228]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 800219a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219e:	4a38      	ldr	r2, [pc, #224]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021a8:	4b35      	ldr	r3, [pc, #212]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 80021aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	4b32      	ldr	r3, [pc, #200]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 80021b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021bc:	4a30      	ldr	r2, [pc, #192]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 80021c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021da:	4a29      	ldr	r2, [pc, #164]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021e4:	4b26      	ldr	r3, [pc, #152]	@ (8002280 <HAL_MMC_MspInit+0x15c>)
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D7
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 80021f2:	f44f 53fe 	mov.w	r3, #8128	@ 0x1fc0
 80021f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800220c:	230c      	movs	r3, #12
 800220e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002212:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002216:	4619      	mov	r1, r3
 8002218:	481a      	ldr	r0, [pc, #104]	@ (8002284 <HAL_MMC_MspInit+0x160>)
 800221a:	f002 fe93 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 800221e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002238:	230c      	movs	r3, #12
 800223a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002242:	4619      	mov	r1, r3
 8002244:	4810      	ldr	r0, [pc, #64]	@ (8002288 <HAL_MMC_MspInit+0x164>)
 8002246:	f002 fe7d 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800224a:	2304      	movs	r3, #4
 800224c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002262:	230c      	movs	r3, #12
 8002264:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800226c:	4619      	mov	r1, r3
 800226e:	4807      	ldr	r0, [pc, #28]	@ (800228c <HAL_MMC_MspInit+0x168>)
 8002270:	f002 fe68 	bl	8004f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002274:	bf00      	nop
 8002276:	37f0      	adds	r7, #240	@ 0xf0
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	52007000 	.word	0x52007000
 8002280:	58024400 	.word	0x58024400
 8002284:	58020800 	.word	0x58020800
 8002288:	58020400 	.word	0x58020400
 800228c:	58020c00 	.word	0x58020c00

08002290 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0bc      	sub	sp, #240	@ 0xf0
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	22c0      	movs	r2, #192	@ 0xc0
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00e fa81 	bl	80107b8 <memset>
  if(hspi->Instance==SPI2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a55      	ldr	r2, [pc, #340]	@ (8002410 <HAL_SPI_MspInit+0x180>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	f040 80a3 	bne.w	8002408 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80022c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d2:	f107 0318 	add.w	r3, r7, #24
 80022d6:	4618      	mov	r0, r3
 80022d8:	f005 fc44 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80022e2:	f7ff fa0d 	bl	8001700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 80022e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022ec:	4a49      	ldr	r2, [pc, #292]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 80022ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022f6:	4b47      	ldr	r3, [pc, #284]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 80022f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	4b43      	ldr	r3, [pc, #268]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 8002306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230a:	4a42      	ldr	r2, [pc, #264]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002314:	4b3f      	ldr	r3, [pc, #252]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 8002316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002322:	4b3c      	ldr	r3, [pc, #240]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 8002324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002328:	4a3a      	ldr	r2, [pc, #232]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002332:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 8002334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002340:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 8002342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002346:	4a33      	ldr	r2, [pc, #204]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002350:	4b30      	ldr	r3, [pc, #192]	@ (8002414 <HAL_SPI_MspInit+0x184>)
 8002352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800235e:	2310      	movs	r3, #16
 8002360:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002376:	2307      	movs	r3, #7
 8002378:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002380:	4619      	mov	r1, r3
 8002382:	4825      	ldr	r0, [pc, #148]	@ (8002418 <HAL_SPI_MspInit+0x188>)
 8002384:	f002 fdde 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002388:	2308      	movs	r3, #8
 800238a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a0:	2305      	movs	r3, #5
 80023a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023aa:	4619      	mov	r1, r3
 80023ac:	481b      	ldr	r0, [pc, #108]	@ (800241c <HAL_SPI_MspInit+0x18c>)
 80023ae:	f002 fdc9 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023b2:	2304      	movs	r3, #4
 80023b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023ca:	2305      	movs	r3, #5
 80023cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023d4:	4619      	mov	r1, r3
 80023d6:	4812      	ldr	r0, [pc, #72]	@ (8002420 <HAL_SPI_MspInit+0x190>)
 80023d8:	f002 fdb4 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023f6:	2305      	movs	r3, #5
 80023f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002400:	4619      	mov	r1, r3
 8002402:	4805      	ldr	r0, [pc, #20]	@ (8002418 <HAL_SPI_MspInit+0x188>)
 8002404:	f002 fd9e 	bl	8004f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002408:	bf00      	nop
 800240a:	37f0      	adds	r7, #240	@ 0xf0
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40003800 	.word	0x40003800
 8002414:	58024400 	.word	0x58024400
 8002418:	58020400 	.word	0x58020400
 800241c:	58020c00 	.word	0x58020c00
 8002420:	58022000 	.word	0x58022000

08002424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0bc      	sub	sp, #240	@ 0xf0
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800243c:	f107 0318 	add.w	r3, r7, #24
 8002440:	22c0      	movs	r2, #192	@ 0xc0
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f00e f9b7 	bl	80107b8 <memset>
  if(huart->Instance==USART2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a4d      	ldr	r2, [pc, #308]	@ (8002584 <HAL_UART_MspInit+0x160>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d146      	bne.n	80024e2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002454:	f04f 0202 	mov.w	r2, #2
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002466:	f107 0318 	add.w	r3, r7, #24
 800246a:	4618      	mov	r0, r3
 800246c:	f005 fb7a 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002476:	f7ff f943 	bl	8001700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800247a:	4b43      	ldr	r3, [pc, #268]	@ (8002588 <HAL_UART_MspInit+0x164>)
 800247c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002480:	4a41      	ldr	r2, [pc, #260]	@ (8002588 <HAL_UART_MspInit+0x164>)
 8002482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002486:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800248a:	4b3f      	ldr	r3, [pc, #252]	@ (8002588 <HAL_UART_MspInit+0x164>)
 800248c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002498:	4b3b      	ldr	r3, [pc, #236]	@ (8002588 <HAL_UART_MspInit+0x164>)
 800249a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800249e:	4a3a      	ldr	r2, [pc, #232]	@ (8002588 <HAL_UART_MspInit+0x164>)
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024a8:	4b37      	ldr	r3, [pc, #220]	@ (8002588 <HAL_UART_MspInit+0x164>)
 80024aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024b6:	2360      	movs	r3, #96	@ 0x60
 80024b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ce:	2307      	movs	r3, #7
 80024d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80024d8:	4619      	mov	r1, r3
 80024da:	482c      	ldr	r0, [pc, #176]	@ (800258c <HAL_UART_MspInit+0x168>)
 80024dc:	f002 fd32 	bl	8004f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024e0:	e04b      	b.n	800257a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002590 <HAL_UART_MspInit+0x16c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d146      	bne.n	800257a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024ec:	f04f 0202 	mov.w	r2, #2
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fe:	f107 0318 	add.w	r3, r7, #24
 8002502:	4618      	mov	r0, r3
 8002504:	f005 fb2e 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_UART_MspInit+0xee>
      Error_Handler();
 800250e:	f7ff f8f7 	bl	8001700 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002512:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <HAL_UART_MspInit+0x164>)
 8002514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002518:	4a1b      	ldr	r2, [pc, #108]	@ (8002588 <HAL_UART_MspInit+0x164>)
 800251a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002522:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_UART_MspInit+0x164>)
 8002524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_UART_MspInit+0x164>)
 8002532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002536:	4a14      	ldr	r2, [pc, #80]	@ (8002588 <HAL_UART_MspInit+0x164>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002540:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <HAL_UART_MspInit+0x164>)
 8002542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800254e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002552:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002568:	2307      	movs	r3, #7
 800256a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002572:	4619      	mov	r1, r3
 8002574:	4807      	ldr	r0, [pc, #28]	@ (8002594 <HAL_UART_MspInit+0x170>)
 8002576:	f002 fce5 	bl	8004f44 <HAL_GPIO_Init>
}
 800257a:	bf00      	nop
 800257c:	37f0      	adds	r7, #240	@ 0xf0
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40004400 	.word	0x40004400
 8002588:	58024400 	.word	0x58024400
 800258c:	58020c00 	.word	0x58020c00
 8002590:	40004800 	.word	0x40004800
 8002594:	58020400 	.word	0x58020400

08002598 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0ba      	sub	sp, #232	@ 0xe8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b0:	f107 0310 	add.w	r3, r7, #16
 80025b4:	22c0      	movs	r2, #192	@ 0xc0
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f00e f8fd 	bl	80107b8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a30      	ldr	r2, [pc, #192]	@ (8002684 <HAL_PCD_MspInit+0xec>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d159      	bne.n	800267c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80025c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80025d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80025d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	4618      	mov	r0, r3
 80025e2:	f005 fabf 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80025ec:	f7ff f888 	bl	8001700 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80025f0:	f004 f9c6 	bl	8006980 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	4b24      	ldr	r3, [pc, #144]	@ (8002688 <HAL_PCD_MspInit+0xf0>)
 80025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025fa:	4a23      	ldr	r2, [pc, #140]	@ (8002688 <HAL_PCD_MspInit+0xf0>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002604:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <HAL_PCD_MspInit+0xf0>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8002612:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800262a:	4619      	mov	r1, r3
 800262c:	4817      	ldr	r0, [pc, #92]	@ (800268c <HAL_PCD_MspInit+0xf4>)
 800262e:	f002 fc89 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8002632:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002636:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800264c:	230a      	movs	r3, #10
 800264e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002656:	4619      	mov	r1, r3
 8002658:	480c      	ldr	r0, [pc, #48]	@ (800268c <HAL_PCD_MspInit+0xf4>)
 800265a:	f002 fc73 	bl	8004f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800265e:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <HAL_PCD_MspInit+0xf0>)
 8002660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002664:	4a08      	ldr	r2, [pc, #32]	@ (8002688 <HAL_PCD_MspInit+0xf0>)
 8002666:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800266a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <HAL_PCD_MspInit+0xf0>)
 8002670:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	37e8      	adds	r7, #232	@ 0xe8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40080000 	.word	0x40080000
 8002688:	58024400 	.word	0x58024400
 800268c:	58020000 	.word	0x58020000

08002690 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002690:	b580      	push	{r7, lr}
 8002692:	b0b8      	sub	sp, #224	@ 0xe0
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002696:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80026a6:	4b51      	ldr	r3, [pc, #324]	@ (80027ec <HAL_FMC_MspInit+0x15c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 8099 	bne.w	80027e2 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80026b0:	4b4e      	ldr	r3, [pc, #312]	@ (80027ec <HAL_FMC_MspInit+0x15c>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b6:	f107 0308 	add.w	r3, r7, #8
 80026ba:	22c0      	movs	r2, #192	@ 0xc0
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f00e f87a 	bl	80107b8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80026c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	4618      	mov	r0, r3
 80026da:	f005 fa43 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80026e4:	f7ff f80c 	bl	8001700 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80026e8:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <HAL_FMC_MspInit+0x160>)
 80026ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80026ee:	4a40      	ldr	r2, [pc, #256]	@ (80027f0 <HAL_FMC_MspInit+0x160>)
 80026f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80026f8:	4b3d      	ldr	r3, [pc, #244]	@ (80027f0 <HAL_FMC_MspInit+0x160>)
 80026fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80026fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002706:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800270a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002720:	230c      	movs	r3, #12
 8002722:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002726:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800272a:	4619      	mov	r1, r3
 800272c:	4831      	ldr	r0, [pc, #196]	@ (80027f4 <HAL_FMC_MspInit+0x164>)
 800272e:	f002 fc09 	bl	8004f44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002732:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002736:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800274c:	230c      	movs	r3, #12
 800274e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002752:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002756:	4619      	mov	r1, r3
 8002758:	4827      	ldr	r0, [pc, #156]	@ (80027f8 <HAL_FMC_MspInit+0x168>)
 800275a:	f002 fbf3 	bl	8004f44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800275e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002762:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002778:	230c      	movs	r3, #12
 800277a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002782:	4619      	mov	r1, r3
 8002784:	481d      	ldr	r0, [pc, #116]	@ (80027fc <HAL_FMC_MspInit+0x16c>)
 8002786:	f002 fbdd 	bl	8004f44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800278a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800278e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	2302      	movs	r3, #2
 8002794:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027a4:	230c      	movs	r3, #12
 80027a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027aa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027ae:	4619      	mov	r1, r3
 80027b0:	4813      	ldr	r0, [pc, #76]	@ (8002800 <HAL_FMC_MspInit+0x170>)
 80027b2:	f002 fbc7 	bl	8004f44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027b6:	23e0      	movs	r3, #224	@ 0xe0
 80027b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027ce:	230c      	movs	r3, #12
 80027d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027d4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027d8:	4619      	mov	r1, r3
 80027da:	480a      	ldr	r0, [pc, #40]	@ (8002804 <HAL_FMC_MspInit+0x174>)
 80027dc:	f002 fbb2 	bl	8004f44 <HAL_GPIO_Init>
 80027e0:	e000      	b.n	80027e4 <HAL_FMC_MspInit+0x154>
    return;
 80027e2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80027e4:	37e0      	adds	r7, #224	@ 0xe0
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	240010cc 	.word	0x240010cc
 80027f0:	58024400 	.word	0x58024400
 80027f4:	58021000 	.word	0x58021000
 80027f8:	58021800 	.word	0x58021800
 80027fc:	58020c00 	.word	0x58020c00
 8002800:	58021400 	.word	0x58021400
 8002804:	58021c00 	.word	0x58021c00

08002808 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002810:	f7ff ff3e 	bl	8002690 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b0ba      	sub	sp, #232	@ 0xe8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002824:	f107 0310 	add.w	r3, r7, #16
 8002828:	22c0      	movs	r2, #192	@ 0xc0
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f00d ffc3 	bl	80107b8 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a45      	ldr	r2, [pc, #276]	@ (800294c <HAL_SAI_MspInit+0x130>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d13e      	bne.n	80028ba <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800283c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002848:	2300      	movs	r3, #0
 800284a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	4618      	mov	r0, r3
 8002852:	f005 f987 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 800285c:	f7fe ff50 	bl	8001700 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002860:	4b3b      	ldr	r3, [pc, #236]	@ (8002950 <HAL_SAI_MspInit+0x134>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10e      	bne.n	8002886 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002868:	4b3a      	ldr	r3, [pc, #232]	@ (8002954 <HAL_SAI_MspInit+0x138>)
 800286a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800286e:	4a39      	ldr	r2, [pc, #228]	@ (8002954 <HAL_SAI_MspInit+0x138>)
 8002870:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002874:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002878:	4b36      	ldr	r3, [pc, #216]	@ (8002954 <HAL_SAI_MspInit+0x138>)
 800287a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800287e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002886:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <HAL_SAI_MspInit+0x134>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	4a30      	ldr	r2, [pc, #192]	@ (8002950 <HAL_SAI_MspInit+0x134>)
 800288e:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002890:	23f0      	movs	r3, #240	@ 0xf0
 8002892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80028a8:	230a      	movs	r3, #10
 80028aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4828      	ldr	r0, [pc, #160]	@ (8002958 <HAL_SAI_MspInit+0x13c>)
 80028b6:	f002 fb45 	bl	8004f44 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a27      	ldr	r2, [pc, #156]	@ (800295c <HAL_SAI_MspInit+0x140>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d13f      	bne.n	8002944 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80028c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	4618      	mov	r0, r3
 80028da:	f005 f943 	bl	8007b64 <HAL_RCCEx_PeriphCLKConfig>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80028e4:	f7fe ff0c 	bl	8001700 <Error_Handler>
    }

      if (SAI2_client == 0)
 80028e8:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_SAI_MspInit+0x134>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10e      	bne.n	800290e <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80028f0:	4b18      	ldr	r3, [pc, #96]	@ (8002954 <HAL_SAI_MspInit+0x138>)
 80028f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f6:	4a17      	ldr	r2, [pc, #92]	@ (8002954 <HAL_SAI_MspInit+0x138>)
 80028f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002900:	4b14      	ldr	r3, [pc, #80]	@ (8002954 <HAL_SAI_MspInit+0x138>)
 8002902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002906:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800290e:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_SAI_MspInit+0x134>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	4a0e      	ldr	r2, [pc, #56]	@ (8002950 <HAL_SAI_MspInit+0x134>)
 8002916:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800291c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002932:	230a      	movs	r3, #10
 8002934:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002938:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800293c:	4619      	mov	r1, r3
 800293e:	4808      	ldr	r0, [pc, #32]	@ (8002960 <HAL_SAI_MspInit+0x144>)
 8002940:	f002 fb00 	bl	8004f44 <HAL_GPIO_Init>

    }
}
 8002944:	bf00      	nop
 8002946:	37e8      	adds	r7, #232	@ 0xe8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40015c04 	.word	0x40015c04
 8002950:	240010d0 	.word	0x240010d0
 8002954:	58024400 	.word	0x58024400
 8002958:	58022000 	.word	0x58022000
 800295c:	40015c24 	.word	0x40015c24
 8002960:	58021800 	.word	0x58021800

08002964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b090      	sub	sp, #64	@ 0x40
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b0f      	cmp	r3, #15
 8002970:	d827      	bhi.n	80029c2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002972:	2200      	movs	r2, #0
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	2036      	movs	r0, #54	@ 0x36
 8002978:	f001 fb34 	bl	8003fe4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800297c:	2036      	movs	r0, #54	@ 0x36
 800297e:	f001 fb4b 	bl	8004018 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002982:	4a29      	ldr	r2, [pc, #164]	@ (8002a28 <HAL_InitTick+0xc4>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002988:	4b28      	ldr	r3, [pc, #160]	@ (8002a2c <HAL_InitTick+0xc8>)
 800298a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800298e:	4a27      	ldr	r2, [pc, #156]	@ (8002a2c <HAL_InitTick+0xc8>)
 8002990:	f043 0310 	orr.w	r3, r3, #16
 8002994:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002998:	4b24      	ldr	r3, [pc, #144]	@ (8002a2c <HAL_InitTick+0xc8>)
 800299a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029a6:	f107 0210 	add.w	r2, r7, #16
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f005 f895 	bl	8007ae0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <HAL_InitTick+0x6a>
 80029c0:	e001      	b.n	80029c6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e02b      	b.n	8002a1e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029c6:	f005 f85f 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 80029ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80029cc:	e004      	b.n	80029d8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029ce:	f005 f85b 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 80029d2:	4603      	mov	r3, r0
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029da:	4a15      	ldr	r2, [pc, #84]	@ (8002a30 <HAL_InitTick+0xcc>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	0c9b      	lsrs	r3, r3, #18
 80029e2:	3b01      	subs	r3, #1
 80029e4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029e6:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <HAL_InitTick+0xd0>)
 80029e8:	4a13      	ldr	r2, [pc, #76]	@ (8002a38 <HAL_InitTick+0xd4>)
 80029ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029ec:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <HAL_InitTick+0xd0>)
 80029ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002a34 <HAL_InitTick+0xd0>)
 80029f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002a34 <HAL_InitTick+0xd0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a00:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <HAL_InitTick+0xd0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a06:	480b      	ldr	r0, [pc, #44]	@ (8002a34 <HAL_InitTick+0xd0>)
 8002a08:	f008 fb21 	bl	800b04e <HAL_TIM_Base_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d104      	bne.n	8002a1c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a12:	4808      	ldr	r0, [pc, #32]	@ (8002a34 <HAL_InitTick+0xd0>)
 8002a14:	f008 fb7c 	bl	800b110 <HAL_TIM_Base_Start_IT>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	e000      	b.n	8002a1e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3740      	adds	r7, #64	@ 0x40
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	24000008 	.word	0x24000008
 8002a2c:	58024400 	.word	0x58024400
 8002a30:	431bde83 	.word	0x431bde83
 8002a34:	240010d4 	.word	0x240010d4
 8002a38:	40001000 	.word	0x40001000

08002a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <NMI_Handler+0x4>

08002a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <HardFault_Handler+0x4>

08002a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <MemManage_Handler+0x4>

08002a54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <BusFault_Handler+0x4>

08002a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <UsageFault_Handler+0x4>

08002a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a78:	4802      	ldr	r0, [pc, #8]	@ (8002a84 <TIM6_DAC_IRQHandler+0x10>)
 8002a7a:	f008 fbc1 	bl	800b200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	240010d4 	.word	0x240010d4

08002a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a8c:	4b37      	ldr	r3, [pc, #220]	@ (8002b6c <SystemInit+0xe4>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	4a36      	ldr	r2, [pc, #216]	@ (8002b6c <SystemInit+0xe4>)
 8002a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a9c:	4b34      	ldr	r3, [pc, #208]	@ (8002b70 <SystemInit+0xe8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	2b06      	cmp	r3, #6
 8002aa6:	d807      	bhi.n	8002ab8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002aa8:	4b31      	ldr	r3, [pc, #196]	@ (8002b70 <SystemInit+0xe8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 030f 	bic.w	r3, r3, #15
 8002ab0:	4a2f      	ldr	r2, [pc, #188]	@ (8002b70 <SystemInit+0xe8>)
 8002ab2:	f043 0307 	orr.w	r3, r3, #7
 8002ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b74 <SystemInit+0xec>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2d      	ldr	r2, [pc, #180]	@ (8002b74 <SystemInit+0xec>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b74 <SystemInit+0xec>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002aca:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <SystemInit+0xec>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4929      	ldr	r1, [pc, #164]	@ (8002b74 <SystemInit+0xec>)
 8002ad0:	4b29      	ldr	r3, [pc, #164]	@ (8002b78 <SystemInit+0xf0>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ad6:	4b26      	ldr	r3, [pc, #152]	@ (8002b70 <SystemInit+0xe8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ae2:	4b23      	ldr	r3, [pc, #140]	@ (8002b70 <SystemInit+0xe8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 030f 	bic.w	r3, r3, #15
 8002aea:	4a21      	ldr	r2, [pc, #132]	@ (8002b70 <SystemInit+0xe8>)
 8002aec:	f043 0307 	orr.w	r3, r3, #7
 8002af0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002af2:	4b20      	ldr	r3, [pc, #128]	@ (8002b74 <SystemInit+0xec>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002af8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <SystemInit+0xec>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002afe:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <SystemInit+0xec>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <SystemInit+0xec>)
 8002b06:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <SystemInit+0xf4>)
 8002b08:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <SystemInit+0xec>)
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b80 <SystemInit+0xf8>)
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b10:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <SystemInit+0xec>)
 8002b12:	4a1c      	ldr	r2, [pc, #112]	@ (8002b84 <SystemInit+0xfc>)
 8002b14:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b16:	4b17      	ldr	r3, [pc, #92]	@ (8002b74 <SystemInit+0xec>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b1c:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <SystemInit+0xec>)
 8002b1e:	4a19      	ldr	r2, [pc, #100]	@ (8002b84 <SystemInit+0xfc>)
 8002b20:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b22:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <SystemInit+0xec>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b28:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <SystemInit+0xec>)
 8002b2a:	4a16      	ldr	r2, [pc, #88]	@ (8002b84 <SystemInit+0xfc>)
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <SystemInit+0xec>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <SystemInit+0xec>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0e      	ldr	r2, [pc, #56]	@ (8002b74 <SystemInit+0xec>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <SystemInit+0xec>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <SystemInit+0x100>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <SystemInit+0x104>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b52:	d202      	bcs.n	8002b5a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <SystemInit+0x108>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <SystemInit+0x10c>)
 8002b5c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002b60:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00
 8002b70:	52002000 	.word	0x52002000
 8002b74:	58024400 	.word	0x58024400
 8002b78:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b7c:	02020200 	.word	0x02020200
 8002b80:	01ff0000 	.word	0x01ff0000
 8002b84:	01010280 	.word	0x01010280
 8002b88:	5c001000 	.word	0x5c001000
 8002b8c:	ffff0000 	.word	0xffff0000
 8002b90:	51008108 	.word	0x51008108
 8002b94:	52004000 	.word	0x52004000

08002b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b9c:	f7ff ff74 	bl	8002a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ba0:	480c      	ldr	r0, [pc, #48]	@ (8002bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ba2:	490d      	ldr	r1, [pc, #52]	@ (8002bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba8:	e002      	b.n	8002bb0 <LoopCopyDataInit>

08002baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bae:	3304      	adds	r3, #4

08002bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb4:	d3f9      	bcc.n	8002baa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bbc:	e001      	b.n	8002bc2 <LoopFillZerobss>

08002bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc0:	3204      	adds	r2, #4

08002bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc4:	d3fb      	bcc.n	8002bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bc6:	f00d fe55 	bl	8010874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bca:	f7fd fd01 	bl	80005d0 <main>
  bx  lr
 8002bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bd0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002bd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002bd8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002bdc:	08010ad4 	.word	0x08010ad4
  ldr r2, =_sbss
 8002be0:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8002be4:	24005c4c 	.word	0x24005c4c

08002be8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be8:	e7fe      	b.n	8002be8 <ADC3_IRQHandler>
	...

08002bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf2:	2003      	movs	r0, #3
 8002bf4:	f001 f9eb 	bl	8003fce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bf8:	f004 fd9c 	bl	8007734 <HAL_RCC_GetSysClockFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <HAL_Init+0x68>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	4913      	ldr	r1, [pc, #76]	@ (8002c58 <HAL_Init+0x6c>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
 8002c14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c16:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <HAL_Init+0x68>)
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c58 <HAL_Init+0x6c>)
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c5c <HAL_Init+0x70>)
 8002c2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c30:	4a0b      	ldr	r2, [pc, #44]	@ (8002c60 <HAL_Init+0x74>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c36:	200f      	movs	r0, #15
 8002c38:	f7ff fe94 	bl	8002964 <HAL_InitTick>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e002      	b.n	8002c4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c46:	f7fe fd61 	bl	800170c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	58024400 	.word	0x58024400
 8002c58:	08010a8c 	.word	0x08010a8c
 8002c5c:	24000004 	.word	0x24000004
 8002c60:	24000000 	.word	0x24000000

08002c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_IncTick+0x20>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_IncTick+0x24>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <HAL_IncTick+0x24>)
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	2400000c 	.word	0x2400000c
 8002c88:	24001120 	.word	0x24001120

08002c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c90:	4b03      	ldr	r3, [pc, #12]	@ (8002ca0 <HAL_GetTick+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	24001120 	.word	0x24001120

08002ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff ffee 	bl	8002c8c <HAL_GetTick>
 8002cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d005      	beq.n	8002cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <HAL_Delay+0x44>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cca:	bf00      	nop
 8002ccc:	f7ff ffde 	bl	8002c8c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d8f7      	bhi.n	8002ccc <HAL_Delay+0x28>
  {
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2400000c 	.word	0x2400000c

08002cec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002cf0:	4b03      	ldr	r3, [pc, #12]	@ (8002d00 <HAL_GetREVID+0x14>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0c1b      	lsrs	r3, r3, #16
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	5c001000 	.word	0x5c001000

08002d04 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002d14:	4904      	ldr	r1, [pc, #16]	@ (8002d28 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	58000400 	.word	0x58000400

08002d2c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002d36:	4b07      	ldr	r3, [pc, #28]	@ (8002d54 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	4904      	ldr	r1, [pc, #16]	@ (8002d54 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	58000400 	.word	0x58000400

08002d58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	609a      	str	r2, [r3, #8]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3360      	adds	r3, #96	@ 0x60
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	431a      	orrs	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	611a      	str	r2, [r3, #16]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b087      	sub	sp, #28
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3360      	adds	r3, #96	@ 0x60
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	601a      	str	r2, [r3, #0]
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3330      	adds	r3, #48	@ 0x30
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	4413      	add	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	211f      	movs	r1, #31
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	0e9b      	lsrs	r3, r3, #26
 8002ea0:	f003 011f 	and.w	r1, r3, #31
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3314      	adds	r3, #20
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	0e5b      	lsrs	r3, r3, #25
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	4413      	add	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	0d1b      	lsrs	r3, r3, #20
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2107      	movs	r1, #7
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	0d1b      	lsrs	r3, r3, #20
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	431a      	orrs	r2, r3
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f30:	43db      	mvns	r3, r3
 8002f32:	401a      	ands	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0318 	and.w	r3, r3, #24
 8002f3a:	4908      	ldr	r1, [pc, #32]	@ (8002f5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f3c:	40d9      	lsrs	r1, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	400b      	ands	r3, r1
 8002f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f46:	431a      	orrs	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	000fffff 	.word	0x000fffff

08002f60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6093      	str	r3, [r2, #8]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	5fffffc0 	.word	0x5fffffc0

08002f84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f98:	d101      	bne.n	8002f9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	6fffffc0 	.word	0x6fffffc0

08002fd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fe8:	d101      	bne.n	8002fee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <LL_ADC_IsEnabled+0x18>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <LL_ADC_IsEnabled+0x1a>
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b04      	cmp	r3, #4
 8003034:	d101      	bne.n	800303a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b08      	cmp	r3, #8
 800305a:	d101      	bne.n	8003060 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b089      	sub	sp, #36	@ 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800307c:	2300      	movs	r3, #0
 800307e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e18f      	b.n	80033aa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fe fb55 	bl	8001748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff67 	bl	8002f84 <LL_ADC_IsDeepPowerDownEnabled>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff4d 	bl	8002f60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff82 	bl	8002fd4 <LL_ADC_IsInternalRegulatorEnabled>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d114      	bne.n	8003100 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff66 	bl	8002fac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e0:	4b87      	ldr	r3, [pc, #540]	@ (8003300 <HAL_ADC_Init+0x290>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	4a87      	ldr	r2, [pc, #540]	@ (8003304 <HAL_ADC_Init+0x294>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	3301      	adds	r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030f2:	e002      	b.n	80030fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f9      	bne.n	80030f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff65 	bl	8002fd4 <LL_ADC_IsInternalRegulatorEnabled>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10d      	bne.n	800312c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003114:	f043 0210 	orr.w	r2, r3, #16
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003120:	f043 0201 	orr.w	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff76 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 8003136:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 8129 	bne.w	8003398 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f040 8125 	bne.w	8003398 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003152:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003156:	f043 0202 	orr.w	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ff4a 	bl	8002ffc <LL_ADC_IsEnabled>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d136      	bne.n	80031dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a65      	ldr	r2, [pc, #404]	@ (8003308 <HAL_ADC_Init+0x298>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d004      	beq.n	8003182 <HAL_ADC_Init+0x112>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a63      	ldr	r2, [pc, #396]	@ (800330c <HAL_ADC_Init+0x29c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d10e      	bne.n	80031a0 <HAL_ADC_Init+0x130>
 8003182:	4861      	ldr	r0, [pc, #388]	@ (8003308 <HAL_ADC_Init+0x298>)
 8003184:	f7ff ff3a 	bl	8002ffc <LL_ADC_IsEnabled>
 8003188:	4604      	mov	r4, r0
 800318a:	4860      	ldr	r0, [pc, #384]	@ (800330c <HAL_ADC_Init+0x29c>)
 800318c:	f7ff ff36 	bl	8002ffc <LL_ADC_IsEnabled>
 8003190:	4603      	mov	r3, r0
 8003192:	4323      	orrs	r3, r4
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e008      	b.n	80031b2 <HAL_ADC_Init+0x142>
 80031a0:	485b      	ldr	r0, [pc, #364]	@ (8003310 <HAL_ADC_Init+0x2a0>)
 80031a2:	f7ff ff2b 	bl	8002ffc <LL_ADC_IsEnabled>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d012      	beq.n	80031dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a53      	ldr	r2, [pc, #332]	@ (8003308 <HAL_ADC_Init+0x298>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d004      	beq.n	80031ca <HAL_ADC_Init+0x15a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a51      	ldr	r2, [pc, #324]	@ (800330c <HAL_ADC_Init+0x29c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_Init+0x15e>
 80031ca:	4a52      	ldr	r2, [pc, #328]	@ (8003314 <HAL_ADC_Init+0x2a4>)
 80031cc:	e000      	b.n	80031d0 <HAL_ADC_Init+0x160>
 80031ce:	4a52      	ldr	r2, [pc, #328]	@ (8003318 <HAL_ADC_Init+0x2a8>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f7ff fdbe 	bl	8002d58 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80031dc:	f7ff fd86 	bl	8002cec <HAL_GetREVID>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d914      	bls.n	8003214 <HAL_ADC_Init+0x1a4>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d110      	bne.n	8003214 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7d5b      	ldrb	r3, [r3, #21]
 80031f6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031fc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003202:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7f1b      	ldrb	r3, [r3, #28]
 8003208:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800320a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800320c:	f043 030c 	orr.w	r3, r3, #12
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	e00d      	b.n	8003230 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7d5b      	ldrb	r3, [r3, #21]
 8003218:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800321e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003224:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7f1b      	ldrb	r3, [r3, #28]
 800322a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7f1b      	ldrb	r3, [r3, #28]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d106      	bne.n	8003246 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	3b01      	subs	r3, #1
 800323e:	045b      	lsls	r3, r3, #17
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	4b2c      	ldr	r3, [pc, #176]	@ (800331c <HAL_ADC_Init+0x2ac>)
 800326a:	4013      	ands	r3, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	430b      	orrs	r3, r1
 8003274:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fed1 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 8003280:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fede 	bl	8003048 <LL_ADC_INJ_IsConversionOngoing>
 800328c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d15f      	bne.n	8003354 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d15c      	bne.n	8003354 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7d1b      	ldrb	r3, [r3, #20]
 800329e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003320 <HAL_ADC_Init+0x2b0>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	69b9      	ldr	r1, [r7, #24]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d130      	bne.n	8003328 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	4b14      	ldr	r3, [pc, #80]	@ (8003324 <HAL_ADC_Init+0x2b4>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032da:	3a01      	subs	r2, #1
 80032dc:	0411      	lsls	r1, r2, #16
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032ee:	430a      	orrs	r2, r1
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	611a      	str	r2, [r3, #16]
 80032fc:	e01c      	b.n	8003338 <HAL_ADC_Init+0x2c8>
 80032fe:	bf00      	nop
 8003300:	24000000 	.word	0x24000000
 8003304:	053e2d63 	.word	0x053e2d63
 8003308:	40022000 	.word	0x40022000
 800330c:	40022100 	.word	0x40022100
 8003310:	58026000 	.word	0x58026000
 8003314:	40022300 	.word	0x40022300
 8003318:	58026300 	.word	0x58026300
 800331c:	fff0c003 	.word	0xfff0c003
 8003320:	ffffbffc 	.word	0xffffbffc
 8003324:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fb80 	bl	8003a54 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d10c      	bne.n	8003376 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003362:	f023 010f 	bic.w	r1, r3, #15
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	1e5a      	subs	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	631a      	str	r2, [r3, #48]	@ 0x30
 8003374:	e007      	b.n	8003386 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 020f 	bic.w	r2, r2, #15
 8003384:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	655a      	str	r2, [r3, #84]	@ 0x54
 8003396:	e007      	b.n	80033a8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339c:	f043 0210 	orr.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3724      	adds	r7, #36	@ 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd90      	pop	{r4, r7, pc}
 80033b2:	bf00      	nop

080033b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b0a1      	sub	sp, #132	@ 0x84
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a9d      	ldr	r2, [pc, #628]	@ (8003644 <HAL_ADC_ConfigChannel+0x290>)
 80033ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_ADC_ConfigChannel+0x2a>
 80033da:	2302      	movs	r3, #2
 80033dc:	e321      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x66e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fe19 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 8306 	bne.w	8003a04 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003400:	2b00      	cmp	r3, #0
 8003402:	d108      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x62>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0e9b      	lsrs	r3, r3, #26
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	2201      	movs	r2, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	e016      	b.n	8003444 <HAL_ADC_ConfigChannel+0x90>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003424:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003426:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003428:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800342e:	2320      	movs	r3, #32
 8003430:	e003      	b.n	800343a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003432:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2201      	movs	r2, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	69d1      	ldr	r1, [r2, #28]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	430b      	orrs	r3, r1
 8003450:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	f7ff fd02 	bl	8002e68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fdda 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 800346e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fde7 	bl	8003048 <LL_ADC_INJ_IsConversionOngoing>
 800347a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800347c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 80b3 	bne.w	80035ea <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 80af 	bne.w	80035ea <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	461a      	mov	r2, r3
 800349a:	f7ff fd11 	bl	8002ec0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800349e:	4b6a      	ldr	r3, [pc, #424]	@ (8003648 <HAL_ADC_ConfigChannel+0x294>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80034a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034aa:	d10b      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x110>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	e01d      	b.n	8003500 <HAL_ADC_ConfigChannel+0x14c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x136>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	089b      	lsrs	r3, r3, #2
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	e00a      	b.n	8003500 <HAL_ADC_ConfigChannel+0x14c>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b04      	cmp	r3, #4
 8003508:	d027      	beq.n	800355a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6919      	ldr	r1, [r3, #16]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003518:	f7ff fc52 	bl	8002dc0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6919      	ldr	r1, [r3, #16]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	7e5b      	ldrb	r3, [r3, #25]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d102      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x17e>
 800352c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003530:	e000      	b.n	8003534 <HAL_ADC_ConfigChannel+0x180>
 8003532:	2300      	movs	r3, #0
 8003534:	461a      	mov	r2, r3
 8003536:	f7ff fc7c 	bl	8002e32 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6919      	ldr	r1, [r3, #16]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	7e1b      	ldrb	r3, [r3, #24]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d102      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x19c>
 800354a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800354e:	e000      	b.n	8003552 <HAL_ADC_ConfigChannel+0x19e>
 8003550:	2300      	movs	r3, #0
 8003552:	461a      	mov	r2, r3
 8003554:	f7ff fc54 	bl	8002e00 <LL_ADC_SetDataRightShift>
 8003558:	e047      	b.n	80035ea <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003560:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	069b      	lsls	r3, r3, #26
 800356a:	429a      	cmp	r2, r3
 800356c:	d107      	bne.n	800357e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800357c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003584:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	069b      	lsls	r3, r3, #26
 800358e:	429a      	cmp	r2, r3
 8003590:	d107      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035a0:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	069b      	lsls	r3, r3, #26
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d107      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035c4:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	069b      	lsls	r3, r3, #26
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d107      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fd04 	bl	8002ffc <LL_ADC_IsEnabled>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 820d 	bne.w	8003a16 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6819      	ldr	r1, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	461a      	mov	r2, r3
 800360a:	f7ff fc85 	bl	8002f18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4a0c      	ldr	r2, [pc, #48]	@ (8003644 <HAL_ADC_ConfigChannel+0x290>)
 8003614:	4293      	cmp	r3, r2
 8003616:	f040 8133 	bne.w	8003880 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003626:	2b00      	cmp	r3, #0
 8003628:	d110      	bne.n	800364c <HAL_ADC_ConfigChannel+0x298>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	0e9b      	lsrs	r3, r3, #26
 8003630:	3301      	adds	r3, #1
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	2b09      	cmp	r3, #9
 8003638:	bf94      	ite	ls
 800363a:	2301      	movls	r3, #1
 800363c:	2300      	movhi	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	e01e      	b.n	8003680 <HAL_ADC_ConfigChannel+0x2cc>
 8003642:	bf00      	nop
 8003644:	47ff0000 	.word	0x47ff0000
 8003648:	5c001000 	.word	0x5c001000
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800365a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800365e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003664:	2320      	movs	r3, #32
 8003666:	e003      	b.n	8003670 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3301      	adds	r3, #1
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	2b09      	cmp	r3, #9
 8003678:	bf94      	ite	ls
 800367a:	2301      	movls	r3, #1
 800367c:	2300      	movhi	r3, #0
 800367e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003680:	2b00      	cmp	r3, #0
 8003682:	d079      	beq.n	8003778 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x2ec>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0e9b      	lsrs	r3, r3, #26
 8003696:	3301      	adds	r3, #1
 8003698:	069b      	lsls	r3, r3, #26
 800369a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800369e:	e015      	b.n	80036cc <HAL_ADC_ConfigChannel+0x318>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80036ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80036b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e003      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80036bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	069b      	lsls	r3, r3, #26
 80036c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x338>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	3301      	adds	r3, #1
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	e017      	b.n	800371c <HAL_ADC_ConfigChannel+0x368>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80036fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80036fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003704:	2320      	movs	r3, #32
 8003706:	e003      	b.n	8003710 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	3301      	adds	r3, #1
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	ea42 0103 	orr.w	r1, r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x38e>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	0e9b      	lsrs	r3, r3, #26
 8003732:	3301      	adds	r3, #1
 8003734:	f003 021f 	and.w	r2, r3, #31
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	051b      	lsls	r3, r3, #20
 8003740:	e018      	b.n	8003774 <HAL_ADC_ConfigChannel+0x3c0>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800375a:	2320      	movs	r3, #32
 800375c:	e003      	b.n	8003766 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	fab3 f383 	clz	r3, r3
 8003764:	b2db      	uxtb	r3, r3
 8003766:	3301      	adds	r3, #1
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003774:	430b      	orrs	r3, r1
 8003776:	e07e      	b.n	8003876 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003780:	2b00      	cmp	r3, #0
 8003782:	d107      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x3e0>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0e9b      	lsrs	r3, r3, #26
 800378a:	3301      	adds	r3, #1
 800378c:	069b      	lsls	r3, r3, #26
 800378e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003792:	e015      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x40c>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80037a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80037ac:	2320      	movs	r3, #32
 80037ae:	e003      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80037b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	3301      	adds	r3, #1
 80037ba:	069b      	lsls	r3, r3, #26
 80037bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x42c>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0e9b      	lsrs	r3, r3, #26
 80037d2:	3301      	adds	r3, #1
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	e017      	b.n	8003810 <HAL_ADC_ConfigChannel+0x45c>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	61bb      	str	r3, [r7, #24]
  return result;
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80037f8:	2320      	movs	r3, #32
 80037fa:	e003      	b.n	8003804 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	3301      	adds	r3, #1
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	ea42 0103 	orr.w	r1, r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10d      	bne.n	800383c <HAL_ADC_ConfigChannel+0x488>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	0e9b      	lsrs	r3, r3, #26
 8003826:	3301      	adds	r3, #1
 8003828:	f003 021f 	and.w	r2, r3, #31
 800382c:	4613      	mov	r3, r2
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	4413      	add	r3, r2
 8003832:	3b1e      	subs	r3, #30
 8003834:	051b      	lsls	r3, r3, #20
 8003836:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800383a:	e01b      	b.n	8003874 <HAL_ADC_ConfigChannel+0x4c0>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	60fb      	str	r3, [r7, #12]
  return result;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003854:	2320      	movs	r3, #32
 8003856:	e003      	b.n	8003860 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	3301      	adds	r3, #1
 8003862:	f003 021f 	and.w	r2, r3, #31
 8003866:	4613      	mov	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	3b1e      	subs	r3, #30
 800386e:	051b      	lsls	r3, r3, #20
 8003870:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003874:	430b      	orrs	r3, r1
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	6892      	ldr	r2, [r2, #8]
 800387a:	4619      	mov	r1, r3
 800387c:	f7ff fb20 	bl	8002ec0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f280 80c6 	bge.w	8003a16 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a67      	ldr	r2, [pc, #412]	@ (8003a2c <HAL_ADC_ConfigChannel+0x678>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_ADC_ConfigChannel+0x4ea>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a65      	ldr	r2, [pc, #404]	@ (8003a30 <HAL_ADC_ConfigChannel+0x67c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x4ee>
 800389e:	4b65      	ldr	r3, [pc, #404]	@ (8003a34 <HAL_ADC_ConfigChannel+0x680>)
 80038a0:	e000      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x4f0>
 80038a2:	4b65      	ldr	r3, [pc, #404]	@ (8003a38 <HAL_ADC_ConfigChannel+0x684>)
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fa7d 	bl	8002da4 <LL_ADC_GetCommonPathInternalCh>
 80038aa:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a5e      	ldr	r2, [pc, #376]	@ (8003a2c <HAL_ADC_ConfigChannel+0x678>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d004      	beq.n	80038c0 <HAL_ADC_ConfigChannel+0x50c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003a30 <HAL_ADC_ConfigChannel+0x67c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d10e      	bne.n	80038de <HAL_ADC_ConfigChannel+0x52a>
 80038c0:	485a      	ldr	r0, [pc, #360]	@ (8003a2c <HAL_ADC_ConfigChannel+0x678>)
 80038c2:	f7ff fb9b 	bl	8002ffc <LL_ADC_IsEnabled>
 80038c6:	4604      	mov	r4, r0
 80038c8:	4859      	ldr	r0, [pc, #356]	@ (8003a30 <HAL_ADC_ConfigChannel+0x67c>)
 80038ca:	f7ff fb97 	bl	8002ffc <LL_ADC_IsEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4323      	orrs	r3, r4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf0c      	ite	eq
 80038d6:	2301      	moveq	r3, #1
 80038d8:	2300      	movne	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	e008      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x53c>
 80038de:	4857      	ldr	r0, [pc, #348]	@ (8003a3c <HAL_ADC_ConfigChannel+0x688>)
 80038e0:	f7ff fb8c 	bl	8002ffc <LL_ADC_IsEnabled>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d07d      	beq.n	80039f0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a51      	ldr	r2, [pc, #324]	@ (8003a40 <HAL_ADC_ConfigChannel+0x68c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d130      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x5ac>
 80038fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003900:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d12b      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a3c <HAL_ADC_ConfigChannel+0x688>)
 800390e:	4293      	cmp	r3, r2
 8003910:	f040 8081 	bne.w	8003a16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a44      	ldr	r2, [pc, #272]	@ (8003a2c <HAL_ADC_ConfigChannel+0x678>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x574>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a43      	ldr	r2, [pc, #268]	@ (8003a30 <HAL_ADC_ConfigChannel+0x67c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x578>
 8003928:	4a42      	ldr	r2, [pc, #264]	@ (8003a34 <HAL_ADC_ConfigChannel+0x680>)
 800392a:	e000      	b.n	800392e <HAL_ADC_ConfigChannel+0x57a>
 800392c:	4a42      	ldr	r2, [pc, #264]	@ (8003a38 <HAL_ADC_ConfigChannel+0x684>)
 800392e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003930:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f7ff fa21 	bl	8002d7e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800393c:	4b41      	ldr	r3, [pc, #260]	@ (8003a44 <HAL_ADC_ConfigChannel+0x690>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	4a41      	ldr	r2, [pc, #260]	@ (8003a48 <HAL_ADC_ConfigChannel+0x694>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	099b      	lsrs	r3, r3, #6
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003950:	e002      	b.n	8003958 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3b01      	subs	r3, #1
 8003956:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f9      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800395e:	e05a      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a39      	ldr	r2, [pc, #228]	@ (8003a4c <HAL_ADC_ConfigChannel+0x698>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d11e      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x5f4>
 800396a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800396c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d119      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a30      	ldr	r2, [pc, #192]	@ (8003a3c <HAL_ADC_ConfigChannel+0x688>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d14b      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2a      	ldr	r2, [pc, #168]	@ (8003a2c <HAL_ADC_ConfigChannel+0x678>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d004      	beq.n	8003992 <HAL_ADC_ConfigChannel+0x5de>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a28      	ldr	r2, [pc, #160]	@ (8003a30 <HAL_ADC_ConfigChannel+0x67c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x5e2>
 8003992:	4a28      	ldr	r2, [pc, #160]	@ (8003a34 <HAL_ADC_ConfigChannel+0x680>)
 8003994:	e000      	b.n	8003998 <HAL_ADC_ConfigChannel+0x5e4>
 8003996:	4a28      	ldr	r2, [pc, #160]	@ (8003a38 <HAL_ADC_ConfigChannel+0x684>)
 8003998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800399a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800399e:	4619      	mov	r1, r3
 80039a0:	4610      	mov	r0, r2
 80039a2:	f7ff f9ec 	bl	8002d7e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039a6:	e036      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a28      	ldr	r2, [pc, #160]	@ (8003a50 <HAL_ADC_ConfigChannel+0x69c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d131      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x662>
 80039b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d12c      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a3c <HAL_ADC_ConfigChannel+0x688>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d127      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a18      	ldr	r2, [pc, #96]	@ (8003a2c <HAL_ADC_ConfigChannel+0x678>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d004      	beq.n	80039da <HAL_ADC_ConfigChannel+0x626>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a16      	ldr	r2, [pc, #88]	@ (8003a30 <HAL_ADC_ConfigChannel+0x67c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <HAL_ADC_ConfigChannel+0x62a>
 80039da:	4a16      	ldr	r2, [pc, #88]	@ (8003a34 <HAL_ADC_ConfigChannel+0x680>)
 80039dc:	e000      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x62c>
 80039de:	4a16      	ldr	r2, [pc, #88]	@ (8003a38 <HAL_ADC_ConfigChannel+0x684>)
 80039e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039e6:	4619      	mov	r1, r3
 80039e8:	4610      	mov	r0, r2
 80039ea:	f7ff f9c8 	bl	8002d7e <LL_ADC_SetCommonPathInternalCh>
 80039ee:	e012      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f4:	f043 0220 	orr.w	r2, r3, #32
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003a02:	e008      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3784      	adds	r7, #132	@ 0x84
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd90      	pop	{r4, r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40022000 	.word	0x40022000
 8003a30:	40022100 	.word	0x40022100
 8003a34:	40022300 	.word	0x40022300
 8003a38:	58026300 	.word	0x58026300
 8003a3c:	58026000 	.word	0x58026000
 8003a40:	cb840000 	.word	0xcb840000
 8003a44:	24000000 	.word	0x24000000
 8003a48:	053e2d63 	.word	0x053e2d63
 8003a4c:	c7520000 	.word	0xc7520000
 8003a50:	cfb80000 	.word	0xcfb80000

08003a54 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7a      	ldr	r2, [pc, #488]	@ (8003c4c <ADC_ConfigureBoostMode+0x1f8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <ADC_ConfigureBoostMode+0x1c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a79      	ldr	r2, [pc, #484]	@ (8003c50 <ADC_ConfigureBoostMode+0x1fc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d109      	bne.n	8003a84 <ADC_ConfigureBoostMode+0x30>
 8003a70:	4b78      	ldr	r3, [pc, #480]	@ (8003c54 <ADC_ConfigureBoostMode+0x200>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e008      	b.n	8003a96 <ADC_ConfigureBoostMode+0x42>
 8003a84:	4b74      	ldr	r3, [pc, #464]	@ (8003c58 <ADC_ConfigureBoostMode+0x204>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d01c      	beq.n	8003ad4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003a9a:	f003 ffc5 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8003a9e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003aa8:	d010      	beq.n	8003acc <ADC_ConfigureBoostMode+0x78>
 8003aaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003aae:	d873      	bhi.n	8003b98 <ADC_ConfigureBoostMode+0x144>
 8003ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab4:	d002      	beq.n	8003abc <ADC_ConfigureBoostMode+0x68>
 8003ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aba:	d16d      	bne.n	8003b98 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	60fb      	str	r3, [r7, #12]
        break;
 8003aca:	e068      	b.n	8003b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	60fb      	str	r3, [r7, #12]
        break;
 8003ad2:	e064      	b.n	8003b9e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ad4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003ad8:	f04f 0100 	mov.w	r1, #0
 8003adc:	f005 fa4c 	bl	8008f78 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ae0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003aea:	d051      	beq.n	8003b90 <ADC_ConfigureBoostMode+0x13c>
 8003aec:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003af0:	d854      	bhi.n	8003b9c <ADC_ConfigureBoostMode+0x148>
 8003af2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003af6:	d047      	beq.n	8003b88 <ADC_ConfigureBoostMode+0x134>
 8003af8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003afc:	d84e      	bhi.n	8003b9c <ADC_ConfigureBoostMode+0x148>
 8003afe:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b02:	d03d      	beq.n	8003b80 <ADC_ConfigureBoostMode+0x12c>
 8003b04:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b08:	d848      	bhi.n	8003b9c <ADC_ConfigureBoostMode+0x148>
 8003b0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b0e:	d033      	beq.n	8003b78 <ADC_ConfigureBoostMode+0x124>
 8003b10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b14:	d842      	bhi.n	8003b9c <ADC_ConfigureBoostMode+0x148>
 8003b16:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b1a:	d029      	beq.n	8003b70 <ADC_ConfigureBoostMode+0x11c>
 8003b1c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b20:	d83c      	bhi.n	8003b9c <ADC_ConfigureBoostMode+0x148>
 8003b22:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b26:	d01a      	beq.n	8003b5e <ADC_ConfigureBoostMode+0x10a>
 8003b28:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b2c:	d836      	bhi.n	8003b9c <ADC_ConfigureBoostMode+0x148>
 8003b2e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b32:	d014      	beq.n	8003b5e <ADC_ConfigureBoostMode+0x10a>
 8003b34:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b38:	d830      	bhi.n	8003b9c <ADC_ConfigureBoostMode+0x148>
 8003b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b3e:	d00e      	beq.n	8003b5e <ADC_ConfigureBoostMode+0x10a>
 8003b40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b44:	d82a      	bhi.n	8003b9c <ADC_ConfigureBoostMode+0x148>
 8003b46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b4a:	d008      	beq.n	8003b5e <ADC_ConfigureBoostMode+0x10a>
 8003b4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b50:	d824      	bhi.n	8003b9c <ADC_ConfigureBoostMode+0x148>
 8003b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b56:	d002      	beq.n	8003b5e <ADC_ConfigureBoostMode+0x10a>
 8003b58:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b5c:	d11e      	bne.n	8003b9c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	0c9b      	lsrs	r3, r3, #18
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	60fb      	str	r3, [r7, #12]
        break;
 8003b6e:	e016      	b.n	8003b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	60fb      	str	r3, [r7, #12]
        break;
 8003b76:	e012      	b.n	8003b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	60fb      	str	r3, [r7, #12]
        break;
 8003b7e:	e00e      	b.n	8003b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	60fb      	str	r3, [r7, #12]
        break;
 8003b86:	e00a      	b.n	8003b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	09db      	lsrs	r3, r3, #7
 8003b8c:	60fb      	str	r3, [r7, #12]
        break;
 8003b8e:	e006      	b.n	8003b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	60fb      	str	r3, [r7, #12]
        break;
 8003b96:	e002      	b.n	8003b9e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003b98:	bf00      	nop
 8003b9a:	e000      	b.n	8003b9e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003b9c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003b9e:	f7ff f8a5 	bl	8002cec <HAL_GetREVID>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d815      	bhi.n	8003bd8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a2b      	ldr	r2, [pc, #172]	@ (8003c5c <ADC_ConfigureBoostMode+0x208>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d908      	bls.n	8003bc6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003bc4:	e03e      	b.n	8003c44 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bd4:	609a      	str	r2, [r3, #8]
}
 8003bd6:	e035      	b.n	8003c44 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c60 <ADC_ConfigureBoostMode+0x20c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d808      	bhi.n	8003bf8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003bf4:	609a      	str	r2, [r3, #8]
}
 8003bf6:	e025      	b.n	8003c44 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8003c64 <ADC_ConfigureBoostMode+0x210>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d80a      	bhi.n	8003c16 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c12:	609a      	str	r2, [r3, #8]
}
 8003c14:	e016      	b.n	8003c44 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a13      	ldr	r2, [pc, #76]	@ (8003c68 <ADC_ConfigureBoostMode+0x214>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d80a      	bhi.n	8003c34 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c30:	609a      	str	r2, [r3, #8]
}
 8003c32:	e007      	b.n	8003c44 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003c42:	609a      	str	r2, [r3, #8]
}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40022100 	.word	0x40022100
 8003c54:	40022300 	.word	0x40022300
 8003c58:	58026300 	.word	0x58026300
 8003c5c:	01312d00 	.word	0x01312d00
 8003c60:	005f5e10 	.word	0x005f5e10
 8003c64:	00bebc20 	.word	0x00bebc20
 8003c68:	017d7840 	.word	0x017d7840

08003c6c <LL_ADC_IsEnabled>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <LL_ADC_IsEnabled+0x18>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <LL_ADC_IsEnabled+0x1a>
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d101      	bne.n	8003caa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b09f      	sub	sp, #124	@ 0x7c
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e0be      	b.n	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5c      	ldr	r2, [pc, #368]	@ (8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d102      	bne.n	8003cf6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cf0:	4b5b      	ldr	r3, [pc, #364]	@ (8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	e001      	b.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e09d      	b.n	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ffb9 	bl	8003c92 <LL_ADC_REG_IsConversionOngoing>
 8003d20:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff ffb3 	bl	8003c92 <LL_ADC_REG_IsConversionOngoing>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d17f      	bne.n	8003e32 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d17c      	bne.n	8003e32 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a47      	ldr	r2, [pc, #284]	@ (8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a46      	ldr	r2, [pc, #280]	@ (8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d4c:	4b45      	ldr	r3, [pc, #276]	@ (8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d4e:	e000      	b.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d50:	4b45      	ldr	r3, [pc, #276]	@ (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d52:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d039      	beq.n	8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d6c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a3a      	ldr	r2, [pc, #232]	@ (8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a38      	ldr	r2, [pc, #224]	@ (8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10e      	bne.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d82:	4836      	ldr	r0, [pc, #216]	@ (8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d84:	f7ff ff72 	bl	8003c6c <LL_ADC_IsEnabled>
 8003d88:	4604      	mov	r4, r0
 8003d8a:	4835      	ldr	r0, [pc, #212]	@ (8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d8c:	f7ff ff6e 	bl	8003c6c <LL_ADC_IsEnabled>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4323      	orrs	r3, r4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e008      	b.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003da0:	4832      	ldr	r0, [pc, #200]	@ (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003da2:	f7ff ff63 	bl	8003c6c <LL_ADC_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d047      	beq.n	8003e46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	4b2d      	ldr	r3, [pc, #180]	@ (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	6811      	ldr	r1, [r2, #0]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	6892      	ldr	r2, [r2, #8]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dcc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dce:	e03a      	b.n	8003e46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dda:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1d      	ldr	r2, [pc, #116]	@ (8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10e      	bne.n	8003e0e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003df0:	481a      	ldr	r0, [pc, #104]	@ (8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003df2:	f7ff ff3b 	bl	8003c6c <LL_ADC_IsEnabled>
 8003df6:	4604      	mov	r4, r0
 8003df8:	4819      	ldr	r0, [pc, #100]	@ (8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dfa:	f7ff ff37 	bl	8003c6c <LL_ADC_IsEnabled>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4323      	orrs	r3, r4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e008      	b.n	8003e20 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e0e:	4817      	ldr	r0, [pc, #92]	@ (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e10:	f7ff ff2c 	bl	8003c6c <LL_ADC_IsEnabled>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d010      	beq.n	8003e46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	4b11      	ldr	r3, [pc, #68]	@ (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e2e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e30:	e009      	b.n	8003e46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e36:	f043 0220 	orr.w	r2, r3, #32
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003e44:	e000      	b.n	8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e46:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e50:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	377c      	adds	r7, #124	@ 0x7c
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd90      	pop	{r4, r7, pc}
 8003e5c:	40022000 	.word	0x40022000
 8003e60:	40022100 	.word	0x40022100
 8003e64:	40022300 	.word	0x40022300
 8003e68:	58026300 	.word	0x58026300
 8003e6c:	58026000 	.word	0x58026000
 8003e70:	fffff0e0 	.word	0xfffff0e0

08003e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e84:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e90:	4013      	ands	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e9c:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ea2:	4a04      	ldr	r2, [pc, #16]	@ (8003eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	60d3      	str	r3, [r2, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	e000ed00 	.word	0xe000ed00
 8003eb8:	05fa0000 	.word	0x05fa0000

08003ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec0:	4b04      	ldr	r3, [pc, #16]	@ (8003ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	f003 0307 	and.w	r3, r3, #7
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	db0b      	blt.n	8003f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	f003 021f 	and.w	r2, r3, #31
 8003ef0:	4907      	ldr	r1, [pc, #28]	@ (8003f10 <__NVIC_EnableIRQ+0x38>)
 8003ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2001      	movs	r0, #1
 8003efa:	fa00 f202 	lsl.w	r2, r0, r2
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000e100 	.word	0xe000e100

08003f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	db0a      	blt.n	8003f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	490c      	ldr	r1, [pc, #48]	@ (8003f60 <__NVIC_SetPriority+0x4c>)
 8003f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f32:	0112      	lsls	r2, r2, #4
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	440b      	add	r3, r1
 8003f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f3c:	e00a      	b.n	8003f54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4908      	ldr	r1, [pc, #32]	@ (8003f64 <__NVIC_SetPriority+0x50>)
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	3b04      	subs	r3, #4
 8003f4c:	0112      	lsls	r2, r2, #4
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	440b      	add	r3, r1
 8003f52:	761a      	strb	r2, [r3, #24]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	e000e100 	.word	0xe000e100
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	@ 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f1c3 0307 	rsb	r3, r3, #7
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	bf28      	it	cs
 8003f86:	2304      	movcs	r3, #4
 8003f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	d902      	bls.n	8003f98 <NVIC_EncodePriority+0x30>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3b03      	subs	r3, #3
 8003f96:	e000      	b.n	8003f9a <NVIC_EncodePriority+0x32>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	401a      	ands	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	43d9      	mvns	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	4313      	orrs	r3, r2
         );
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3724      	adds	r7, #36	@ 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ff4c 	bl	8003e74 <__NVIC_SetPriorityGrouping>
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff2:	f7ff ff63 	bl	8003ebc <__NVIC_GetPriorityGrouping>
 8003ff6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	6978      	ldr	r0, [r7, #20]
 8003ffe:	f7ff ffb3 	bl	8003f68 <NVIC_EncodePriority>
 8004002:	4602      	mov	r2, r0
 8004004:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ff82 	bl	8003f14 <__NVIC_SetPriority>
}
 8004010:	bf00      	nop
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff56 	bl	8003ed8 <__NVIC_EnableIRQ>
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e0cf      	b.n	80041e6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2223      	movs	r2, #35	@ 0x23
 8004054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7fd fc77 	bl	800194c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800405e:	4b64      	ldr	r3, [pc, #400]	@ (80041f0 <HAL_ETH_Init+0x1bc>)
 8004060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004064:	4a62      	ldr	r2, [pc, #392]	@ (80041f0 <HAL_ETH_Init+0x1bc>)
 8004066:	f043 0302 	orr.w	r3, r3, #2
 800406a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800406e:	4b60      	ldr	r3, [pc, #384]	@ (80041f0 <HAL_ETH_Init+0x1bc>)
 8004070:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	7a1b      	ldrb	r3, [r3, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d103      	bne.n	800408c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004084:	2000      	movs	r0, #0
 8004086:	f7fe fe3d 	bl	8002d04 <HAL_SYSCFG_ETHInterfaceSelect>
 800408a:	e003      	b.n	8004094 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800408c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004090:	f7fe fe38 	bl	8002d04 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004094:	4b57      	ldr	r3, [pc, #348]	@ (80041f4 <HAL_ETH_Init+0x1c0>)
 8004096:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b0:	f7fe fdec 	bl	8002c8c <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040b6:	e011      	b.n	80040dc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80040b8:	f7fe fde8 	bl	8002c8c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80040c6:	d909      	bls.n	80040dc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2204      	movs	r2, #4
 80040cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	22e0      	movs	r2, #224	@ 0xe0
 80040d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e084      	b.n	80041e6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e4      	bne.n	80040b8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f886 	bl	8004200 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80040f4:	f003 fc98 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 80040f8:	4603      	mov	r3, r0
 80040fa:	4a3f      	ldr	r2, [pc, #252]	@ (80041f8 <HAL_ETH_Init+0x1c4>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	0c9a      	lsrs	r2, r3, #18
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3a01      	subs	r2, #1
 8004108:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fa71 	bl	80045f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800411a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800411e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800412a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800412e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	22e0      	movs	r2, #224	@ 0xe0
 800414a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e049      	b.n	80041e6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800415a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800415e:	4b27      	ldr	r3, [pc, #156]	@ (80041fc <HAL_ETH_Init+0x1c8>)
 8004160:	4013      	ands	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6952      	ldr	r2, [r2, #20]
 8004166:	0051      	lsls	r1, r2, #1
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	430b      	orrs	r3, r1
 800416e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004172:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fad9 	bl	800472e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fb1f 	bl	80047c0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	3305      	adds	r3, #5
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	021a      	lsls	r2, r3, #8
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	3304      	adds	r3, #4
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	4619      	mov	r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	3303      	adds	r3, #3
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	061a      	lsls	r2, r3, #24
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	3302      	adds	r3, #2
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	041b      	lsls	r3, r3, #16
 80041b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	3301      	adds	r3, #1
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041ce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041d0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2210      	movs	r2, #16
 80041e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	58024400 	.word	0x58024400
 80041f4:	58000400 	.word	0x58000400
 80041f8:	431bde83 	.word	0x431bde83
 80041fc:	ffff8001 	.word	0xffff8001

08004200 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004210:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004218:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800421a:	f003 fc05 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 800421e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4a1e      	ldr	r2, [pc, #120]	@ (800429c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d908      	bls.n	800423a <HAL_ETH_SetMDIOClockRange+0x3a>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4a1d      	ldr	r2, [pc, #116]	@ (80042a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d804      	bhi.n	800423a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e027      	b.n	800428a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4a18      	ldr	r2, [pc, #96]	@ (80042a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d908      	bls.n	8004254 <HAL_ETH_SetMDIOClockRange+0x54>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4a17      	ldr	r2, [pc, #92]	@ (80042a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d204      	bcs.n	8004254 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	e01a      	b.n	800428a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4a13      	ldr	r2, [pc, #76]	@ (80042a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d303      	bcc.n	8004264 <HAL_ETH_SetMDIOClockRange+0x64>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4a12      	ldr	r2, [pc, #72]	@ (80042a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d911      	bls.n	8004288 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4a10      	ldr	r2, [pc, #64]	@ (80042a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d908      	bls.n	800427e <HAL_ETH_SetMDIOClockRange+0x7e>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a0f      	ldr	r2, [pc, #60]	@ (80042ac <HAL_ETH_SetMDIOClockRange+0xac>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d804      	bhi.n	800427e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e005      	b.n	800428a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e000      	b.n	800428a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004288:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004294:	bf00      	nop
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	01312cff 	.word	0x01312cff
 80042a0:	02160ebf 	.word	0x02160ebf
 80042a4:	03938700 	.word	0x03938700
 80042a8:	05f5e0ff 	.word	0x05f5e0ff
 80042ac:	08f0d17f 	.word	0x08f0d17f

080042b0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80042c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	791b      	ldrb	r3, [r3, #4]
 80042c8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80042ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	7b1b      	ldrb	r3, [r3, #12]
 80042d0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	7b5b      	ldrb	r3, [r3, #13]
 80042d8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	7b9b      	ldrb	r3, [r3, #14]
 80042e0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	7bdb      	ldrb	r3, [r3, #15]
 80042e8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80042ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	7c12      	ldrb	r2, [r2, #16]
 80042f0:	2a00      	cmp	r2, #0
 80042f2:	d102      	bne.n	80042fa <ETH_SetMACConfig+0x4a>
 80042f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80042f8:	e000      	b.n	80042fc <ETH_SetMACConfig+0x4c>
 80042fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80042fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	7c52      	ldrb	r2, [r2, #17]
 8004302:	2a00      	cmp	r2, #0
 8004304:	d102      	bne.n	800430c <ETH_SetMACConfig+0x5c>
 8004306:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800430a:	e000      	b.n	800430e <ETH_SetMACConfig+0x5e>
 800430c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800430e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	7c9b      	ldrb	r3, [r3, #18]
 8004314:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004316:	431a      	orrs	r2, r3
               macconf->Speed |
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800431c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004322:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	7f1b      	ldrb	r3, [r3, #28]
 8004328:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800432a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	7f5b      	ldrb	r3, [r3, #29]
 8004330:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004332:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	7f92      	ldrb	r2, [r2, #30]
 8004338:	2a00      	cmp	r2, #0
 800433a:	d102      	bne.n	8004342 <ETH_SetMACConfig+0x92>
 800433c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004340:	e000      	b.n	8004344 <ETH_SetMACConfig+0x94>
 8004342:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004344:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	7fdb      	ldrb	r3, [r3, #31]
 800434a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800434c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004354:	2a00      	cmp	r2, #0
 8004356:	d102      	bne.n	800435e <ETH_SetMACConfig+0xae>
 8004358:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800435c:	e000      	b.n	8004360 <ETH_SetMACConfig+0xb0>
 800435e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004360:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004366:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800436e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004370:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b56      	ldr	r3, [pc, #344]	@ (80044dc <ETH_SetMACConfig+0x22c>)
 8004382:	4013      	ands	r3, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	68f9      	ldr	r1, [r7, #12]
 800438a:	430b      	orrs	r3, r1
 800438c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004392:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800439a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800439c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80043ae:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	d102      	bne.n	80043c2 <ETH_SetMACConfig+0x112>
 80043bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80043c0:	e000      	b.n	80043c4 <ETH_SetMACConfig+0x114>
 80043c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043c4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	4b42      	ldr	r3, [pc, #264]	@ (80044e0 <ETH_SetMACConfig+0x230>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	68f9      	ldr	r1, [r7, #12]
 80043de:	430b      	orrs	r3, r1
 80043e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	4b3a      	ldr	r3, [pc, #232]	@ (80044e4 <ETH_SetMACConfig+0x234>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	68f9      	ldr	r1, [r7, #12]
 8004402:	430b      	orrs	r3, r1
 8004404:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800440c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004412:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800441a:	2a00      	cmp	r2, #0
 800441c:	d101      	bne.n	8004422 <ETH_SetMACConfig+0x172>
 800441e:	2280      	movs	r2, #128	@ 0x80
 8004420:	e000      	b.n	8004424 <ETH_SetMACConfig+0x174>
 8004422:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004424:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800442a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004436:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800443a:	4013      	ands	r3, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	68f9      	ldr	r1, [r7, #12]
 8004442:	430b      	orrs	r3, r1
 8004444:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800444c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004454:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004462:	f023 0103 	bic.w	r1, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	430a      	orrs	r2, r1
 800446e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800447a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004496:	2a00      	cmp	r2, #0
 8004498:	d101      	bne.n	800449e <ETH_SetMACConfig+0x1ee>
 800449a:	2240      	movs	r2, #64	@ 0x40
 800449c:	e000      	b.n	80044a0 <ETH_SetMACConfig+0x1f0>
 800449e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80044a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80044a8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80044b2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80044c0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	00048083 	.word	0x00048083
 80044e0:	c0f88000 	.word	0xc0f88000
 80044e4:	fffffef0 	.word	0xfffffef0

080044e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b38      	ldr	r3, [pc, #224]	@ (80045e0 <ETH_SetDMAConfig+0xf8>)
 80044fe:	4013      	ands	r3, r2
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	6811      	ldr	r1, [r2, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	430b      	orrs	r3, r1
 800450a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800450e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	791b      	ldrb	r3, [r3, #4]
 8004514:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800451a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	7b1b      	ldrb	r3, [r3, #12]
 8004520:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	4b2c      	ldr	r3, [pc, #176]	@ (80045e4 <ETH_SetDMAConfig+0xfc>)
 8004532:	4013      	ands	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	68f9      	ldr	r1, [r7, #12]
 800453a:	430b      	orrs	r3, r1
 800453c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004540:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	7b5b      	ldrb	r3, [r3, #13]
 8004546:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004558:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800455c:	4b22      	ldr	r3, [pc, #136]	@ (80045e8 <ETH_SetDMAConfig+0x100>)
 800455e:	4013      	ands	r3, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	68f9      	ldr	r1, [r7, #12]
 8004566:	430b      	orrs	r3, r1
 8004568:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800456c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	7d1b      	ldrb	r3, [r3, #20]
 8004578:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800457a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	7f5b      	ldrb	r3, [r3, #29]
 8004580:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800458e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004592:	4b16      	ldr	r3, [pc, #88]	@ (80045ec <ETH_SetDMAConfig+0x104>)
 8004594:	4013      	ands	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	430b      	orrs	r3, r1
 800459e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045a2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	7f1b      	ldrb	r3, [r3, #28]
 80045aa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045bc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80045c0:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <ETH_SetDMAConfig+0x108>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	68f9      	ldr	r1, [r7, #12]
 80045ca:	430b      	orrs	r3, r1
 80045cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045d0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	ffff87fd 	.word	0xffff87fd
 80045e4:	ffff2ffe 	.word	0xffff2ffe
 80045e8:	fffec000 	.word	0xfffec000
 80045ec:	ffc0efef 	.word	0xffc0efef
 80045f0:	7fc0ffff 	.word	0x7fc0ffff

080045f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b0a4      	sub	sp, #144	@ 0x90
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004602:	2300      	movs	r3, #0
 8004604:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004606:	2300      	movs	r3, #0
 8004608:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800460c:	2300      	movs	r3, #0
 800460e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004624:	2300      	movs	r3, #0
 8004626:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004634:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800463c:	2300      	movs	r3, #0
 800463e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004640:	2300      	movs	r3, #0
 8004642:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800464c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004650:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004652:	2300      	movs	r3, #0
 8004654:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004658:	2300      	movs	r3, #0
 800465a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004662:	2300      	movs	r3, #0
 8004664:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004668:	2300      	movs	r3, #0
 800466a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800466e:	2300      	movs	r3, #0
 8004670:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004672:	2300      	movs	r3, #0
 8004674:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004676:	2300      	movs	r3, #0
 8004678:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800467a:	2300      	movs	r3, #0
 800467c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004680:	2300      	movs	r3, #0
 8004682:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004686:	2301      	movs	r3, #1
 8004688:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800468c:	2320      	movs	r3, #32
 800468e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004698:	2300      	movs	r3, #0
 800469a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800469e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80046a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80046a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80046a8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80046b0:	2302      	movs	r3, #2
 80046b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80046ce:	2300      	movs	r3, #0
 80046d0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80046d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff fde6 	bl	80042b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80046e4:	2301      	movs	r3, #1
 80046e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80046e8:	2301      	movs	r3, #1
 80046ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80046fe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004702:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004704:	2300      	movs	r3, #0
 8004706:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004708:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800470c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800470e:	2300      	movs	r3, #0
 8004710:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004714:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004718:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800471a:	f107 0308 	add.w	r3, r7, #8
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff fee1 	bl	80044e8 <ETH_SetDMAConfig>
}
 8004726:	bf00      	nop
 8004728:	3790      	adds	r7, #144	@ 0x90
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	e01d      	b.n	8004778 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68d9      	ldr	r1, [r3, #12]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4613      	mov	r3, r2
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	4413      	add	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	440b      	add	r3, r1
 800474c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2200      	movs	r2, #0
 8004758:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2200      	movs	r2, #0
 800475e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2200      	movs	r2, #0
 8004764:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	3206      	adds	r2, #6
 800476e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3301      	adds	r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b03      	cmp	r3, #3
 800477c:	d9de      	bls.n	800473c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800478c:	461a      	mov	r2, r3
 800478e:	2303      	movs	r3, #3
 8004790:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047a0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047b0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e023      	b.n	8004816 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6919      	ldr	r1, [r3, #16]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4613      	mov	r3, r2
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	4413      	add	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	440b      	add	r3, r1
 80047de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2200      	movs	r2, #0
 80047fc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2200      	movs	r2, #0
 8004802:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	3212      	adds	r2, #18
 800480c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3301      	adds	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d9d8      	bls.n	80047ce <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004842:	461a      	mov	r2, r3
 8004844:	2303      	movs	r3, #3
 8004846:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004856:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800486a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b098      	sub	sp, #96	@ 0x60
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004884:	4a84      	ldr	r2, [pc, #528]	@ (8004a98 <HAL_FDCAN_Init+0x21c>)
 8004886:	f107 030c 	add.w	r3, r7, #12
 800488a:	4611      	mov	r1, r2
 800488c:	224c      	movs	r2, #76	@ 0x4c
 800488e:	4618      	mov	r0, r3
 8004890:	f00c f816 	bl	80108c0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e1c6      	b.n	8004c2c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a7e      	ldr	r2, [pc, #504]	@ (8004a9c <HAL_FDCAN_Init+0x220>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d106      	bne.n	80048b6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80048b0:	461a      	mov	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fd f96e 	bl	8001bac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0210 	bic.w	r2, r2, #16
 80048de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048e0:	f7fe f9d4 	bl	8002c8c <HAL_GetTick>
 80048e4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80048e6:	e014      	b.n	8004912 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80048e8:	f7fe f9d0 	bl	8002c8c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b0a      	cmp	r3, #10
 80048f4:	d90d      	bls.n	8004912 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2203      	movs	r2, #3
 800490a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e18c      	b.n	8004c2c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d0e3      	beq.n	80048e8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004930:	f7fe f9ac 	bl	8002c8c <HAL_GetTick>
 8004934:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004936:	e014      	b.n	8004962 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004938:	f7fe f9a8 	bl	8002c8c <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b0a      	cmp	r3, #10
 8004944:	d90d      	bls.n	8004962 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800494c:	f043 0201 	orr.w	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2203      	movs	r2, #3
 800495a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e164      	b.n	8004c2c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0e3      	beq.n	8004938 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0202 	orr.w	r2, r2, #2
 800497e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	7c1b      	ldrb	r3, [r3, #16]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d108      	bne.n	800499a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004996:	619a      	str	r2, [r3, #24]
 8004998:	e007      	b.n	80049aa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699a      	ldr	r2, [r3, #24]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049a8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	7c5b      	ldrb	r3, [r3, #17]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d108      	bne.n	80049c4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049c0:	619a      	str	r2, [r3, #24]
 80049c2:	e007      	b.n	80049d4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	7c9b      	ldrb	r3, [r3, #18]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d108      	bne.n	80049ee <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049ea:	619a      	str	r2, [r3, #24]
 80049ec:	e007      	b.n	80049fe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699a      	ldr	r2, [r3, #24]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049fc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004a22:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0210 	bic.w	r2, r2, #16
 8004a32:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d108      	bne.n	8004a4e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0204 	orr.w	r2, r2, #4
 8004a4a:	619a      	str	r2, [r3, #24]
 8004a4c:	e030      	b.n	8004ab0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02c      	beq.n	8004ab0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d020      	beq.n	8004aa0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a6c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0210 	orr.w	r2, r2, #16
 8004a7c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d114      	bne.n	8004ab0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0220 	orr.w	r2, r2, #32
 8004a94:	619a      	str	r2, [r3, #24]
 8004a96:	e00b      	b.n	8004ab0 <HAL_FDCAN_Init+0x234>
 8004a98:	080109c8 	.word	0x080109c8
 8004a9c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0220 	orr.w	r2, r2, #32
 8004aae:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ac0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ac8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ad8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ada:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ae4:	d115      	bne.n	8004b12 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aea:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	3b01      	subs	r3, #1
 8004af2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004af4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afa:	3b01      	subs	r3, #1
 8004afc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004afe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	3b01      	subs	r3, #1
 8004b08:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b0e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b10:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b38:	4413      	add	r3, r2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d011      	beq.n	8004b62 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004b46:	f023 0107 	bic.w	r1, r3, #7
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	3360      	adds	r3, #96	@ 0x60
 8004b52:	443b      	add	r3, r7
 8004b54:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d011      	beq.n	8004b8e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b72:	f023 0107 	bic.w	r1, r3, #7
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	3360      	adds	r3, #96	@ 0x60
 8004b7e:	443b      	add	r3, r7
 8004b80:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d012      	beq.n	8004bbc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b9e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	3360      	adds	r3, #96	@ 0x60
 8004baa:	443b      	add	r3, r7
 8004bac:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bb0:	011a      	lsls	r2, r3, #4
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d012      	beq.n	8004bea <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bcc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	3360      	adds	r3, #96	@ 0x60
 8004bd8:	443b      	add	r3, r7
 8004bda:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bde:	021a      	lsls	r2, r3, #8
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a11      	ldr	r2, [pc, #68]	@ (8004c34 <HAL_FDCAN_Init+0x3b8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d107      	bne.n	8004c04 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f022 0203 	bic.w	r2, r2, #3
 8004c02:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f80b 	bl	8004c38 <FDCAN_CalcultateRamBlockAddresses>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004c28:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3760      	adds	r7, #96	@ 0x60
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	4000a000 	.word	0x4000a000

08004c38 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c44:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004c4e:	4ba7      	ldr	r3, [pc, #668]	@ (8004eec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	0091      	lsls	r1, r2, #2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c68:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c70:	041a      	lsls	r2, r3, #16
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	4413      	add	r3, r2
 8004c84:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004c8e:	4b97      	ldr	r3, [pc, #604]	@ (8004eec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	0091      	lsls	r1, r2, #2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca8:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb0:	041a      	lsls	r2, r3, #16
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004cd0:	4b86      	ldr	r3, [pc, #536]	@ (8004eec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	0091      	lsls	r1, r2, #2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004cea:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	041a      	lsls	r2, r3, #16
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d06:	fb02 f303 	mul.w	r3, r2, r3
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004d18:	4b74      	ldr	r3, [pc, #464]	@ (8004eec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	0091      	lsls	r1, r2, #2
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	430b      	orrs	r3, r1
 8004d26:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d32:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3a:	041a      	lsls	r2, r3, #16
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004d60:	4b62      	ldr	r3, [pc, #392]	@ (8004eec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	0091      	lsls	r1, r2, #2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	4413      	add	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004d8c:	4b57      	ldr	r3, [pc, #348]	@ (8004eec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	0091      	lsls	r1, r2, #2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004da6:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dae:	041a      	lsls	r2, r3, #16
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004dce:	4b47      	ldr	r3, [pc, #284]	@ (8004eec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	0091      	lsls	r1, r2, #2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004de8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df0:	041a      	lsls	r2, r3, #16
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e04:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0c:	061a      	lsls	r2, r3, #24
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e1c:	4b34      	ldr	r3, [pc, #208]	@ (8004ef0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004e1e:	4413      	add	r3, r2
 8004e20:	009a      	lsls	r2, r3, #2
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	441a      	add	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004e82:	fb01 f303 	mul.w	r3, r1, r3
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	441a      	add	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	441a      	add	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee2:	4a04      	ldr	r2, [pc, #16]	@ (8004ef4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d915      	bls.n	8004f14 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004ee8:	e006      	b.n	8004ef8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004eea:	bf00      	nop
 8004eec:	ffff0003 	.word	0xffff0003
 8004ef0:	10002b00 	.word	0x10002b00
 8004ef4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004efe:	f043 0220 	orr.w	r2, r3, #32
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2203      	movs	r2, #3
 8004f0c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e010      	b.n	8004f36 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e005      	b.n	8004f28 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3304      	adds	r3, #4
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d3f3      	bcc.n	8004f1c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop

08004f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b089      	sub	sp, #36	@ 0x24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f52:	4b89      	ldr	r3, [pc, #548]	@ (8005178 <HAL_GPIO_Init+0x234>)
 8004f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f56:	e194      	b.n	8005282 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	fa01 f303 	lsl.w	r3, r1, r3
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8186 	beq.w	800527c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d005      	beq.n	8004f88 <HAL_GPIO_Init+0x44>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d130      	bne.n	8004fea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	2203      	movs	r2, #3
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f003 0201 	and.w	r2, r3, #1
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d017      	beq.n	8005026 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	2203      	movs	r2, #3
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	43db      	mvns	r3, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4013      	ands	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4313      	orrs	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d123      	bne.n	800507a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	08da      	lsrs	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3208      	adds	r2, #8
 800503a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	220f      	movs	r2, #15
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	08da      	lsrs	r2, r3, #3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3208      	adds	r2, #8
 8005074:	69b9      	ldr	r1, [r7, #24]
 8005076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	2203      	movs	r2, #3
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	4013      	ands	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 0203 	and.w	r2, r3, #3
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80e0 	beq.w	800527c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050bc:	4b2f      	ldr	r3, [pc, #188]	@ (800517c <HAL_GPIO_Init+0x238>)
 80050be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050c2:	4a2e      	ldr	r2, [pc, #184]	@ (800517c <HAL_GPIO_Init+0x238>)
 80050c4:	f043 0302 	orr.w	r3, r3, #2
 80050c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80050cc:	4b2b      	ldr	r3, [pc, #172]	@ (800517c <HAL_GPIO_Init+0x238>)
 80050ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050da:	4a29      	ldr	r2, [pc, #164]	@ (8005180 <HAL_GPIO_Init+0x23c>)
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	089b      	lsrs	r3, r3, #2
 80050e0:	3302      	adds	r3, #2
 80050e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	220f      	movs	r2, #15
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a20      	ldr	r2, [pc, #128]	@ (8005184 <HAL_GPIO_Init+0x240>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d052      	beq.n	80051ac <HAL_GPIO_Init+0x268>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1f      	ldr	r2, [pc, #124]	@ (8005188 <HAL_GPIO_Init+0x244>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d031      	beq.n	8005172 <HAL_GPIO_Init+0x22e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1e      	ldr	r2, [pc, #120]	@ (800518c <HAL_GPIO_Init+0x248>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d02b      	beq.n	800516e <HAL_GPIO_Init+0x22a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1d      	ldr	r2, [pc, #116]	@ (8005190 <HAL_GPIO_Init+0x24c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d025      	beq.n	800516a <HAL_GPIO_Init+0x226>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1c      	ldr	r2, [pc, #112]	@ (8005194 <HAL_GPIO_Init+0x250>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01f      	beq.n	8005166 <HAL_GPIO_Init+0x222>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1b      	ldr	r2, [pc, #108]	@ (8005198 <HAL_GPIO_Init+0x254>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d019      	beq.n	8005162 <HAL_GPIO_Init+0x21e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1a      	ldr	r2, [pc, #104]	@ (800519c <HAL_GPIO_Init+0x258>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_GPIO_Init+0x21a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a19      	ldr	r2, [pc, #100]	@ (80051a0 <HAL_GPIO_Init+0x25c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00d      	beq.n	800515a <HAL_GPIO_Init+0x216>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a18      	ldr	r2, [pc, #96]	@ (80051a4 <HAL_GPIO_Init+0x260>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <HAL_GPIO_Init+0x212>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a17      	ldr	r2, [pc, #92]	@ (80051a8 <HAL_GPIO_Init+0x264>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d101      	bne.n	8005152 <HAL_GPIO_Init+0x20e>
 800514e:	2309      	movs	r3, #9
 8005150:	e02d      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005152:	230a      	movs	r3, #10
 8005154:	e02b      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005156:	2308      	movs	r3, #8
 8005158:	e029      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 800515a:	2307      	movs	r3, #7
 800515c:	e027      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 800515e:	2306      	movs	r3, #6
 8005160:	e025      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005162:	2305      	movs	r3, #5
 8005164:	e023      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005166:	2304      	movs	r3, #4
 8005168:	e021      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 800516a:	2303      	movs	r3, #3
 800516c:	e01f      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 800516e:	2302      	movs	r3, #2
 8005170:	e01d      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005172:	2301      	movs	r3, #1
 8005174:	e01b      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005176:	bf00      	nop
 8005178:	58000080 	.word	0x58000080
 800517c:	58024400 	.word	0x58024400
 8005180:	58000400 	.word	0x58000400
 8005184:	58020000 	.word	0x58020000
 8005188:	58020400 	.word	0x58020400
 800518c:	58020800 	.word	0x58020800
 8005190:	58020c00 	.word	0x58020c00
 8005194:	58021000 	.word	0x58021000
 8005198:	58021400 	.word	0x58021400
 800519c:	58021800 	.word	0x58021800
 80051a0:	58021c00 	.word	0x58021c00
 80051a4:	58022000 	.word	0x58022000
 80051a8:	58022400 	.word	0x58022400
 80051ac:	2300      	movs	r3, #0
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	f002 0203 	and.w	r2, r2, #3
 80051b4:	0092      	lsls	r2, r2, #2
 80051b6:	4093      	lsls	r3, r2
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051be:	4938      	ldr	r1, [pc, #224]	@ (80052a0 <HAL_GPIO_Init+0x35c>)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	3302      	adds	r3, #2
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	43db      	mvns	r3, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4013      	ands	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005220:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	43db      	mvns	r3, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	43db      	mvns	r3, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4013      	ands	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	3301      	adds	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	f47f ae63 	bne.w	8004f58 <HAL_GPIO_Init+0x14>
  }
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	3724      	adds	r7, #36	@ 0x24
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	58000400 	.word	0x58000400

080052a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	807b      	strh	r3, [r7, #2]
 80052b0:	4613      	mov	r3, r2
 80052b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052b4:	787b      	ldrb	r3, [r7, #1]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ba:	887a      	ldrh	r2, [r7, #2]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052c0:	e003      	b.n	80052ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052c2:	887b      	ldrh	r3, [r7, #2]
 80052c4:	041a      	lsls	r2, r3, #16
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	619a      	str	r2, [r3, #24]
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e0bf      	b.n	800546a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fc fd24 	bl	8001d4c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800531a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6999      	ldr	r1, [r3, #24]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005330:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6899      	ldr	r1, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	4b4a      	ldr	r3, [pc, #296]	@ (8005474 <HAL_LTDC_Init+0x19c>)
 800534c:	400b      	ands	r3, r1
 800534e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	041b      	lsls	r3, r3, #16
 8005356:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6899      	ldr	r1, [r3, #8]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68d9      	ldr	r1, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	4b3e      	ldr	r3, [pc, #248]	@ (8005474 <HAL_LTDC_Init+0x19c>)
 800537a:	400b      	ands	r3, r1
 800537c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	041b      	lsls	r3, r3, #16
 8005384:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68d9      	ldr	r1, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1a      	ldr	r2, [r3, #32]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6919      	ldr	r1, [r3, #16]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b33      	ldr	r3, [pc, #204]	@ (8005474 <HAL_LTDC_Init+0x19c>)
 80053a8:	400b      	ands	r3, r1
 80053aa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6919      	ldr	r1, [r3, #16]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6959      	ldr	r1, [r3, #20]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4b27      	ldr	r3, [pc, #156]	@ (8005474 <HAL_LTDC_Init+0x19c>)
 80053d6:	400b      	ands	r3, r1
 80053d8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	041b      	lsls	r3, r3, #16
 80053e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6959      	ldr	r1, [r3, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800541a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0206 	orr.w	r2, r2, #6
 8005446:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	f000f800 	.word	0xf000f800

08005478 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005478:	b5b0      	push	{r4, r5, r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_LTDC_ConfigLayer+0x1a>
 800548e:	2302      	movs	r3, #2
 8005490:	e02c      	b.n	80054ec <HAL_LTDC_ConfigLayer+0x74>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2134      	movs	r1, #52	@ 0x34
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	4413      	add	r3, r2
 80054ae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4614      	mov	r4, r2
 80054b6:	461d      	mov	r5, r3
 80054b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f811 	bl	80054f4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2201      	movs	r2, #1
 80054d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bdb0      	pop	{r4, r5, r7, pc}

080054f4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b089      	sub	sp, #36	@ 0x24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	0c1b      	lsrs	r3, r3, #16
 800550c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005510:	4413      	add	r3, r2
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	01db      	lsls	r3, r3, #7
 8005520:	4413      	add	r3, r2
 8005522:	3384      	adds	r3, #132	@ 0x84
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	4611      	mov	r1, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	01d2      	lsls	r2, r2, #7
 8005530:	440a      	add	r2, r1
 8005532:	3284      	adds	r2, #132	@ 0x84
 8005534:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005538:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	0c1b      	lsrs	r3, r3, #16
 8005546:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800554a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800554c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4619      	mov	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	01db      	lsls	r3, r3, #7
 8005558:	440b      	add	r3, r1
 800555a:	3384      	adds	r3, #132	@ 0x84
 800555c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005562:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005572:	4413      	add	r3, r2
 8005574:	041b      	lsls	r3, r3, #16
 8005576:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	01db      	lsls	r3, r3, #7
 8005582:	4413      	add	r3, r2
 8005584:	3384      	adds	r3, #132	@ 0x84
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	4611      	mov	r1, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	01d2      	lsls	r2, r2, #7
 8005592:	440a      	add	r2, r1
 8005594:	3284      	adds	r2, #132	@ 0x84
 8005596:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800559a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055aa:	4413      	add	r3, r2
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4619      	mov	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	01db      	lsls	r3, r3, #7
 80055b8:	440b      	add	r3, r1
 80055ba:	3384      	adds	r3, #132	@ 0x84
 80055bc:	4619      	mov	r1, r3
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	01db      	lsls	r3, r3, #7
 80055ce:	4413      	add	r3, r2
 80055d0:	3384      	adds	r3, #132	@ 0x84
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	6812      	ldr	r2, [r2, #0]
 80055d8:	4611      	mov	r1, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	01d2      	lsls	r2, r2, #7
 80055de:	440a      	add	r2, r1
 80055e0:	3284      	adds	r2, #132	@ 0x84
 80055e2:	f023 0307 	bic.w	r3, r3, #7
 80055e6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	01db      	lsls	r3, r3, #7
 80055f2:	4413      	add	r3, r2
 80055f4:	3384      	adds	r3, #132	@ 0x84
 80055f6:	461a      	mov	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	061b      	lsls	r3, r3, #24
 8005618:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	01db      	lsls	r3, r3, #7
 8005624:	4413      	add	r3, r2
 8005626:	3384      	adds	r3, #132	@ 0x84
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	01db      	lsls	r3, r3, #7
 8005634:	4413      	add	r3, r2
 8005636:	3384      	adds	r3, #132	@ 0x84
 8005638:	461a      	mov	r2, r3
 800563a:	2300      	movs	r3, #0
 800563c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005644:	461a      	mov	r2, r3
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	431a      	orrs	r2, r3
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	431a      	orrs	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4619      	mov	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	01db      	lsls	r3, r3, #7
 8005658:	440b      	add	r3, r1
 800565a:	3384      	adds	r3, #132	@ 0x84
 800565c:	4619      	mov	r1, r3
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	01db      	lsls	r3, r3, #7
 800566e:	4413      	add	r3, r2
 8005670:	3384      	adds	r3, #132	@ 0x84
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	4611      	mov	r1, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	01d2      	lsls	r2, r2, #7
 800567e:	440a      	add	r2, r1
 8005680:	3284      	adds	r2, #132	@ 0x84
 8005682:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005686:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	01db      	lsls	r3, r3, #7
 8005692:	4413      	add	r3, r2
 8005694:	3384      	adds	r3, #132	@ 0x84
 8005696:	461a      	mov	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	01db      	lsls	r3, r3, #7
 80056a8:	4413      	add	r3, r2
 80056aa:	3384      	adds	r3, #132	@ 0x84
 80056ac:	69da      	ldr	r2, [r3, #28]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4619      	mov	r1, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	01db      	lsls	r3, r3, #7
 80056b8:	440b      	add	r3, r1
 80056ba:	3384      	adds	r3, #132	@ 0x84
 80056bc:	4619      	mov	r1, r3
 80056be:	4b58      	ldr	r3, [pc, #352]	@ (8005820 <LTDC_SetConfig+0x32c>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	69da      	ldr	r2, [r3, #28]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	68f9      	ldr	r1, [r7, #12]
 80056ce:	6809      	ldr	r1, [r1, #0]
 80056d0:	4608      	mov	r0, r1
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	01c9      	lsls	r1, r1, #7
 80056d6:	4401      	add	r1, r0
 80056d8:	3184      	adds	r1, #132	@ 0x84
 80056da:	4313      	orrs	r3, r2
 80056dc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	01db      	lsls	r3, r3, #7
 80056e8:	4413      	add	r3, r2
 80056ea:	3384      	adds	r3, #132	@ 0x84
 80056ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	01db      	lsls	r3, r3, #7
 80056f8:	4413      	add	r3, r2
 80056fa:	3384      	adds	r3, #132	@ 0x84
 80056fc:	461a      	mov	r2, r3
 80056fe:	2300      	movs	r3, #0
 8005700:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	01db      	lsls	r3, r3, #7
 800570c:	4413      	add	r3, r2
 800570e:	3384      	adds	r3, #132	@ 0x84
 8005710:	461a      	mov	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005720:	2304      	movs	r3, #4
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	e01b      	b.n	800575e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d102      	bne.n	8005734 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800572e:	2303      	movs	r3, #3
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	e014      	b.n	800575e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b04      	cmp	r3, #4
 800573a:	d00b      	beq.n	8005754 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005740:	2b02      	cmp	r3, #2
 8005742:	d007      	beq.n	8005754 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005748:	2b03      	cmp	r3, #3
 800574a:	d003      	beq.n	8005754 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005750:	2b07      	cmp	r3, #7
 8005752:	d102      	bne.n	800575a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005754:	2302      	movs	r3, #2
 8005756:	61fb      	str	r3, [r7, #28]
 8005758:	e001      	b.n	800575e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800575a:	2301      	movs	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	01db      	lsls	r3, r3, #7
 8005768:	4413      	add	r3, r2
 800576a:	3384      	adds	r3, #132	@ 0x84
 800576c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	4611      	mov	r1, r2
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	01d2      	lsls	r2, r2, #7
 8005778:	440a      	add	r2, r1
 800577a:	3284      	adds	r2, #132	@ 0x84
 800577c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005780:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	041a      	lsls	r2, r3, #16
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	1acb      	subs	r3, r1, r3
 8005798:	69f9      	ldr	r1, [r7, #28]
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	3307      	adds	r3, #7
 80057a0:	68f9      	ldr	r1, [r7, #12]
 80057a2:	6809      	ldr	r1, [r1, #0]
 80057a4:	4608      	mov	r0, r1
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	01c9      	lsls	r1, r1, #7
 80057aa:	4401      	add	r1, r0
 80057ac:	3184      	adds	r1, #132	@ 0x84
 80057ae:	4313      	orrs	r3, r2
 80057b0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	01db      	lsls	r3, r3, #7
 80057bc:	4413      	add	r3, r2
 80057be:	3384      	adds	r3, #132	@ 0x84
 80057c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4619      	mov	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	01db      	lsls	r3, r3, #7
 80057cc:	440b      	add	r3, r1
 80057ce:	3384      	adds	r3, #132	@ 0x84
 80057d0:	4619      	mov	r1, r3
 80057d2:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <LTDC_SetConfig+0x330>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	01db      	lsls	r3, r3, #7
 80057e2:	4413      	add	r3, r2
 80057e4:	3384      	adds	r3, #132	@ 0x84
 80057e6:	461a      	mov	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	01db      	lsls	r3, r3, #7
 80057f8:	4413      	add	r3, r2
 80057fa:	3384      	adds	r3, #132	@ 0x84
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	4611      	mov	r1, r2
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	01d2      	lsls	r2, r2, #7
 8005808:	440a      	add	r2, r1
 800580a:	3284      	adds	r2, #132	@ 0x84
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	6013      	str	r3, [r2, #0]
}
 8005812:	bf00      	nop
 8005814:	3724      	adds	r7, #36	@ 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	fffff8f8 	.word	0xfffff8f8
 8005824:	fffff800 	.word	0xfffff800

08005828 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e031      	b.n	800589e <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d105      	bne.n	8005852 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7fc fc69 	bl	8002124 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2203      	movs	r2, #3
 8005856:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f824 	bl	80058a8 <HAL_MMC_InitCard>
 8005860:	4603      	mov	r3, r0
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e019      	b.n	800589e <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fb47 	bl	8005f20 <HAL_MMC_ConfigWideBusOperation>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80058a8:	b590      	push	{r4, r7, lr}
 80058aa:	b08d      	sub	sp, #52	@ 0x34
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80058bc:	2300      	movs	r3, #0
 80058be:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80058c0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80058c4:	f04f 0100 	mov.w	r1, #0
 80058c8:	f003 fb56 	bl	8008f78 <HAL_RCCEx_GetPeriphCLKFreq>
 80058cc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80058e2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e070      	b.n	80059ca <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	0a1b      	lsrs	r3, r3, #8
 80058ec:	4a39      	ldr	r2, [pc, #228]	@ (80059d4 <HAL_MMC_InitCard+0x12c>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681c      	ldr	r4, [r3, #0]
 80058fa:	466a      	mov	r2, sp
 80058fc:	f107 0318 	add.w	r3, r7, #24
 8005900:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005904:	e882 0003 	stmia.w	r2, {r0, r1}
 8005908:	f107 030c 	add.w	r3, r7, #12
 800590c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800590e:	4620      	mov	r0, r4
 8005910:	f007 f8a0 	bl	800ca54 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f007 f8d2 	bl	800cac2 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592a:	fbb2 f3f3 	udiv	r3, r2, r3
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005936:	4a28      	ldr	r2, [pc, #160]	@ (80059d8 <HAL_MMC_InitCard+0x130>)
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	3301      	adds	r3, #1
 8005940:	4618      	mov	r0, r3
 8005942:	f7fd f9af 	bl	8002ca4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fcb4 	bl	80062b4 <MMC_PowerON>
 800594c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e02e      	b.n	80059ca <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fba3 	bl	80060b8 <MMC_InitCard>
 8005972:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00b      	beq.n	8005992 <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e01b      	b.n	80059ca <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800599a:	4618      	mov	r0, r3
 800599c:	f007 f926 	bl	800cbec <SDMMC_CmdBlockLength>
 80059a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00f      	beq.n	80059c8 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a0b      	ldr	r2, [pc, #44]	@ (80059dc <HAL_MMC_InitCard+0x134>)
 80059ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	372c      	adds	r7, #44	@ 0x2c
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd90      	pop	{r4, r7, pc}
 80059d2:	bf00      	nop
 80059d4:	014f8b59 	.word	0x014f8b59
 80059d8:	00012110 	.word	0x00012110
 80059dc:	1fe00fff 	.word	0x1fe00fff

080059e0 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f2:	0f9b      	lsrs	r3, r3, #30
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fe:	0e9b      	lsrs	r3, r3, #26
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a10:	0e1b      	lsrs	r3, r3, #24
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a44:	0d1b      	lsrs	r3, r3, #20
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a50:	0c1b      	lsrs	r3, r3, #16
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a62:	0bdb      	lsrs	r3, r3, #15
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a74:	0b9b      	lsrs	r3, r3, #14
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a86:	0b5b      	lsrs	r3, r3, #13
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a98:	0b1b      	lsrs	r3, r3, #12
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8005aac:	f107 010c 	add.w	r1, r7, #12
 8005ab0:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8005ab4:	22d4      	movs	r2, #212	@ 0xd4
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fc4c 	bl	8006354 <MMC_ReadExtCSD>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e129      	b.n	8005d1a <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d163      	bne.n	8005b96 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad2:	009a      	lsls	r2, r3, #2
 8005ad4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ad8:	4013      	ands	r3, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ade:	0f92      	lsrs	r2, r2, #30
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aea:	0edb      	lsrs	r3, r3, #27
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afc:	0e1b      	lsrs	r3, r3, #24
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0e:	0d5b      	lsrs	r3, r3, #21
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b20:	0c9b      	lsrs	r3, r3, #18
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b32:	0bdb      	lsrs	r3, r3, #15
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	7e1b      	ldrb	r3, [r3, #24]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	3302      	adds	r3, #2
 8005b56:	2201      	movs	r2, #1
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005b60:	fb03 f202 	mul.w	r2, r3, r2
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	7a1b      	ldrb	r3, [r3, #8]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	2201      	movs	r2, #1
 8005b74:	409a      	lsls	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	649a      	str	r2, [r3, #72]	@ 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b82:	0a52      	lsrs	r2, r2, #9
 8005b84:	fb03 f202 	mul.w	r2, r3, r2
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b92:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b94:	e023      	b.n	8005bde <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d10f      	bne.n	8005bbe <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bb2:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	651a      	str	r2, [r3, #80]	@ 0x50
 8005bbc:	e00f      	b.n	8005bde <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a58      	ldr	r2, [pc, #352]	@ (8005d24 <HAL_MMC_GetCardCSD+0x344>)
 8005bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bca:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e09d      	b.n	8005d1a <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be2:	0b9b      	lsrs	r3, r3, #14
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf4:	09db      	lsrs	r3, r3, #7
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c16:	0fdb      	lsrs	r3, r3, #31
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c22:	0f5b      	lsrs	r3, r3, #29
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c34:	0e9b      	lsrs	r3, r3, #26
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c46:	0d9b      	lsrs	r3, r3, #22
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c58:	0d5b      	lsrs	r3, r3, #21
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c88:	0bdb      	lsrs	r3, r3, #15
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c9c:	0b9b      	lsrs	r3, r3, #14
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cb0:	0b5b      	lsrs	r3, r3, #13
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cc4:	0b1b      	lsrs	r3, r3, #12
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd8:	0a9b      	lsrs	r3, r3, #10
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	1fe00fff 	.word	0x1fe00fff

08005d28 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08e      	sub	sp, #56	@ 0x38
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d34:	f7fc ffaa 	bl	8002c8c <HAL_GetTick>
 8005d38:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d107      	bne.n	8005d50 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d44:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0de      	b.n	8005f0e <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	f040 80d7 	bne.w	8005f0c <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2203      	movs	r2, #3
 8005d68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2200      	movs	r2, #0
 8005d72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d78:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7c:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 8005d7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d82:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d84:	2390      	movs	r3, #144	@ 0x90
 8005d86:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f107 0210 	add.w	r2, r7, #16
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f006 fef8 	bl	800cb94 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db2:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f007 f844 	bl	800ce48 <SDMMC_CmdSendEXTCSD>
 8005dc0:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 8005dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d045      	beq.n	8005e54 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a52      	ldr	r2, [pc, #328]	@ (8005f18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005dce:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e092      	b.n	8005f0e <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d013      	beq.n	8005e1e <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005df6:	2300      	movs	r3, #0
 8005df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dfa:	e00d      	b.n	8005e18 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f006 fe51 	bl	800caa8 <SDMMC_ReadFIFO>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0a:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	3304      	adds	r3, #4
 8005e10:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < 8U; count++)
 8005e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e14:	3301      	adds	r3, #1
 8005e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1a:	2b07      	cmp	r3, #7
 8005e1c:	d9ee      	bls.n	8005dfc <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005e1e:	f7fc ff35 	bl	8002c8c <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d902      	bls.n	8005e34 <HAL_MMC_GetCardExtCSD+0x10c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10f      	bne.n	8005e54 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a37      	ldr	r2, [pc, #220]	@ (8005f18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005e3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e05c      	b.n	8005f0e <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e5a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0c2      	beq.n	8005de8 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e70:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00f      	beq.n	8005ea0 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a24      	ldr	r2, [pc, #144]	@ (8005f18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005e86:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e8c:	f043 0208 	orr.w	r2, r3, #8
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e036      	b.n	8005f0e <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00f      	beq.n	8005ece <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005eb4:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eba:	f043 0202 	orr.w	r2, r3, #2
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e01f      	b.n	8005f0e <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00f      	beq.n	8005efc <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8005f18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005ee2:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee8:	f043 0220 	orr.w	r2, r3, #32
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e008      	b.n	8005f0e <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a06      	ldr	r2, [pc, #24]	@ (8005f1c <HAL_MMC_GetCardExtCSD+0x1f4>)
 8005f02:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3738      	adds	r7, #56	@ 0x38
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	1fe00fff 	.word	0x1fe00fff
 8005f1c:	18000f3a 	.word	0x18000f3a

08005f20 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8005f20:	b5b0      	push	{r4, r5, r7, lr}
 8005f22:	b08c      	sub	sp, #48	@ 0x30
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2203      	movs	r2, #3
 8005f32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d014      	beq.n	8005f6e <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d006      	beq.n	8005f60 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 8005f52:	2204      	movs	r2, #4
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 faf0 	bl	800653c <MMC_PwrClassUpdate>
 8005f5c:	6238      	str	r0, [r7, #32]
 8005f5e:	e00c      	b.n	8005f7a <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8005f60:	2202      	movs	r2, #2
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fae9 	bl	800653c <MMC_PwrClassUpdate>
 8005f6a:	6238      	str	r0, [r7, #32]
 8005f6c:	e005      	b.n	8005f7a <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8005f6e:	2201      	movs	r2, #1
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fae2 	bl	800653c <MMC_PwrClassUpdate>
 8005f78:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d17b      	bne.n	8006078 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f86:	d107      	bne.n	8005f98 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4946      	ldr	r1, [pc, #280]	@ (80060a8 <HAL_MMC_ConfigWideBusOperation+0x188>)
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f006 ff37 	bl	800ce02 <SDMMC_CmdSwitch>
 8005f94:	6238      	str	r0, [r7, #32]
 8005f96:	e019      	b.n	8005fcc <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f9e:	d107      	bne.n	8005fb0 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4941      	ldr	r1, [pc, #260]	@ (80060ac <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f006 ff2b 	bl	800ce02 <SDMMC_CmdSwitch>
 8005fac:	6238      	str	r0, [r7, #32]
 8005fae:	e00d      	b.n	8005fcc <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d107      	bne.n	8005fc6 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	493d      	ldr	r1, [pc, #244]	@ (80060b0 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f006 ff20 	bl	800ce02 <SDMMC_CmdSwitch>
 8005fc2:	6238      	str	r0, [r7, #32]
 8005fc4:	e002      	b.n	8005fcc <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8005fc6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fca:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d152      	bne.n	8006078 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8005fd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe0:	041b      	lsls	r3, r3, #16
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	f006 fec9 	bl	800cd7c <SDMMC_CmdSendStatus>
 8005fea:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d112      	bne.n	8006018 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f006 fdb8 	bl	800cb6e <SDMMC_GetResponse>
 8005ffe:	61f8      	str	r0, [r7, #28]
        count--;
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	3b01      	subs	r3, #1
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <HAL_MMC_ConfigWideBusOperation+0xfa>
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e0      	bne.n	8005fd8 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8006016:	e000      	b.n	800601a <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8006018:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	d025      	beq.n	800606c <HAL_MMC_ConfigWideBusOperation+0x14c>
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d122      	bne.n	800606c <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006030:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006034:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8006036:	e01f      	b.n	8006078 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f107 0408 	add.w	r4, r7, #8
 800603e:	1d1d      	adds	r5, r3, #4
 8006040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681c      	ldr	r4, [r3, #0]
 8006050:	466a      	mov	r2, sp
 8006052:	f107 0314 	add.w	r3, r7, #20
 8006056:	e893 0003 	ldmia.w	r3, {r0, r1}
 800605a:	e882 0003 	stmia.w	r2, {r0, r1}
 800605e:	f107 0308 	add.w	r3, r7, #8
 8006062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006064:	4620      	mov	r0, r4
 8006066:	f006 fcf5 	bl	800ca54 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 800606a:	e005      	b.n	8006078 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8006072:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006076:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a0a      	ldr	r2, [pc, #40]	@ (80060b4 <HAL_MMC_ConfigWideBusOperation+0x194>)
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	431a      	orrs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3728      	adds	r7, #40	@ 0x28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bdb0      	pop	{r4, r5, r7, pc}
 80060a8:	03b70200 	.word	0x03b70200
 80060ac:	03b70100 	.word	0x03b70100
 80060b0:	03b70000 	.word	0x03b70000
 80060b4:	1fe00fff 	.word	0x1fe00fff

080060b8 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80060b8:	b5b0      	push	{r4, r5, r7, lr}
 80060ba:	b096      	sub	sp, #88	@ 0x58
 80060bc:	af02      	add	r7, sp, #8
 80060be:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 80060c0:	2302      	movs	r3, #2
 80060c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f006 fd0a 	bl	800cae4 <SDMMC_GetPowerState>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d102      	bne.n	80060dc <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 80060d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80060da:	e0e6      	b.n	80062aa <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f006 fde7 	bl	800ccb4 <SDMMC_CmdSendCID>
 80060e6:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80060e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <MMC_InitCard+0x3a>
  {
    return errorstate;
 80060ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060f0:	e0db      	b.n	80062aa <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2100      	movs	r1, #0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f006 fd38 	bl	800cb6e <SDMMC_GetResponse>
 80060fe:	4602      	mov	r2, r0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	665a      	str	r2, [r3, #100]	@ 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2104      	movs	r1, #4
 800610a:	4618      	mov	r0, r3
 800610c:	f006 fd2f 	bl	800cb6e <SDMMC_GetResponse>
 8006110:	4602      	mov	r2, r0
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2108      	movs	r1, #8
 800611c:	4618      	mov	r0, r3
 800611e:	f006 fd26 	bl	800cb6e <SDMMC_GetResponse>
 8006122:	4602      	mov	r2, r0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	210c      	movs	r1, #12
 800612e:	4618      	mov	r0, r3
 8006130:	f006 fd1d 	bl	800cb6e <SDMMC_GetResponse>
 8006134:	4602      	mov	r2, r0
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8006142:	4611      	mov	r1, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f006 fdf4 	bl	800cd32 <SDMMC_CmdSetRelAddMmc>
 800614a:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 800614c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <MMC_InitCard+0x9e>
  {
    return errorstate;
 8006152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006154:	e0a9      	b.n	80062aa <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8006156:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	041b      	lsls	r3, r3, #16
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f006 fdc1 	bl	800ccf2 <SDMMC_CmdSendCSD>
 8006170:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <MMC_InitCard+0xc4>
  {
    return errorstate;
 8006178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800617a:	e096      	b.n	80062aa <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f006 fcf3 	bl	800cb6e <SDMMC_GetResponse>
 8006188:	4602      	mov	r2, r0
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	655a      	str	r2, [r3, #84]	@ 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2104      	movs	r1, #4
 8006194:	4618      	mov	r0, r3
 8006196:	f006 fcea 	bl	800cb6e <SDMMC_GetResponse>
 800619a:	4602      	mov	r2, r0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2108      	movs	r1, #8
 80061a6:	4618      	mov	r0, r3
 80061a8:	f006 fce1 	bl	800cb6e <SDMMC_GetResponse>
 80061ac:	4602      	mov	r2, r0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	210c      	movs	r1, #12
 80061b8:	4618      	mov	r0, r3
 80061ba:	f006 fcd8 	bl	800cb6e <SDMMC_GetResponse>
 80061be:	4602      	mov	r2, r0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2104      	movs	r1, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f006 fccf 	bl	800cb6e <SDMMC_GetResponse>
 80061d0:	4603      	mov	r3, r0
 80061d2:	0d1a      	lsrs	r2, r3, #20
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	4619      	mov	r1, r3
 80061e4:	4610      	mov	r0, r2
 80061e6:	f006 fd24 	bl	800cc32 <SDMMC_CmdSelDesel>
 80061ea:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80061ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <MMC_InitCard+0x13e>
  {
    return errorstate;
 80061f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061f4:	e059      	b.n	80062aa <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 80061f6:	f107 031c 	add.w	r3, r7, #28
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff fbef 	bl	80059e0 <HAL_MMC_GetCardCSD>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800620c:	e04d      	b.n	80062aa <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	041b      	lsls	r3, r3, #16
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f006 fdae 	bl	800cd7c <SDMMC_CmdSendStatus>
 8006220:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800622c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	635a      	str	r2, [r3, #52]	@ 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3374      	adds	r3, #116	@ 0x74
 8006238:	f04f 32ff 	mov.w	r2, #4294967295
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fd72 	bl	8005d28 <HAL_MMC_GetCardExtCSD>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800624e:	e02c      	b.n	80062aa <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006258:	041b      	lsls	r3, r3, #16
 800625a:	4619      	mov	r1, r3
 800625c:	4610      	mov	r0, r2
 800625e:	f006 fd8d 	bl	800cd7c <SDMMC_CmdSendStatus>
 8006262:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800626e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f107 0408 	add.w	r4, r7, #8
 800627c:	1d1d      	adds	r5, r3, #4
 800627e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006282:	682b      	ldr	r3, [r5, #0]
 8006284:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681c      	ldr	r4, [r3, #0]
 800628e:	466a      	mov	r2, sp
 8006290:	f107 0314 	add.w	r3, r7, #20
 8006294:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006298:	e882 0003 	stmia.w	r2, {r0, r1}
 800629c:	f107 0308 	add.w	r3, r7, #8
 80062a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062a2:	4620      	mov	r0, r4
 80062a4:	f006 fbd6 	bl	800ca54 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3750      	adds	r7, #80	@ 0x50
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080062b4 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f006 fcd3 	bl	800cc78 <SDMMC_CmdGoIdleState>
 80062d2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d027      	beq.n	800632a <MMC_PowerON+0x76>
  {
    return errorstate;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	e034      	b.n	8006348 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	60ba      	str	r2, [r7, #8]
 80062e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d102      	bne.n	80062f2 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 80062ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062f0:	e02a      	b.n	8006348 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4916      	ldr	r1, [pc, #88]	@ (8006350 <MMC_PowerON+0x9c>)
 80062f8:	4618      	mov	r0, r3
 80062fa:	f006 fd62 	bl	800cdc2 <SDMMC_CmdOpCondition>
 80062fe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8006306:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800630a:	e01d      	b.n	8006348 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2100      	movs	r1, #0
 8006312:	4618      	mov	r0, r3
 8006314:	f006 fc2b 	bl	800cb6e <SDMMC_GetResponse>
 8006318:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	0fdb      	lsrs	r3, r3, #31
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <MMC_PowerON+0x72>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <MMC_PowerON+0x74>
 8006326:	2300      	movs	r3, #0
 8006328:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0d6      	beq.n	80062de <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	0e1b      	lsrs	r3, r3, #24
 8006334:	2bc0      	cmp	r3, #192	@ 0xc0
 8006336:	d103      	bne.n	8006340 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	639a      	str	r2, [r3, #56]	@ 0x38
 800633e:	e002      	b.n	8006346 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return HAL_MMC_ERROR_NONE;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	c0ff8000 	.word	0xc0ff8000

08006354 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b090      	sub	sp, #64	@ 0x40
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006364:	f7fc fc92 	bl	8002c8c <HAL_GetTick>
 8006368:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2200      	movs	r2, #0
 800637a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800637c:	f04f 33ff 	mov.w	r3, #4294967295
 8006380:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 8006382:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006386:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006388:	2390      	movs	r3, #144	@ 0x90
 800638a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800638c:	2302      	movs	r3, #2
 800638e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006390:	2300      	movs	r3, #0
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006394:	2301      	movs	r3, #1
 8006396:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f107 0214 	add.w	r2, r7, #20
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f006 fbf6 	bl	800cb94 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2100      	movs	r1, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f006 fd4a 	bl	800ce48 <SDMMC_CmdSendEXTCSD>
 80063b4:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d04e      	beq.n	800645a <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a5c      	ldr	r2, [pc, #368]	@ (8006534 <MMC_ReadExtCSD+0x1e0>)
 80063c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	431a      	orrs	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e0a6      	b.n	800652a <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01c      	beq.n	8006424 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 80063ea:	2300      	movs	r3, #0
 80063ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ee:	e013      	b.n	8006418 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f006 fb57 	bl	800caa8 <SDMMC_ReadFIFO>
 80063fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 80063fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006400:	4413      	add	r3, r2
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	0892      	lsrs	r2, r2, #2
 8006406:	b292      	uxth	r2, r2
 8006408:	4293      	cmp	r3, r2
 800640a:	d102      	bne.n	8006412 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006410:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 8006412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006414:	3301      	adds	r3, #1
 8006416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800641a:	2b07      	cmp	r3, #7
 800641c:	d9e8      	bls.n	80063f0 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 800641e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006420:	3308      	adds	r3, #8
 8006422:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006424:	f7fc fc32 	bl	8002c8c <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d902      	bls.n	800643a <MMC_ReadExtCSD+0xe6>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10f      	bne.n	800645a <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a3d      	ldr	r2, [pc, #244]	@ (8006534 <MMC_ReadExtCSD+0x1e0>)
 8006440:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006446:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e067      	b.n	800652a <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006460:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0b9      	beq.n	80063dc <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00f      	beq.n	8006496 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2e      	ldr	r2, [pc, #184]	@ (8006534 <MMC_ReadExtCSD+0x1e0>)
 800647c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006482:	f043 0208 	orr.w	r2, r3, #8
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e049      	b.n	800652a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00f      	beq.n	80064c4 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a22      	ldr	r2, [pc, #136]	@ (8006534 <MMC_ReadExtCSD+0x1e0>)
 80064aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b0:	f043 0202 	orr.w	r2, r3, #2
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e032      	b.n	800652a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00f      	beq.n	80064f2 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a17      	ldr	r2, [pc, #92]	@ (8006534 <MMC_ReadExtCSD+0x1e0>)
 80064d8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064de:	f043 0220 	orr.w	r2, r3, #32
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e01b      	b.n	800652a <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fa:	041b      	lsls	r3, r3, #16
 80064fc:	4619      	mov	r1, r3
 80064fe:	4610      	mov	r0, r2
 8006500:	f006 fc3c 	bl	800cd7c <SDMMC_CmdSendStatus>
 8006504:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	431a      	orrs	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a06      	ldr	r2, [pc, #24]	@ (8006538 <MMC_ReadExtCSD+0x1e4>)
 800651e:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3740      	adds	r7, #64	@ 0x40
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	1fe00fff 	.word	0x1fe00fff
 8006538:	18000f3a 	.word	0x18000f3a

0800653c <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08a      	sub	sp, #40	@ 0x28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 800654c:	2300      	movs	r3, #0
 800654e:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006556:	d004      	beq.n	8006562 <MMC_PwrClassUpdate+0x26>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800655e:	f040 8085 	bne.w	800666c <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8006566:	f107 0114 	add.w	r1, r7, #20
 800656a:	f04f 33ff 	mov.w	r3, #4294967295
 800656e:	22bb      	movs	r2, #187	@ 0xbb
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff feef 	bl	8006354 <MMC_ReadExtCSD>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800657c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	e002      	b.n	800658a <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	0e1b      	lsrs	r3, r3, #24
 8006588:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b04      	cmp	r3, #4
 800658e:	d105      	bne.n	800659c <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8006596:	0e1b      	lsrs	r3, r3, #24
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	e00e      	b.n	80065ba <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d106      	bne.n	80065b0 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80065a8:	0c1b      	lsrs	r3, r3, #16
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	e004      	b.n	80065ba <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80065b6:	0e1b      	lsrs	r3, r3, #24
 80065b8:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d155      	bne.n	800666c <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065c6:	d102      	bne.n	80065ce <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	091b      	lsrs	r3, r3, #4
 80065cc:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	4053      	eors	r3, r2
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d047      	beq.n	800666c <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80065e8:	4b23      	ldr	r3, [pc, #140]	@ (8006678 <MMC_PwrClassUpdate+0x13c>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	f006 fc08 	bl	800ce02 <SDMMC_CmdSwitch>
 80065f2:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d138      	bne.n	800666c <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 80065fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80065fe:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006608:	041b      	lsls	r3, r3, #16
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f006 fbb5 	bl	800cd7c <SDMMC_CmdSendStatus>
 8006612:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d112      	bne.n	8006640 <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2100      	movs	r1, #0
 8006620:	4618      	mov	r0, r3
 8006622:	f006 faa4 	bl	800cb6e <SDMMC_GetResponse>
 8006626:	6238      	str	r0, [r7, #32]
            count--;
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	3b01      	subs	r3, #1
 800662c:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <MMC_PwrClassUpdate+0x106>
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e0      	bne.n	8006600 <MMC_PwrClassUpdate+0xc4>
 800663e:	e000      	b.n	8006642 <MMC_PwrClassUpdate+0x106>
              break;
 8006640:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <MMC_PwrClassUpdate+0x124>
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d108      	bne.n	8006660 <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006654:	2b00      	cmp	r3, #0
 8006656:	d009      	beq.n	800666c <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006658:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800665c:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 800665e:	e005      	b.n	800666c <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8006666:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800666a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 800666c:	69fb      	ldr	r3, [r7, #28]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3728      	adds	r7, #40	@ 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	03bb0000 	.word	0x03bb0000

0800667c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800667c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800667e:	b08f      	sub	sp, #60	@ 0x3c
 8006680:	af0a      	add	r7, sp, #40	@ 0x28
 8006682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e116      	b.n	80068bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7fb ff75 	bl	8002598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2203      	movs	r2, #3
 80066b2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d102      	bne.n	80066c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f006 fdf7 	bl	800d2c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	603b      	str	r3, [r7, #0]
 80066d8:	687e      	ldr	r6, [r7, #4]
 80066da:	466d      	mov	r5, sp
 80066dc:	f106 0410 	add.w	r4, r6, #16
 80066e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80066f0:	1d33      	adds	r3, r6, #4
 80066f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066f4:	6838      	ldr	r0, [r7, #0]
 80066f6:	f006 fd75 	bl	800d1e4 <USB_CoreInit>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0d7      	b.n	80068bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2100      	movs	r1, #0
 8006712:	4618      	mov	r0, r3
 8006714:	f006 fde5 	bl	800d2e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
 800671c:	e04a      	b.n	80067b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800671e:	7bfa      	ldrb	r2, [r7, #15]
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	333d      	adds	r3, #61	@ 0x3d
 800672e:	2201      	movs	r2, #1
 8006730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006732:	7bfa      	ldrb	r2, [r7, #15]
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	333c      	adds	r3, #60	@ 0x3c
 8006742:	7bfa      	ldrb	r2, [r7, #15]
 8006744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006746:	7bfa      	ldrb	r2, [r7, #15]
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	b298      	uxth	r0, r3
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	3356      	adds	r3, #86	@ 0x56
 800675a:	4602      	mov	r2, r0
 800675c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800675e:	7bfa      	ldrb	r2, [r7, #15]
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	440b      	add	r3, r1
 800676c:	3340      	adds	r3, #64	@ 0x40
 800676e:	2200      	movs	r2, #0
 8006770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006772:	7bfa      	ldrb	r2, [r7, #15]
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	3344      	adds	r3, #68	@ 0x44
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006786:	7bfa      	ldrb	r2, [r7, #15]
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	4613      	mov	r3, r2
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	440b      	add	r3, r1
 8006794:	3348      	adds	r3, #72	@ 0x48
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800679a:	7bfa      	ldrb	r2, [r7, #15]
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	334c      	adds	r3, #76	@ 0x4c
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	3301      	adds	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
 80067b4:	7bfa      	ldrb	r2, [r7, #15]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d3af      	bcc.n	800671e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
 80067c2:	e044      	b.n	800684e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80067c4:	7bfa      	ldrb	r2, [r7, #15]
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4613      	mov	r3, r2
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80067da:	7bfa      	ldrb	r2, [r7, #15]
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4613      	mov	r3, r2
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80067ec:	7bfa      	ldrb	r2, [r7, #15]
 80067ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80067f0:	7bfa      	ldrb	r2, [r7, #15]
 80067f2:	6879      	ldr	r1, [r7, #4]
 80067f4:	4613      	mov	r3, r2
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006802:	2200      	movs	r2, #0
 8006804:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006806:	7bfa      	ldrb	r2, [r7, #15]
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800681c:	7bfa      	ldrb	r2, [r7, #15]
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800682e:	2200      	movs	r2, #0
 8006830:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006832:	7bfa      	ldrb	r2, [r7, #15]
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	3301      	adds	r3, #1
 800684c:	73fb      	strb	r3, [r7, #15]
 800684e:	7bfa      	ldrb	r2, [r7, #15]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d3b5      	bcc.n	80067c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	603b      	str	r3, [r7, #0]
 800685e:	687e      	ldr	r6, [r7, #4]
 8006860:	466d      	mov	r5, sp
 8006862:	f106 0410 	add.w	r4, r6, #16
 8006866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800686a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800686c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800686e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006872:	e885 0003 	stmia.w	r5, {r0, r1}
 8006876:	1d33      	adds	r3, r6, #4
 8006878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800687a:	6838      	ldr	r0, [r7, #0]
 800687c:	f006 fd7e 	bl	800d37c <USB_DevInit>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e014      	b.n	80068bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d102      	bne.n	80068b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f80a 	bl	80068c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f006 ff3c 	bl	800d732 <USB_DevDisconnect>

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068f2:	4b05      	ldr	r3, [pc, #20]	@ (8006908 <HAL_PCDEx_ActivateLPM+0x44>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	10000003 	.word	0x10000003

0800690c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006914:	4b19      	ldr	r3, [pc, #100]	@ (800697c <HAL_PWREx_ConfigSupply+0x70>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b04      	cmp	r3, #4
 800691e:	d00a      	beq.n	8006936 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006920:	4b16      	ldr	r3, [pc, #88]	@ (800697c <HAL_PWREx_ConfigSupply+0x70>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	429a      	cmp	r2, r3
 800692c:	d001      	beq.n	8006932 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e01f      	b.n	8006972 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	e01d      	b.n	8006972 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006936:	4b11      	ldr	r3, [pc, #68]	@ (800697c <HAL_PWREx_ConfigSupply+0x70>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f023 0207 	bic.w	r2, r3, #7
 800693e:	490f      	ldr	r1, [pc, #60]	@ (800697c <HAL_PWREx_ConfigSupply+0x70>)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4313      	orrs	r3, r2
 8006944:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006946:	f7fc f9a1 	bl	8002c8c <HAL_GetTick>
 800694a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800694c:	e009      	b.n	8006962 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800694e:	f7fc f99d 	bl	8002c8c <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800695c:	d901      	bls.n	8006962 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e007      	b.n	8006972 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006962:	4b06      	ldr	r3, [pc, #24]	@ (800697c <HAL_PWREx_ConfigSupply+0x70>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800696a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800696e:	d1ee      	bne.n	800694e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	58024800 	.word	0x58024800

08006980 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006984:	4b05      	ldr	r3, [pc, #20]	@ (800699c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	4a04      	ldr	r2, [pc, #16]	@ (800699c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800698a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800698e:	60d3      	str	r3, [r2, #12]
}
 8006990:	bf00      	nop
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	58024800 	.word	0x58024800

080069a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80069a8:	f7fc f970 	bl	8002c8c <HAL_GetTick>
 80069ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e05f      	b.n	8006a78 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d107      	bne.n	80069d4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fb faaf 	bl	8001f28 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80069ca:	f241 3188 	movw	r1, #5000	@ 0x1388
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f85a 	bl	8006a88 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	021a      	lsls	r2, r3, #8
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	2120      	movs	r1, #32
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f852 	bl	8006aa4 <QSPI_WaitFlagStateUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006a04:	7afb      	ldrb	r3, [r7, #11]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d135      	bne.n	8006a76 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4b1b      	ldr	r3, [pc, #108]	@ (8006a80 <HAL_QSPI_Init+0xe0>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6852      	ldr	r2, [r2, #4]
 8006a18:	0611      	lsls	r1, r2, #24
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68d2      	ldr	r2, [r2, #12]
 8006a1e:	4311      	orrs	r1, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	69d2      	ldr	r2, [r2, #28]
 8006a24:	4311      	orrs	r1, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6a12      	ldr	r2, [r2, #32]
 8006a2a:	4311      	orrs	r1, r2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	4b12      	ldr	r3, [pc, #72]	@ (8006a84 <HAL_QSPI_Init+0xe4>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6912      	ldr	r2, [r2, #16]
 8006a42:	0411      	lsls	r1, r2, #16
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6952      	ldr	r2, [r2, #20]
 8006a48:	4311      	orrs	r1, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6992      	ldr	r2, [r2, #24]
 8006a4e:	4311      	orrs	r1, r2
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	430b      	orrs	r3, r1
 8006a56:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006a76:	7afb      	ldrb	r3, [r7, #11]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	00ffff2f 	.word	0x00ffff2f
 8006a84:	ffe0f8fe 	.word	0xffe0f8fe

08006a88 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ab4:	e01a      	b.n	8006aec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abc:	d016      	beq.n	8006aec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fc f8e5 	bl	8002c8c <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10b      	bne.n	8006aec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2204      	movs	r2, #4
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae0:	f043 0201 	orr.w	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e00e      	b.n	8006b0a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4013      	ands	r3, r2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bf14      	ite	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	2300      	moveq	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d1d6      	bne.n	8006ab6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08c      	sub	sp, #48	@ 0x30
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d102      	bne.n	8006b28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f000 bc48 	b.w	80073b8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8088 	beq.w	8006c46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b36:	4b99      	ldr	r3, [pc, #612]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b40:	4b96      	ldr	r3, [pc, #600]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b48:	2b10      	cmp	r3, #16
 8006b4a:	d007      	beq.n	8006b5c <HAL_RCC_OscConfig+0x48>
 8006b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4e:	2b18      	cmp	r3, #24
 8006b50:	d111      	bne.n	8006b76 <HAL_RCC_OscConfig+0x62>
 8006b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d10c      	bne.n	8006b76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b5c:	4b8f      	ldr	r3, [pc, #572]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d06d      	beq.n	8006c44 <HAL_RCC_OscConfig+0x130>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d169      	bne.n	8006c44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f000 bc21 	b.w	80073b8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b7e:	d106      	bne.n	8006b8e <HAL_RCC_OscConfig+0x7a>
 8006b80:	4b86      	ldr	r3, [pc, #536]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a85      	ldr	r2, [pc, #532]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	e02e      	b.n	8006bec <HAL_RCC_OscConfig+0xd8>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10c      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x9c>
 8006b96:	4b81      	ldr	r3, [pc, #516]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a80      	ldr	r2, [pc, #512]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	4b7e      	ldr	r3, [pc, #504]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a7d      	ldr	r2, [pc, #500]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006ba8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	e01d      	b.n	8006bec <HAL_RCC_OscConfig+0xd8>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_RCC_OscConfig+0xc0>
 8006bba:	4b78      	ldr	r3, [pc, #480]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a77      	ldr	r2, [pc, #476]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	4b75      	ldr	r3, [pc, #468]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a74      	ldr	r2, [pc, #464]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e00b      	b.n	8006bec <HAL_RCC_OscConfig+0xd8>
 8006bd4:	4b71      	ldr	r3, [pc, #452]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a70      	ldr	r2, [pc, #448]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	4b6e      	ldr	r3, [pc, #440]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a6d      	ldr	r2, [pc, #436]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d013      	beq.n	8006c1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf4:	f7fc f84a 	bl	8002c8c <HAL_GetTick>
 8006bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bfc:	f7fc f846 	bl	8002c8c <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b64      	cmp	r3, #100	@ 0x64
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e3d4      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c0e:	4b63      	ldr	r3, [pc, #396]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0f0      	beq.n	8006bfc <HAL_RCC_OscConfig+0xe8>
 8006c1a:	e014      	b.n	8006c46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1c:	f7fc f836 	bl	8002c8c <HAL_GetTick>
 8006c20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c24:	f7fc f832 	bl	8002c8c <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b64      	cmp	r3, #100	@ 0x64
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e3c0      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c36:	4b59      	ldr	r3, [pc, #356]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f0      	bne.n	8006c24 <HAL_RCC_OscConfig+0x110>
 8006c42:	e000      	b.n	8006c46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 80ca 	beq.w	8006de8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c54:	4b51      	ldr	r3, [pc, #324]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d007      	beq.n	8006c7a <HAL_RCC_OscConfig+0x166>
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	2b18      	cmp	r3, #24
 8006c6e:	d156      	bne.n	8006d1e <HAL_RCC_OscConfig+0x20a>
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d151      	bne.n	8006d1e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c7a:	4b48      	ldr	r3, [pc, #288]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <HAL_RCC_OscConfig+0x17e>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e392      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c92:	4b42      	ldr	r3, [pc, #264]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f023 0219 	bic.w	r2, r3, #25
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	493f      	ldr	r1, [pc, #252]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca4:	f7fb fff2 	bl	8002c8c <HAL_GetTick>
 8006ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cac:	f7fb ffee 	bl	8002c8c <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e37c      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cbe:	4b37      	ldr	r3, [pc, #220]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0f0      	beq.n	8006cac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cca:	f7fc f80f 	bl	8002cec <HAL_GetREVID>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d817      	bhi.n	8006d08 <HAL_RCC_OscConfig+0x1f4>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	2b40      	cmp	r3, #64	@ 0x40
 8006cde:	d108      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x1de>
 8006ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cf0:	e07a      	b.n	8006de8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	031b      	lsls	r3, r3, #12
 8006d00:	4926      	ldr	r1, [pc, #152]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d06:	e06f      	b.n	8006de8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d08:	4b24      	ldr	r3, [pc, #144]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	061b      	lsls	r3, r3, #24
 8006d16:	4921      	ldr	r1, [pc, #132]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d1c:	e064      	b.n	8006de8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d047      	beq.n	8006db6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d26:	4b1d      	ldr	r3, [pc, #116]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f023 0219 	bic.w	r2, r3, #25
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	491a      	ldr	r1, [pc, #104]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d38:	f7fb ffa8 	bl	8002c8c <HAL_GetTick>
 8006d3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d3e:	e008      	b.n	8006d52 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d40:	f7fb ffa4 	bl	8002c8c <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e332      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d52:	4b12      	ldr	r3, [pc, #72]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0f0      	beq.n	8006d40 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d5e:	f7fb ffc5 	bl	8002cec <HAL_GetREVID>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d819      	bhi.n	8006da0 <HAL_RCC_OscConfig+0x28c>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b40      	cmp	r3, #64	@ 0x40
 8006d72:	d108      	bne.n	8006d86 <HAL_RCC_OscConfig+0x272>
 8006d74:	4b09      	ldr	r3, [pc, #36]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006d7c:	4a07      	ldr	r2, [pc, #28]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d82:	6053      	str	r3, [r2, #4]
 8006d84:	e030      	b.n	8006de8 <HAL_RCC_OscConfig+0x2d4>
 8006d86:	4b05      	ldr	r3, [pc, #20]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	031b      	lsls	r3, r3, #12
 8006d94:	4901      	ldr	r1, [pc, #4]	@ (8006d9c <HAL_RCC_OscConfig+0x288>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	604b      	str	r3, [r1, #4]
 8006d9a:	e025      	b.n	8006de8 <HAL_RCC_OscConfig+0x2d4>
 8006d9c:	58024400 	.word	0x58024400
 8006da0:	4b9a      	ldr	r3, [pc, #616]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	061b      	lsls	r3, r3, #24
 8006dae:	4997      	ldr	r1, [pc, #604]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	604b      	str	r3, [r1, #4]
 8006db4:	e018      	b.n	8006de8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006db6:	4b95      	ldr	r3, [pc, #596]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a94      	ldr	r2, [pc, #592]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006dbc:	f023 0301 	bic.w	r3, r3, #1
 8006dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc2:	f7fb ff63 	bl	8002c8c <HAL_GetTick>
 8006dc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dc8:	e008      	b.n	8006ddc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dca:	f7fb ff5f 	bl	8002c8c <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e2ed      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ddc:	4b8b      	ldr	r3, [pc, #556]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f0      	bne.n	8006dca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0310 	and.w	r3, r3, #16
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 80a9 	beq.w	8006f48 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006df6:	4b85      	ldr	r3, [pc, #532]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dfe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e00:	4b82      	ldr	r3, [pc, #520]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e04:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d007      	beq.n	8006e1c <HAL_RCC_OscConfig+0x308>
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	2b18      	cmp	r3, #24
 8006e10:	d13a      	bne.n	8006e88 <HAL_RCC_OscConfig+0x374>
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f003 0303 	and.w	r3, r3, #3
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d135      	bne.n	8006e88 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e1c:	4b7b      	ldr	r3, [pc, #492]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_RCC_OscConfig+0x320>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	2b80      	cmp	r3, #128	@ 0x80
 8006e2e:	d001      	beq.n	8006e34 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e2c1      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e34:	f7fb ff5a 	bl	8002cec <HAL_GetREVID>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d817      	bhi.n	8006e72 <HAL_RCC_OscConfig+0x35e>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d108      	bne.n	8006e5c <HAL_RCC_OscConfig+0x348>
 8006e4a:	4b70      	ldr	r3, [pc, #448]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006e52:	4a6e      	ldr	r2, [pc, #440]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006e54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e58:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e5a:	e075      	b.n	8006f48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e5c:	4b6b      	ldr	r3, [pc, #428]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	069b      	lsls	r3, r3, #26
 8006e6a:	4968      	ldr	r1, [pc, #416]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e70:	e06a      	b.n	8006f48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e72:	4b66      	ldr	r3, [pc, #408]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	061b      	lsls	r3, r3, #24
 8006e80:	4962      	ldr	r1, [pc, #392]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e86:	e05f      	b.n	8006f48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d042      	beq.n	8006f16 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e90:	4b5e      	ldr	r3, [pc, #376]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a5d      	ldr	r2, [pc, #372]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9c:	f7fb fef6 	bl	8002c8c <HAL_GetTick>
 8006ea0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ea4:	f7fb fef2 	bl	8002c8c <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e280      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006eb6:	4b55      	ldr	r3, [pc, #340]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f0      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ec2:	f7fb ff13 	bl	8002cec <HAL_GetREVID>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d817      	bhi.n	8006f00 <HAL_RCC_OscConfig+0x3ec>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d108      	bne.n	8006eea <HAL_RCC_OscConfig+0x3d6>
 8006ed8:	4b4c      	ldr	r3, [pc, #304]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006ee2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ee6:	6053      	str	r3, [r2, #4]
 8006ee8:	e02e      	b.n	8006f48 <HAL_RCC_OscConfig+0x434>
 8006eea:	4b48      	ldr	r3, [pc, #288]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	069b      	lsls	r3, r3, #26
 8006ef8:	4944      	ldr	r1, [pc, #272]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	604b      	str	r3, [r1, #4]
 8006efe:	e023      	b.n	8006f48 <HAL_RCC_OscConfig+0x434>
 8006f00:	4b42      	ldr	r3, [pc, #264]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	061b      	lsls	r3, r3, #24
 8006f0e:	493f      	ldr	r1, [pc, #252]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60cb      	str	r3, [r1, #12]
 8006f14:	e018      	b.n	8006f48 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006f16:	4b3d      	ldr	r3, [pc, #244]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a3c      	ldr	r2, [pc, #240]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006f1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f22:	f7fb feb3 	bl	8002c8c <HAL_GetTick>
 8006f26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f2a:	f7fb feaf 	bl	8002c8c <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e23d      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f3c:	4b33      	ldr	r3, [pc, #204]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1f0      	bne.n	8006f2a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d036      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d019      	beq.n	8006f90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f60:	4a2a      	ldr	r2, [pc, #168]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f68:	f7fb fe90 	bl	8002c8c <HAL_GetTick>
 8006f6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f70:	f7fb fe8c 	bl	8002c8c <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e21a      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f82:	4b22      	ldr	r3, [pc, #136]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0f0      	beq.n	8006f70 <HAL_RCC_OscConfig+0x45c>
 8006f8e:	e018      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f90:	4b1e      	ldr	r3, [pc, #120]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f94:	4a1d      	ldr	r2, [pc, #116]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f9c:	f7fb fe76 	bl	8002c8c <HAL_GetTick>
 8006fa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fa4:	f7fb fe72 	bl	8002c8c <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e200      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fb6:	4b15      	ldr	r3, [pc, #84]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1f0      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d039      	beq.n	8007042 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d01c      	beq.n	8007010 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a0c      	ldr	r2, [pc, #48]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006fdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006fe0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fe2:	f7fb fe53 	bl	8002c8c <HAL_GetTick>
 8006fe6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fe8:	e008      	b.n	8006ffc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fea:	f7fb fe4f 	bl	8002c8c <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e1dd      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ffc:	4b03      	ldr	r3, [pc, #12]	@ (800700c <HAL_RCC_OscConfig+0x4f8>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0f0      	beq.n	8006fea <HAL_RCC_OscConfig+0x4d6>
 8007008:	e01b      	b.n	8007042 <HAL_RCC_OscConfig+0x52e>
 800700a:	bf00      	nop
 800700c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007010:	4b9b      	ldr	r3, [pc, #620]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a9a      	ldr	r2, [pc, #616]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007016:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800701a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800701c:	f7fb fe36 	bl	8002c8c <HAL_GetTick>
 8007020:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007024:	f7fb fe32 	bl	8002c8c <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e1c0      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007036:	4b92      	ldr	r3, [pc, #584]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 8081 	beq.w	8007152 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007050:	4b8c      	ldr	r3, [pc, #560]	@ (8007284 <HAL_RCC_OscConfig+0x770>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a8b      	ldr	r2, [pc, #556]	@ (8007284 <HAL_RCC_OscConfig+0x770>)
 8007056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800705a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800705c:	f7fb fe16 	bl	8002c8c <HAL_GetTick>
 8007060:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007064:	f7fb fe12 	bl	8002c8c <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b64      	cmp	r3, #100	@ 0x64
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e1a0      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007076:	4b83      	ldr	r3, [pc, #524]	@ (8007284 <HAL_RCC_OscConfig+0x770>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f0      	beq.n	8007064 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d106      	bne.n	8007098 <HAL_RCC_OscConfig+0x584>
 800708a:	4b7d      	ldr	r3, [pc, #500]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 800708c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800708e:	4a7c      	ldr	r2, [pc, #496]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	6713      	str	r3, [r2, #112]	@ 0x70
 8007096:	e02d      	b.n	80070f4 <HAL_RCC_OscConfig+0x5e0>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10c      	bne.n	80070ba <HAL_RCC_OscConfig+0x5a6>
 80070a0:	4b77      	ldr	r3, [pc, #476]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a4:	4a76      	ldr	r2, [pc, #472]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80070ac:	4b74      	ldr	r3, [pc, #464]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b0:	4a73      	ldr	r2, [pc, #460]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070b2:	f023 0304 	bic.w	r3, r3, #4
 80070b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80070b8:	e01c      	b.n	80070f4 <HAL_RCC_OscConfig+0x5e0>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d10c      	bne.n	80070dc <HAL_RCC_OscConfig+0x5c8>
 80070c2:	4b6f      	ldr	r3, [pc, #444]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c6:	4a6e      	ldr	r2, [pc, #440]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070c8:	f043 0304 	orr.w	r3, r3, #4
 80070cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80070ce:	4b6c      	ldr	r3, [pc, #432]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d2:	4a6b      	ldr	r2, [pc, #428]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80070da:	e00b      	b.n	80070f4 <HAL_RCC_OscConfig+0x5e0>
 80070dc:	4b68      	ldr	r3, [pc, #416]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e0:	4a67      	ldr	r2, [pc, #412]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80070e8:	4b65      	ldr	r3, [pc, #404]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ec:	4a64      	ldr	r2, [pc, #400]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80070ee:	f023 0304 	bic.w	r3, r3, #4
 80070f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d015      	beq.n	8007128 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fc:	f7fb fdc6 	bl	8002c8c <HAL_GetTick>
 8007100:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007102:	e00a      	b.n	800711a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007104:	f7fb fdc2 	bl	8002c8c <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007112:	4293      	cmp	r3, r2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e14e      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800711a:	4b59      	ldr	r3, [pc, #356]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 800711c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0ee      	beq.n	8007104 <HAL_RCC_OscConfig+0x5f0>
 8007126:	e014      	b.n	8007152 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007128:	f7fb fdb0 	bl	8002c8c <HAL_GetTick>
 800712c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800712e:	e00a      	b.n	8007146 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007130:	f7fb fdac 	bl	8002c8c <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e138      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007146:	4b4e      	ldr	r3, [pc, #312]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1ee      	bne.n	8007130 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 812d 	beq.w	80073b6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800715c:	4b48      	ldr	r3, [pc, #288]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007164:	2b18      	cmp	r3, #24
 8007166:	f000 80bd 	beq.w	80072e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716e:	2b02      	cmp	r3, #2
 8007170:	f040 809e 	bne.w	80072b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007174:	4b42      	ldr	r3, [pc, #264]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a41      	ldr	r2, [pc, #260]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 800717a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800717e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fb fd84 	bl	8002c8c <HAL_GetTick>
 8007184:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007188:	f7fb fd80 	bl	8002c8c <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e10e      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800719a:	4b39      	ldr	r3, [pc, #228]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f0      	bne.n	8007188 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071a6:	4b36      	ldr	r3, [pc, #216]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80071a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071aa:	4b37      	ldr	r3, [pc, #220]	@ (8007288 <HAL_RCC_OscConfig+0x774>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80071b6:	0112      	lsls	r2, r2, #4
 80071b8:	430a      	orrs	r2, r1
 80071ba:	4931      	ldr	r1, [pc, #196]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	628b      	str	r3, [r1, #40]	@ 0x28
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c4:	3b01      	subs	r3, #1
 80071c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ce:	3b01      	subs	r3, #1
 80071d0:	025b      	lsls	r3, r3, #9
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071da:	3b01      	subs	r3, #1
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e8:	3b01      	subs	r3, #1
 80071ea:	061b      	lsls	r3, r3, #24
 80071ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071f0:	4923      	ldr	r1, [pc, #140]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80071f6:	4b22      	ldr	r3, [pc, #136]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fa:	4a21      	ldr	r2, [pc, #132]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007202:	4b1f      	ldr	r3, [pc, #124]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007206:	4b21      	ldr	r3, [pc, #132]	@ (800728c <HAL_RCC_OscConfig+0x778>)
 8007208:	4013      	ands	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800720e:	00d2      	lsls	r2, r2, #3
 8007210:	491b      	ldr	r1, [pc, #108]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007212:	4313      	orrs	r3, r2
 8007214:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007216:	4b1a      	ldr	r3, [pc, #104]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	f023 020c 	bic.w	r2, r3, #12
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007222:	4917      	ldr	r1, [pc, #92]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007224:	4313      	orrs	r3, r2
 8007226:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007228:	4b15      	ldr	r3, [pc, #84]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 800722a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722c:	f023 0202 	bic.w	r2, r3, #2
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007234:	4912      	ldr	r1, [pc, #72]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007236:	4313      	orrs	r3, r2
 8007238:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800723a:	4b11      	ldr	r3, [pc, #68]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	4a10      	ldr	r2, [pc, #64]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007244:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007246:	4b0e      	ldr	r3, [pc, #56]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724a:	4a0d      	ldr	r2, [pc, #52]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 800724c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007250:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007252:	4b0b      	ldr	r3, [pc, #44]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007256:	4a0a      	ldr	r2, [pc, #40]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800725c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800725e:	4b08      	ldr	r3, [pc, #32]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007262:	4a07      	ldr	r2, [pc, #28]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007264:	f043 0301 	orr.w	r3, r3, #1
 8007268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800726a:	4b05      	ldr	r3, [pc, #20]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a04      	ldr	r2, [pc, #16]	@ (8007280 <HAL_RCC_OscConfig+0x76c>)
 8007270:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007276:	f7fb fd09 	bl	8002c8c <HAL_GetTick>
 800727a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800727c:	e011      	b.n	80072a2 <HAL_RCC_OscConfig+0x78e>
 800727e:	bf00      	nop
 8007280:	58024400 	.word	0x58024400
 8007284:	58024800 	.word	0x58024800
 8007288:	fffffc0c 	.word	0xfffffc0c
 800728c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007290:	f7fb fcfc 	bl	8002c8c <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e08a      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072a2:	4b47      	ldr	r3, [pc, #284]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0f0      	beq.n	8007290 <HAL_RCC_OscConfig+0x77c>
 80072ae:	e082      	b.n	80073b6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072b0:	4b43      	ldr	r3, [pc, #268]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a42      	ldr	r2, [pc, #264]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 80072b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072bc:	f7fb fce6 	bl	8002c8c <HAL_GetTick>
 80072c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072c2:	e008      	b.n	80072d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072c4:	f7fb fce2 	bl	8002c8c <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e070      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072d6:	4b3a      	ldr	r3, [pc, #232]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1f0      	bne.n	80072c4 <HAL_RCC_OscConfig+0x7b0>
 80072e2:	e068      	b.n	80073b6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072e4:	4b36      	ldr	r3, [pc, #216]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 80072e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072ea:	4b35      	ldr	r3, [pc, #212]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d031      	beq.n	800735c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f003 0203 	and.w	r2, r3, #3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007302:	429a      	cmp	r2, r3
 8007304:	d12a      	bne.n	800735c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	091b      	lsrs	r3, r3, #4
 800730a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007312:	429a      	cmp	r2, r3
 8007314:	d122      	bne.n	800735c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007320:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007322:	429a      	cmp	r2, r3
 8007324:	d11a      	bne.n	800735c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	0a5b      	lsrs	r3, r3, #9
 800732a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007332:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007334:	429a      	cmp	r2, r3
 8007336:	d111      	bne.n	800735c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	0c1b      	lsrs	r3, r3, #16
 800733c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007344:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007346:	429a      	cmp	r2, r3
 8007348:	d108      	bne.n	800735c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	0e1b      	lsrs	r3, r3, #24
 800734e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007356:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007358:	429a      	cmp	r2, r3
 800735a:	d001      	beq.n	8007360 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e02b      	b.n	80073b8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007360:	4b17      	ldr	r3, [pc, #92]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 8007362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007364:	08db      	lsrs	r3, r3, #3
 8007366:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800736a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	429a      	cmp	r2, r3
 8007374:	d01f      	beq.n	80073b6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007376:	4b12      	ldr	r3, [pc, #72]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 8007378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737a:	4a11      	ldr	r2, [pc, #68]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007382:	f7fb fc83 	bl	8002c8c <HAL_GetTick>
 8007386:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007388:	bf00      	nop
 800738a:	f7fb fc7f 	bl	8002c8c <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	4293      	cmp	r3, r2
 8007394:	d0f9      	beq.n	800738a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007396:	4b0a      	ldr	r3, [pc, #40]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 8007398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800739a:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <HAL_RCC_OscConfig+0x8b0>)
 800739c:	4013      	ands	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80073a2:	00d2      	lsls	r2, r2, #3
 80073a4:	4906      	ldr	r1, [pc, #24]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80073aa:	4b05      	ldr	r3, [pc, #20]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 80073ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ae:	4a04      	ldr	r2, [pc, #16]	@ (80073c0 <HAL_RCC_OscConfig+0x8ac>)
 80073b0:	f043 0301 	orr.w	r3, r3, #1
 80073b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3730      	adds	r7, #48	@ 0x30
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	58024400 	.word	0x58024400
 80073c4:	ffff0007 	.word	0xffff0007

080073c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e19c      	b.n	8007716 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073dc:	4b8a      	ldr	r3, [pc, #552]	@ (8007608 <HAL_RCC_ClockConfig+0x240>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 030f 	and.w	r3, r3, #15
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d910      	bls.n	800740c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ea:	4b87      	ldr	r3, [pc, #540]	@ (8007608 <HAL_RCC_ClockConfig+0x240>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f023 020f 	bic.w	r2, r3, #15
 80073f2:	4985      	ldr	r1, [pc, #532]	@ (8007608 <HAL_RCC_ClockConfig+0x240>)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073fa:	4b83      	ldr	r3, [pc, #524]	@ (8007608 <HAL_RCC_ClockConfig+0x240>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d001      	beq.n	800740c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e184      	b.n	8007716 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d010      	beq.n	800743a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691a      	ldr	r2, [r3, #16]
 800741c:	4b7b      	ldr	r3, [pc, #492]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007424:	429a      	cmp	r2, r3
 8007426:	d908      	bls.n	800743a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007428:	4b78      	ldr	r3, [pc, #480]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	4975      	ldr	r1, [pc, #468]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 8007436:	4313      	orrs	r3, r2
 8007438:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0308 	and.w	r3, r3, #8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d010      	beq.n	8007468 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	695a      	ldr	r2, [r3, #20]
 800744a:	4b70      	ldr	r3, [pc, #448]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007452:	429a      	cmp	r2, r3
 8007454:	d908      	bls.n	8007468 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007456:	4b6d      	ldr	r3, [pc, #436]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	496a      	ldr	r1, [pc, #424]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 8007464:	4313      	orrs	r3, r2
 8007466:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b00      	cmp	r3, #0
 8007472:	d010      	beq.n	8007496 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699a      	ldr	r2, [r3, #24]
 8007478:	4b64      	ldr	r3, [pc, #400]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007480:	429a      	cmp	r2, r3
 8007482:	d908      	bls.n	8007496 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007484:	4b61      	ldr	r3, [pc, #388]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	495e      	ldr	r1, [pc, #376]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 8007492:	4313      	orrs	r3, r2
 8007494:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d010      	beq.n	80074c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69da      	ldr	r2, [r3, #28]
 80074a6:	4b59      	ldr	r3, [pc, #356]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d908      	bls.n	80074c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80074b2:	4b56      	ldr	r3, [pc, #344]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	4953      	ldr	r1, [pc, #332]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d010      	beq.n	80074f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	4b4d      	ldr	r3, [pc, #308]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	429a      	cmp	r2, r3
 80074de:	d908      	bls.n	80074f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074e0:	4b4a      	ldr	r3, [pc, #296]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	f023 020f 	bic.w	r2, r3, #15
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	4947      	ldr	r1, [pc, #284]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d055      	beq.n	80075aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80074fe:	4b43      	ldr	r3, [pc, #268]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	4940      	ldr	r1, [pc, #256]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 800750c:	4313      	orrs	r3, r2
 800750e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d107      	bne.n	8007528 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007518:	4b3c      	ldr	r3, [pc, #240]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d121      	bne.n	8007568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e0f6      	b.n	8007716 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b03      	cmp	r3, #3
 800752e:	d107      	bne.n	8007540 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007530:	4b36      	ldr	r3, [pc, #216]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d115      	bne.n	8007568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e0ea      	b.n	8007716 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d107      	bne.n	8007558 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007548:	4b30      	ldr	r3, [pc, #192]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007550:	2b00      	cmp	r3, #0
 8007552:	d109      	bne.n	8007568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e0de      	b.n	8007716 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007558:	4b2c      	ldr	r3, [pc, #176]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e0d6      	b.n	8007716 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007568:	4b28      	ldr	r3, [pc, #160]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f023 0207 	bic.w	r2, r3, #7
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	4925      	ldr	r1, [pc, #148]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 8007576:	4313      	orrs	r3, r2
 8007578:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800757a:	f7fb fb87 	bl	8002c8c <HAL_GetTick>
 800757e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007580:	e00a      	b.n	8007598 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007582:	f7fb fb83 	bl	8002c8c <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007590:	4293      	cmp	r3, r2
 8007592:	d901      	bls.n	8007598 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e0be      	b.n	8007716 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007598:	4b1c      	ldr	r3, [pc, #112]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d1eb      	bne.n	8007582 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d010      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	4b14      	ldr	r3, [pc, #80]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d208      	bcs.n	80075d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075c6:	4b11      	ldr	r3, [pc, #68]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	f023 020f 	bic.w	r2, r3, #15
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	490e      	ldr	r1, [pc, #56]	@ (800760c <HAL_RCC_ClockConfig+0x244>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007608 <HAL_RCC_ClockConfig+0x240>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d214      	bcs.n	8007610 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075e6:	4b08      	ldr	r3, [pc, #32]	@ (8007608 <HAL_RCC_ClockConfig+0x240>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f023 020f 	bic.w	r2, r3, #15
 80075ee:	4906      	ldr	r1, [pc, #24]	@ (8007608 <HAL_RCC_ClockConfig+0x240>)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075f6:	4b04      	ldr	r3, [pc, #16]	@ (8007608 <HAL_RCC_ClockConfig+0x240>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 030f 	and.w	r3, r3, #15
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d005      	beq.n	8007610 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e086      	b.n	8007716 <HAL_RCC_ClockConfig+0x34e>
 8007608:	52002000 	.word	0x52002000
 800760c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d010      	beq.n	800763e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	4b3f      	ldr	r3, [pc, #252]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007628:	429a      	cmp	r2, r3
 800762a:	d208      	bcs.n	800763e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800762c:	4b3c      	ldr	r3, [pc, #240]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	4939      	ldr	r1, [pc, #228]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 800763a:	4313      	orrs	r3, r2
 800763c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d010      	beq.n	800766c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	4b34      	ldr	r3, [pc, #208]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007656:	429a      	cmp	r2, r3
 8007658:	d208      	bcs.n	800766c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800765a:	4b31      	ldr	r3, [pc, #196]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	492e      	ldr	r1, [pc, #184]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 8007668:	4313      	orrs	r3, r2
 800766a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	d010      	beq.n	800769a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	4b28      	ldr	r3, [pc, #160]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007684:	429a      	cmp	r2, r3
 8007686:	d208      	bcs.n	800769a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007688:	4b25      	ldr	r3, [pc, #148]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	4922      	ldr	r1, [pc, #136]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 8007696:	4313      	orrs	r3, r2
 8007698:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d010      	beq.n	80076c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69da      	ldr	r2, [r3, #28]
 80076aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d208      	bcs.n	80076c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	4917      	ldr	r1, [pc, #92]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076c8:	f000 f834 	bl	8007734 <HAL_RCC_GetSysClockFreq>
 80076cc:	4602      	mov	r2, r0
 80076ce:	4b14      	ldr	r3, [pc, #80]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	0a1b      	lsrs	r3, r3, #8
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	4912      	ldr	r1, [pc, #72]	@ (8007724 <HAL_RCC_ClockConfig+0x35c>)
 80076da:	5ccb      	ldrb	r3, [r1, r3]
 80076dc:	f003 031f 	and.w	r3, r3, #31
 80076e0:	fa22 f303 	lsr.w	r3, r2, r3
 80076e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007720 <HAL_RCC_ClockConfig+0x358>)
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	4a0d      	ldr	r2, [pc, #52]	@ (8007724 <HAL_RCC_ClockConfig+0x35c>)
 80076f0:	5cd3      	ldrb	r3, [r2, r3]
 80076f2:	f003 031f 	and.w	r3, r3, #31
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	fa22 f303 	lsr.w	r3, r2, r3
 80076fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007728 <HAL_RCC_ClockConfig+0x360>)
 80076fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007700:	4a0a      	ldr	r2, [pc, #40]	@ (800772c <HAL_RCC_ClockConfig+0x364>)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007706:	4b0a      	ldr	r3, [pc, #40]	@ (8007730 <HAL_RCC_ClockConfig+0x368>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4618      	mov	r0, r3
 800770c:	f7fb f92a 	bl	8002964 <HAL_InitTick>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	58024400 	.word	0x58024400
 8007724:	08010a8c 	.word	0x08010a8c
 8007728:	24000004 	.word	0x24000004
 800772c:	24000000 	.word	0x24000000
 8007730:	24000008 	.word	0x24000008

08007734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007734:	b480      	push	{r7}
 8007736:	b089      	sub	sp, #36	@ 0x24
 8007738:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800773a:	4bb3      	ldr	r3, [pc, #716]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007742:	2b18      	cmp	r3, #24
 8007744:	f200 8155 	bhi.w	80079f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007748:	a201      	add	r2, pc, #4	@ (adr r2, 8007750 <HAL_RCC_GetSysClockFreq+0x1c>)
 800774a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774e:	bf00      	nop
 8007750:	080077b5 	.word	0x080077b5
 8007754:	080079f3 	.word	0x080079f3
 8007758:	080079f3 	.word	0x080079f3
 800775c:	080079f3 	.word	0x080079f3
 8007760:	080079f3 	.word	0x080079f3
 8007764:	080079f3 	.word	0x080079f3
 8007768:	080079f3 	.word	0x080079f3
 800776c:	080079f3 	.word	0x080079f3
 8007770:	080077db 	.word	0x080077db
 8007774:	080079f3 	.word	0x080079f3
 8007778:	080079f3 	.word	0x080079f3
 800777c:	080079f3 	.word	0x080079f3
 8007780:	080079f3 	.word	0x080079f3
 8007784:	080079f3 	.word	0x080079f3
 8007788:	080079f3 	.word	0x080079f3
 800778c:	080079f3 	.word	0x080079f3
 8007790:	080077e1 	.word	0x080077e1
 8007794:	080079f3 	.word	0x080079f3
 8007798:	080079f3 	.word	0x080079f3
 800779c:	080079f3 	.word	0x080079f3
 80077a0:	080079f3 	.word	0x080079f3
 80077a4:	080079f3 	.word	0x080079f3
 80077a8:	080079f3 	.word	0x080079f3
 80077ac:	080079f3 	.word	0x080079f3
 80077b0:	080077e7 	.word	0x080077e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077b4:	4b94      	ldr	r3, [pc, #592]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d009      	beq.n	80077d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077c0:	4b91      	ldr	r3, [pc, #580]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	08db      	lsrs	r3, r3, #3
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	4a90      	ldr	r2, [pc, #576]	@ (8007a0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
 80077d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80077d2:	e111      	b.n	80079f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80077d4:	4b8d      	ldr	r3, [pc, #564]	@ (8007a0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077d6:	61bb      	str	r3, [r7, #24]
      break;
 80077d8:	e10e      	b.n	80079f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80077da:	4b8d      	ldr	r3, [pc, #564]	@ (8007a10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077dc:	61bb      	str	r3, [r7, #24]
      break;
 80077de:	e10b      	b.n	80079f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80077e0:	4b8c      	ldr	r3, [pc, #560]	@ (8007a14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80077e2:	61bb      	str	r3, [r7, #24]
      break;
 80077e4:	e108      	b.n	80079f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077e6:	4b88      	ldr	r3, [pc, #544]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80077f0:	4b85      	ldr	r3, [pc, #532]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f4:	091b      	lsrs	r3, r3, #4
 80077f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80077fc:	4b82      	ldr	r3, [pc, #520]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007806:	4b80      	ldr	r3, [pc, #512]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780a:	08db      	lsrs	r3, r3, #3
 800780c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	fb02 f303 	mul.w	r3, r2, r3
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 80e1 	beq.w	80079ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b02      	cmp	r3, #2
 800782e:	f000 8083 	beq.w	8007938 <HAL_RCC_GetSysClockFreq+0x204>
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b02      	cmp	r3, #2
 8007836:	f200 80a1 	bhi.w	800797c <HAL_RCC_GetSysClockFreq+0x248>
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <HAL_RCC_GetSysClockFreq+0x114>
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d056      	beq.n	80078f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007846:	e099      	b.n	800797c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007848:	4b6f      	ldr	r3, [pc, #444]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b00      	cmp	r3, #0
 8007852:	d02d      	beq.n	80078b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007854:	4b6c      	ldr	r3, [pc, #432]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	08db      	lsrs	r3, r3, #3
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	4a6b      	ldr	r2, [pc, #428]	@ (8007a0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
 8007864:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800787e:	4b62      	ldr	r3, [pc, #392]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007892:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80078ae:	e087      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007a1c <HAL_RCC_GetSysClockFreq+0x2e8>
 80078be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c2:	4b51      	ldr	r3, [pc, #324]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80078d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078f2:	e065      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007a20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007906:	4b40      	ldr	r3, [pc, #256]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007916:	ed97 6a02 	vldr	s12, [r7, #8]
 800791a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 800791e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800792a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007932:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007936:	e043      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007942:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007a24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794a:	4b2f      	ldr	r3, [pc, #188]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800794c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795a:	ed97 6a02 	vldr	s12, [r7, #8]
 800795e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800796e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007976:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800797a:	e021      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007986:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007a20 <HAL_RCC_GetSysClockFreq+0x2ec>
 800798a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799e:	ed97 6a02 	vldr	s12, [r7, #8]
 80079a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80079be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80079c0:	4b11      	ldr	r3, [pc, #68]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c4:	0a5b      	lsrs	r3, r3, #9
 80079c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ca:	3301      	adds	r3, #1
 80079cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	ee07 3a90 	vmov	s15, r3
 80079d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e4:	ee17 3a90 	vmov	r3, s15
 80079e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80079ea:	e005      	b.n	80079f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	61bb      	str	r3, [r7, #24]
      break;
 80079f0:	e002      	b.n	80079f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80079f2:	4b07      	ldr	r3, [pc, #28]	@ (8007a10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079f4:	61bb      	str	r3, [r7, #24]
      break;
 80079f6:	bf00      	nop
  }

  return sysclockfreq;
 80079f8:	69bb      	ldr	r3, [r7, #24]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3724      	adds	r7, #36	@ 0x24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	58024400 	.word	0x58024400
 8007a0c:	03d09000 	.word	0x03d09000
 8007a10:	003d0900 	.word	0x003d0900
 8007a14:	017d7840 	.word	0x017d7840
 8007a18:	46000000 	.word	0x46000000
 8007a1c:	4c742400 	.word	0x4c742400
 8007a20:	4a742400 	.word	0x4a742400
 8007a24:	4bbebc20 	.word	0x4bbebc20

08007a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a2e:	f7ff fe81 	bl	8007734 <HAL_RCC_GetSysClockFreq>
 8007a32:	4602      	mov	r2, r0
 8007a34:	4b10      	ldr	r3, [pc, #64]	@ (8007a78 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	0a1b      	lsrs	r3, r3, #8
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	490f      	ldr	r1, [pc, #60]	@ (8007a7c <HAL_RCC_GetHCLKFreq+0x54>)
 8007a40:	5ccb      	ldrb	r3, [r1, r3]
 8007a42:	f003 031f 	and.w	r3, r3, #31
 8007a46:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a78 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	4a09      	ldr	r2, [pc, #36]	@ (8007a7c <HAL_RCC_GetHCLKFreq+0x54>)
 8007a56:	5cd3      	ldrb	r3, [r2, r3]
 8007a58:	f003 031f 	and.w	r3, r3, #31
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a62:	4a07      	ldr	r2, [pc, #28]	@ (8007a80 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a66:	4a07      	ldr	r2, [pc, #28]	@ (8007a84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a6c:	4b04      	ldr	r3, [pc, #16]	@ (8007a80 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	58024400 	.word	0x58024400
 8007a7c:	08010a8c 	.word	0x08010a8c
 8007a80:	24000004 	.word	0x24000004
 8007a84:	24000000 	.word	0x24000000

08007a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a8c:	f7ff ffcc 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8007a90:	4602      	mov	r2, r0
 8007a92:	4b06      	ldr	r3, [pc, #24]	@ (8007aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	091b      	lsrs	r3, r3, #4
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	4904      	ldr	r1, [pc, #16]	@ (8007ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a9e:	5ccb      	ldrb	r3, [r1, r3]
 8007aa0:	f003 031f 	and.w	r3, r3, #31
 8007aa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	58024400 	.word	0x58024400
 8007ab0:	08010a8c 	.word	0x08010a8c

08007ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ab8:	f7ff ffb6 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8007abc:	4602      	mov	r2, r0
 8007abe:	4b06      	ldr	r3, [pc, #24]	@ (8007ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	0a1b      	lsrs	r3, r3, #8
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	4904      	ldr	r1, [pc, #16]	@ (8007adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007aca:	5ccb      	ldrb	r3, [r1, r3]
 8007acc:	f003 031f 	and.w	r3, r3, #31
 8007ad0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	58024400 	.word	0x58024400
 8007adc:	08010a8c 	.word	0x08010a8c

08007ae0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	223f      	movs	r2, #63	@ 0x3f
 8007aee:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007af0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b5c <HAL_RCC_GetClockConfig+0x7c>)
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f003 0207 	and.w	r2, r3, #7
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007afc:	4b17      	ldr	r3, [pc, #92]	@ (8007b5c <HAL_RCC_GetClockConfig+0x7c>)
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007b08:	4b14      	ldr	r3, [pc, #80]	@ (8007b5c <HAL_RCC_GetClockConfig+0x7c>)
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	f003 020f 	and.w	r2, r3, #15
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007b14:	4b11      	ldr	r3, [pc, #68]	@ (8007b5c <HAL_RCC_GetClockConfig+0x7c>)
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007b20:	4b0e      	ldr	r3, [pc, #56]	@ (8007b5c <HAL_RCC_GetClockConfig+0x7c>)
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b5c <HAL_RCC_GetClockConfig+0x7c>)
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007b38:	4b08      	ldr	r3, [pc, #32]	@ (8007b5c <HAL_RCC_GetClockConfig+0x7c>)
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b44:	4b06      	ldr	r3, [pc, #24]	@ (8007b60 <HAL_RCC_GetClockConfig+0x80>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 020f 	and.w	r2, r3, #15
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	601a      	str	r2, [r3, #0]
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	58024400 	.word	0x58024400
 8007b60:	52002000 	.word	0x52002000

08007b64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b68:	b0ca      	sub	sp, #296	@ 0x128
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b70:	2300      	movs	r3, #0
 8007b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b76:	2300      	movs	r3, #0
 8007b78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007b88:	2500      	movs	r5, #0
 8007b8a:	ea54 0305 	orrs.w	r3, r4, r5
 8007b8e:	d049      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b9a:	d02f      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007b9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ba0:	d828      	bhi.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007ba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ba6:	d01a      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007ba8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bac:	d822      	bhi.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bb6:	d007      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007bb8:	e01c      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bba:	4bb8      	ldr	r3, [pc, #736]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bbe:	4ab7      	ldr	r2, [pc, #732]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007bc6:	e01a      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bcc:	3308      	adds	r3, #8
 8007bce:	2102      	movs	r1, #2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f002 fb61 	bl	800a298 <RCCEx_PLL2_Config>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007bdc:	e00f      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be2:	3328      	adds	r3, #40	@ 0x28
 8007be4:	2102      	movs	r1, #2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f002 fc08 	bl	800a3fc <RCCEx_PLL3_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007bf2:	e004      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bfa:	e000      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007c06:	4ba5      	ldr	r3, [pc, #660]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c14:	4aa1      	ldr	r2, [pc, #644]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c16:	430b      	orrs	r3, r1
 8007c18:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c1a:	e003      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007c30:	f04f 0900 	mov.w	r9, #0
 8007c34:	ea58 0309 	orrs.w	r3, r8, r9
 8007c38:	d047      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d82a      	bhi.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007c44:	a201      	add	r2, pc, #4	@ (adr r2, 8007c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007c61 	.word	0x08007c61
 8007c50:	08007c6f 	.word	0x08007c6f
 8007c54:	08007c85 	.word	0x08007c85
 8007c58:	08007ca3 	.word	0x08007ca3
 8007c5c:	08007ca3 	.word	0x08007ca3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c60:	4b8e      	ldr	r3, [pc, #568]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c64:	4a8d      	ldr	r2, [pc, #564]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c6c:	e01a      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c72:	3308      	adds	r3, #8
 8007c74:	2100      	movs	r1, #0
 8007c76:	4618      	mov	r0, r3
 8007c78:	f002 fb0e 	bl	800a298 <RCCEx_PLL2_Config>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c82:	e00f      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c88:	3328      	adds	r3, #40	@ 0x28
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f002 fbb5 	bl	800a3fc <RCCEx_PLL3_Config>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c98:	e004      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ca0:	e000      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cac:	4b7b      	ldr	r3, [pc, #492]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb0:	f023 0107 	bic.w	r1, r3, #7
 8007cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cba:	4a78      	ldr	r2, [pc, #480]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cc0:	e003      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007cd6:	f04f 0b00 	mov.w	fp, #0
 8007cda:	ea5a 030b 	orrs.w	r3, sl, fp
 8007cde:	d04c      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cea:	d030      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cf0:	d829      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cf4:	d02d      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007cf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cf8:	d825      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cfa:	2b80      	cmp	r3, #128	@ 0x80
 8007cfc:	d018      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007cfe:	2b80      	cmp	r3, #128	@ 0x80
 8007d00:	d821      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007d06:	2b40      	cmp	r3, #64	@ 0x40
 8007d08:	d007      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007d0a:	e01c      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d0c:	4b63      	ldr	r3, [pc, #396]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d10:	4a62      	ldr	r2, [pc, #392]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007d18:	e01c      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	3308      	adds	r3, #8
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f002 fab8 	bl	800a298 <RCCEx_PLL2_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007d2e:	e011      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d34:	3328      	adds	r3, #40	@ 0x28
 8007d36:	2100      	movs	r1, #0
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f002 fb5f 	bl	800a3fc <RCCEx_PLL3_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007d44:	e006      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d4c:	e002      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007d4e:	bf00      	nop
 8007d50:	e000      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d60:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d6a:	4a4c      	ldr	r2, [pc, #304]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d70:	e003      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007d86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007d90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007d94:	460b      	mov	r3, r1
 8007d96:	4313      	orrs	r3, r2
 8007d98:	d053      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007da2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007da6:	d035      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007da8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007dac:	d82e      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007dae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007db2:	d031      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007db4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007db8:	d828      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007dba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dbe:	d01a      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007dc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dc4:	d822      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dce:	d007      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007dd0:	e01c      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd2:	4b32      	ldr	r3, [pc, #200]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd6:	4a31      	ldr	r2, [pc, #196]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dde:	e01c      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de4:	3308      	adds	r3, #8
 8007de6:	2100      	movs	r1, #0
 8007de8:	4618      	mov	r0, r3
 8007dea:	f002 fa55 	bl	800a298 <RCCEx_PLL2_Config>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007df4:	e011      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfa:	3328      	adds	r3, #40	@ 0x28
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f002 fafc 	bl	800a3fc <RCCEx_PLL3_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e0a:	e006      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e12:	e002      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007e14:	bf00      	nop
 8007e16:	e000      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10b      	bne.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007e22:	4b1e      	ldr	r3, [pc, #120]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e26:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e32:	4a1a      	ldr	r2, [pc, #104]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e34:	430b      	orrs	r3, r1
 8007e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e38:	e003      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007e4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007e52:	2300      	movs	r3, #0
 8007e54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007e58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	d056      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e6e:	d038      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007e70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e74:	d831      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e7a:	d034      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007e7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e80:	d82b      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e86:	d01d      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007e88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e8c:	d825      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d006      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007e92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e96:	d00a      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e98:	e01f      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e9a:	bf00      	nop
 8007e9c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea0:	4ba2      	ldr	r3, [pc, #648]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea4:	4aa1      	ldr	r2, [pc, #644]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007eac:	e01c      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f002 f9ee 	bl	800a298 <RCCEx_PLL2_Config>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007ec2:	e011      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec8:	3328      	adds	r3, #40	@ 0x28
 8007eca:	2100      	movs	r1, #0
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f002 fa95 	bl	800a3fc <RCCEx_PLL3_Config>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ed8:	e006      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ee0:	e002      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007ee2:	bf00      	nop
 8007ee4:	e000      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10b      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ef0:	4b8e      	ldr	r3, [pc, #568]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ef4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007f00:	4a8a      	ldr	r2, [pc, #552]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f02:	430b      	orrs	r3, r1
 8007f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f06:	e003      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f20:	2300      	movs	r3, #0
 8007f22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	d03a      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f36:	2b30      	cmp	r3, #48	@ 0x30
 8007f38:	d01f      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007f3a:	2b30      	cmp	r3, #48	@ 0x30
 8007f3c:	d819      	bhi.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	d00c      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	d815      	bhi.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d019      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007f4a:	2b10      	cmp	r3, #16
 8007f4c:	d111      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f4e:	4b77      	ldr	r3, [pc, #476]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f52:	4a76      	ldr	r2, [pc, #472]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007f5a:	e011      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f60:	3308      	adds	r3, #8
 8007f62:	2102      	movs	r1, #2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f002 f997 	bl	800a298 <RCCEx_PLL2_Config>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007f70:	e006      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f78:	e002      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f7a:	bf00      	nop
 8007f7c:	e000      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f88:	4b68      	ldr	r3, [pc, #416]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f96:	4a65      	ldr	r2, [pc, #404]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f9c:	e003      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007fb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007fbc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	d051      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fd0:	d035      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007fd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fd6:	d82e      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fdc:	d031      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007fde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fe2:	d828      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fe8:	d01a      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fee:	d822      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff8:	d007      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007ffa:	e01c      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008000:	4a4a      	ldr	r2, [pc, #296]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008008:	e01c      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800800a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800e:	3308      	adds	r3, #8
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f002 f940 	bl	800a298 <RCCEx_PLL2_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800801e:	e011      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008024:	3328      	adds	r3, #40	@ 0x28
 8008026:	2100      	movs	r1, #0
 8008028:	4618      	mov	r0, r3
 800802a:	f002 f9e7 	bl	800a3fc <RCCEx_PLL3_Config>
 800802e:	4603      	mov	r3, r0
 8008030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008034:	e006      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800803c:	e002      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800803e:	bf00      	nop
 8008040:	e000      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800804c:	4b37      	ldr	r3, [pc, #220]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800804e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008050:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800805a:	4a34      	ldr	r2, [pc, #208]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800805c:	430b      	orrs	r3, r1
 800805e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008060:	e003      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800806a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800807a:	2300      	movs	r3, #0
 800807c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008080:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008084:	460b      	mov	r3, r1
 8008086:	4313      	orrs	r3, r2
 8008088:	d056      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008094:	d033      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008096:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800809a:	d82c      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800809c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080a0:	d02f      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80080a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080a6:	d826      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80080a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080ac:	d02b      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80080ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080b2:	d820      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80080b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080b8:	d012      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80080ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080be:	d81a      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d022      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80080c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080c8:	d115      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ce:	3308      	adds	r3, #8
 80080d0:	2101      	movs	r1, #1
 80080d2:	4618      	mov	r0, r3
 80080d4:	f002 f8e0 	bl	800a298 <RCCEx_PLL2_Config>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080de:	e015      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e4:	3328      	adds	r3, #40	@ 0x28
 80080e6:	2101      	movs	r1, #1
 80080e8:	4618      	mov	r0, r3
 80080ea:	f002 f987 	bl	800a3fc <RCCEx_PLL3_Config>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080f4:	e00a      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080fc:	e006      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080fe:	bf00      	nop
 8008100:	e004      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008102:	bf00      	nop
 8008104:	e002      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008106:	bf00      	nop
 8008108:	e000      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800810a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800810c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10d      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008114:	4b05      	ldr	r3, [pc, #20]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008118:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008122:	4a02      	ldr	r2, [pc, #8]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008124:	430b      	orrs	r3, r1
 8008126:	6513      	str	r3, [r2, #80]	@ 0x50
 8008128:	e006      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800812a:	bf00      	nop
 800812c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008148:	2300      	movs	r3, #0
 800814a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800814e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008152:	460b      	mov	r3, r1
 8008154:	4313      	orrs	r3, r2
 8008156:	d055      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008160:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008164:	d033      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008166:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800816a:	d82c      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800816c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008170:	d02f      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008176:	d826      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008178:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800817c:	d02b      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800817e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008182:	d820      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008188:	d012      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800818a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800818e:	d81a      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008190:	2b00      	cmp	r3, #0
 8008192:	d022      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008198:	d115      	bne.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819e:	3308      	adds	r3, #8
 80081a0:	2101      	movs	r1, #1
 80081a2:	4618      	mov	r0, r3
 80081a4:	f002 f878 	bl	800a298 <RCCEx_PLL2_Config>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80081ae:	e015      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b4:	3328      	adds	r3, #40	@ 0x28
 80081b6:	2101      	movs	r1, #1
 80081b8:	4618      	mov	r0, r3
 80081ba:	f002 f91f 	bl	800a3fc <RCCEx_PLL3_Config>
 80081be:	4603      	mov	r3, r0
 80081c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80081c4:	e00a      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081cc:	e006      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081ce:	bf00      	nop
 80081d0:	e004      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081d2:	bf00      	nop
 80081d4:	e002      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081d6:	bf00      	nop
 80081d8:	e000      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10b      	bne.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081e4:	4ba3      	ldr	r3, [pc, #652]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80081ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081f4:	4a9f      	ldr	r2, [pc, #636]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081f6:	430b      	orrs	r3, r1
 80081f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80081fa:	e003      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008210:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008214:	2300      	movs	r3, #0
 8008216:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800821a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800821e:	460b      	mov	r3, r1
 8008220:	4313      	orrs	r3, r2
 8008222:	d037      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800822e:	d00e      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008234:	d816      	bhi.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d018      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800823a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800823e:	d111      	bne.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008240:	4b8c      	ldr	r3, [pc, #560]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008244:	4a8b      	ldr	r2, [pc, #556]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800824a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800824c:	e00f      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800824e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008252:	3308      	adds	r3, #8
 8008254:	2101      	movs	r1, #1
 8008256:	4618      	mov	r0, r3
 8008258:	f002 f81e 	bl	800a298 <RCCEx_PLL2_Config>
 800825c:	4603      	mov	r3, r0
 800825e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008262:	e004      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800826a:	e000      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800826c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800826e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10a      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008276:	4b7f      	ldr	r3, [pc, #508]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800827a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800827e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008284:	4a7b      	ldr	r2, [pc, #492]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008286:	430b      	orrs	r3, r1
 8008288:	6513      	str	r3, [r2, #80]	@ 0x50
 800828a:	e003      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80082a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082a4:	2300      	movs	r3, #0
 80082a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80082aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4313      	orrs	r3, r2
 80082b2:	d039      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80082b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d81c      	bhi.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80082be:	a201      	add	r2, pc, #4	@ (adr r2, 80082c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	08008301 	.word	0x08008301
 80082c8:	080082d5 	.word	0x080082d5
 80082cc:	080082e3 	.word	0x080082e3
 80082d0:	08008301 	.word	0x08008301
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082d4:	4b67      	ldr	r3, [pc, #412]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d8:	4a66      	ldr	r2, [pc, #408]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082e0:	e00f      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e6:	3308      	adds	r3, #8
 80082e8:	2102      	movs	r1, #2
 80082ea:	4618      	mov	r0, r3
 80082ec:	f001 ffd4 	bl	800a298 <RCCEx_PLL2_Config>
 80082f0:	4603      	mov	r3, r0
 80082f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082f6:	e004      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082fe:	e000      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10a      	bne.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800830a:	4b5a      	ldr	r3, [pc, #360]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800830c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800830e:	f023 0103 	bic.w	r1, r3, #3
 8008312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008318:	4a56      	ldr	r2, [pc, #344]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800831a:	430b      	orrs	r3, r1
 800831c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800831e:	e003      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008334:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008338:	2300      	movs	r3, #0
 800833a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800833e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008342:	460b      	mov	r3, r1
 8008344:	4313      	orrs	r3, r2
 8008346:	f000 809f 	beq.w	8008488 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800834a:	4b4b      	ldr	r3, [pc, #300]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a4a      	ldr	r2, [pc, #296]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008354:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008356:	f7fa fc99 	bl	8002c8c <HAL_GetTick>
 800835a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800835e:	e00b      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008360:	f7fa fc94 	bl	8002c8c <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b64      	cmp	r3, #100	@ 0x64
 800836e:	d903      	bls.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008376:	e005      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008378:	4b3f      	ldr	r3, [pc, #252]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0ed      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008388:	2b00      	cmp	r3, #0
 800838a:	d179      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800838c:	4b39      	ldr	r3, [pc, #228]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800838e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008394:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008398:	4053      	eors	r3, r2
 800839a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d015      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083a2:	4b34      	ldr	r3, [pc, #208]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083ae:	4b31      	ldr	r3, [pc, #196]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b2:	4a30      	ldr	r2, [pc, #192]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083ba:	4b2e      	ldr	r3, [pc, #184]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083be:	4a2d      	ldr	r2, [pc, #180]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80083c6:	4a2b      	ldr	r2, [pc, #172]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80083cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80083ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083da:	d118      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083dc:	f7fa fc56 	bl	8002c8c <HAL_GetTick>
 80083e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083e4:	e00d      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083e6:	f7fa fc51 	bl	8002c8c <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80083f0:	1ad2      	subs	r2, r2, r3
 80083f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d903      	bls.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008400:	e005      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008402:	4b1c      	ldr	r3, [pc, #112]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0eb      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800840e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008412:	2b00      	cmp	r3, #0
 8008414:	d129      	bne.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800841e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008426:	d10e      	bne.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008428:	4b12      	ldr	r3, [pc, #72]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008434:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008438:	091a      	lsrs	r2, r3, #4
 800843a:	4b10      	ldr	r3, [pc, #64]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800843c:	4013      	ands	r3, r2
 800843e:	4a0d      	ldr	r2, [pc, #52]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008440:	430b      	orrs	r3, r1
 8008442:	6113      	str	r3, [r2, #16]
 8008444:	e005      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008446:	4b0b      	ldr	r3, [pc, #44]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	4a0a      	ldr	r2, [pc, #40]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800844c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008450:	6113      	str	r3, [r2, #16]
 8008452:	4b08      	ldr	r3, [pc, #32]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008454:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800845e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008462:	4a04      	ldr	r2, [pc, #16]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008464:	430b      	orrs	r3, r1
 8008466:	6713      	str	r3, [r2, #112]	@ 0x70
 8008468:	e00e      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800846a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800846e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008472:	e009      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008474:	58024400 	.word	0x58024400
 8008478:	58024800 	.word	0x58024800
 800847c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f002 0301 	and.w	r3, r2, #1
 8008494:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008498:	2300      	movs	r3, #0
 800849a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800849e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f000 8089 	beq.w	80085bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80084aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084b0:	2b28      	cmp	r3, #40	@ 0x28
 80084b2:	d86b      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80084b4:	a201      	add	r2, pc, #4	@ (adr r2, 80084bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ba:	bf00      	nop
 80084bc:	08008595 	.word	0x08008595
 80084c0:	0800858d 	.word	0x0800858d
 80084c4:	0800858d 	.word	0x0800858d
 80084c8:	0800858d 	.word	0x0800858d
 80084cc:	0800858d 	.word	0x0800858d
 80084d0:	0800858d 	.word	0x0800858d
 80084d4:	0800858d 	.word	0x0800858d
 80084d8:	0800858d 	.word	0x0800858d
 80084dc:	08008561 	.word	0x08008561
 80084e0:	0800858d 	.word	0x0800858d
 80084e4:	0800858d 	.word	0x0800858d
 80084e8:	0800858d 	.word	0x0800858d
 80084ec:	0800858d 	.word	0x0800858d
 80084f0:	0800858d 	.word	0x0800858d
 80084f4:	0800858d 	.word	0x0800858d
 80084f8:	0800858d 	.word	0x0800858d
 80084fc:	08008577 	.word	0x08008577
 8008500:	0800858d 	.word	0x0800858d
 8008504:	0800858d 	.word	0x0800858d
 8008508:	0800858d 	.word	0x0800858d
 800850c:	0800858d 	.word	0x0800858d
 8008510:	0800858d 	.word	0x0800858d
 8008514:	0800858d 	.word	0x0800858d
 8008518:	0800858d 	.word	0x0800858d
 800851c:	08008595 	.word	0x08008595
 8008520:	0800858d 	.word	0x0800858d
 8008524:	0800858d 	.word	0x0800858d
 8008528:	0800858d 	.word	0x0800858d
 800852c:	0800858d 	.word	0x0800858d
 8008530:	0800858d 	.word	0x0800858d
 8008534:	0800858d 	.word	0x0800858d
 8008538:	0800858d 	.word	0x0800858d
 800853c:	08008595 	.word	0x08008595
 8008540:	0800858d 	.word	0x0800858d
 8008544:	0800858d 	.word	0x0800858d
 8008548:	0800858d 	.word	0x0800858d
 800854c:	0800858d 	.word	0x0800858d
 8008550:	0800858d 	.word	0x0800858d
 8008554:	0800858d 	.word	0x0800858d
 8008558:	0800858d 	.word	0x0800858d
 800855c:	08008595 	.word	0x08008595
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008564:	3308      	adds	r3, #8
 8008566:	2101      	movs	r1, #1
 8008568:	4618      	mov	r0, r3
 800856a:	f001 fe95 	bl	800a298 <RCCEx_PLL2_Config>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008574:	e00f      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857a:	3328      	adds	r3, #40	@ 0x28
 800857c:	2101      	movs	r1, #1
 800857e:	4618      	mov	r0, r3
 8008580:	f001 ff3c 	bl	800a3fc <RCCEx_PLL3_Config>
 8008584:	4603      	mov	r3, r0
 8008586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800858a:	e004      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008592:	e000      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10a      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800859e:	4bbf      	ldr	r3, [pc, #764]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085ac:	4abb      	ldr	r2, [pc, #748]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085ae:	430b      	orrs	r3, r1
 80085b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80085b2:	e003      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80085bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	f002 0302 	and.w	r3, r2, #2
 80085c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085cc:	2300      	movs	r3, #0
 80085ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80085d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80085d6:	460b      	mov	r3, r1
 80085d8:	4313      	orrs	r3, r2
 80085da:	d041      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80085dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	d824      	bhi.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80085e6:	a201      	add	r2, pc, #4	@ (adr r2, 80085ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80085e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ec:	08008639 	.word	0x08008639
 80085f0:	08008605 	.word	0x08008605
 80085f4:	0800861b 	.word	0x0800861b
 80085f8:	08008639 	.word	0x08008639
 80085fc:	08008639 	.word	0x08008639
 8008600:	08008639 	.word	0x08008639
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008608:	3308      	adds	r3, #8
 800860a:	2101      	movs	r1, #1
 800860c:	4618      	mov	r0, r3
 800860e:	f001 fe43 	bl	800a298 <RCCEx_PLL2_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008618:	e00f      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800861a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861e:	3328      	adds	r3, #40	@ 0x28
 8008620:	2101      	movs	r1, #1
 8008622:	4618      	mov	r0, r3
 8008624:	f001 feea 	bl	800a3fc <RCCEx_PLL3_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800862e:	e004      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008636:	e000      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800863a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008642:	4b96      	ldr	r3, [pc, #600]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008646:	f023 0107 	bic.w	r1, r3, #7
 800864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008650:	4a92      	ldr	r2, [pc, #584]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008652:	430b      	orrs	r3, r1
 8008654:	6553      	str	r3, [r2, #84]	@ 0x54
 8008656:	e003      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800865c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f002 0304 	and.w	r3, r2, #4
 800866c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008670:	2300      	movs	r3, #0
 8008672:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008676:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800867a:	460b      	mov	r3, r1
 800867c:	4313      	orrs	r3, r2
 800867e:	d044      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008688:	2b05      	cmp	r3, #5
 800868a:	d825      	bhi.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800868c:	a201      	add	r2, pc, #4	@ (adr r2, 8008694 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800868e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008692:	bf00      	nop
 8008694:	080086e1 	.word	0x080086e1
 8008698:	080086ad 	.word	0x080086ad
 800869c:	080086c3 	.word	0x080086c3
 80086a0:	080086e1 	.word	0x080086e1
 80086a4:	080086e1 	.word	0x080086e1
 80086a8:	080086e1 	.word	0x080086e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b0:	3308      	adds	r3, #8
 80086b2:	2101      	movs	r1, #1
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 fdef 	bl	800a298 <RCCEx_PLL2_Config>
 80086ba:	4603      	mov	r3, r0
 80086bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80086c0:	e00f      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c6:	3328      	adds	r3, #40	@ 0x28
 80086c8:	2101      	movs	r1, #1
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 fe96 	bl	800a3fc <RCCEx_PLL3_Config>
 80086d0:	4603      	mov	r3, r0
 80086d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80086d6:	e004      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086de:	e000      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80086e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086ea:	4b6c      	ldr	r3, [pc, #432]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ee:	f023 0107 	bic.w	r1, r3, #7
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086fa:	4a68      	ldr	r2, [pc, #416]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086fc:	430b      	orrs	r3, r1
 80086fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8008700:	e003      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	f002 0320 	and.w	r3, r2, #32
 8008716:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800871a:	2300      	movs	r3, #0
 800871c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008720:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008724:	460b      	mov	r3, r1
 8008726:	4313      	orrs	r3, r2
 8008728:	d055      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800872a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008736:	d033      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800873c:	d82c      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800873e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008742:	d02f      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008748:	d826      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800874a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800874e:	d02b      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008750:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008754:	d820      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800875a:	d012      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800875c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008760:	d81a      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d022      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008766:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800876a:	d115      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008770:	3308      	adds	r3, #8
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f001 fd8f 	bl	800a298 <RCCEx_PLL2_Config>
 800877a:	4603      	mov	r3, r0
 800877c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008780:	e015      	b.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008786:	3328      	adds	r3, #40	@ 0x28
 8008788:	2102      	movs	r1, #2
 800878a:	4618      	mov	r0, r3
 800878c:	f001 fe36 	bl	800a3fc <RCCEx_PLL3_Config>
 8008790:	4603      	mov	r3, r0
 8008792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008796:	e00a      	b.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800879e:	e006      	b.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80087a0:	bf00      	nop
 80087a2:	e004      	b.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80087a4:	bf00      	nop
 80087a6:	e002      	b.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80087a8:	bf00      	nop
 80087aa:	e000      	b.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80087ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087b6:	4b39      	ldr	r3, [pc, #228]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80087be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c6:	4a35      	ldr	r2, [pc, #212]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087c8:	430b      	orrs	r3, r1
 80087ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80087cc:	e003      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80087d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80087e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087e6:	2300      	movs	r3, #0
 80087e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80087ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4313      	orrs	r3, r2
 80087f4:	d058      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80087f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008802:	d033      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008804:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008808:	d82c      	bhi.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800880a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800880e:	d02f      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008814:	d826      	bhi.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008816:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800881a:	d02b      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800881c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008820:	d820      	bhi.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008822:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008826:	d012      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800882c:	d81a      	bhi.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800882e:	2b00      	cmp	r3, #0
 8008830:	d022      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008836:	d115      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800883c:	3308      	adds	r3, #8
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f001 fd29 	bl	800a298 <RCCEx_PLL2_Config>
 8008846:	4603      	mov	r3, r0
 8008848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800884c:	e015      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800884e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008852:	3328      	adds	r3, #40	@ 0x28
 8008854:	2102      	movs	r1, #2
 8008856:	4618      	mov	r0, r3
 8008858:	f001 fdd0 	bl	800a3fc <RCCEx_PLL3_Config>
 800885c:	4603      	mov	r3, r0
 800885e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008862:	e00a      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800886a:	e006      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800886c:	bf00      	nop
 800886e:	e004      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008870:	bf00      	nop
 8008872:	e002      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008874:	bf00      	nop
 8008876:	e000      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800887a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10e      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008882:	4b06      	ldr	r3, [pc, #24]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008886:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800888a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800888e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008892:	4a02      	ldr	r2, [pc, #8]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008894:	430b      	orrs	r3, r1
 8008896:	6593      	str	r3, [r2, #88]	@ 0x58
 8008898:	e006      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800889a:	bf00      	nop
 800889c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80088a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80088b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80088b8:	2300      	movs	r3, #0
 80088ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80088c2:	460b      	mov	r3, r1
 80088c4:	4313      	orrs	r3, r2
 80088c6:	d055      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80088c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80088d4:	d033      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80088d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80088da:	d82c      	bhi.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088e0:	d02f      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80088e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088e6:	d826      	bhi.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80088ec:	d02b      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80088ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80088f2:	d820      	bhi.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088f8:	d012      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80088fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088fe:	d81a      	bhi.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008900:	2b00      	cmp	r3, #0
 8008902:	d022      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008908:	d115      	bne.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800890a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800890e:	3308      	adds	r3, #8
 8008910:	2100      	movs	r1, #0
 8008912:	4618      	mov	r0, r3
 8008914:	f001 fcc0 	bl	800a298 <RCCEx_PLL2_Config>
 8008918:	4603      	mov	r3, r0
 800891a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800891e:	e015      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008924:	3328      	adds	r3, #40	@ 0x28
 8008926:	2102      	movs	r1, #2
 8008928:	4618      	mov	r0, r3
 800892a:	f001 fd67 	bl	800a3fc <RCCEx_PLL3_Config>
 800892e:	4603      	mov	r3, r0
 8008930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008934:	e00a      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800893c:	e006      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800893e:	bf00      	nop
 8008940:	e004      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008942:	bf00      	nop
 8008944:	e002      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008946:	bf00      	nop
 8008948:	e000      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800894a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800894c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10b      	bne.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008954:	4ba1      	ldr	r3, [pc, #644]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008958:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800895c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008960:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008964:	4a9d      	ldr	r2, [pc, #628]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008966:	430b      	orrs	r3, r1
 8008968:	6593      	str	r3, [r2, #88]	@ 0x58
 800896a:	e003      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897c:	f002 0308 	and.w	r3, r2, #8
 8008980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008984:	2300      	movs	r3, #0
 8008986:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800898a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800898e:	460b      	mov	r3, r1
 8008990:	4313      	orrs	r3, r2
 8008992:	d01e      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800899c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089a0:	d10c      	bne.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a6:	3328      	adds	r3, #40	@ 0x28
 80089a8:	2102      	movs	r1, #2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f001 fd26 	bl	800a3fc <RCCEx_PLL3_Config>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80089bc:	4b87      	ldr	r3, [pc, #540]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089cc:	4a83      	ldr	r2, [pc, #524]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089ce:	430b      	orrs	r3, r1
 80089d0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80089d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f002 0310 	and.w	r3, r2, #16
 80089de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80089e2:	2300      	movs	r3, #0
 80089e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80089e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80089ec:	460b      	mov	r3, r1
 80089ee:	4313      	orrs	r3, r2
 80089f0:	d01e      	beq.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089fe:	d10c      	bne.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a04:	3328      	adds	r3, #40	@ 0x28
 8008a06:	2102      	movs	r1, #2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 fcf7 	bl	800a3fc <RCCEx_PLL3_Config>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a1a:	4b70      	ldr	r3, [pc, #448]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a2a:	4a6c      	ldr	r2, [pc, #432]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a2c:	430b      	orrs	r3, r1
 8008a2e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a38:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008a3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a40:	2300      	movs	r3, #0
 8008a42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	d03e      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a5c:	d022      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008a5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a62:	d81b      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a6c:	d00b      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008a6e:	e015      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a74:	3308      	adds	r3, #8
 8008a76:	2100      	movs	r1, #0
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f001 fc0d 	bl	800a298 <RCCEx_PLL2_Config>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a84:	e00f      	b.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a8a:	3328      	adds	r3, #40	@ 0x28
 8008a8c:	2102      	movs	r1, #2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f001 fcb4 	bl	800a3fc <RCCEx_PLL3_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a9a:	e004      	b.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008aa2:	e000      	b.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10b      	bne.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008aae:	4b4b      	ldr	r3, [pc, #300]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ab2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008abe:	4a47      	ldr	r2, [pc, #284]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ac4:	e003      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008ada:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008adc:	2300      	movs	r3, #0
 8008ade:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ae0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	d03b      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008af6:	d01f      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008af8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008afc:	d818      	bhi.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b02:	d003      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008b04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b08:	d007      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008b0a:	e011      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b0c:	4b33      	ldr	r3, [pc, #204]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b10:	4a32      	ldr	r2, [pc, #200]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008b18:	e00f      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b1e:	3328      	adds	r3, #40	@ 0x28
 8008b20:	2101      	movs	r1, #1
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 fc6a 	bl	800a3fc <RCCEx_PLL3_Config>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008b2e:	e004      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b36:	e000      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10b      	bne.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b42:	4b26      	ldr	r3, [pc, #152]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b52:	4a22      	ldr	r2, [pc, #136]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b54:	430b      	orrs	r3, r1
 8008b56:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b58:	e003      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008b6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b70:	2300      	movs	r3, #0
 8008b72:	677b      	str	r3, [r7, #116]	@ 0x74
 8008b74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	d034      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b8c:	d007      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008b8e:	e011      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b90:	4b12      	ldr	r3, [pc, #72]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b94:	4a11      	ldr	r2, [pc, #68]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b9c:	e00e      	b.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	2102      	movs	r1, #2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f001 fb76 	bl	800a298 <RCCEx_PLL2_Config>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008bb2:	e003      	b.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10d      	bne.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008bc4:	4b05      	ldr	r3, [pc, #20]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bd2:	4a02      	ldr	r2, [pc, #8]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008bd8:	e006      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008bda:	bf00      	nop
 8008bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bfa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4313      	orrs	r3, r2
 8008c02:	d00c      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c08:	3328      	adds	r3, #40	@ 0x28
 8008c0a:	2102      	movs	r1, #2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f001 fbf5 	bl	800a3fc <RCCEx_PLL3_Config>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008c2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008c34:	460b      	mov	r3, r1
 8008c36:	4313      	orrs	r3, r2
 8008c38:	d038      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c46:	d018      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008c48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c4c:	d811      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c52:	d014      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c58:	d80b      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d011      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c62:	d106      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c64:	4bc3      	ldr	r3, [pc, #780]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c68:	4ac2      	ldr	r2, [pc, #776]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008c70:	e008      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c78:	e004      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c7a:	bf00      	nop
 8008c7c:	e002      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c7e:	bf00      	nop
 8008c80:	e000      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10b      	bne.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c8c:	4bb9      	ldr	r3, [pc, #740]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c9c:	4ab5      	ldr	r2, [pc, #724]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ca2:	e003      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cba:	2300      	movs	r3, #0
 8008cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cbe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	d009      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008cc8:	4baa      	ldr	r3, [pc, #680]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ccc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cd6:	4aa7      	ldr	r2, [pc, #668]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cd8:	430b      	orrs	r3, r1
 8008cda:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008ce8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cea:	2300      	movs	r3, #0
 8008cec:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	d00a      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008cf8:	4b9e      	ldr	r3, [pc, #632]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008d08:	4a9a      	ldr	r2, [pc, #616]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d0a:	430b      	orrs	r3, r1
 8008d0c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d20:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008d24:	460b      	mov	r3, r1
 8008d26:	4313      	orrs	r3, r2
 8008d28:	d009      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d2a:	4b92      	ldr	r3, [pc, #584]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d2e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d38:	4a8e      	ldr	r2, [pc, #568]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d3a:	430b      	orrs	r3, r1
 8008d3c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008d4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008d54:	460b      	mov	r3, r1
 8008d56:	4313      	orrs	r3, r2
 8008d58:	d00e      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d5a:	4b86      	ldr	r3, [pc, #536]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	4a85      	ldr	r2, [pc, #532]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d64:	6113      	str	r3, [r2, #16]
 8008d66:	4b83      	ldr	r3, [pc, #524]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d68:	6919      	ldr	r1, [r3, #16]
 8008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008d72:	4a80      	ldr	r2, [pc, #512]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d74:	430b      	orrs	r3, r1
 8008d76:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008d84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d86:	2300      	movs	r3, #0
 8008d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4313      	orrs	r3, r2
 8008d92:	d009      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d94:	4b77      	ldr	r3, [pc, #476]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da2:	4a74      	ldr	r2, [pc, #464]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008da4:	430b      	orrs	r3, r1
 8008da6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008db6:	2300      	movs	r3, #0
 8008db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	d00a      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dd4:	4a67      	ldr	r2, [pc, #412]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	2100      	movs	r1, #0
 8008de4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008df0:	460b      	mov	r3, r1
 8008df2:	4313      	orrs	r3, r2
 8008df4:	d011      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f001 fa4a 	bl	800a298 <RCCEx_PLL2_Config>
 8008e04:	4603      	mov	r3, r0
 8008e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	2100      	movs	r1, #0
 8008e24:	6239      	str	r1, [r7, #32]
 8008e26:	f003 0302 	and.w	r3, r3, #2
 8008e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008e30:	460b      	mov	r3, r1
 8008e32:	4313      	orrs	r3, r2
 8008e34:	d011      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f001 fa2a 	bl	800a298 <RCCEx_PLL2_Config>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	2100      	movs	r1, #0
 8008e64:	61b9      	str	r1, [r7, #24]
 8008e66:	f003 0304 	and.w	r3, r3, #4
 8008e6a:	61fb      	str	r3, [r7, #28]
 8008e6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008e70:	460b      	mov	r3, r1
 8008e72:	4313      	orrs	r3, r2
 8008e74:	d011      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	2102      	movs	r1, #2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 fa0a 	bl	800a298 <RCCEx_PLL2_Config>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	6139      	str	r1, [r7, #16]
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	617b      	str	r3, [r7, #20]
 8008eac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	d011      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eba:	3328      	adds	r3, #40	@ 0x28
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 fa9c 	bl	800a3fc <RCCEx_PLL3_Config>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	d011      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efa:	3328      	adds	r3, #40	@ 0x28
 8008efc:	2101      	movs	r1, #1
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 fa7c 	bl	800a3fc <RCCEx_PLL3_Config>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	2100      	movs	r1, #0
 8008f24:	6039      	str	r1, [r7, #0]
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	607b      	str	r3, [r7, #4]
 8008f2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008f30:	460b      	mov	r3, r1
 8008f32:	4313      	orrs	r3, r2
 8008f34:	d011      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3a:	3328      	adds	r3, #40	@ 0x28
 8008f3c:	2102      	movs	r1, #2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f001 fa5c 	bl	800a3fc <RCCEx_PLL3_Config>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008f5a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	e000      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f74:	58024400 	.word	0x58024400

08008f78 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b090      	sub	sp, #64	@ 0x40
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f86:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	f040 8094 	bne.w	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008f90:	4b9e      	ldr	r3, [pc, #632]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	f200 8087 	bhi.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa8:	08008fbd 	.word	0x08008fbd
 8008fac:	08008fe5 	.word	0x08008fe5
 8008fb0:	0800900d 	.word	0x0800900d
 8008fb4:	080090a9 	.word	0x080090a9
 8008fb8:	08009035 	.word	0x08009035
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fbc:	4b93      	ldr	r3, [pc, #588]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fc8:	d108      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 f810 	bl	8009ff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fd8:	f000 bd45 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe0:	f000 bd41 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fe4:	4b89      	ldr	r3, [pc, #548]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ff0:	d108      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff2:	f107 0318 	add.w	r3, r7, #24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fd54 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009000:	f000 bd31 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009008:	f000 bd2d 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800900c:	4b7f      	ldr	r3, [pc, #508]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009018:	d108      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800901a:	f107 030c 	add.w	r3, r7, #12
 800901e:	4618      	mov	r0, r3
 8009020:	f000 fe94 	bl	8009d4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009028:	f000 bd1d 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009030:	f000 bd19 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009034:	4b75      	ldr	r3, [pc, #468]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009038:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800903e:	4b73      	ldr	r3, [pc, #460]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b04      	cmp	r3, #4
 8009048:	d10c      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800904a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800904c:	2b00      	cmp	r3, #0
 800904e:	d109      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009050:	4b6e      	ldr	r3, [pc, #440]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	08db      	lsrs	r3, r3, #3
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	4a6d      	ldr	r2, [pc, #436]	@ (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800905c:	fa22 f303 	lsr.w	r3, r2, r3
 8009060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009062:	e01f      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009064:	4b69      	ldr	r3, [pc, #420]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800906c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009070:	d106      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009078:	d102      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800907a:	4b66      	ldr	r3, [pc, #408]	@ (8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800907e:	e011      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009080:	4b62      	ldr	r3, [pc, #392]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009088:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800908c:	d106      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800908e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009094:	d102      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009096:	4b60      	ldr	r3, [pc, #384]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800909a:	e003      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80090a0:	f000 bce1 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090a4:	f000 bcdf 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090a8:	4b5c      	ldr	r3, [pc, #368]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80090aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ac:	f000 bcdb 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090b4:	f000 bcd7 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80090b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090bc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80090c0:	430b      	orrs	r3, r1
 80090c2:	f040 80ad 	bne.w	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80090c6:	4b51      	ldr	r3, [pc, #324]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80090ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80090d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090d6:	d056      	beq.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80090d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090de:	f200 8090 	bhi.w	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80090e6:	f000 8088 	beq.w	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80090ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80090ee:	f200 8088 	bhi.w	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80090f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f4:	2b80      	cmp	r3, #128	@ 0x80
 80090f6:	d032      	beq.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80090f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fa:	2b80      	cmp	r3, #128	@ 0x80
 80090fc:	f200 8081 	bhi.w	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	2b40      	cmp	r3, #64	@ 0x40
 800910a:	d014      	beq.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800910c:	e079      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800910e:	4b3f      	ldr	r3, [pc, #252]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009116:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800911a:	d108      	bne.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800911c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009120:	4618      	mov	r0, r3
 8009122:	f000 ff67 	bl	8009ff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800912a:	f000 bc9c 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009132:	f000 bc98 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009136:	4b35      	ldr	r3, [pc, #212]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800913e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009142:	d108      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009144:	f107 0318 	add.w	r3, r7, #24
 8009148:	4618      	mov	r0, r3
 800914a:	f000 fcab 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009152:	f000 bc88 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800915a:	f000 bc84 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800915e:	4b2b      	ldr	r3, [pc, #172]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800916a:	d108      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916c:	f107 030c 	add.w	r3, r7, #12
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fdeb 	bl	8009d4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800917a:	f000 bc74 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009182:	f000 bc70 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009186:	4b21      	ldr	r3, [pc, #132]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800918a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800918e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009190:	4b1e      	ldr	r3, [pc, #120]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0304 	and.w	r3, r3, #4
 8009198:	2b04      	cmp	r3, #4
 800919a:	d10c      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800919c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091a2:	4b1a      	ldr	r3, [pc, #104]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	08db      	lsrs	r3, r3, #3
 80091a8:	f003 0303 	and.w	r3, r3, #3
 80091ac:	4a18      	ldr	r2, [pc, #96]	@ (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80091ae:	fa22 f303 	lsr.w	r3, r2, r3
 80091b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091b4:	e01f      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091b6:	4b15      	ldr	r3, [pc, #84]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091c2:	d106      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80091c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091ca:	d102      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091cc:	4b11      	ldr	r3, [pc, #68]	@ (8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80091ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091d0:	e011      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091d2:	4b0e      	ldr	r3, [pc, #56]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091de:	d106      	bne.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80091e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091e6:	d102      	bne.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80091ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ec:	e003      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80091f2:	f000 bc38 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091f6:	f000 bc36 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091fa:	4b08      	ldr	r3, [pc, #32]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80091fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091fe:	f000 bc32 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009202:	2300      	movs	r3, #0
 8009204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009206:	f000 bc2e 	b.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800920a:	bf00      	nop
 800920c:	58024400 	.word	0x58024400
 8009210:	03d09000 	.word	0x03d09000
 8009214:	003d0900 	.word	0x003d0900
 8009218:	017d7840 	.word	0x017d7840
 800921c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009224:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009228:	430b      	orrs	r3, r1
 800922a:	f040 809c 	bne.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800922e:	4b9e      	ldr	r3, [pc, #632]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009232:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009236:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800923e:	d054      	beq.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009242:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009246:	f200 808b 	bhi.w	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009250:	f000 8083 	beq.w	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009256:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800925a:	f200 8081 	bhi.w	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009264:	d02f      	beq.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800926c:	d878      	bhi.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800926e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009270:	2b00      	cmp	r3, #0
 8009272:	d004      	beq.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800927a:	d012      	beq.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800927c:	e070      	b.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800927e:	4b8a      	ldr	r3, [pc, #552]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800928a:	d107      	bne.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800928c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009290:	4618      	mov	r0, r3
 8009292:	f000 feaf 	bl	8009ff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800929a:	e3e4      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a0:	e3e1      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092a2:	4b81      	ldr	r3, [pc, #516]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092ae:	d107      	bne.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092b0:	f107 0318 	add.w	r3, r7, #24
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 fbf5 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092be:	e3d2      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092c0:	2300      	movs	r3, #0
 80092c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c4:	e3cf      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092c6:	4b78      	ldr	r3, [pc, #480]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092d2:	d107      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092d4:	f107 030c 	add.w	r3, r7, #12
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 fd37 	bl	8009d4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092e2:	e3c0      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092e8:	e3bd      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092ea:	4b6f      	ldr	r3, [pc, #444]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092f4:	4b6c      	ldr	r3, [pc, #432]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b04      	cmp	r3, #4
 80092fe:	d10c      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009302:	2b00      	cmp	r3, #0
 8009304:	d109      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009306:	4b68      	ldr	r3, [pc, #416]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	08db      	lsrs	r3, r3, #3
 800930c:	f003 0303 	and.w	r3, r3, #3
 8009310:	4a66      	ldr	r2, [pc, #408]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009312:	fa22 f303 	lsr.w	r3, r2, r3
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009318:	e01e      	b.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800931a:	4b63      	ldr	r3, [pc, #396]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009326:	d106      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800932a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800932e:	d102      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009330:	4b5f      	ldr	r3, [pc, #380]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009334:	e010      	b.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009336:	4b5c      	ldr	r3, [pc, #368]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800933e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009342:	d106      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800934a:	d102      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800934c:	4b59      	ldr	r3, [pc, #356]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800934e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009350:	e002      	b.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009356:	e386      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009358:	e385      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800935a:	4b57      	ldr	r3, [pc, #348]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800935e:	e382      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009364:	e37f      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800936a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800936e:	430b      	orrs	r3, r1
 8009370:	f040 80a7 	bne.w	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009374:	4b4c      	ldr	r3, [pc, #304]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009378:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800937c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800937e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009384:	d055      	beq.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800938c:	f200 8096 	bhi.w	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009396:	f000 8084 	beq.w	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80093a0:	f200 808c 	bhi.w	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80093a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093aa:	d030      	beq.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093b2:	f200 8083 	bhi.w	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d004      	beq.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093c2:	d012      	beq.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80093c4:	e07a      	b.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093c6:	4b38      	ldr	r3, [pc, #224]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093d2:	d107      	bne.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fe0b 	bl	8009ff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093e2:	e340      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093e8:	e33d      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093ea:	4b2f      	ldr	r3, [pc, #188]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093f6:	d107      	bne.n	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093f8:	f107 0318 	add.w	r3, r7, #24
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 fb51 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009406:	e32e      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800940c:	e32b      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800940e:	4b26      	ldr	r3, [pc, #152]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800941a:	d107      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800941c:	f107 030c 	add.w	r3, r7, #12
 8009420:	4618      	mov	r0, r3
 8009422:	f000 fc93 	bl	8009d4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800942a:	e31c      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009430:	e319      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009432:	4b1d      	ldr	r3, [pc, #116]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009436:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800943a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800943c:	4b1a      	ldr	r3, [pc, #104]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b04      	cmp	r3, #4
 8009446:	d10c      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800944a:	2b00      	cmp	r3, #0
 800944c:	d109      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800944e:	4b16      	ldr	r3, [pc, #88]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	08db      	lsrs	r3, r3, #3
 8009454:	f003 0303 	and.w	r3, r3, #3
 8009458:	4a14      	ldr	r2, [pc, #80]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800945a:	fa22 f303 	lsr.w	r3, r2, r3
 800945e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009460:	e01e      	b.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009462:	4b11      	ldr	r3, [pc, #68]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800946a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800946e:	d106      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009476:	d102      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009478:	4b0d      	ldr	r3, [pc, #52]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800947a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800947c:	e010      	b.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800947e:	4b0a      	ldr	r3, [pc, #40]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800948a:	d106      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800948c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800948e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009492:	d102      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009494:	4b07      	ldr	r3, [pc, #28]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009498:	e002      	b.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800949e:	e2e2      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094a0:	e2e1      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094a2:	4b05      	ldr	r3, [pc, #20]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a6:	e2de      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094a8:	58024400 	.word	0x58024400
 80094ac:	03d09000 	.word	0x03d09000
 80094b0:	003d0900 	.word	0x003d0900
 80094b4:	017d7840 	.word	0x017d7840
 80094b8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80094bc:	2300      	movs	r3, #0
 80094be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c0:	e2d1      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80094c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80094ca:	430b      	orrs	r3, r1
 80094cc:	f040 809c 	bne.w	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80094d0:	4b93      	ldr	r3, [pc, #588]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094d4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80094d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80094da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094e0:	d054      	beq.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80094e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094e8:	f200 808b 	bhi.w	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80094ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094f2:	f000 8083 	beq.w	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80094f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094fc:	f200 8081 	bhi.w	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009506:	d02f      	beq.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800950e:	d878      	bhi.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009512:	2b00      	cmp	r3, #0
 8009514:	d004      	beq.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800951c:	d012      	beq.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800951e:	e070      	b.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009520:	4b7f      	ldr	r3, [pc, #508]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800952c:	d107      	bne.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800952e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009532:	4618      	mov	r0, r3
 8009534:	f000 fd5e 	bl	8009ff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800953c:	e293      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009542:	e290      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009544:	4b76      	ldr	r3, [pc, #472]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800954c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009550:	d107      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009552:	f107 0318 	add.w	r3, r7, #24
 8009556:	4618      	mov	r0, r3
 8009558:	f000 faa4 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009560:	e281      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009566:	e27e      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009568:	4b6d      	ldr	r3, [pc, #436]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009574:	d107      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009576:	f107 030c 	add.w	r3, r7, #12
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fbe6 	bl	8009d4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009584:	e26f      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958a:	e26c      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800958c:	4b64      	ldr	r3, [pc, #400]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800958e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009590:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009594:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009596:	4b62      	ldr	r3, [pc, #392]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0304 	and.w	r3, r3, #4
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d10c      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80095a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d109      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095a8:	4b5d      	ldr	r3, [pc, #372]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	08db      	lsrs	r3, r3, #3
 80095ae:	f003 0303 	and.w	r3, r3, #3
 80095b2:	4a5c      	ldr	r2, [pc, #368]	@ (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80095b4:	fa22 f303 	lsr.w	r3, r2, r3
 80095b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095ba:	e01e      	b.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095bc:	4b58      	ldr	r3, [pc, #352]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095c8:	d106      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80095ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095d0:	d102      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095d2:	4b55      	ldr	r3, [pc, #340]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095d6:	e010      	b.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095d8:	4b51      	ldr	r3, [pc, #324]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095e4:	d106      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80095e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ec:	d102      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095ee:	4b4f      	ldr	r3, [pc, #316]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80095f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095f2:	e002      	b.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80095f8:	e235      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095fa:	e234      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80095fc:	4b4c      	ldr	r3, [pc, #304]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80095fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009600:	e231      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009606:	e22e      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800960c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009610:	430b      	orrs	r3, r1
 8009612:	f040 808f 	bne.w	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009616:	4b42      	ldr	r3, [pc, #264]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800961a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800961e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009622:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009626:	d06b      	beq.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800962e:	d874      	bhi.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009636:	d056      	beq.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800963e:	d86c      	bhi.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009642:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009646:	d03b      	beq.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800964e:	d864      	bhi.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009652:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009656:	d021      	beq.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800965e:	d85c      	bhi.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009662:	2b00      	cmp	r3, #0
 8009664:	d004      	beq.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800966c:	d004      	beq.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800966e:	e054      	b.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009670:	f7fe fa0a 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 8009674:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009676:	e1f6      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009678:	4b29      	ldr	r3, [pc, #164]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009684:	d107      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009686:	f107 0318 	add.w	r3, r7, #24
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fa0a 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009694:	e1e7      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800969a:	e1e4      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800969c:	4b20      	ldr	r3, [pc, #128]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096a8:	d107      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096aa:	f107 030c 	add.w	r3, r7, #12
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 fb4c 	bl	8009d4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096b8:	e1d5      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096be:	e1d2      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096c0:	4b17      	ldr	r3, [pc, #92]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b04      	cmp	r3, #4
 80096ca:	d109      	bne.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096cc:	4b14      	ldr	r3, [pc, #80]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	08db      	lsrs	r3, r3, #3
 80096d2:	f003 0303 	and.w	r3, r3, #3
 80096d6:	4a13      	ldr	r2, [pc, #76]	@ (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80096d8:	fa22 f303 	lsr.w	r3, r2, r3
 80096dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096de:	e1c2      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e4:	e1bf      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096f2:	d102      	bne.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80096f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096f8:	e1b5      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096fe:	e1b2      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009700:	4b07      	ldr	r3, [pc, #28]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800970c:	d102      	bne.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800970e:	4b07      	ldr	r3, [pc, #28]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009712:	e1a8      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009718:	e1a5      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800971e:	e1a2      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009720:	58024400 	.word	0x58024400
 8009724:	03d09000 	.word	0x03d09000
 8009728:	003d0900 	.word	0x003d0900
 800972c:	017d7840 	.word	0x017d7840
 8009730:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009738:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800973c:	430b      	orrs	r3, r1
 800973e:	d173      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009740:	4b9c      	ldr	r3, [pc, #624]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009748:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800974a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009750:	d02f      	beq.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009758:	d863      	bhi.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800975a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009766:	d012      	beq.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009768:	e05b      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800976a:	4b92      	ldr	r3, [pc, #584]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009776:	d107      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009778:	f107 0318 	add.w	r3, r7, #24
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f991 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009786:	e16e      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009788:	2300      	movs	r3, #0
 800978a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800978c:	e16b      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800978e:	4b89      	ldr	r3, [pc, #548]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009796:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800979a:	d107      	bne.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800979c:	f107 030c 	add.w	r3, r7, #12
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fad3 	bl	8009d4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097aa:	e15c      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b0:	e159      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097b2:	4b80      	ldr	r3, [pc, #512]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097bc:	4b7d      	ldr	r3, [pc, #500]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b04      	cmp	r3, #4
 80097c6:	d10c      	bne.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80097c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d109      	bne.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097ce:	4b79      	ldr	r3, [pc, #484]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	08db      	lsrs	r3, r3, #3
 80097d4:	f003 0303 	and.w	r3, r3, #3
 80097d8:	4a77      	ldr	r2, [pc, #476]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80097da:	fa22 f303 	lsr.w	r3, r2, r3
 80097de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097e0:	e01e      	b.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097e2:	4b74      	ldr	r3, [pc, #464]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097ee:	d106      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80097f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097f6:	d102      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097f8:	4b70      	ldr	r3, [pc, #448]	@ (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80097fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097fc:	e010      	b.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097fe:	4b6d      	ldr	r3, [pc, #436]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009806:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800980a:	d106      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800980c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800980e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009812:	d102      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009814:	4b6a      	ldr	r3, [pc, #424]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009818:	e002      	b.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800981e:	e122      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009820:	e121      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009826:	e11e      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800982c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009830:	430b      	orrs	r3, r1
 8009832:	d133      	bne.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009834:	4b5f      	ldr	r3, [pc, #380]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800983c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009840:	2b00      	cmp	r3, #0
 8009842:	d004      	beq.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800984a:	d012      	beq.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800984c:	e023      	b.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800984e:	4b59      	ldr	r3, [pc, #356]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800985a:	d107      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800985c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009860:	4618      	mov	r0, r3
 8009862:	f000 fbc7 	bl	8009ff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800986a:	e0fc      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009870:	e0f9      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009872:	4b50      	ldr	r3, [pc, #320]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800987a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800987e:	d107      	bne.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009880:	f107 0318 	add.w	r3, r7, #24
 8009884:	4618      	mov	r0, r3
 8009886:	f000 f90d 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800988e:	e0ea      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009894:	e0e7      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800989a:	e0e4      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800989c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098a0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80098a4:	430b      	orrs	r3, r1
 80098a6:	f040 808d 	bne.w	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80098aa:	4b42      	ldr	r3, [pc, #264]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80098b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098ba:	d06b      	beq.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80098bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098c2:	d874      	bhi.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ca:	d056      	beq.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80098cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098d2:	d86c      	bhi.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098da:	d03b      	beq.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80098dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098e2:	d864      	bhi.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ea:	d021      	beq.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80098ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098f2:	d85c      	bhi.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d004      	beq.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80098fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009900:	d004      	beq.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009902:	e054      	b.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009904:	f000 f8b8 	bl	8009a78 <HAL_RCCEx_GetD3PCLK1Freq>
 8009908:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800990a:	e0ac      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800990c:	4b29      	ldr	r3, [pc, #164]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009918:	d107      	bne.n	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800991a:	f107 0318 	add.w	r3, r7, #24
 800991e:	4618      	mov	r0, r3
 8009920:	f000 f8c0 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009928:	e09d      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992e:	e09a      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009930:	4b20      	ldr	r3, [pc, #128]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800993c:	d107      	bne.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800993e:	f107 030c 	add.w	r3, r7, #12
 8009942:	4618      	mov	r0, r3
 8009944:	f000 fa02 	bl	8009d4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800994c:	e08b      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009952:	e088      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009954:	4b17      	ldr	r3, [pc, #92]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 0304 	and.w	r3, r3, #4
 800995c:	2b04      	cmp	r3, #4
 800995e:	d109      	bne.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009960:	4b14      	ldr	r3, [pc, #80]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	08db      	lsrs	r3, r3, #3
 8009966:	f003 0303 	and.w	r3, r3, #3
 800996a:	4a13      	ldr	r2, [pc, #76]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800996c:	fa22 f303 	lsr.w	r3, r2, r3
 8009970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009972:	e078      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009978:	e075      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800997a:	4b0e      	ldr	r3, [pc, #56]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009986:	d102      	bne.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009988:	4b0c      	ldr	r3, [pc, #48]	@ (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800998a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800998c:	e06b      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800998e:	2300      	movs	r3, #0
 8009990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009992:	e068      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009994:	4b07      	ldr	r3, [pc, #28]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800999c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099a0:	d102      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80099a2:	4b07      	ldr	r3, [pc, #28]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80099a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099a6:	e05e      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ac:	e05b      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099b2:	e058      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099b4:	58024400 	.word	0x58024400
 80099b8:	03d09000 	.word	0x03d09000
 80099bc:	003d0900 	.word	0x003d0900
 80099c0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80099c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099c8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80099cc:	430b      	orrs	r3, r1
 80099ce:	d148      	bne.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80099d0:	4b27      	ldr	r3, [pc, #156]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80099d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80099da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099e0:	d02a      	beq.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80099e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099e8:	d838      	bhi.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80099ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d004      	beq.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80099f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099f6:	d00d      	beq.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80099f8:	e030      	b.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80099fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a06:	d102      	bne.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009a08:	4b1a      	ldr	r3, [pc, #104]	@ (8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a0c:	e02b      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a12:	e028      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a14:	4b16      	ldr	r3, [pc, #88]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a20:	d107      	bne.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fae4 	bl	8009ff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a30:	e019      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a36:	e016      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a38:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a44:	d107      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a46:	f107 0318 	add.w	r3, r7, #24
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f82a 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a54:	e007      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a5a:	e004      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a60:	e001      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3740      	adds	r7, #64	@ 0x40
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	58024400 	.word	0x58024400
 8009a74:	017d7840 	.word	0x017d7840

08009a78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a7c:	f7fd ffd4 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8009a80:	4602      	mov	r2, r0
 8009a82:	4b06      	ldr	r3, [pc, #24]	@ (8009a9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	091b      	lsrs	r3, r3, #4
 8009a88:	f003 0307 	and.w	r3, r3, #7
 8009a8c:	4904      	ldr	r1, [pc, #16]	@ (8009aa0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a8e:	5ccb      	ldrb	r3, [r1, r3]
 8009a90:	f003 031f 	and.w	r3, r3, #31
 8009a94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	58024400 	.word	0x58024400
 8009aa0:	08010a8c 	.word	0x08010a8c

08009aa4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b089      	sub	sp, #36	@ 0x24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009aac:	4ba1      	ldr	r3, [pc, #644]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab0:	f003 0303 	and.w	r3, r3, #3
 8009ab4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009ab6:	4b9f      	ldr	r3, [pc, #636]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aba:	0b1b      	lsrs	r3, r3, #12
 8009abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ac0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009ac2:	4b9c      	ldr	r3, [pc, #624]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac6:	091b      	lsrs	r3, r3, #4
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009ace:	4b99      	ldr	r3, [pc, #612]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad2:	08db      	lsrs	r3, r3, #3
 8009ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	fb02 f303 	mul.w	r3, r2, r3
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 8111 	beq.w	8009d14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	f000 8083 	beq.w	8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	f200 80a1 	bhi.w	8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d003      	beq.n	8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d056      	beq.n	8009bbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009b0e:	e099      	b.n	8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b10:	4b88      	ldr	r3, [pc, #544]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 0320 	and.w	r3, r3, #32
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d02d      	beq.n	8009b78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b1c:	4b85      	ldr	r3, [pc, #532]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	08db      	lsrs	r3, r3, #3
 8009b22:	f003 0303 	and.w	r3, r3, #3
 8009b26:	4a84      	ldr	r2, [pc, #528]	@ (8009d38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b28:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	ee07 3a90 	vmov	s15, r3
 8009b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	ee07 3a90 	vmov	s15, r3
 8009b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b46:	4b7b      	ldr	r3, [pc, #492]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b76:	e087      	b.n	8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b92:	ee07 3a90 	vmov	s15, r3
 8009b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bba:	e065      	b.n	8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	ee07 3a90 	vmov	s15, r3
 8009bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bce:	4b59      	ldr	r3, [pc, #356]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8009be2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bfe:	e043      	b.n	8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c12:	4b48      	ldr	r3, [pc, #288]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c42:	e021      	b.n	8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c56:	4b37      	ldr	r3, [pc, #220]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009c88:	4b2a      	ldr	r3, [pc, #168]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8c:	0a5b      	lsrs	r3, r3, #9
 8009c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cae:	ee17 2a90 	vmov	r2, s15
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cba:	0c1b      	lsrs	r3, r3, #16
 8009cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc0:	ee07 3a90 	vmov	s15, r3
 8009cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cdc:	ee17 2a90 	vmov	r2, s15
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009ce4:	4b13      	ldr	r3, [pc, #76]	@ (8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce8:	0e1b      	lsrs	r3, r3, #24
 8009cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d0a:	ee17 2a90 	vmov	r2, s15
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d12:	e008      	b.n	8009d26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	609a      	str	r2, [r3, #8]
}
 8009d26:	bf00      	nop
 8009d28:	3724      	adds	r7, #36	@ 0x24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	58024400 	.word	0x58024400
 8009d38:	03d09000 	.word	0x03d09000
 8009d3c:	46000000 	.word	0x46000000
 8009d40:	4c742400 	.word	0x4c742400
 8009d44:	4a742400 	.word	0x4a742400
 8009d48:	4bbebc20 	.word	0x4bbebc20

08009d4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b089      	sub	sp, #36	@ 0x24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d54:	4ba1      	ldr	r3, [pc, #644]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d58:	f003 0303 	and.w	r3, r3, #3
 8009d5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009d5e:	4b9f      	ldr	r3, [pc, #636]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d62:	0d1b      	lsrs	r3, r3, #20
 8009d64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d6a:	4b9c      	ldr	r3, [pc, #624]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d6e:	0a1b      	lsrs	r3, r3, #8
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009d76:	4b99      	ldr	r3, [pc, #612]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d7a:	08db      	lsrs	r3, r3, #3
 8009d7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	fb02 f303 	mul.w	r3, r2, r3
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 8111 	beq.w	8009fbc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	f000 8083 	beq.w	8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	f200 80a1 	bhi.w	8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d003      	beq.n	8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d056      	beq.n	8009e64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009db6:	e099      	b.n	8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009db8:	4b88      	ldr	r3, [pc, #544]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0320 	and.w	r3, r3, #32
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d02d      	beq.n	8009e20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dc4:	4b85      	ldr	r3, [pc, #532]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	08db      	lsrs	r3, r3, #3
 8009dca:	f003 0303 	and.w	r3, r3, #3
 8009dce:	4a84      	ldr	r2, [pc, #528]	@ (8009fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	ee07 3a90 	vmov	s15, r3
 8009ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	ee07 3a90 	vmov	s15, r3
 8009de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dee:	4b7b      	ldr	r3, [pc, #492]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df6:	ee07 3a90 	vmov	s15, r3
 8009dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e1e:	e087      	b.n	8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	ee07 3a90 	vmov	s15, r3
 8009e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e32:	4b6a      	ldr	r3, [pc, #424]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e3a:	ee07 3a90 	vmov	s15, r3
 8009e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e62:	e065      	b.n	8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009fec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e76:	4b59      	ldr	r3, [pc, #356]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ea6:	e043      	b.n	8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	ee07 3a90 	vmov	s15, r3
 8009eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eba:	4b48      	ldr	r3, [pc, #288]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ece:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eea:	e021      	b.n	8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009fec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009efe:	4b37      	ldr	r3, [pc, #220]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009f30:	4b2a      	ldr	r3, [pc, #168]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f34:	0a5b      	lsrs	r3, r3, #9
 8009f36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f56:	ee17 2a90 	vmov	r2, s15
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f62:	0c1b      	lsrs	r3, r3, #16
 8009f64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f68:	ee07 3a90 	vmov	s15, r3
 8009f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f78:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f84:	ee17 2a90 	vmov	r2, s15
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009f8c:	4b13      	ldr	r3, [pc, #76]	@ (8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f90:	0e1b      	lsrs	r3, r3, #24
 8009f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f96:	ee07 3a90 	vmov	s15, r3
 8009f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fb2:	ee17 2a90 	vmov	r2, s15
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009fba:	e008      	b.n	8009fce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	609a      	str	r2, [r3, #8]
}
 8009fce:	bf00      	nop
 8009fd0:	3724      	adds	r7, #36	@ 0x24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	58024400 	.word	0x58024400
 8009fe0:	03d09000 	.word	0x03d09000
 8009fe4:	46000000 	.word	0x46000000
 8009fe8:	4c742400 	.word	0x4c742400
 8009fec:	4a742400 	.word	0x4a742400
 8009ff0:	4bbebc20 	.word	0x4bbebc20

08009ff4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b089      	sub	sp, #36	@ 0x24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ffc:	4ba0      	ldr	r3, [pc, #640]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a000:	f003 0303 	and.w	r3, r3, #3
 800a004:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a006:	4b9e      	ldr	r3, [pc, #632]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00a:	091b      	lsrs	r3, r3, #4
 800a00c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a010:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a012:	4b9b      	ldr	r3, [pc, #620]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a01c:	4b98      	ldr	r3, [pc, #608]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a020:	08db      	lsrs	r3, r3, #3
 800a022:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	fb02 f303 	mul.w	r3, r2, r3
 800a02c:	ee07 3a90 	vmov	s15, r3
 800a030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a034:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 8111 	beq.w	800a262 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2b02      	cmp	r3, #2
 800a044:	f000 8083 	beq.w	800a14e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	f200 80a1 	bhi.w	800a192 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d056      	beq.n	800a10a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a05c:	e099      	b.n	800a192 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a05e:	4b88      	ldr	r3, [pc, #544]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0320 	and.w	r3, r3, #32
 800a066:	2b00      	cmp	r3, #0
 800a068:	d02d      	beq.n	800a0c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a06a:	4b85      	ldr	r3, [pc, #532]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	08db      	lsrs	r3, r3, #3
 800a070:	f003 0303 	and.w	r3, r3, #3
 800a074:	4a83      	ldr	r2, [pc, #524]	@ (800a284 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a076:	fa22 f303 	lsr.w	r3, r2, r3
 800a07a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	ee07 3a90 	vmov	s15, r3
 800a082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	ee07 3a90 	vmov	s15, r3
 800a08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a094:	4b7a      	ldr	r3, [pc, #488]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a09c:	ee07 3a90 	vmov	s15, r3
 800a0a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0a8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a288 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a0c4:	e087      	b.n	800a1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	ee07 3a90 	vmov	s15, r3
 800a0cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a28c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a0d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d8:	4b69      	ldr	r3, [pc, #420]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0e0:	ee07 3a90 	vmov	s15, r3
 800a0e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a288 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a100:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a104:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a108:	e065      	b.n	800a1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	ee07 3a90 	vmov	s15, r3
 800a110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a114:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a290 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a11c:	4b58      	ldr	r3, [pc, #352]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a124:	ee07 3a90 	vmov	s15, r3
 800a128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a12c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a130:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a288 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a13c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a144:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a148:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a14c:	e043      	b.n	800a1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	ee07 3a90 	vmov	s15, r3
 800a154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a158:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a294 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a15c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a160:	4b47      	ldr	r3, [pc, #284]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a168:	ee07 3a90 	vmov	s15, r3
 800a16c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a170:	ed97 6a03 	vldr	s12, [r7, #12]
 800a174:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a288 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a17c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a180:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a18c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a190:	e021      	b.n	800a1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	ee07 3a90 	vmov	s15, r3
 800a198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a28c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a1a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a4:	4b36      	ldr	r3, [pc, #216]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ac:	ee07 3a90 	vmov	s15, r3
 800a1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a288 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a1d6:	4b2a      	ldr	r3, [pc, #168]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1da:	0a5b      	lsrs	r3, r3, #9
 800a1dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1e0:	ee07 3a90 	vmov	s15, r3
 800a1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1fc:	ee17 2a90 	vmov	r2, s15
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a204:	4b1e      	ldr	r3, [pc, #120]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a208:	0c1b      	lsrs	r3, r3, #16
 800a20a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a20e:	ee07 3a90 	vmov	s15, r3
 800a212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a21a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a21e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a22a:	ee17 2a90 	vmov	r2, s15
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a232:	4b13      	ldr	r3, [pc, #76]	@ (800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a236:	0e1b      	lsrs	r3, r3, #24
 800a238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a23c:	ee07 3a90 	vmov	s15, r3
 800a240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a244:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a24c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a258:	ee17 2a90 	vmov	r2, s15
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a260:	e008      	b.n	800a274 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	609a      	str	r2, [r3, #8]
}
 800a274:	bf00      	nop
 800a276:	3724      	adds	r7, #36	@ 0x24
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	58024400 	.word	0x58024400
 800a284:	03d09000 	.word	0x03d09000
 800a288:	46000000 	.word	0x46000000
 800a28c:	4c742400 	.word	0x4c742400
 800a290:	4a742400 	.word	0x4a742400
 800a294:	4bbebc20 	.word	0x4bbebc20

0800a298 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2a6:	4b53      	ldr	r3, [pc, #332]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2aa:	f003 0303 	and.w	r3, r3, #3
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	d101      	bne.n	800a2b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e099      	b.n	800a3ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a2b6:	4b4f      	ldr	r3, [pc, #316]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a4e      	ldr	r2, [pc, #312]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2c2:	f7f8 fce3 	bl	8002c8c <HAL_GetTick>
 800a2c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2c8:	e008      	b.n	800a2dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2ca:	f7f8 fcdf 	bl	8002c8c <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d901      	bls.n	800a2dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e086      	b.n	800a3ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2dc:	4b45      	ldr	r3, [pc, #276]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1f0      	bne.n	800a2ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a2e8:	4b42      	ldr	r3, [pc, #264]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	031b      	lsls	r3, r3, #12
 800a2f6:	493f      	ldr	r1, [pc, #252]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	628b      	str	r3, [r1, #40]	@ 0x28
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	3b01      	subs	r3, #1
 800a302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	025b      	lsls	r3, r3, #9
 800a30e:	b29b      	uxth	r3, r3
 800a310:	431a      	orrs	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	3b01      	subs	r3, #1
 800a318:	041b      	lsls	r3, r3, #16
 800a31a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a31e:	431a      	orrs	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	3b01      	subs	r3, #1
 800a326:	061b      	lsls	r3, r3, #24
 800a328:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a32c:	4931      	ldr	r1, [pc, #196]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a332:	4b30      	ldr	r3, [pc, #192]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a336:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	492d      	ldr	r1, [pc, #180]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a340:	4313      	orrs	r3, r2
 800a342:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a344:	4b2b      	ldr	r3, [pc, #172]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a348:	f023 0220 	bic.w	r2, r3, #32
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	4928      	ldr	r1, [pc, #160]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a352:	4313      	orrs	r3, r2
 800a354:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a356:	4b27      	ldr	r3, [pc, #156]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a35a:	4a26      	ldr	r2, [pc, #152]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a35c:	f023 0310 	bic.w	r3, r3, #16
 800a360:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a362:	4b24      	ldr	r3, [pc, #144]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a366:	4b24      	ldr	r3, [pc, #144]	@ (800a3f8 <RCCEx_PLL2_Config+0x160>)
 800a368:	4013      	ands	r3, r2
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	69d2      	ldr	r2, [r2, #28]
 800a36e:	00d2      	lsls	r2, r2, #3
 800a370:	4920      	ldr	r1, [pc, #128]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a372:	4313      	orrs	r3, r2
 800a374:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a376:	4b1f      	ldr	r3, [pc, #124]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37a:	4a1e      	ldr	r2, [pc, #120]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a37c:	f043 0310 	orr.w	r3, r3, #16
 800a380:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d106      	bne.n	800a396 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a388:	4b1a      	ldr	r3, [pc, #104]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38c:	4a19      	ldr	r2, [pc, #100]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a38e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a392:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a394:	e00f      	b.n	800a3b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d106      	bne.n	800a3aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a39c:	4b15      	ldr	r3, [pc, #84]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a0:	4a14      	ldr	r2, [pc, #80]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a3a8:	e005      	b.n	800a3b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a3aa:	4b12      	ldr	r3, [pc, #72]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ae:	4a11      	ldr	r2, [pc, #68]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a3b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a3b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a0e      	ldr	r2, [pc, #56]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3c2:	f7f8 fc63 	bl	8002c8c <HAL_GetTick>
 800a3c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3c8:	e008      	b.n	800a3dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3ca:	f7f8 fc5f 	bl	8002c8c <HAL_GetTick>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d901      	bls.n	800a3dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e006      	b.n	800a3ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3dc:	4b05      	ldr	r3, [pc, #20]	@ (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d0f0      	beq.n	800a3ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	58024400 	.word	0x58024400
 800a3f8:	ffff0007 	.word	0xffff0007

0800a3fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a406:	2300      	movs	r3, #0
 800a408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a40a:	4b53      	ldr	r3, [pc, #332]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40e:	f003 0303 	and.w	r3, r3, #3
 800a412:	2b03      	cmp	r3, #3
 800a414:	d101      	bne.n	800a41a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e099      	b.n	800a54e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a41a:	4b4f      	ldr	r3, [pc, #316]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a4e      	ldr	r2, [pc, #312]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a426:	f7f8 fc31 	bl	8002c8c <HAL_GetTick>
 800a42a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a42c:	e008      	b.n	800a440 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a42e:	f7f8 fc2d 	bl	8002c8c <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d901      	bls.n	800a440 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e086      	b.n	800a54e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a440:	4b45      	ldr	r3, [pc, #276]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1f0      	bne.n	800a42e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a44c:	4b42      	ldr	r3, [pc, #264]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a450:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	051b      	lsls	r3, r3, #20
 800a45a:	493f      	ldr	r1, [pc, #252]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a45c:	4313      	orrs	r3, r2
 800a45e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	3b01      	subs	r3, #1
 800a466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	3b01      	subs	r3, #1
 800a470:	025b      	lsls	r3, r3, #9
 800a472:	b29b      	uxth	r3, r3
 800a474:	431a      	orrs	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	041b      	lsls	r3, r3, #16
 800a47e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a482:	431a      	orrs	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	3b01      	subs	r3, #1
 800a48a:	061b      	lsls	r3, r3, #24
 800a48c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a490:	4931      	ldr	r1, [pc, #196]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a492:	4313      	orrs	r3, r2
 800a494:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a496:	4b30      	ldr	r3, [pc, #192]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a49a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	492d      	ldr	r1, [pc, #180]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a4a8:	4b2b      	ldr	r3, [pc, #172]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	4928      	ldr	r1, [pc, #160]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a4ba:	4b27      	ldr	r3, [pc, #156]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4be:	4a26      	ldr	r2, [pc, #152]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4c6:	4b24      	ldr	r3, [pc, #144]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4ca:	4b24      	ldr	r3, [pc, #144]	@ (800a55c <RCCEx_PLL3_Config+0x160>)
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	69d2      	ldr	r2, [r2, #28]
 800a4d2:	00d2      	lsls	r2, r2, #3
 800a4d4:	4920      	ldr	r1, [pc, #128]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a4da:	4b1f      	ldr	r3, [pc, #124]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4de:	4a1e      	ldr	r2, [pc, #120]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d106      	bne.n	800a4fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a4ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f0:	4a19      	ldr	r2, [pc, #100]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4f8:	e00f      	b.n	800a51a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d106      	bne.n	800a50e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a500:	4b15      	ldr	r3, [pc, #84]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a504:	4a14      	ldr	r2, [pc, #80]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a506:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a50a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a50c:	e005      	b.n	800a51a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a50e:	4b12      	ldr	r3, [pc, #72]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a512:	4a11      	ldr	r2, [pc, #68]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a514:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a518:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a51a:	4b0f      	ldr	r3, [pc, #60]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a0e      	ldr	r2, [pc, #56]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a526:	f7f8 fbb1 	bl	8002c8c <HAL_GetTick>
 800a52a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a52c:	e008      	b.n	800a540 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a52e:	f7f8 fbad 	bl	8002c8c <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d901      	bls.n	800a540 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e006      	b.n	800a54e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a540:	4b05      	ldr	r3, [pc, #20]	@ (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d0f0      	beq.n	800a52e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	58024400 	.word	0x58024400
 800a55c:	ffff0007 	.word	0xffff0007

0800a560 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d071      	beq.n	800a656 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d106      	bne.n	800a58c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7f7 fd9a 	bl	80020c0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	f003 0310 	and.w	r3, r3, #16
 800a59e:	2b10      	cmp	r3, #16
 800a5a0:	d050      	beq.n	800a644 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	22ca      	movs	r2, #202	@ 0xca
 800a5a8:	625a      	str	r2, [r3, #36]	@ 0x24
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2253      	movs	r2, #83	@ 0x53
 800a5b0:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f87a 	bl	800a6ac <RTC_EnterInitMode>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d124      	bne.n	800a60c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6899      	ldr	r1, [r3, #8]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	4b24      	ldr	r3, [pc, #144]	@ (800a660 <HAL_RTC_Init+0x100>)
 800a5ce:	400b      	ands	r3, r1
 800a5d0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6899      	ldr	r1, [r3, #8]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	431a      	orrs	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	430a      	orrs	r2, r1
 800a5ee:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	0419      	lsls	r1, r3, #16
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68da      	ldr	r2, [r3, #12]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f886 	bl	800a714 <RTC_ExitInitMode>
 800a608:	4603      	mov	r3, r0
 800a60a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d113      	bne.n	800a63a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 0203 	bic.w	r2, r2, #3
 800a620:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	69da      	ldr	r2, [r3, #28]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	695b      	ldr	r3, [r3, #20]
 800a630:	431a      	orrs	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	22ff      	movs	r2, #255	@ 0xff
 800a640:	625a      	str	r2, [r3, #36]	@ 0x24
 800a642:	e001      	b.n	800a648 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d103      	bne.n	800a656 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800a656:	7bfb      	ldrb	r3, [r7, #15]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	ff8fffbf 	.word	0xff8fffbf

0800a664 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a0d      	ldr	r2, [pc, #52]	@ (800a6a8 <HAL_RTC_WaitForSynchro+0x44>)
 800a672:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a674:	f7f8 fb0a 	bl	8002c8c <HAL_GetTick>
 800a678:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a67a:	e009      	b.n	800a690 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a67c:	f7f8 fb06 	bl	8002c8c <HAL_GetTick>
 800a680:	4602      	mov	r2, r0
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a68a:	d901      	bls.n	800a690 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e007      	b.n	800a6a0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	f003 0320 	and.w	r3, r3, #32
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d0ee      	beq.n	800a67c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	0003ff5f 	.word	0x0003ff5f

0800a6ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d120      	bne.n	800a708 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a6d0:	f7f8 fadc 	bl	8002c8c <HAL_GetTick>
 800a6d4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a6d6:	e00d      	b.n	800a6f4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a6d8:	f7f8 fad8 	bl	8002c8c <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6e6:	d905      	bls.n	800a6f4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2203      	movs	r2, #3
 800a6f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d102      	bne.n	800a708 <RTC_EnterInitMode+0x5c>
 800a702:	7bfb      	ldrb	r3, [r7, #15]
 800a704:	2b03      	cmp	r3, #3
 800a706:	d1e7      	bne.n	800a6d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a708:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a720:	4b1a      	ldr	r3, [pc, #104]	@ (800a78c <RTC_ExitInitMode+0x78>)
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	4a19      	ldr	r2, [pc, #100]	@ (800a78c <RTC_ExitInitMode+0x78>)
 800a726:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a72a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a72c:	4b17      	ldr	r3, [pc, #92]	@ (800a78c <RTC_ExitInitMode+0x78>)
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	f003 0320 	and.w	r3, r3, #32
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10c      	bne.n	800a752 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7ff ff93 	bl	800a664 <HAL_RTC_WaitForSynchro>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d01e      	beq.n	800a782 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2203      	movs	r2, #3
 800a748:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	73fb      	strb	r3, [r7, #15]
 800a750:	e017      	b.n	800a782 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a752:	4b0e      	ldr	r3, [pc, #56]	@ (800a78c <RTC_ExitInitMode+0x78>)
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	4a0d      	ldr	r2, [pc, #52]	@ (800a78c <RTC_ExitInitMode+0x78>)
 800a758:	f023 0320 	bic.w	r3, r3, #32
 800a75c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7ff ff80 	bl	800a664 <HAL_RTC_WaitForSynchro>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d005      	beq.n	800a776 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2203      	movs	r2, #3
 800a76e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800a772:	2303      	movs	r3, #3
 800a774:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a776:	4b05      	ldr	r3, [pc, #20]	@ (800a78c <RTC_ExitInitMode+0x78>)
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	4a04      	ldr	r2, [pc, #16]	@ (800a78c <RTC_ExitInitMode+0x78>)
 800a77c:	f043 0320 	orr.w	r3, r3, #32
 800a780:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a782:	7bfb      	ldrb	r3, [r7, #15]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	58004000 	.word	0x58004000

0800a790 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08a      	sub	sp, #40	@ 0x28
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e28e      	b.n	800acc0 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a7a2:	f7f8 faa3 	bl	8002cec <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d113      	bne.n	800a7d8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a96      	ldr	r2, [pc, #600]	@ (800aa10 <HAL_SAI_Init+0x280>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d004      	beq.n	800a7c4 <HAL_SAI_Init+0x34>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a95      	ldr	r2, [pc, #596]	@ (800aa14 <HAL_SAI_Init+0x284>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d107      	bne.n	800a7d4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d103      	bne.n	800a7d4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e273      	b.n	800acc0 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a8c      	ldr	r2, [pc, #560]	@ (800aa10 <HAL_SAI_Init+0x280>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d004      	beq.n	800a7ec <HAL_SAI_Init+0x5c>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a8c      	ldr	r2, [pc, #560]	@ (800aa18 <HAL_SAI_Init+0x288>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d102      	bne.n	800a7f2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a7ec:	4b8b      	ldr	r3, [pc, #556]	@ (800aa1c <HAL_SAI_Init+0x28c>)
 800a7ee:	61bb      	str	r3, [r7, #24]
 800a7f0:	e028      	b.n	800a844 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a8a      	ldr	r2, [pc, #552]	@ (800aa20 <HAL_SAI_Init+0x290>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d004      	beq.n	800a806 <HAL_SAI_Init+0x76>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a88      	ldr	r2, [pc, #544]	@ (800aa24 <HAL_SAI_Init+0x294>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d102      	bne.n	800a80c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a806:	4b88      	ldr	r3, [pc, #544]	@ (800aa28 <HAL_SAI_Init+0x298>)
 800a808:	61bb      	str	r3, [r7, #24]
 800a80a:	e01b      	b.n	800a844 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a86      	ldr	r2, [pc, #536]	@ (800aa2c <HAL_SAI_Init+0x29c>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d004      	beq.n	800a820 <HAL_SAI_Init+0x90>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a85      	ldr	r2, [pc, #532]	@ (800aa30 <HAL_SAI_Init+0x2a0>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d102      	bne.n	800a826 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a820:	4b84      	ldr	r3, [pc, #528]	@ (800aa34 <HAL_SAI_Init+0x2a4>)
 800a822:	61bb      	str	r3, [r7, #24]
 800a824:	e00e      	b.n	800a844 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a7a      	ldr	r2, [pc, #488]	@ (800aa14 <HAL_SAI_Init+0x284>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d004      	beq.n	800a83a <HAL_SAI_Init+0xaa>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a80      	ldr	r2, [pc, #512]	@ (800aa38 <HAL_SAI_Init+0x2a8>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d102      	bne.n	800a840 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a83a:	4b80      	ldr	r3, [pc, #512]	@ (800aa3c <HAL_SAI_Init+0x2ac>)
 800a83c:	61bb      	str	r3, [r7, #24]
 800a83e:	e001      	b.n	800a844 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e23d      	b.n	800acc0 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7f7 ffdf 	bl	800281c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fa40 	bl	800ace4 <SAI_Disable>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e228      	b.n	800acc0 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2202      	movs	r2, #2
 800a872:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d00c      	beq.n	800a898 <HAL_SAI_Init+0x108>
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d80d      	bhi.n	800a89e <HAL_SAI_Init+0x10e>
 800a882:	2b00      	cmp	r3, #0
 800a884:	d002      	beq.n	800a88c <HAL_SAI_Init+0xfc>
 800a886:	2b01      	cmp	r3, #1
 800a888:	d003      	beq.n	800a892 <HAL_SAI_Init+0x102>
 800a88a:	e008      	b.n	800a89e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a890:	e008      	b.n	800a8a4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a892:	2310      	movs	r3, #16
 800a894:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a896:	e005      	b.n	800a8a4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a898:	2320      	movs	r3, #32
 800a89a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a89c:	e002      	b.n	800a8a4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a8a2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	2b05      	cmp	r3, #5
 800a8aa:	d832      	bhi.n	800a912 <HAL_SAI_Init+0x182>
 800a8ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b4 <HAL_SAI_Init+0x124>)
 800a8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b2:	bf00      	nop
 800a8b4:	0800a8cd 	.word	0x0800a8cd
 800a8b8:	0800a8d3 	.word	0x0800a8d3
 800a8bc:	0800a8db 	.word	0x0800a8db
 800a8c0:	0800a8e3 	.word	0x0800a8e3
 800a8c4:	0800a8f3 	.word	0x0800a8f3
 800a8c8:	0800a903 	.word	0x0800a903
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	61fb      	str	r3, [r7, #28]
      break;
 800a8d0:	e022      	b.n	800a918 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a8d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8d6:	61fb      	str	r3, [r7, #28]
      break;
 800a8d8:	e01e      	b.n	800a918 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a8da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8de:	61fb      	str	r3, [r7, #28]
      break;
 800a8e0:	e01a      	b.n	800a918 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a8e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8e6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	f043 0301 	orr.w	r3, r3, #1
 800a8ee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a8f0:	e012      	b.n	800a918 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a8f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8f6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fa:	f043 0302 	orr.w	r3, r3, #2
 800a8fe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a900:	e00a      	b.n	800a918 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a902:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a906:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90a:	f043 0303 	orr.w	r3, r3, #3
 800a90e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a910:	e002      	b.n	800a918 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	61fb      	str	r3, [r7, #28]
      break;
 800a916:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a91c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	2b00      	cmp	r3, #0
 800a924:	f000 80c5 	beq.w	800aab2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a37      	ldr	r2, [pc, #220]	@ (800aa10 <HAL_SAI_Init+0x280>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d004      	beq.n	800a940 <HAL_SAI_Init+0x1b0>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a37      	ldr	r2, [pc, #220]	@ (800aa18 <HAL_SAI_Init+0x288>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d106      	bne.n	800a94e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a940:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a944:	f04f 0100 	mov.w	r1, #0
 800a948:	f7fe fb16 	bl	8008f78 <HAL_RCCEx_GetPeriphCLKFreq>
 800a94c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a33      	ldr	r2, [pc, #204]	@ (800aa20 <HAL_SAI_Init+0x290>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d004      	beq.n	800a962 <HAL_SAI_Init+0x1d2>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a31      	ldr	r2, [pc, #196]	@ (800aa24 <HAL_SAI_Init+0x294>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d106      	bne.n	800a970 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a962:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a966:	f04f 0100 	mov.w	r1, #0
 800a96a:	f7fe fb05 	bl	8008f78 <HAL_RCCEx_GetPeriphCLKFreq>
 800a96e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a2d      	ldr	r2, [pc, #180]	@ (800aa2c <HAL_SAI_Init+0x29c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d004      	beq.n	800a984 <HAL_SAI_Init+0x1f4>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a2c      	ldr	r2, [pc, #176]	@ (800aa30 <HAL_SAI_Init+0x2a0>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d106      	bne.n	800a992 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a984:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a988:	f04f 0100 	mov.w	r1, #0
 800a98c:	f7fe faf4 	bl	8008f78 <HAL_RCCEx_GetPeriphCLKFreq>
 800a990:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a1f      	ldr	r2, [pc, #124]	@ (800aa14 <HAL_SAI_Init+0x284>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d106      	bne.n	800a9aa <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a99c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a9a0:	f04f 0100 	mov.w	r1, #0
 800a9a4:	f7fe fae8 	bl	8008f78 <HAL_RCCEx_GetPeriphCLKFreq>
 800a9a8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a22      	ldr	r2, [pc, #136]	@ (800aa38 <HAL_SAI_Init+0x2a8>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d106      	bne.n	800a9c2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a9b4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a9b8:	f04f 0100 	mov.w	r1, #0
 800a9bc:	f7fe fadc 	bl	8008f78 <HAL_RCCEx_GetPeriphCLKFreq>
 800a9c0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a9ca:	d139      	bne.n	800aa40 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9d0:	2b04      	cmp	r3, #4
 800a9d2:	d102      	bne.n	800a9da <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a9d4:	2340      	movs	r3, #64	@ 0x40
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	e00a      	b.n	800a9f0 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9de:	2b08      	cmp	r3, #8
 800a9e0:	d103      	bne.n	800a9ea <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a9e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9e6:	60fb      	str	r3, [r7, #12]
 800a9e8:	e002      	b.n	800a9f0 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ee:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4413      	add	r3, r2
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	fb02 f303 	mul.w	r3, r2, r3
 800aa06:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa0a:	613b      	str	r3, [r7, #16]
 800aa0c:	e030      	b.n	800aa70 <HAL_SAI_Init+0x2e0>
 800aa0e:	bf00      	nop
 800aa10:	40015804 	.word	0x40015804
 800aa14:	58005404 	.word	0x58005404
 800aa18:	40015824 	.word	0x40015824
 800aa1c:	40015800 	.word	0x40015800
 800aa20:	40015c04 	.word	0x40015c04
 800aa24:	40015c24 	.word	0x40015c24
 800aa28:	40015c00 	.word	0x40015c00
 800aa2c:	40016004 	.word	0x40016004
 800aa30:	40016024 	.word	0x40016024
 800aa34:	40016000 	.word	0x40016000
 800aa38:	58005424 	.word	0x58005424
 800aa3c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa48:	d101      	bne.n	800aa4e <HAL_SAI_Init+0x2be>
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	e000      	b.n	800aa50 <HAL_SAI_Init+0x2c0>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	005b      	lsls	r3, r3, #1
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	fb02 f303 	mul.w	r3, r2, r3
 800aa68:	021b      	lsls	r3, r3, #8
 800aa6a:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa6e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	4a95      	ldr	r2, [pc, #596]	@ (800acc8 <HAL_SAI_Init+0x538>)
 800aa74:	fba2 2303 	umull	r2, r3, r2, r3
 800aa78:	08da      	lsrs	r2, r3, #3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800aa7e:	6939      	ldr	r1, [r7, #16]
 800aa80:	4b91      	ldr	r3, [pc, #580]	@ (800acc8 <HAL_SAI_Init+0x538>)
 800aa82:	fba3 2301 	umull	r2, r3, r3, r1
 800aa86:	08da      	lsrs	r2, r3, #3
 800aa88:	4613      	mov	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4413      	add	r3, r2
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	1aca      	subs	r2, r1, r3
 800aa92:	2a08      	cmp	r2, #8
 800aa94:	d904      	bls.n	800aaa0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaa4:	2b04      	cmp	r3, #4
 800aaa6:	d104      	bne.n	800aab2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaac:	085a      	lsrs	r2, r3, #1
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d003      	beq.n	800aac2 <HAL_SAI_Init+0x332>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d109      	bne.n	800aad6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d101      	bne.n	800aace <HAL_SAI_Init+0x33e>
 800aaca:	2300      	movs	r3, #0
 800aacc:	e001      	b.n	800aad2 <HAL_SAI_Init+0x342>
 800aace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aad2:	623b      	str	r3, [r7, #32]
 800aad4:	e008      	b.n	800aae8 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d102      	bne.n	800aae4 <HAL_SAI_Init+0x354>
 800aade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aae2:	e000      	b.n	800aae6 <HAL_SAI_Init+0x356>
 800aae4:	2300      	movs	r3, #0
 800aae6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800aae8:	f7f8 f900 	bl	8002cec <HAL_GetREVID>
 800aaec:	4603      	mov	r3, r0
 800aaee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aaf2:	d331      	bcc.n	800ab58 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6819      	ldr	r1, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	4b73      	ldr	r3, [pc, #460]	@ (800accc <HAL_SAI_Init+0x53c>)
 800ab00:	400b      	ands	r3, r1
 800ab02:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6819      	ldr	r1, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab12:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab18:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab1e:	431a      	orrs	r2, r3
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800ab2c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab38:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3e:	051b      	lsls	r3, r3, #20
 800ab40:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ab46:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	601a      	str	r2, [r3, #0]
 800ab56:	e02d      	b.n	800abb4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6819      	ldr	r1, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	4b5b      	ldr	r3, [pc, #364]	@ (800acd0 <HAL_SAI_Init+0x540>)
 800ab64:	400b      	ands	r3, r1
 800ab66:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6819      	ldr	r1, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab76:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab7c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab82:	431a      	orrs	r2, r3
 800ab84:	6a3b      	ldr	r3, [r7, #32]
 800ab86:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800ab90:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab9c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba2:	051b      	lsls	r3, r3, #20
 800aba4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800abaa:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	430a      	orrs	r2, r1
 800abb2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6859      	ldr	r1, [r3, #4]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	4b45      	ldr	r3, [pc, #276]	@ (800acd4 <HAL_SAI_Init+0x544>)
 800abc0:	400b      	ands	r3, r1
 800abc2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6859      	ldr	r1, [r3, #4]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	69da      	ldr	r2, [r3, #28]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abd2:	431a      	orrs	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abd8:	431a      	orrs	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	6899      	ldr	r1, [r3, #8]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	4b3a      	ldr	r3, [pc, #232]	@ (800acd8 <HAL_SAI_Init+0x548>)
 800abee:	400b      	ands	r3, r1
 800abf0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6899      	ldr	r1, [r3, #8]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abfc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ac02:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800ac08:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800ac0e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac14:	3b01      	subs	r3, #1
 800ac16:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ac18:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	430a      	orrs	r2, r1
 800ac20:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68d9      	ldr	r1, [r3, #12]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800ac30:	400b      	ands	r3, r1
 800ac32:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68d9      	ldr	r1, [r3, #12]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac42:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac48:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ac4a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac50:	3b01      	subs	r3, #1
 800ac52:	021b      	lsls	r3, r3, #8
 800ac54:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	430a      	orrs	r2, r1
 800ac5c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a1e      	ldr	r2, [pc, #120]	@ (800acdc <HAL_SAI_Init+0x54c>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d004      	beq.n	800ac72 <HAL_SAI_Init+0x4e2>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a1c      	ldr	r2, [pc, #112]	@ (800ace0 <HAL_SAI_Init+0x550>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d119      	bne.n	800aca6 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac76:	f023 0201 	bic.w	r2, r3, #1
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d10e      	bne.n	800aca6 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac90:	3b01      	subs	r3, #1
 800ac92:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ac94:	431a      	orrs	r2, r3
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac9e:	f043 0201 	orr.w	r2, r3, #1
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3728      	adds	r7, #40	@ 0x28
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	cccccccd 	.word	0xcccccccd
 800accc:	f005c010 	.word	0xf005c010
 800acd0:	f805c010 	.word	0xf805c010
 800acd4:	ffff1ff0 	.word	0xffff1ff0
 800acd8:	fff88000 	.word	0xfff88000
 800acdc:	40015804 	.word	0x40015804
 800ace0:	58005404 	.word	0x58005404

0800ace4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800acec:	4b18      	ldr	r3, [pc, #96]	@ (800ad50 <SAI_Disable+0x6c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a18      	ldr	r2, [pc, #96]	@ (800ad54 <SAI_Disable+0x70>)
 800acf2:	fba2 2303 	umull	r2, r3, r2, r3
 800acf6:	0b1b      	lsrs	r3, r3, #12
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ad0e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10a      	bne.n	800ad2c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	72fb      	strb	r3, [r7, #11]
      break;
 800ad2a:	e009      	b.n	800ad40 <SAI_Disable+0x5c>
    }
    count--;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1e7      	bne.n	800ad10 <SAI_Disable+0x2c>

  return status;
 800ad40:	7afb      	ldrb	r3, [r7, #11]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3714      	adds	r7, #20
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	24000000 	.word	0x24000000
 800ad54:	95cbec1b 	.word	0x95cbec1b

0800ad58 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e02b      	b.n	800adc4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d106      	bne.n	800ad86 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7f7 fd41 	bl	8002808 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2202      	movs	r2, #2
 800ad8a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3304      	adds	r3, #4
 800ad96:	4619      	mov	r1, r3
 800ad98:	4610      	mov	r0, r2
 800ad9a:	f001 fd95 	bl	800c8c8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6818      	ldr	r0, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	461a      	mov	r2, r3
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	f001 fde9 	bl	800c980 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800adae:	4b07      	ldr	r3, [pc, #28]	@ (800adcc <HAL_SDRAM_Init+0x74>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a06      	ldr	r2, [pc, #24]	@ (800adcc <HAL_SDRAM_Init+0x74>)
 800adb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800adb8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2201      	movs	r2, #1
 800adbe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	52004000 	.word	0x52004000

0800add0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e10f      	b.n	800b002 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a87      	ldr	r2, [pc, #540]	@ (800b00c <HAL_SPI_Init+0x23c>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d00f      	beq.n	800ae12 <HAL_SPI_Init+0x42>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a86      	ldr	r2, [pc, #536]	@ (800b010 <HAL_SPI_Init+0x240>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d00a      	beq.n	800ae12 <HAL_SPI_Init+0x42>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a84      	ldr	r2, [pc, #528]	@ (800b014 <HAL_SPI_Init+0x244>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d005      	beq.n	800ae12 <HAL_SPI_Init+0x42>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	2b0f      	cmp	r3, #15
 800ae0c:	d901      	bls.n	800ae12 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e0f7      	b.n	800b002 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f900 	bl	800b018 <SPI_GetPacketSize>
 800ae18:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a7b      	ldr	r2, [pc, #492]	@ (800b00c <HAL_SPI_Init+0x23c>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d00c      	beq.n	800ae3e <HAL_SPI_Init+0x6e>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a79      	ldr	r2, [pc, #484]	@ (800b010 <HAL_SPI_Init+0x240>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d007      	beq.n	800ae3e <HAL_SPI_Init+0x6e>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a78      	ldr	r2, [pc, #480]	@ (800b014 <HAL_SPI_Init+0x244>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d002      	beq.n	800ae3e <HAL_SPI_Init+0x6e>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b08      	cmp	r3, #8
 800ae3c:	d811      	bhi.n	800ae62 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ae42:	4a72      	ldr	r2, [pc, #456]	@ (800b00c <HAL_SPI_Init+0x23c>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d009      	beq.n	800ae5c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a70      	ldr	r2, [pc, #448]	@ (800b010 <HAL_SPI_Init+0x240>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d004      	beq.n	800ae5c <HAL_SPI_Init+0x8c>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a6f      	ldr	r2, [pc, #444]	@ (800b014 <HAL_SPI_Init+0x244>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d104      	bne.n	800ae66 <HAL_SPI_Init+0x96>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2b10      	cmp	r3, #16
 800ae60:	d901      	bls.n	800ae66 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e0cd      	b.n	800b002 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d106      	bne.n	800ae80 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7f7 fa08 	bl	8002290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2202      	movs	r2, #2
 800ae84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f022 0201 	bic.w	r2, r2, #1
 800ae96:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800aea2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aeac:	d119      	bne.n	800aee2 <HAL_SPI_Init+0x112>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aeb6:	d103      	bne.n	800aec0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d008      	beq.n	800aed2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10c      	bne.n	800aee2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aecc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aed0:	d107      	bne.n	800aee2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aee0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00f      	beq.n	800af0e <HAL_SPI_Init+0x13e>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	2b06      	cmp	r3, #6
 800aef4:	d90b      	bls.n	800af0e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	430a      	orrs	r2, r1
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	e007      	b.n	800af1e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800af1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	69da      	ldr	r2, [r3, #28]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af26:	431a      	orrs	r2, r3
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	431a      	orrs	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af30:	ea42 0103 	orr.w	r1, r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	68da      	ldr	r2, [r3, #12]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	430a      	orrs	r2, r1
 800af3e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af48:	431a      	orrs	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af4e:	431a      	orrs	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	431a      	orrs	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	431a      	orrs	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	695b      	ldr	r3, [r3, #20]
 800af60:	431a      	orrs	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	431a      	orrs	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	431a      	orrs	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af72:	431a      	orrs	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	431a      	orrs	r2, r3
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af7e:	ea42 0103 	orr.w	r1, r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	430a      	orrs	r2, r1
 800af8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d113      	bne.n	800afbe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afa8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800afbc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f022 0201 	bic.w	r2, r2, #1
 800afcc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	430a      	orrs	r2, r1
 800afee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	40013000 	.word	0x40013000
 800b010:	40003800 	.word	0x40003800
 800b014:	40003c00 	.word	0x40003c00

0800b018 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b024:	095b      	lsrs	r3, r3, #5
 800b026:	3301      	adds	r3, #1
 800b028:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	3301      	adds	r3, #1
 800b030:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	3307      	adds	r3, #7
 800b036:	08db      	lsrs	r3, r3, #3
 800b038:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr

0800b04e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e049      	b.n	800b0f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b066:	b2db      	uxtb	r3, r3
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d106      	bne.n	800b07a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f841 	bl	800b0fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2202      	movs	r2, #2
 800b07e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3304      	adds	r3, #4
 800b08a:	4619      	mov	r1, r3
 800b08c:	4610      	mov	r0, r2
 800b08e:	f000 f9ff 	bl	800b490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b01      	cmp	r3, #1
 800b122:	d001      	beq.n	800b128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	e054      	b.n	800b1d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68da      	ldr	r2, [r3, #12]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f042 0201 	orr.w	r2, r2, #1
 800b13e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a26      	ldr	r2, [pc, #152]	@ (800b1e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d022      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b152:	d01d      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a22      	ldr	r2, [pc, #136]	@ (800b1e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d018      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a21      	ldr	r2, [pc, #132]	@ (800b1e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d013      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a1f      	ldr	r2, [pc, #124]	@ (800b1ec <HAL_TIM_Base_Start_IT+0xdc>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d00e      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a1e      	ldr	r2, [pc, #120]	@ (800b1f0 <HAL_TIM_Base_Start_IT+0xe0>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d009      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a1c      	ldr	r2, [pc, #112]	@ (800b1f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d004      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a1b      	ldr	r2, [pc, #108]	@ (800b1f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d115      	bne.n	800b1bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	689a      	ldr	r2, [r3, #8]
 800b196:	4b19      	ldr	r3, [pc, #100]	@ (800b1fc <HAL_TIM_Base_Start_IT+0xec>)
 800b198:	4013      	ands	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b06      	cmp	r3, #6
 800b1a0:	d015      	beq.n	800b1ce <HAL_TIM_Base_Start_IT+0xbe>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1a8:	d011      	beq.n	800b1ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f042 0201 	orr.w	r2, r2, #1
 800b1b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1ba:	e008      	b.n	800b1ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f042 0201 	orr.w	r2, r2, #1
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	e000      	b.n	800b1d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	40010000 	.word	0x40010000
 800b1e4:	40000400 	.word	0x40000400
 800b1e8:	40000800 	.word	0x40000800
 800b1ec:	40000c00 	.word	0x40000c00
 800b1f0:	40010400 	.word	0x40010400
 800b1f4:	40001800 	.word	0x40001800
 800b1f8:	40014000 	.word	0x40014000
 800b1fc:	00010007 	.word	0x00010007

0800b200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	f003 0302 	and.w	r3, r3, #2
 800b212:	2b02      	cmp	r3, #2
 800b214:	d122      	bne.n	800b25c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	f003 0302 	and.w	r3, r3, #2
 800b220:	2b02      	cmp	r3, #2
 800b222:	d11b      	bne.n	800b25c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f06f 0202 	mvn.w	r2, #2
 800b22c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	f003 0303 	and.w	r3, r3, #3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f905 	bl	800b452 <HAL_TIM_IC_CaptureCallback>
 800b248:	e005      	b.n	800b256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f8f7 	bl	800b43e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f908 	bl	800b466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	f003 0304 	and.w	r3, r3, #4
 800b266:	2b04      	cmp	r3, #4
 800b268:	d122      	bne.n	800b2b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	f003 0304 	and.w	r3, r3, #4
 800b274:	2b04      	cmp	r3, #4
 800b276:	d11b      	bne.n	800b2b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f06f 0204 	mvn.w	r2, #4
 800b280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2202      	movs	r2, #2
 800b286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b292:	2b00      	cmp	r3, #0
 800b294:	d003      	beq.n	800b29e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f8db 	bl	800b452 <HAL_TIM_IC_CaptureCallback>
 800b29c:	e005      	b.n	800b2aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f8cd 	bl	800b43e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f8de 	bl	800b466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	f003 0308 	and.w	r3, r3, #8
 800b2ba:	2b08      	cmp	r3, #8
 800b2bc:	d122      	bne.n	800b304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f003 0308 	and.w	r3, r3, #8
 800b2c8:	2b08      	cmp	r3, #8
 800b2ca:	d11b      	bne.n	800b304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f06f 0208 	mvn.w	r2, #8
 800b2d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2204      	movs	r2, #4
 800b2da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	69db      	ldr	r3, [r3, #28]
 800b2e2:	f003 0303 	and.w	r3, r3, #3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d003      	beq.n	800b2f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f8b1 	bl	800b452 <HAL_TIM_IC_CaptureCallback>
 800b2f0:	e005      	b.n	800b2fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f8a3 	bl	800b43e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f8b4 	bl	800b466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	f003 0310 	and.w	r3, r3, #16
 800b30e:	2b10      	cmp	r3, #16
 800b310:	d122      	bne.n	800b358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	f003 0310 	and.w	r3, r3, #16
 800b31c:	2b10      	cmp	r3, #16
 800b31e:	d11b      	bne.n	800b358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f06f 0210 	mvn.w	r2, #16
 800b328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2208      	movs	r2, #8
 800b32e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d003      	beq.n	800b346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f887 	bl	800b452 <HAL_TIM_IC_CaptureCallback>
 800b344:	e005      	b.n	800b352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f879 	bl	800b43e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f88a 	bl	800b466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	2b01      	cmp	r3, #1
 800b364:	d10e      	bne.n	800b384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	f003 0301 	and.w	r3, r3, #1
 800b370:	2b01      	cmp	r3, #1
 800b372:	d107      	bne.n	800b384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f06f 0201 	mvn.w	r2, #1
 800b37c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7f6 f9ac 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b38e:	2b80      	cmp	r3, #128	@ 0x80
 800b390:	d10e      	bne.n	800b3b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b39c:	2b80      	cmp	r3, #128	@ 0x80
 800b39e:	d107      	bne.n	800b3b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b3a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f914 	bl	800b5d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3be:	d10e      	bne.n	800b3de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3ca:	2b80      	cmp	r3, #128	@ 0x80
 800b3cc:	d107      	bne.n	800b3de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b3d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 f907 	bl	800b5ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3e8:	2b40      	cmp	r3, #64	@ 0x40
 800b3ea:	d10e      	bne.n	800b40a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3f6:	2b40      	cmp	r3, #64	@ 0x40
 800b3f8:	d107      	bne.n	800b40a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f838 	bl	800b47a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	f003 0320 	and.w	r3, r3, #32
 800b414:	2b20      	cmp	r3, #32
 800b416:	d10e      	bne.n	800b436 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	f003 0320 	and.w	r3, r3, #32
 800b422:	2b20      	cmp	r3, #32
 800b424:	d107      	bne.n	800b436 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f06f 0220 	mvn.w	r2, #32
 800b42e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 f8c7 	bl	800b5c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b436:	bf00      	nop
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b43e:	b480      	push	{r7}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b446:	bf00      	nop
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b452:	b480      	push	{r7}
 800b454:	b083      	sub	sp, #12
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b45a:	bf00      	nop
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b466:	b480      	push	{r7}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b46e:	bf00      	nop
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b47a:	b480      	push	{r7}
 800b47c:	b083      	sub	sp, #12
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b482:	bf00      	nop
 800b484:	370c      	adds	r7, #12
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
	...

0800b490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a40      	ldr	r2, [pc, #256]	@ (800b5a4 <TIM_Base_SetConfig+0x114>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d013      	beq.n	800b4d0 <TIM_Base_SetConfig+0x40>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4ae:	d00f      	beq.n	800b4d0 <TIM_Base_SetConfig+0x40>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a3d      	ldr	r2, [pc, #244]	@ (800b5a8 <TIM_Base_SetConfig+0x118>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d00b      	beq.n	800b4d0 <TIM_Base_SetConfig+0x40>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a3c      	ldr	r2, [pc, #240]	@ (800b5ac <TIM_Base_SetConfig+0x11c>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d007      	beq.n	800b4d0 <TIM_Base_SetConfig+0x40>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a3b      	ldr	r2, [pc, #236]	@ (800b5b0 <TIM_Base_SetConfig+0x120>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d003      	beq.n	800b4d0 <TIM_Base_SetConfig+0x40>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a3a      	ldr	r2, [pc, #232]	@ (800b5b4 <TIM_Base_SetConfig+0x124>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d108      	bne.n	800b4e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a2f      	ldr	r2, [pc, #188]	@ (800b5a4 <TIM_Base_SetConfig+0x114>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d01f      	beq.n	800b52a <TIM_Base_SetConfig+0x9a>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4f0:	d01b      	beq.n	800b52a <TIM_Base_SetConfig+0x9a>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a2c      	ldr	r2, [pc, #176]	@ (800b5a8 <TIM_Base_SetConfig+0x118>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d017      	beq.n	800b52a <TIM_Base_SetConfig+0x9a>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a2b      	ldr	r2, [pc, #172]	@ (800b5ac <TIM_Base_SetConfig+0x11c>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d013      	beq.n	800b52a <TIM_Base_SetConfig+0x9a>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a2a      	ldr	r2, [pc, #168]	@ (800b5b0 <TIM_Base_SetConfig+0x120>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d00f      	beq.n	800b52a <TIM_Base_SetConfig+0x9a>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a29      	ldr	r2, [pc, #164]	@ (800b5b4 <TIM_Base_SetConfig+0x124>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d00b      	beq.n	800b52a <TIM_Base_SetConfig+0x9a>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a28      	ldr	r2, [pc, #160]	@ (800b5b8 <TIM_Base_SetConfig+0x128>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d007      	beq.n	800b52a <TIM_Base_SetConfig+0x9a>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a27      	ldr	r2, [pc, #156]	@ (800b5bc <TIM_Base_SetConfig+0x12c>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d003      	beq.n	800b52a <TIM_Base_SetConfig+0x9a>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a26      	ldr	r2, [pc, #152]	@ (800b5c0 <TIM_Base_SetConfig+0x130>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d108      	bne.n	800b53c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	4313      	orrs	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	4313      	orrs	r3, r2
 800b548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	689a      	ldr	r2, [r3, #8]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a10      	ldr	r2, [pc, #64]	@ (800b5a4 <TIM_Base_SetConfig+0x114>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d00f      	beq.n	800b588 <TIM_Base_SetConfig+0xf8>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a12      	ldr	r2, [pc, #72]	@ (800b5b4 <TIM_Base_SetConfig+0x124>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d00b      	beq.n	800b588 <TIM_Base_SetConfig+0xf8>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a11      	ldr	r2, [pc, #68]	@ (800b5b8 <TIM_Base_SetConfig+0x128>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d007      	beq.n	800b588 <TIM_Base_SetConfig+0xf8>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a10      	ldr	r2, [pc, #64]	@ (800b5bc <TIM_Base_SetConfig+0x12c>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d003      	beq.n	800b588 <TIM_Base_SetConfig+0xf8>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a0f      	ldr	r2, [pc, #60]	@ (800b5c0 <TIM_Base_SetConfig+0x130>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d103      	bne.n	800b590 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	691a      	ldr	r2, [r3, #16]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	615a      	str	r2, [r3, #20]
}
 800b596:	bf00      	nop
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	40010000 	.word	0x40010000
 800b5a8:	40000400 	.word	0x40000400
 800b5ac:	40000800 	.word	0x40000800
 800b5b0:	40000c00 	.word	0x40000c00
 800b5b4:	40010400 	.word	0x40010400
 800b5b8:	40014000 	.word	0x40014000
 800b5bc:	40014400 	.word	0x40014400
 800b5c0:	40014800 	.word	0x40014800

0800b5c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5cc:	bf00      	nop
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e042      	b.n	800b698 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d106      	bne.n	800b62a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7f6 fefd 	bl	8002424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2224      	movs	r2, #36	@ 0x24
 800b62e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f022 0201 	bic.w	r2, r2, #1
 800b640:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f8ba 	bl	800b7bc <UART_SetConfig>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d101      	bne.n	800b652 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e022      	b.n	800b698 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fe16 	bl	800c28c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b66e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	689a      	ldr	r2, [r3, #8]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b67e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f042 0201 	orr.w	r2, r2, #1
 800b68e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fe9d 	bl	800c3d0 <UART_CheckIdleState>
 800b696:	4603      	mov	r3, r0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08a      	sub	sp, #40	@ 0x28
 800b6a4:	af02      	add	r7, sp, #8
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	603b      	str	r3, [r7, #0]
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6b6:	2b20      	cmp	r3, #32
 800b6b8:	d17b      	bne.n	800b7b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <HAL_UART_Transmit+0x26>
 800b6c0:	88fb      	ldrh	r3, [r7, #6]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d101      	bne.n	800b6ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e074      	b.n	800b7b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2221      	movs	r2, #33	@ 0x21
 800b6d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b6da:	f7f7 fad7 	bl	8002c8c <HAL_GetTick>
 800b6de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	88fa      	ldrh	r2, [r7, #6]
 800b6e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	88fa      	ldrh	r2, [r7, #6]
 800b6ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6f8:	d108      	bne.n	800b70c <HAL_UART_Transmit+0x6c>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d104      	bne.n	800b70c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b702:	2300      	movs	r3, #0
 800b704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	61bb      	str	r3, [r7, #24]
 800b70a:	e003      	b.n	800b714 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b710:	2300      	movs	r3, #0
 800b712:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b714:	e030      	b.n	800b778 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2200      	movs	r2, #0
 800b71e:	2180      	movs	r1, #128	@ 0x80
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 feff 	bl	800c524 <UART_WaitOnFlagUntilTimeout>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d005      	beq.n	800b738 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2220      	movs	r2, #32
 800b730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b734:	2303      	movs	r3, #3
 800b736:	e03d      	b.n	800b7b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10b      	bne.n	800b756 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	881b      	ldrh	r3, [r3, #0]
 800b742:	461a      	mov	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b74c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	3302      	adds	r3, #2
 800b752:	61bb      	str	r3, [r7, #24]
 800b754:	e007      	b.n	800b766 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	781a      	ldrb	r2, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	3301      	adds	r3, #1
 800b764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	3b01      	subs	r3, #1
 800b770:	b29a      	uxth	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b77e:	b29b      	uxth	r3, r3
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1c8      	bne.n	800b716 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	2200      	movs	r2, #0
 800b78c:	2140      	movs	r1, #64	@ 0x40
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 fec8 	bl	800c524 <UART_WaitOnFlagUntilTimeout>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d005      	beq.n	800b7a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2220      	movs	r2, #32
 800b79e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	e006      	b.n	800b7b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2220      	movs	r2, #32
 800b7aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	e000      	b.n	800b7b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b7b2:	2302      	movs	r3, #2
  }
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3720      	adds	r7, #32
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7c0:	b092      	sub	sp, #72	@ 0x48
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	689a      	ldr	r2, [r3, #8]
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	431a      	orrs	r2, r3
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	431a      	orrs	r2, r3
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	69db      	ldr	r3, [r3, #28]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	4bbe      	ldr	r3, [pc, #760]	@ (800bae4 <UART_SetConfig+0x328>)
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	6812      	ldr	r2, [r2, #0]
 800b7f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b7f4:	430b      	orrs	r3, r1
 800b7f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	68da      	ldr	r2, [r3, #12]
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	430a      	orrs	r2, r1
 800b80c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4ab3      	ldr	r2, [pc, #716]	@ (800bae8 <UART_SetConfig+0x32c>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d004      	beq.n	800b828 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	6a1b      	ldr	r3, [r3, #32]
 800b822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b824:	4313      	orrs	r3, r2
 800b826:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	689a      	ldr	r2, [r3, #8]
 800b82e:	4baf      	ldr	r3, [pc, #700]	@ (800baec <UART_SetConfig+0x330>)
 800b830:	4013      	ands	r3, r2
 800b832:	697a      	ldr	r2, [r7, #20]
 800b834:	6812      	ldr	r2, [r2, #0]
 800b836:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b838:	430b      	orrs	r3, r1
 800b83a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b842:	f023 010f 	bic.w	r1, r3, #15
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	430a      	orrs	r2, r1
 800b850:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4aa6      	ldr	r2, [pc, #664]	@ (800baf0 <UART_SetConfig+0x334>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d177      	bne.n	800b94c <UART_SetConfig+0x190>
 800b85c:	4ba5      	ldr	r3, [pc, #660]	@ (800baf4 <UART_SetConfig+0x338>)
 800b85e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b860:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b864:	2b28      	cmp	r3, #40	@ 0x28
 800b866:	d86d      	bhi.n	800b944 <UART_SetConfig+0x188>
 800b868:	a201      	add	r2, pc, #4	@ (adr r2, 800b870 <UART_SetConfig+0xb4>)
 800b86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86e:	bf00      	nop
 800b870:	0800b915 	.word	0x0800b915
 800b874:	0800b945 	.word	0x0800b945
 800b878:	0800b945 	.word	0x0800b945
 800b87c:	0800b945 	.word	0x0800b945
 800b880:	0800b945 	.word	0x0800b945
 800b884:	0800b945 	.word	0x0800b945
 800b888:	0800b945 	.word	0x0800b945
 800b88c:	0800b945 	.word	0x0800b945
 800b890:	0800b91d 	.word	0x0800b91d
 800b894:	0800b945 	.word	0x0800b945
 800b898:	0800b945 	.word	0x0800b945
 800b89c:	0800b945 	.word	0x0800b945
 800b8a0:	0800b945 	.word	0x0800b945
 800b8a4:	0800b945 	.word	0x0800b945
 800b8a8:	0800b945 	.word	0x0800b945
 800b8ac:	0800b945 	.word	0x0800b945
 800b8b0:	0800b925 	.word	0x0800b925
 800b8b4:	0800b945 	.word	0x0800b945
 800b8b8:	0800b945 	.word	0x0800b945
 800b8bc:	0800b945 	.word	0x0800b945
 800b8c0:	0800b945 	.word	0x0800b945
 800b8c4:	0800b945 	.word	0x0800b945
 800b8c8:	0800b945 	.word	0x0800b945
 800b8cc:	0800b945 	.word	0x0800b945
 800b8d0:	0800b92d 	.word	0x0800b92d
 800b8d4:	0800b945 	.word	0x0800b945
 800b8d8:	0800b945 	.word	0x0800b945
 800b8dc:	0800b945 	.word	0x0800b945
 800b8e0:	0800b945 	.word	0x0800b945
 800b8e4:	0800b945 	.word	0x0800b945
 800b8e8:	0800b945 	.word	0x0800b945
 800b8ec:	0800b945 	.word	0x0800b945
 800b8f0:	0800b935 	.word	0x0800b935
 800b8f4:	0800b945 	.word	0x0800b945
 800b8f8:	0800b945 	.word	0x0800b945
 800b8fc:	0800b945 	.word	0x0800b945
 800b900:	0800b945 	.word	0x0800b945
 800b904:	0800b945 	.word	0x0800b945
 800b908:	0800b945 	.word	0x0800b945
 800b90c:	0800b945 	.word	0x0800b945
 800b910:	0800b93d 	.word	0x0800b93d
 800b914:	2301      	movs	r3, #1
 800b916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b91a:	e222      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b91c:	2304      	movs	r3, #4
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b922:	e21e      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b924:	2308      	movs	r3, #8
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92a:	e21a      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b92c:	2310      	movs	r3, #16
 800b92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b932:	e216      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b934:	2320      	movs	r3, #32
 800b936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b93a:	e212      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b93c:	2340      	movs	r3, #64	@ 0x40
 800b93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b942:	e20e      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b944:	2380      	movs	r3, #128	@ 0x80
 800b946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94a:	e20a      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a69      	ldr	r2, [pc, #420]	@ (800baf8 <UART_SetConfig+0x33c>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d130      	bne.n	800b9b8 <UART_SetConfig+0x1fc>
 800b956:	4b67      	ldr	r3, [pc, #412]	@ (800baf4 <UART_SetConfig+0x338>)
 800b958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b95a:	f003 0307 	and.w	r3, r3, #7
 800b95e:	2b05      	cmp	r3, #5
 800b960:	d826      	bhi.n	800b9b0 <UART_SetConfig+0x1f4>
 800b962:	a201      	add	r2, pc, #4	@ (adr r2, 800b968 <UART_SetConfig+0x1ac>)
 800b964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b968:	0800b981 	.word	0x0800b981
 800b96c:	0800b989 	.word	0x0800b989
 800b970:	0800b991 	.word	0x0800b991
 800b974:	0800b999 	.word	0x0800b999
 800b978:	0800b9a1 	.word	0x0800b9a1
 800b97c:	0800b9a9 	.word	0x0800b9a9
 800b980:	2300      	movs	r3, #0
 800b982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b986:	e1ec      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b988:	2304      	movs	r3, #4
 800b98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98e:	e1e8      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b990:	2308      	movs	r3, #8
 800b992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b996:	e1e4      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b998:	2310      	movs	r3, #16
 800b99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b99e:	e1e0      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b9a0:	2320      	movs	r3, #32
 800b9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9a6:	e1dc      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b9a8:	2340      	movs	r3, #64	@ 0x40
 800b9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ae:	e1d8      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b9b0:	2380      	movs	r3, #128	@ 0x80
 800b9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9b6:	e1d4      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a4f      	ldr	r2, [pc, #316]	@ (800bafc <UART_SetConfig+0x340>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d130      	bne.n	800ba24 <UART_SetConfig+0x268>
 800b9c2:	4b4c      	ldr	r3, [pc, #304]	@ (800baf4 <UART_SetConfig+0x338>)
 800b9c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9c6:	f003 0307 	and.w	r3, r3, #7
 800b9ca:	2b05      	cmp	r3, #5
 800b9cc:	d826      	bhi.n	800ba1c <UART_SetConfig+0x260>
 800b9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d4 <UART_SetConfig+0x218>)
 800b9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d4:	0800b9ed 	.word	0x0800b9ed
 800b9d8:	0800b9f5 	.word	0x0800b9f5
 800b9dc:	0800b9fd 	.word	0x0800b9fd
 800b9e0:	0800ba05 	.word	0x0800ba05
 800b9e4:	0800ba0d 	.word	0x0800ba0d
 800b9e8:	0800ba15 	.word	0x0800ba15
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9f2:	e1b6      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b9f4:	2304      	movs	r3, #4
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fa:	e1b2      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800b9fc:	2308      	movs	r3, #8
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba02:	e1ae      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba04:	2310      	movs	r3, #16
 800ba06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba0a:	e1aa      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba0c:	2320      	movs	r3, #32
 800ba0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba12:	e1a6      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba14:	2340      	movs	r3, #64	@ 0x40
 800ba16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba1a:	e1a2      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba1c:	2380      	movs	r3, #128	@ 0x80
 800ba1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba22:	e19e      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a35      	ldr	r2, [pc, #212]	@ (800bb00 <UART_SetConfig+0x344>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d130      	bne.n	800ba90 <UART_SetConfig+0x2d4>
 800ba2e:	4b31      	ldr	r3, [pc, #196]	@ (800baf4 <UART_SetConfig+0x338>)
 800ba30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba32:	f003 0307 	and.w	r3, r3, #7
 800ba36:	2b05      	cmp	r3, #5
 800ba38:	d826      	bhi.n	800ba88 <UART_SetConfig+0x2cc>
 800ba3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba40 <UART_SetConfig+0x284>)
 800ba3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba40:	0800ba59 	.word	0x0800ba59
 800ba44:	0800ba61 	.word	0x0800ba61
 800ba48:	0800ba69 	.word	0x0800ba69
 800ba4c:	0800ba71 	.word	0x0800ba71
 800ba50:	0800ba79 	.word	0x0800ba79
 800ba54:	0800ba81 	.word	0x0800ba81
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba5e:	e180      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba60:	2304      	movs	r3, #4
 800ba62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba66:	e17c      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba68:	2308      	movs	r3, #8
 800ba6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6e:	e178      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba70:	2310      	movs	r3, #16
 800ba72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba76:	e174      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba78:	2320      	movs	r3, #32
 800ba7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba7e:	e170      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba80:	2340      	movs	r3, #64	@ 0x40
 800ba82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba86:	e16c      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba88:	2380      	movs	r3, #128	@ 0x80
 800ba8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba8e:	e168      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a1b      	ldr	r2, [pc, #108]	@ (800bb04 <UART_SetConfig+0x348>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d142      	bne.n	800bb20 <UART_SetConfig+0x364>
 800ba9a:	4b16      	ldr	r3, [pc, #88]	@ (800baf4 <UART_SetConfig+0x338>)
 800ba9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba9e:	f003 0307 	and.w	r3, r3, #7
 800baa2:	2b05      	cmp	r3, #5
 800baa4:	d838      	bhi.n	800bb18 <UART_SetConfig+0x35c>
 800baa6:	a201      	add	r2, pc, #4	@ (adr r2, 800baac <UART_SetConfig+0x2f0>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800bac5 	.word	0x0800bac5
 800bab0:	0800bacd 	.word	0x0800bacd
 800bab4:	0800bad5 	.word	0x0800bad5
 800bab8:	0800badd 	.word	0x0800badd
 800babc:	0800bb09 	.word	0x0800bb09
 800bac0:	0800bb11 	.word	0x0800bb11
 800bac4:	2300      	movs	r3, #0
 800bac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baca:	e14a      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bacc:	2304      	movs	r3, #4
 800bace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad2:	e146      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bad4:	2308      	movs	r3, #8
 800bad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bada:	e142      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800badc:	2310      	movs	r3, #16
 800bade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bae2:	e13e      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bae4:	cfff69f3 	.word	0xcfff69f3
 800bae8:	58000c00 	.word	0x58000c00
 800baec:	11fff4ff 	.word	0x11fff4ff
 800baf0:	40011000 	.word	0x40011000
 800baf4:	58024400 	.word	0x58024400
 800baf8:	40004400 	.word	0x40004400
 800bafc:	40004800 	.word	0x40004800
 800bb00:	40004c00 	.word	0x40004c00
 800bb04:	40005000 	.word	0x40005000
 800bb08:	2320      	movs	r3, #32
 800bb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb0e:	e128      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bb10:	2340      	movs	r3, #64	@ 0x40
 800bb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb16:	e124      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bb18:	2380      	movs	r3, #128	@ 0x80
 800bb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1e:	e120      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4acb      	ldr	r2, [pc, #812]	@ (800be54 <UART_SetConfig+0x698>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d176      	bne.n	800bc18 <UART_SetConfig+0x45c>
 800bb2a:	4bcb      	ldr	r3, [pc, #812]	@ (800be58 <UART_SetConfig+0x69c>)
 800bb2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb32:	2b28      	cmp	r3, #40	@ 0x28
 800bb34:	d86c      	bhi.n	800bc10 <UART_SetConfig+0x454>
 800bb36:	a201      	add	r2, pc, #4	@ (adr r2, 800bb3c <UART_SetConfig+0x380>)
 800bb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3c:	0800bbe1 	.word	0x0800bbe1
 800bb40:	0800bc11 	.word	0x0800bc11
 800bb44:	0800bc11 	.word	0x0800bc11
 800bb48:	0800bc11 	.word	0x0800bc11
 800bb4c:	0800bc11 	.word	0x0800bc11
 800bb50:	0800bc11 	.word	0x0800bc11
 800bb54:	0800bc11 	.word	0x0800bc11
 800bb58:	0800bc11 	.word	0x0800bc11
 800bb5c:	0800bbe9 	.word	0x0800bbe9
 800bb60:	0800bc11 	.word	0x0800bc11
 800bb64:	0800bc11 	.word	0x0800bc11
 800bb68:	0800bc11 	.word	0x0800bc11
 800bb6c:	0800bc11 	.word	0x0800bc11
 800bb70:	0800bc11 	.word	0x0800bc11
 800bb74:	0800bc11 	.word	0x0800bc11
 800bb78:	0800bc11 	.word	0x0800bc11
 800bb7c:	0800bbf1 	.word	0x0800bbf1
 800bb80:	0800bc11 	.word	0x0800bc11
 800bb84:	0800bc11 	.word	0x0800bc11
 800bb88:	0800bc11 	.word	0x0800bc11
 800bb8c:	0800bc11 	.word	0x0800bc11
 800bb90:	0800bc11 	.word	0x0800bc11
 800bb94:	0800bc11 	.word	0x0800bc11
 800bb98:	0800bc11 	.word	0x0800bc11
 800bb9c:	0800bbf9 	.word	0x0800bbf9
 800bba0:	0800bc11 	.word	0x0800bc11
 800bba4:	0800bc11 	.word	0x0800bc11
 800bba8:	0800bc11 	.word	0x0800bc11
 800bbac:	0800bc11 	.word	0x0800bc11
 800bbb0:	0800bc11 	.word	0x0800bc11
 800bbb4:	0800bc11 	.word	0x0800bc11
 800bbb8:	0800bc11 	.word	0x0800bc11
 800bbbc:	0800bc01 	.word	0x0800bc01
 800bbc0:	0800bc11 	.word	0x0800bc11
 800bbc4:	0800bc11 	.word	0x0800bc11
 800bbc8:	0800bc11 	.word	0x0800bc11
 800bbcc:	0800bc11 	.word	0x0800bc11
 800bbd0:	0800bc11 	.word	0x0800bc11
 800bbd4:	0800bc11 	.word	0x0800bc11
 800bbd8:	0800bc11 	.word	0x0800bc11
 800bbdc:	0800bc09 	.word	0x0800bc09
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbe6:	e0bc      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bbe8:	2304      	movs	r3, #4
 800bbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbee:	e0b8      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bbf0:	2308      	movs	r3, #8
 800bbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbf6:	e0b4      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bbf8:	2310      	movs	r3, #16
 800bbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbfe:	e0b0      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bc00:	2320      	movs	r3, #32
 800bc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc06:	e0ac      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bc08:	2340      	movs	r3, #64	@ 0x40
 800bc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc0e:	e0a8      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bc10:	2380      	movs	r3, #128	@ 0x80
 800bc12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc16:	e0a4      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a8f      	ldr	r2, [pc, #572]	@ (800be5c <UART_SetConfig+0x6a0>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d130      	bne.n	800bc84 <UART_SetConfig+0x4c8>
 800bc22:	4b8d      	ldr	r3, [pc, #564]	@ (800be58 <UART_SetConfig+0x69c>)
 800bc24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc26:	f003 0307 	and.w	r3, r3, #7
 800bc2a:	2b05      	cmp	r3, #5
 800bc2c:	d826      	bhi.n	800bc7c <UART_SetConfig+0x4c0>
 800bc2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc34 <UART_SetConfig+0x478>)
 800bc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc34:	0800bc4d 	.word	0x0800bc4d
 800bc38:	0800bc55 	.word	0x0800bc55
 800bc3c:	0800bc5d 	.word	0x0800bc5d
 800bc40:	0800bc65 	.word	0x0800bc65
 800bc44:	0800bc6d 	.word	0x0800bc6d
 800bc48:	0800bc75 	.word	0x0800bc75
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc52:	e086      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bc54:	2304      	movs	r3, #4
 800bc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc5a:	e082      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bc5c:	2308      	movs	r3, #8
 800bc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc62:	e07e      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bc64:	2310      	movs	r3, #16
 800bc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc6a:	e07a      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bc6c:	2320      	movs	r3, #32
 800bc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc72:	e076      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bc74:	2340      	movs	r3, #64	@ 0x40
 800bc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc7a:	e072      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bc7c:	2380      	movs	r3, #128	@ 0x80
 800bc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc82:	e06e      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a75      	ldr	r2, [pc, #468]	@ (800be60 <UART_SetConfig+0x6a4>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d130      	bne.n	800bcf0 <UART_SetConfig+0x534>
 800bc8e:	4b72      	ldr	r3, [pc, #456]	@ (800be58 <UART_SetConfig+0x69c>)
 800bc90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc92:	f003 0307 	and.w	r3, r3, #7
 800bc96:	2b05      	cmp	r3, #5
 800bc98:	d826      	bhi.n	800bce8 <UART_SetConfig+0x52c>
 800bc9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bca0 <UART_SetConfig+0x4e4>)
 800bc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca0:	0800bcb9 	.word	0x0800bcb9
 800bca4:	0800bcc1 	.word	0x0800bcc1
 800bca8:	0800bcc9 	.word	0x0800bcc9
 800bcac:	0800bcd1 	.word	0x0800bcd1
 800bcb0:	0800bcd9 	.word	0x0800bcd9
 800bcb4:	0800bce1 	.word	0x0800bce1
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcbe:	e050      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bcc0:	2304      	movs	r3, #4
 800bcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc6:	e04c      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bcc8:	2308      	movs	r3, #8
 800bcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcce:	e048      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bcd0:	2310      	movs	r3, #16
 800bcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd6:	e044      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bcd8:	2320      	movs	r3, #32
 800bcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcde:	e040      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bce0:	2340      	movs	r3, #64	@ 0x40
 800bce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bce6:	e03c      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bce8:	2380      	movs	r3, #128	@ 0x80
 800bcea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcee:	e038      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a5b      	ldr	r2, [pc, #364]	@ (800be64 <UART_SetConfig+0x6a8>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d130      	bne.n	800bd5c <UART_SetConfig+0x5a0>
 800bcfa:	4b57      	ldr	r3, [pc, #348]	@ (800be58 <UART_SetConfig+0x69c>)
 800bcfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcfe:	f003 0307 	and.w	r3, r3, #7
 800bd02:	2b05      	cmp	r3, #5
 800bd04:	d826      	bhi.n	800bd54 <UART_SetConfig+0x598>
 800bd06:	a201      	add	r2, pc, #4	@ (adr r2, 800bd0c <UART_SetConfig+0x550>)
 800bd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0c:	0800bd25 	.word	0x0800bd25
 800bd10:	0800bd2d 	.word	0x0800bd2d
 800bd14:	0800bd35 	.word	0x0800bd35
 800bd18:	0800bd3d 	.word	0x0800bd3d
 800bd1c:	0800bd45 	.word	0x0800bd45
 800bd20:	0800bd4d 	.word	0x0800bd4d
 800bd24:	2302      	movs	r3, #2
 800bd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2a:	e01a      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bd2c:	2304      	movs	r3, #4
 800bd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd32:	e016      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bd34:	2308      	movs	r3, #8
 800bd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3a:	e012      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bd3c:	2310      	movs	r3, #16
 800bd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd42:	e00e      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bd44:	2320      	movs	r3, #32
 800bd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd4a:	e00a      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bd4c:	2340      	movs	r3, #64	@ 0x40
 800bd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd52:	e006      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bd54:	2380      	movs	r3, #128	@ 0x80
 800bd56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd5a:	e002      	b.n	800bd62 <UART_SetConfig+0x5a6>
 800bd5c:	2380      	movs	r3, #128	@ 0x80
 800bd5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a3f      	ldr	r2, [pc, #252]	@ (800be64 <UART_SetConfig+0x6a8>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	f040 80f8 	bne.w	800bf5e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bd72:	2b20      	cmp	r3, #32
 800bd74:	dc46      	bgt.n	800be04 <UART_SetConfig+0x648>
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	f2c0 8082 	blt.w	800be80 <UART_SetConfig+0x6c4>
 800bd7c:	3b02      	subs	r3, #2
 800bd7e:	2b1e      	cmp	r3, #30
 800bd80:	d87e      	bhi.n	800be80 <UART_SetConfig+0x6c4>
 800bd82:	a201      	add	r2, pc, #4	@ (adr r2, 800bd88 <UART_SetConfig+0x5cc>)
 800bd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd88:	0800be0b 	.word	0x0800be0b
 800bd8c:	0800be81 	.word	0x0800be81
 800bd90:	0800be13 	.word	0x0800be13
 800bd94:	0800be81 	.word	0x0800be81
 800bd98:	0800be81 	.word	0x0800be81
 800bd9c:	0800be81 	.word	0x0800be81
 800bda0:	0800be23 	.word	0x0800be23
 800bda4:	0800be81 	.word	0x0800be81
 800bda8:	0800be81 	.word	0x0800be81
 800bdac:	0800be81 	.word	0x0800be81
 800bdb0:	0800be81 	.word	0x0800be81
 800bdb4:	0800be81 	.word	0x0800be81
 800bdb8:	0800be81 	.word	0x0800be81
 800bdbc:	0800be81 	.word	0x0800be81
 800bdc0:	0800be33 	.word	0x0800be33
 800bdc4:	0800be81 	.word	0x0800be81
 800bdc8:	0800be81 	.word	0x0800be81
 800bdcc:	0800be81 	.word	0x0800be81
 800bdd0:	0800be81 	.word	0x0800be81
 800bdd4:	0800be81 	.word	0x0800be81
 800bdd8:	0800be81 	.word	0x0800be81
 800bddc:	0800be81 	.word	0x0800be81
 800bde0:	0800be81 	.word	0x0800be81
 800bde4:	0800be81 	.word	0x0800be81
 800bde8:	0800be81 	.word	0x0800be81
 800bdec:	0800be81 	.word	0x0800be81
 800bdf0:	0800be81 	.word	0x0800be81
 800bdf4:	0800be81 	.word	0x0800be81
 800bdf8:	0800be81 	.word	0x0800be81
 800bdfc:	0800be81 	.word	0x0800be81
 800be00:	0800be73 	.word	0x0800be73
 800be04:	2b40      	cmp	r3, #64	@ 0x40
 800be06:	d037      	beq.n	800be78 <UART_SetConfig+0x6bc>
 800be08:	e03a      	b.n	800be80 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800be0a:	f7fd fe35 	bl	8009a78 <HAL_RCCEx_GetD3PCLK1Freq>
 800be0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be10:	e03c      	b.n	800be8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be16:	4618      	mov	r0, r3
 800be18:	f7fd fe44 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be20:	e034      	b.n	800be8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be22:	f107 0318 	add.w	r3, r7, #24
 800be26:	4618      	mov	r0, r3
 800be28:	f7fd ff90 	bl	8009d4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be30:	e02c      	b.n	800be8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be32:	4b09      	ldr	r3, [pc, #36]	@ (800be58 <UART_SetConfig+0x69c>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f003 0320 	and.w	r3, r3, #32
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d016      	beq.n	800be6c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be3e:	4b06      	ldr	r3, [pc, #24]	@ (800be58 <UART_SetConfig+0x69c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	08db      	lsrs	r3, r3, #3
 800be44:	f003 0303 	and.w	r3, r3, #3
 800be48:	4a07      	ldr	r2, [pc, #28]	@ (800be68 <UART_SetConfig+0x6ac>)
 800be4a:	fa22 f303 	lsr.w	r3, r2, r3
 800be4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be50:	e01c      	b.n	800be8c <UART_SetConfig+0x6d0>
 800be52:	bf00      	nop
 800be54:	40011400 	.word	0x40011400
 800be58:	58024400 	.word	0x58024400
 800be5c:	40007800 	.word	0x40007800
 800be60:	40007c00 	.word	0x40007c00
 800be64:	58000c00 	.word	0x58000c00
 800be68:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800be6c:	4b9d      	ldr	r3, [pc, #628]	@ (800c0e4 <UART_SetConfig+0x928>)
 800be6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be70:	e00c      	b.n	800be8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be72:	4b9d      	ldr	r3, [pc, #628]	@ (800c0e8 <UART_SetConfig+0x92c>)
 800be74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be76:	e009      	b.n	800be8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be7e:	e005      	b.n	800be8c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800be80:	2300      	movs	r3, #0
 800be82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800be8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800be8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f000 81de 	beq.w	800c250 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be98:	4a94      	ldr	r2, [pc, #592]	@ (800c0ec <UART_SetConfig+0x930>)
 800be9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be9e:	461a      	mov	r2, r3
 800bea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bea2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bea6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	685a      	ldr	r2, [r3, #4]
 800beac:	4613      	mov	r3, r2
 800beae:	005b      	lsls	r3, r3, #1
 800beb0:	4413      	add	r3, r2
 800beb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d305      	bcc.n	800bec4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d903      	bls.n	800becc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800beca:	e1c1      	b.n	800c250 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800becc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bece:	2200      	movs	r2, #0
 800bed0:	60bb      	str	r3, [r7, #8]
 800bed2:	60fa      	str	r2, [r7, #12]
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed8:	4a84      	ldr	r2, [pc, #528]	@ (800c0ec <UART_SetConfig+0x930>)
 800beda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bede:	b29b      	uxth	r3, r3
 800bee0:	2200      	movs	r2, #0
 800bee2:	603b      	str	r3, [r7, #0]
 800bee4:	607a      	str	r2, [r7, #4]
 800bee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800beee:	f7f4 f9f7 	bl	80002e0 <__aeabi_uldivmod>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4610      	mov	r0, r2
 800bef8:	4619      	mov	r1, r3
 800befa:	f04f 0200 	mov.w	r2, #0
 800befe:	f04f 0300 	mov.w	r3, #0
 800bf02:	020b      	lsls	r3, r1, #8
 800bf04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf08:	0202      	lsls	r2, r0, #8
 800bf0a:	6979      	ldr	r1, [r7, #20]
 800bf0c:	6849      	ldr	r1, [r1, #4]
 800bf0e:	0849      	lsrs	r1, r1, #1
 800bf10:	2000      	movs	r0, #0
 800bf12:	460c      	mov	r4, r1
 800bf14:	4605      	mov	r5, r0
 800bf16:	eb12 0804 	adds.w	r8, r2, r4
 800bf1a:	eb43 0905 	adc.w	r9, r3, r5
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	469a      	mov	sl, r3
 800bf26:	4693      	mov	fp, r2
 800bf28:	4652      	mov	r2, sl
 800bf2a:	465b      	mov	r3, fp
 800bf2c:	4640      	mov	r0, r8
 800bf2e:	4649      	mov	r1, r9
 800bf30:	f7f4 f9d6 	bl	80002e0 <__aeabi_uldivmod>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4613      	mov	r3, r2
 800bf3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf42:	d308      	bcc.n	800bf56 <UART_SetConfig+0x79a>
 800bf44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf4a:	d204      	bcs.n	800bf56 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf52:	60da      	str	r2, [r3, #12]
 800bf54:	e17c      	b.n	800c250 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bf5c:	e178      	b.n	800c250 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	69db      	ldr	r3, [r3, #28]
 800bf62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf66:	f040 80c5 	bne.w	800c0f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bf6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bf6e:	2b20      	cmp	r3, #32
 800bf70:	dc48      	bgt.n	800c004 <UART_SetConfig+0x848>
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	db7b      	blt.n	800c06e <UART_SetConfig+0x8b2>
 800bf76:	2b20      	cmp	r3, #32
 800bf78:	d879      	bhi.n	800c06e <UART_SetConfig+0x8b2>
 800bf7a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf80 <UART_SetConfig+0x7c4>)
 800bf7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf80:	0800c00b 	.word	0x0800c00b
 800bf84:	0800c013 	.word	0x0800c013
 800bf88:	0800c06f 	.word	0x0800c06f
 800bf8c:	0800c06f 	.word	0x0800c06f
 800bf90:	0800c01b 	.word	0x0800c01b
 800bf94:	0800c06f 	.word	0x0800c06f
 800bf98:	0800c06f 	.word	0x0800c06f
 800bf9c:	0800c06f 	.word	0x0800c06f
 800bfa0:	0800c02b 	.word	0x0800c02b
 800bfa4:	0800c06f 	.word	0x0800c06f
 800bfa8:	0800c06f 	.word	0x0800c06f
 800bfac:	0800c06f 	.word	0x0800c06f
 800bfb0:	0800c06f 	.word	0x0800c06f
 800bfb4:	0800c06f 	.word	0x0800c06f
 800bfb8:	0800c06f 	.word	0x0800c06f
 800bfbc:	0800c06f 	.word	0x0800c06f
 800bfc0:	0800c03b 	.word	0x0800c03b
 800bfc4:	0800c06f 	.word	0x0800c06f
 800bfc8:	0800c06f 	.word	0x0800c06f
 800bfcc:	0800c06f 	.word	0x0800c06f
 800bfd0:	0800c06f 	.word	0x0800c06f
 800bfd4:	0800c06f 	.word	0x0800c06f
 800bfd8:	0800c06f 	.word	0x0800c06f
 800bfdc:	0800c06f 	.word	0x0800c06f
 800bfe0:	0800c06f 	.word	0x0800c06f
 800bfe4:	0800c06f 	.word	0x0800c06f
 800bfe8:	0800c06f 	.word	0x0800c06f
 800bfec:	0800c06f 	.word	0x0800c06f
 800bff0:	0800c06f 	.word	0x0800c06f
 800bff4:	0800c06f 	.word	0x0800c06f
 800bff8:	0800c06f 	.word	0x0800c06f
 800bffc:	0800c06f 	.word	0x0800c06f
 800c000:	0800c061 	.word	0x0800c061
 800c004:	2b40      	cmp	r3, #64	@ 0x40
 800c006:	d02e      	beq.n	800c066 <UART_SetConfig+0x8aa>
 800c008:	e031      	b.n	800c06e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c00a:	f7fb fd3d 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 800c00e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c010:	e033      	b.n	800c07a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c012:	f7fb fd4f 	bl	8007ab4 <HAL_RCC_GetPCLK2Freq>
 800c016:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c018:	e02f      	b.n	800c07a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c01a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fd fd40 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c028:	e027      	b.n	800c07a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c02a:	f107 0318 	add.w	r3, r7, #24
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fd fe8c 	bl	8009d4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c038:	e01f      	b.n	800c07a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c03a:	4b2d      	ldr	r3, [pc, #180]	@ (800c0f0 <UART_SetConfig+0x934>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f003 0320 	and.w	r3, r3, #32
 800c042:	2b00      	cmp	r3, #0
 800c044:	d009      	beq.n	800c05a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c046:	4b2a      	ldr	r3, [pc, #168]	@ (800c0f0 <UART_SetConfig+0x934>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	08db      	lsrs	r3, r3, #3
 800c04c:	f003 0303 	and.w	r3, r3, #3
 800c050:	4a24      	ldr	r2, [pc, #144]	@ (800c0e4 <UART_SetConfig+0x928>)
 800c052:	fa22 f303 	lsr.w	r3, r2, r3
 800c056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c058:	e00f      	b.n	800c07a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c05a:	4b22      	ldr	r3, [pc, #136]	@ (800c0e4 <UART_SetConfig+0x928>)
 800c05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c05e:	e00c      	b.n	800c07a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c060:	4b21      	ldr	r3, [pc, #132]	@ (800c0e8 <UART_SetConfig+0x92c>)
 800c062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c064:	e009      	b.n	800c07a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c06c:	e005      	b.n	800c07a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c06e:	2300      	movs	r3, #0
 800c070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 80e7 	beq.w	800c250 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c086:	4a19      	ldr	r2, [pc, #100]	@ (800c0ec <UART_SetConfig+0x930>)
 800c088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c08c:	461a      	mov	r2, r3
 800c08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c090:	fbb3 f3f2 	udiv	r3, r3, r2
 800c094:	005a      	lsls	r2, r3, #1
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	085b      	lsrs	r3, r3, #1
 800c09c:	441a      	add	r2, r3
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0aa:	2b0f      	cmp	r3, #15
 800c0ac:	d916      	bls.n	800c0dc <UART_SetConfig+0x920>
 800c0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0b4:	d212      	bcs.n	800c0dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	f023 030f 	bic.w	r3, r3, #15
 800c0be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c2:	085b      	lsrs	r3, r3, #1
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	f003 0307 	and.w	r3, r3, #7
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c0d8:	60da      	str	r2, [r3, #12]
 800c0da:	e0b9      	b.n	800c250 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c0e2:	e0b5      	b.n	800c250 <UART_SetConfig+0xa94>
 800c0e4:	03d09000 	.word	0x03d09000
 800c0e8:	003d0900 	.word	0x003d0900
 800c0ec:	08010a9c 	.word	0x08010a9c
 800c0f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c0f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c0f8:	2b20      	cmp	r3, #32
 800c0fa:	dc49      	bgt.n	800c190 <UART_SetConfig+0x9d4>
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	db7c      	blt.n	800c1fa <UART_SetConfig+0xa3e>
 800c100:	2b20      	cmp	r3, #32
 800c102:	d87a      	bhi.n	800c1fa <UART_SetConfig+0xa3e>
 800c104:	a201      	add	r2, pc, #4	@ (adr r2, 800c10c <UART_SetConfig+0x950>)
 800c106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10a:	bf00      	nop
 800c10c:	0800c197 	.word	0x0800c197
 800c110:	0800c19f 	.word	0x0800c19f
 800c114:	0800c1fb 	.word	0x0800c1fb
 800c118:	0800c1fb 	.word	0x0800c1fb
 800c11c:	0800c1a7 	.word	0x0800c1a7
 800c120:	0800c1fb 	.word	0x0800c1fb
 800c124:	0800c1fb 	.word	0x0800c1fb
 800c128:	0800c1fb 	.word	0x0800c1fb
 800c12c:	0800c1b7 	.word	0x0800c1b7
 800c130:	0800c1fb 	.word	0x0800c1fb
 800c134:	0800c1fb 	.word	0x0800c1fb
 800c138:	0800c1fb 	.word	0x0800c1fb
 800c13c:	0800c1fb 	.word	0x0800c1fb
 800c140:	0800c1fb 	.word	0x0800c1fb
 800c144:	0800c1fb 	.word	0x0800c1fb
 800c148:	0800c1fb 	.word	0x0800c1fb
 800c14c:	0800c1c7 	.word	0x0800c1c7
 800c150:	0800c1fb 	.word	0x0800c1fb
 800c154:	0800c1fb 	.word	0x0800c1fb
 800c158:	0800c1fb 	.word	0x0800c1fb
 800c15c:	0800c1fb 	.word	0x0800c1fb
 800c160:	0800c1fb 	.word	0x0800c1fb
 800c164:	0800c1fb 	.word	0x0800c1fb
 800c168:	0800c1fb 	.word	0x0800c1fb
 800c16c:	0800c1fb 	.word	0x0800c1fb
 800c170:	0800c1fb 	.word	0x0800c1fb
 800c174:	0800c1fb 	.word	0x0800c1fb
 800c178:	0800c1fb 	.word	0x0800c1fb
 800c17c:	0800c1fb 	.word	0x0800c1fb
 800c180:	0800c1fb 	.word	0x0800c1fb
 800c184:	0800c1fb 	.word	0x0800c1fb
 800c188:	0800c1fb 	.word	0x0800c1fb
 800c18c:	0800c1ed 	.word	0x0800c1ed
 800c190:	2b40      	cmp	r3, #64	@ 0x40
 800c192:	d02e      	beq.n	800c1f2 <UART_SetConfig+0xa36>
 800c194:	e031      	b.n	800c1fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c196:	f7fb fc77 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 800c19a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c19c:	e033      	b.n	800c206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c19e:	f7fb fc89 	bl	8007ab4 <HAL_RCC_GetPCLK2Freq>
 800c1a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c1a4:	e02f      	b.n	800c206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fd fc7a 	bl	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1b4:	e027      	b.n	800c206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1b6:	f107 0318 	add.w	r3, r7, #24
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fd fdc6 	bl	8009d4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1c4:	e01f      	b.n	800c206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1c6:	4b2d      	ldr	r3, [pc, #180]	@ (800c27c <UART_SetConfig+0xac0>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 0320 	and.w	r3, r3, #32
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d009      	beq.n	800c1e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1d2:	4b2a      	ldr	r3, [pc, #168]	@ (800c27c <UART_SetConfig+0xac0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	08db      	lsrs	r3, r3, #3
 800c1d8:	f003 0303 	and.w	r3, r3, #3
 800c1dc:	4a28      	ldr	r2, [pc, #160]	@ (800c280 <UART_SetConfig+0xac4>)
 800c1de:	fa22 f303 	lsr.w	r3, r2, r3
 800c1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1e4:	e00f      	b.n	800c206 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c1e6:	4b26      	ldr	r3, [pc, #152]	@ (800c280 <UART_SetConfig+0xac4>)
 800c1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1ea:	e00c      	b.n	800c206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1ec:	4b25      	ldr	r3, [pc, #148]	@ (800c284 <UART_SetConfig+0xac8>)
 800c1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1f0:	e009      	b.n	800c206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1f8:	e005      	b.n	800c206 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c204:	bf00      	nop
    }

    if (pclk != 0U)
 800c206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d021      	beq.n	800c250 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c210:	4a1d      	ldr	r2, [pc, #116]	@ (800c288 <UART_SetConfig+0xacc>)
 800c212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c216:	461a      	mov	r2, r3
 800c218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c21a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	085b      	lsrs	r3, r3, #1
 800c224:	441a      	add	r2, r3
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c22e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c232:	2b0f      	cmp	r3, #15
 800c234:	d909      	bls.n	800c24a <UART_SetConfig+0xa8e>
 800c236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c23c:	d205      	bcs.n	800c24a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c240:	b29a      	uxth	r2, r3
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	60da      	str	r2, [r3, #12]
 800c248:	e002      	b.n	800c250 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c24a:	2301      	movs	r3, #1
 800c24c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	2201      	movs	r2, #1
 800c254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	2200      	movs	r2, #0
 800c264:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	2200      	movs	r2, #0
 800c26a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c26c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c270:	4618      	mov	r0, r3
 800c272:	3748      	adds	r7, #72	@ 0x48
 800c274:	46bd      	mov	sp, r7
 800c276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c27a:	bf00      	nop
 800c27c:	58024400 	.word	0x58024400
 800c280:	03d09000 	.word	0x03d09000
 800c284:	003d0900 	.word	0x003d0900
 800c288:	08010a9c 	.word	0x08010a9c

0800c28c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c298:	f003 0301 	and.w	r3, r3, #1
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00a      	beq.n	800c2b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ba:	f003 0302 	and.w	r3, r3, #2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00a      	beq.n	800c2d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2dc:	f003 0304 	and.w	r3, r3, #4
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00a      	beq.n	800c2fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2fe:	f003 0308 	and.w	r3, r3, #8
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00a      	beq.n	800c31c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	430a      	orrs	r2, r1
 800c31a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c320:	f003 0310 	and.w	r3, r3, #16
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00a      	beq.n	800c33e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	430a      	orrs	r2, r1
 800c33c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c342:	f003 0320 	and.w	r3, r3, #32
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00a      	beq.n	800c360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	430a      	orrs	r2, r1
 800c35e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d01a      	beq.n	800c3a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	430a      	orrs	r2, r1
 800c380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c38a:	d10a      	bne.n	800c3a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	430a      	orrs	r2, r1
 800c3a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00a      	beq.n	800c3c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	430a      	orrs	r2, r1
 800c3c2:	605a      	str	r2, [r3, #4]
  }
}
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b098      	sub	sp, #96	@ 0x60
 800c3d4:	af02      	add	r7, sp, #8
 800c3d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3e0:	f7f6 fc54 	bl	8002c8c <HAL_GetTick>
 800c3e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 0308 	and.w	r3, r3, #8
 800c3f0:	2b08      	cmp	r3, #8
 800c3f2:	d12f      	bne.n	800c454 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f88e 	bl	800c524 <UART_WaitOnFlagUntilTimeout>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d022      	beq.n	800c454 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c416:	e853 3f00 	ldrex	r3, [r3]
 800c41a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c41c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c41e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c422:	653b      	str	r3, [r7, #80]	@ 0x50
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	461a      	mov	r2, r3
 800c42a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c42c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c42e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c434:	e841 2300 	strex	r3, r2, [r1]
 800c438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1e6      	bne.n	800c40e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2220      	movs	r2, #32
 800c444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c450:	2303      	movs	r3, #3
 800c452:	e063      	b.n	800c51c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 0304 	and.w	r3, r3, #4
 800c45e:	2b04      	cmp	r3, #4
 800c460:	d149      	bne.n	800c4f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c462:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c46a:	2200      	movs	r2, #0
 800c46c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 f857 	bl	800c524 <UART_WaitOnFlagUntilTimeout>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d03c      	beq.n	800c4f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c484:	e853 3f00 	ldrex	r3, [r3]
 800c488:	623b      	str	r3, [r7, #32]
   return(result);
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	461a      	mov	r2, r3
 800c498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c49a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c49c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c49e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4a2:	e841 2300 	strex	r3, r2, [r1]
 800c4a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1e6      	bne.n	800c47c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	3308      	adds	r3, #8
 800c4b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	e853 3f00 	ldrex	r3, [r3]
 800c4bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f023 0301 	bic.w	r3, r3, #1
 800c4c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	3308      	adds	r3, #8
 800c4cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4ce:	61fa      	str	r2, [r7, #28]
 800c4d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d2:	69b9      	ldr	r1, [r7, #24]
 800c4d4:	69fa      	ldr	r2, [r7, #28]
 800c4d6:	e841 2300 	strex	r3, r2, [r1]
 800c4da:	617b      	str	r3, [r7, #20]
   return(result);
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1e5      	bne.n	800c4ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2220      	movs	r2, #32
 800c4e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e012      	b.n	800c51c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2220      	movs	r2, #32
 800c4fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2220      	movs	r2, #32
 800c502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3758      	adds	r7, #88	@ 0x58
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	603b      	str	r3, [r7, #0]
 800c530:	4613      	mov	r3, r2
 800c532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c534:	e049      	b.n	800c5ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c53c:	d045      	beq.n	800c5ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c53e:	f7f6 fba5 	bl	8002c8c <HAL_GetTick>
 800c542:	4602      	mov	r2, r0
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d302      	bcc.n	800c554 <UART_WaitOnFlagUntilTimeout+0x30>
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d101      	bne.n	800c558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c554:	2303      	movs	r3, #3
 800c556:	e048      	b.n	800c5ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 0304 	and.w	r3, r3, #4
 800c562:	2b00      	cmp	r3, #0
 800c564:	d031      	beq.n	800c5ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	f003 0308 	and.w	r3, r3, #8
 800c570:	2b08      	cmp	r3, #8
 800c572:	d110      	bne.n	800c596 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2208      	movs	r2, #8
 800c57a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c57c:	68f8      	ldr	r0, [r7, #12]
 800c57e:	f000 f839 	bl	800c5f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2208      	movs	r2, #8
 800c586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	e029      	b.n	800c5ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	69db      	ldr	r3, [r3, #28]
 800c59c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c5a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c5a4:	d111      	bne.n	800c5ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c5ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 f81f 	bl	800c5f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2220      	movs	r2, #32
 800c5ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e00f      	b.n	800c5ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	69da      	ldr	r2, [r3, #28]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	4013      	ands	r3, r2
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	bf0c      	ite	eq
 800c5da:	2301      	moveq	r3, #1
 800c5dc:	2300      	movne	r3, #0
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	79fb      	ldrb	r3, [r7, #7]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d0a6      	beq.n	800c536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
	...

0800c5f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b095      	sub	sp, #84	@ 0x54
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c604:	e853 3f00 	ldrex	r3, [r3]
 800c608:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c610:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	461a      	mov	r2, r3
 800c618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c61a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c61c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c620:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c622:	e841 2300 	strex	r3, r2, [r1]
 800c626:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1e6      	bne.n	800c5fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3308      	adds	r3, #8
 800c634:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c636:	6a3b      	ldr	r3, [r7, #32]
 800c638:	e853 3f00 	ldrex	r3, [r3]
 800c63c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c63e:	69fa      	ldr	r2, [r7, #28]
 800c640:	4b1e      	ldr	r3, [pc, #120]	@ (800c6bc <UART_EndRxTransfer+0xc8>)
 800c642:	4013      	ands	r3, r2
 800c644:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3308      	adds	r3, #8
 800c64c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c64e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c650:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c652:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c656:	e841 2300 	strex	r3, r2, [r1]
 800c65a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1e5      	bne.n	800c62e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c666:	2b01      	cmp	r3, #1
 800c668:	d118      	bne.n	800c69c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	e853 3f00 	ldrex	r3, [r3]
 800c676:	60bb      	str	r3, [r7, #8]
   return(result);
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	f023 0310 	bic.w	r3, r3, #16
 800c67e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	461a      	mov	r2, r3
 800c686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c688:	61bb      	str	r3, [r7, #24]
 800c68a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68c:	6979      	ldr	r1, [r7, #20]
 800c68e:	69ba      	ldr	r2, [r7, #24]
 800c690:	e841 2300 	strex	r3, r2, [r1]
 800c694:	613b      	str	r3, [r7, #16]
   return(result);
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1e6      	bne.n	800c66a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c6b0:	bf00      	nop
 800c6b2:	3754      	adds	r7, #84	@ 0x54
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	effffffe 	.word	0xeffffffe

0800c6c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b085      	sub	sp, #20
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d101      	bne.n	800c6d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	e027      	b.n	800c726 <HAL_UARTEx_DisableFifoMode+0x66>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2224      	movs	r2, #36	@ 0x24
 800c6e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f022 0201 	bic.w	r2, r2, #1
 800c6fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c704:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2220      	movs	r2, #32
 800c718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr

0800c732 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c732:	b580      	push	{r7, lr}
 800c734:	b084      	sub	sp, #16
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
 800c73a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c742:	2b01      	cmp	r3, #1
 800c744:	d101      	bne.n	800c74a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c746:	2302      	movs	r3, #2
 800c748:	e02d      	b.n	800c7a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2224      	movs	r2, #36	@ 0x24
 800c756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f022 0201 	bic.w	r2, r2, #1
 800c770:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f850 	bl	800c82c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2220      	movs	r2, #32
 800c798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b084      	sub	sp, #16
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d101      	bne.n	800c7c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7c2:	2302      	movs	r3, #2
 800c7c4:	e02d      	b.n	800c822 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2224      	movs	r2, #36	@ 0x24
 800c7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f022 0201 	bic.w	r2, r2, #1
 800c7ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	683a      	ldr	r2, [r7, #0]
 800c7fe:	430a      	orrs	r2, r1
 800c800:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f812 	bl	800c82c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2220      	movs	r2, #32
 800c814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
	...

0800c82c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d108      	bne.n	800c84e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c84c:	e031      	b.n	800c8b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c84e:	2310      	movs	r3, #16
 800c850:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c852:	2310      	movs	r3, #16
 800c854:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	0e5b      	lsrs	r3, r3, #25
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	f003 0307 	and.w	r3, r3, #7
 800c864:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	0f5b      	lsrs	r3, r3, #29
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	f003 0307 	and.w	r3, r3, #7
 800c874:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c876:	7bbb      	ldrb	r3, [r7, #14]
 800c878:	7b3a      	ldrb	r2, [r7, #12]
 800c87a:	4911      	ldr	r1, [pc, #68]	@ (800c8c0 <UARTEx_SetNbDataToProcess+0x94>)
 800c87c:	5c8a      	ldrb	r2, [r1, r2]
 800c87e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c882:	7b3a      	ldrb	r2, [r7, #12]
 800c884:	490f      	ldr	r1, [pc, #60]	@ (800c8c4 <UARTEx_SetNbDataToProcess+0x98>)
 800c886:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c888:	fb93 f3f2 	sdiv	r3, r3, r2
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	7b7a      	ldrb	r2, [r7, #13]
 800c898:	4909      	ldr	r1, [pc, #36]	@ (800c8c0 <UARTEx_SetNbDataToProcess+0x94>)
 800c89a:	5c8a      	ldrb	r2, [r1, r2]
 800c89c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8a0:	7b7a      	ldrb	r2, [r7, #13]
 800c8a2:	4908      	ldr	r1, [pc, #32]	@ (800c8c4 <UARTEx_SetNbDataToProcess+0x98>)
 800c8a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c8b2:	bf00      	nop
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	08010ab4 	.word	0x08010ab4
 800c8c4:	08010abc 	.word	0x08010abc

0800c8c8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d121      	bne.n	800c91e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	4b27      	ldr	r3, [pc, #156]	@ (800c97c <FMC_SDRAM_Init+0xb4>)
 800c8e0:	4013      	ands	r3, r2
 800c8e2:	683a      	ldr	r2, [r7, #0]
 800c8e4:	6851      	ldr	r1, [r2, #4]
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	6892      	ldr	r2, [r2, #8]
 800c8ea:	4311      	orrs	r1, r2
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	68d2      	ldr	r2, [r2, #12]
 800c8f0:	4311      	orrs	r1, r2
 800c8f2:	683a      	ldr	r2, [r7, #0]
 800c8f4:	6912      	ldr	r2, [r2, #16]
 800c8f6:	4311      	orrs	r1, r2
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	6952      	ldr	r2, [r2, #20]
 800c8fc:	4311      	orrs	r1, r2
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	6992      	ldr	r2, [r2, #24]
 800c902:	4311      	orrs	r1, r2
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	69d2      	ldr	r2, [r2, #28]
 800c908:	4311      	orrs	r1, r2
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	6a12      	ldr	r2, [r2, #32]
 800c90e:	4311      	orrs	r1, r2
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c914:	430a      	orrs	r2, r1
 800c916:	431a      	orrs	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	601a      	str	r2, [r3, #0]
 800c91c:	e026      	b.n	800c96c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	69d9      	ldr	r1, [r3, #28]
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	4319      	orrs	r1, r3
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c934:	430b      	orrs	r3, r1
 800c936:	431a      	orrs	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	4b0e      	ldr	r3, [pc, #56]	@ (800c97c <FMC_SDRAM_Init+0xb4>)
 800c942:	4013      	ands	r3, r2
 800c944:	683a      	ldr	r2, [r7, #0]
 800c946:	6851      	ldr	r1, [r2, #4]
 800c948:	683a      	ldr	r2, [r7, #0]
 800c94a:	6892      	ldr	r2, [r2, #8]
 800c94c:	4311      	orrs	r1, r2
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	68d2      	ldr	r2, [r2, #12]
 800c952:	4311      	orrs	r1, r2
 800c954:	683a      	ldr	r2, [r7, #0]
 800c956:	6912      	ldr	r2, [r2, #16]
 800c958:	4311      	orrs	r1, r2
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	6952      	ldr	r2, [r2, #20]
 800c95e:	4311      	orrs	r1, r2
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	6992      	ldr	r2, [r2, #24]
 800c964:	430a      	orrs	r2, r1
 800c966:	431a      	orrs	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	ffff8000 	.word	0xffff8000

0800c980 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c980:	b480      	push	{r7}
 800c982:	b085      	sub	sp, #20
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d128      	bne.n	800c9e4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	1e59      	subs	r1, r3, #1
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	011b      	lsls	r3, r3, #4
 800c9a8:	4319      	orrs	r1, r3
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	021b      	lsls	r3, r3, #8
 800c9b2:	4319      	orrs	r1, r3
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	031b      	lsls	r3, r3, #12
 800c9bc:	4319      	orrs	r1, r3
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	041b      	lsls	r3, r3, #16
 800c9c6:	4319      	orrs	r1, r3
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	695b      	ldr	r3, [r3, #20]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	051b      	lsls	r3, r3, #20
 800c9d0:	4319      	orrs	r1, r3
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	061b      	lsls	r3, r3, #24
 800c9da:	430b      	orrs	r3, r1
 800c9dc:	431a      	orrs	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	609a      	str	r2, [r3, #8]
 800c9e2:	e02d      	b.n	800ca40 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	689a      	ldr	r2, [r3, #8]
 800c9e8:	4b19      	ldr	r3, [pc, #100]	@ (800ca50 <FMC_SDRAM_Timing_Init+0xd0>)
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	68d2      	ldr	r2, [r2, #12]
 800c9f0:	3a01      	subs	r2, #1
 800c9f2:	0311      	lsls	r1, r2, #12
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	6952      	ldr	r2, [r2, #20]
 800c9f8:	3a01      	subs	r2, #1
 800c9fa:	0512      	lsls	r2, r2, #20
 800c9fc:	430a      	orrs	r2, r1
 800c9fe:	431a      	orrs	r2, r3
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	1e59      	subs	r1, r3, #1
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	3b01      	subs	r3, #1
 800ca18:	011b      	lsls	r3, r3, #4
 800ca1a:	4319      	orrs	r1, r3
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	021b      	lsls	r3, r3, #8
 800ca24:	4319      	orrs	r1, r3
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	041b      	lsls	r3, r3, #16
 800ca2e:	4319      	orrs	r1, r3
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	061b      	lsls	r3, r3, #24
 800ca38:	430b      	orrs	r3, r1
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	ff0f0fff 	.word	0xff0f0fff

0800ca54 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ca54:	b084      	sub	sp, #16
 800ca56:	b480      	push	{r7}
 800ca58:	b085      	sub	sp, #20
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	f107 001c 	add.w	r0, r7, #28
 800ca62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ca66:	2300      	movs	r3, #0
 800ca68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ca6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ca6c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ca6e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ca70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800ca72:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ca74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800ca76:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ca78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800ca7a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	685a      	ldr	r2, [r3, #4]
 800ca86:	4b07      	ldr	r3, [pc, #28]	@ (800caa4 <SDMMC_Init+0x50>)
 800ca88:	4013      	ands	r3, r2
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	431a      	orrs	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	b004      	add	sp, #16
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	ffc02c00 	.word	0xffc02c00

0800caa8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	370c      	adds	r7, #12
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr

0800cac2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cac2:	b480      	push	{r7}
 800cac4:	b083      	sub	sp, #12
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f043 0203 	orr.w	r2, r3, #3
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	4618      	mov	r0, r3
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f003 0303 	and.w	r3, r3, #3
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cb1e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800cb24:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800cb2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	68da      	ldr	r2, [r3, #12]
 800cb36:	4b06      	ldr	r3, [pc, #24]	@ (800cb50 <SDMMC_SendCommand+0x50>)
 800cb38:	4013      	ands	r3, r2
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	431a      	orrs	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	fffee0c0 	.word	0xfffee0c0

0800cb54 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	691b      	ldr	r3, [r3, #16]
 800cb60:	b2db      	uxtb	r3, r3
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	370c      	adds	r7, #12
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr

0800cb6e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cb6e:	b480      	push	{r7}
 800cb70:	b085      	sub	sp, #20
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	3314      	adds	r3, #20
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	4413      	add	r3, r2
 800cb82:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cbba:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800cbc0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800cbc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	431a      	orrs	r2, r3
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cbde:	2300      	movs	r3, #0

}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3714      	adds	r7, #20
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b088      	sub	sp, #32
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cbfa:	2310      	movs	r3, #16
 800cbfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc04:	2300      	movs	r3, #0
 800cc06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc0e:	f107 0308 	add.w	r3, r7, #8
 800cc12:	4619      	mov	r1, r3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7ff ff73 	bl	800cb00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cc1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc1e:	2110      	movs	r1, #16
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 f935 	bl	800ce90 <SDMMC_GetCmdResp1>
 800cc26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc28:	69fb      	ldr	r3, [r7, #28]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3720      	adds	r7, #32
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b088      	sub	sp, #32
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cc40:	2307      	movs	r3, #7
 800cc42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc54:	f107 0308 	add.w	r3, r7, #8
 800cc58:	4619      	mov	r1, r3
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f7ff ff50 	bl	800cb00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cc60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc64:	2107      	movs	r1, #7
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f912 	bl	800ce90 <SDMMC_GetCmdResp1>
 800cc6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc6e:	69fb      	ldr	r3, [r7, #28]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3720      	adds	r7, #32
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b088      	sub	sp, #32
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cc80:	2300      	movs	r3, #0
 800cc82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cc84:	2300      	movs	r3, #0
 800cc86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc96:	f107 0308 	add.w	r3, r7, #8
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7ff ff2f 	bl	800cb00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fa70 	bl	800d188 <SDMMC_GetCmdError>
 800cca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccaa:	69fb      	ldr	r3, [r7, #28]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3720      	adds	r7, #32
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b088      	sub	sp, #32
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ccc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ccc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccca:	2300      	movs	r3, #0
 800cccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ccd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccd4:	f107 0308 	add.w	r3, r7, #8
 800ccd8:	4619      	mov	r1, r3
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7ff ff10 	bl	800cb00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 f9c7 	bl	800d074 <SDMMC_GetCmdResp2>
 800cce6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cce8:	69fb      	ldr	r3, [r7, #28]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3720      	adds	r7, #32
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b088      	sub	sp, #32
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cd00:	2309      	movs	r3, #9
 800cd02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cd04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800cd08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd14:	f107 0308 	add.w	r3, r7, #8
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7ff fef0 	bl	800cb00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f9a7 	bl	800d074 <SDMMC_GetCmdResp2>
 800cd26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd28:	69fb      	ldr	r3, [r7, #28]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3720      	adds	r7, #32
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b088      	sub	sp, #32
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800cd3e:	887b      	ldrh	r3, [r7, #2]
 800cd40:	041b      	lsls	r3, r3, #16
 800cd42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cd44:	2303      	movs	r3, #3
 800cd46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd58:	f107 0308 	add.w	r3, r7, #8
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7ff fece 	bl	800cb00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800cd64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd68:	2103      	movs	r1, #3
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 f890 	bl	800ce90 <SDMMC_GetCmdResp1>
 800cd70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd72:	69fb      	ldr	r3, [r7, #28]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3720      	adds	r7, #32
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b088      	sub	sp, #32
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cd8a:	230d      	movs	r3, #13
 800cd8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd94:	2300      	movs	r3, #0
 800cd96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd9e:	f107 0308 	add.w	r3, r7, #8
 800cda2:	4619      	mov	r1, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7ff feab 	bl	800cb00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cdaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdae:	210d      	movs	r1, #13
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 f86d 	bl	800ce90 <SDMMC_GetCmdResp1>
 800cdb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdb8:	69fb      	ldr	r3, [r7, #28]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3720      	adds	r7, #32
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b088      	sub	sp, #32
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
 800cdca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cdd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdda:	2300      	movs	r3, #0
 800cddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cde2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cde4:	f107 0308 	add.w	r3, r7, #8
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7ff fe88 	bl	800cb00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 f989 	bl	800d108 <SDMMC_GetCmdResp3>
 800cdf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdf8:	69fb      	ldr	r3, [r7, #28]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3720      	adds	r7, #32
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b088      	sub	sp, #32
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800ce10:	2306      	movs	r3, #6
 800ce12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce24:	f107 0308 	add.w	r3, r7, #8
 800ce28:	4619      	mov	r1, r3
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7ff fe68 	bl	800cb00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800ce30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce34:	2106      	movs	r1, #6
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 f82a 	bl	800ce90 <SDMMC_GetCmdResp1>
 800ce3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce3e:	69fb      	ldr	r3, [r7, #28]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3720      	adds	r7, #32
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ce56:	2308      	movs	r3, #8
 800ce58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce60:	2300      	movs	r3, #0
 800ce62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce6a:	f107 0308 	add.w	r3, r7, #8
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7ff fe45 	bl	800cb00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 800ce76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce7a:	2108      	movs	r1, #8
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 f807 	bl	800ce90 <SDMMC_GetCmdResp1>
 800ce82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce84:	69fb      	ldr	r3, [r7, #28]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3720      	adds	r7, #32
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
	...

0800ce90 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b088      	sub	sp, #32
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ce9e:	4b70      	ldr	r3, [pc, #448]	@ (800d060 <SDMMC_GetCmdResp1+0x1d0>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4a70      	ldr	r2, [pc, #448]	@ (800d064 <SDMMC_GetCmdResp1+0x1d4>)
 800cea4:	fba2 2303 	umull	r2, r3, r2, r3
 800cea8:	0a5a      	lsrs	r2, r3, #9
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	fb02 f303 	mul.w	r3, r2, r3
 800ceb0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	1e5a      	subs	r2, r3, #1
 800ceb6:	61fa      	str	r2, [r7, #28]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d102      	bne.n	800cec2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cebc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cec0:	e0c9      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cec6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cec8:	69ba      	ldr	r2, [r7, #24]
 800ceca:	4b67      	ldr	r3, [pc, #412]	@ (800d068 <SDMMC_GetCmdResp1+0x1d8>)
 800cecc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0ef      	beq.n	800ceb2 <SDMMC_GetCmdResp1+0x22>
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1ea      	bne.n	800ceb2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cee0:	f003 0304 	and.w	r3, r3, #4
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d004      	beq.n	800cef2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2204      	movs	r2, #4
 800ceec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ceee:	2304      	movs	r3, #4
 800cef0:	e0b1      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef6:	f003 0301 	and.w	r3, r3, #1
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d004      	beq.n	800cf08 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2201      	movs	r2, #1
 800cf02:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e0a6      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	4a58      	ldr	r2, [pc, #352]	@ (800d06c <SDMMC_GetCmdResp1+0x1dc>)
 800cf0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f7ff fe20 	bl	800cb54 <SDMMC_GetCommandResponse>
 800cf14:	4603      	mov	r3, r0
 800cf16:	461a      	mov	r2, r3
 800cf18:	7afb      	ldrb	r3, [r7, #11]
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d001      	beq.n	800cf22 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e099      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cf22:	2100      	movs	r1, #0
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f7ff fe22 	bl	800cb6e <SDMMC_GetResponse>
 800cf2a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	4b50      	ldr	r3, [pc, #320]	@ (800d070 <SDMMC_GetCmdResp1+0x1e0>)
 800cf30:	4013      	ands	r3, r2
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d101      	bne.n	800cf3a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cf36:	2300      	movs	r3, #0
 800cf38:	e08d      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	da02      	bge.n	800cf46 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cf40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cf44:	e087      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d001      	beq.n	800cf54 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cf50:	2340      	movs	r3, #64	@ 0x40
 800cf52:	e080      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cf5e:	2380      	movs	r3, #128	@ 0x80
 800cf60:	e079      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cf6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf70:	e071      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cf7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cf80:	e069      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d002      	beq.n	800cf92 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cf8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf90:	e061      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cf9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cfa0:	e059      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cfac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfb0:	e051      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cfc0:	e049      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d002      	beq.n	800cfd2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cfcc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cfd0:	e041      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cfdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfe0:	e039      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d002      	beq.n	800cff2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cfec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cff0:	e031      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d002      	beq.n	800d002 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cffc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d000:	e029      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d00c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d010:	e021      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d002      	beq.n	800d022 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d01c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d020:	e019      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d02c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d030:	e011      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d03c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d040:	e009      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	f003 0308 	and.w	r3, r3, #8
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d04c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d050:	e001      	b.n	800d056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d052:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d056:	4618      	mov	r0, r3
 800d058:	3720      	adds	r7, #32
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	24000000 	.word	0x24000000
 800d064:	10624dd3 	.word	0x10624dd3
 800d068:	00200045 	.word	0x00200045
 800d06c:	002000c5 	.word	0x002000c5
 800d070:	fdffe008 	.word	0xfdffe008

0800d074 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d074:	b480      	push	{r7}
 800d076:	b085      	sub	sp, #20
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d07c:	4b1f      	ldr	r3, [pc, #124]	@ (800d0fc <SDMMC_GetCmdResp2+0x88>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a1f      	ldr	r2, [pc, #124]	@ (800d100 <SDMMC_GetCmdResp2+0x8c>)
 800d082:	fba2 2303 	umull	r2, r3, r2, r3
 800d086:	0a5b      	lsrs	r3, r3, #9
 800d088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d08c:	fb02 f303 	mul.w	r3, r2, r3
 800d090:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	1e5a      	subs	r2, r3, #1
 800d096:	60fa      	str	r2, [r7, #12]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d102      	bne.n	800d0a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d09c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d0a0:	e026      	b.n	800d0f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d0ef      	beq.n	800d092 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1ea      	bne.n	800d092 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0c0:	f003 0304 	and.w	r3, r3, #4
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d004      	beq.n	800d0d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2204      	movs	r2, #4
 800d0cc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0ce:	2304      	movs	r3, #4
 800d0d0:	e00e      	b.n	800d0f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0d6:	f003 0301 	and.w	r3, r3, #1
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d004      	beq.n	800d0e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e003      	b.n	800d0f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	4a06      	ldr	r2, [pc, #24]	@ (800d104 <SDMMC_GetCmdResp2+0x90>)
 800d0ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3714      	adds	r7, #20
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr
 800d0fc:	24000000 	.word	0x24000000
 800d100:	10624dd3 	.word	0x10624dd3
 800d104:	002000c5 	.word	0x002000c5

0800d108 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d110:	4b1a      	ldr	r3, [pc, #104]	@ (800d17c <SDMMC_GetCmdResp3+0x74>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a1a      	ldr	r2, [pc, #104]	@ (800d180 <SDMMC_GetCmdResp3+0x78>)
 800d116:	fba2 2303 	umull	r2, r3, r2, r3
 800d11a:	0a5b      	lsrs	r3, r3, #9
 800d11c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d120:	fb02 f303 	mul.w	r3, r2, r3
 800d124:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	1e5a      	subs	r2, r3, #1
 800d12a:	60fa      	str	r2, [r7, #12]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d102      	bne.n	800d136 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d130:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d134:	e01b      	b.n	800d16e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d13a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d142:	2b00      	cmp	r3, #0
 800d144:	d0ef      	beq.n	800d126 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1ea      	bne.n	800d126 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d154:	f003 0304 	and.w	r3, r3, #4
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d004      	beq.n	800d166 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2204      	movs	r2, #4
 800d160:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d162:	2304      	movs	r3, #4
 800d164:	e003      	b.n	800d16e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4a06      	ldr	r2, [pc, #24]	@ (800d184 <SDMMC_GetCmdResp3+0x7c>)
 800d16a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	24000000 	.word	0x24000000
 800d180:	10624dd3 	.word	0x10624dd3
 800d184:	002000c5 	.word	0x002000c5

0800d188 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d190:	4b11      	ldr	r3, [pc, #68]	@ (800d1d8 <SDMMC_GetCmdError+0x50>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a11      	ldr	r2, [pc, #68]	@ (800d1dc <SDMMC_GetCmdError+0x54>)
 800d196:	fba2 2303 	umull	r2, r3, r2, r3
 800d19a:	0a5b      	lsrs	r3, r3, #9
 800d19c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1a0:	fb02 f303 	mul.w	r3, r2, r3
 800d1a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	1e5a      	subs	r2, r3, #1
 800d1aa:	60fa      	str	r2, [r7, #12]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d102      	bne.n	800d1b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d1b4:	e009      	b.n	800d1ca <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d0f1      	beq.n	800d1a6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	4a06      	ldr	r2, [pc, #24]	@ (800d1e0 <SDMMC_GetCmdError+0x58>)
 800d1c6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3714      	adds	r7, #20
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop
 800d1d8:	24000000 	.word	0x24000000
 800d1dc:	10624dd3 	.word	0x10624dd3
 800d1e0:	002000c5 	.word	0x002000c5

0800d1e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d1e4:	b084      	sub	sp, #16
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b084      	sub	sp, #16
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	f107 001c 	add.w	r0, r7, #28
 800d1f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d120      	bne.n	800d23e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d200:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	68da      	ldr	r2, [r3, #12]
 800d20c:	4b2a      	ldr	r3, [pc, #168]	@ (800d2b8 <USB_CoreInit+0xd4>)
 800d20e:	4013      	ands	r3, r2
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d222:	2b01      	cmp	r3, #1
 800d224:	d105      	bne.n	800d232 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 faac 	bl	800d790 <USB_CoreReset>
 800d238:	4603      	mov	r3, r0
 800d23a:	73fb      	strb	r3, [r7, #15]
 800d23c:	e01a      	b.n	800d274 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 faa0 	bl	800d790 <USB_CoreReset>
 800d250:	4603      	mov	r3, r0
 800d252:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d256:	2b00      	cmp	r3, #0
 800d258:	d106      	bne.n	800d268 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d25e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	639a      	str	r2, [r3, #56]	@ 0x38
 800d266:	e005      	b.n	800d274 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d26c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d276:	2b01      	cmp	r3, #1
 800d278:	d116      	bne.n	800d2a8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d27e:	b29a      	uxth	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d288:	4b0c      	ldr	r3, [pc, #48]	@ (800d2bc <USB_CoreInit+0xd8>)
 800d28a:	4313      	orrs	r3, r2
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	f043 0206 	orr.w	r2, r3, #6
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	f043 0220 	orr.w	r2, r3, #32
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d2b4:	b004      	add	sp, #16
 800d2b6:	4770      	bx	lr
 800d2b8:	ffbdffbf 	.word	0xffbdffbf
 800d2bc:	03ee0000 	.word	0x03ee0000

0800d2c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	f023 0201 	bic.w	r2, r3, #1
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	370c      	adds	r7, #12
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d2fe:	78fb      	ldrb	r3, [r7, #3]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d115      	bne.n	800d330 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d310:	2001      	movs	r0, #1
 800d312:	f7f5 fcc7 	bl	8002ca4 <HAL_Delay>
      ms++;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	3301      	adds	r3, #1
 800d31a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 fa29 	bl	800d774 <USB_GetMode>
 800d322:	4603      	mov	r3, r0
 800d324:	2b01      	cmp	r3, #1
 800d326:	d01e      	beq.n	800d366 <USB_SetCurrentMode+0x84>
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2b31      	cmp	r3, #49	@ 0x31
 800d32c:	d9f0      	bls.n	800d310 <USB_SetCurrentMode+0x2e>
 800d32e:	e01a      	b.n	800d366 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d330:	78fb      	ldrb	r3, [r7, #3]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d115      	bne.n	800d362 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	68db      	ldr	r3, [r3, #12]
 800d33a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d342:	2001      	movs	r0, #1
 800d344:	f7f5 fcae 	bl	8002ca4 <HAL_Delay>
      ms++;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	3301      	adds	r3, #1
 800d34c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 fa10 	bl	800d774 <USB_GetMode>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d005      	beq.n	800d366 <USB_SetCurrentMode+0x84>
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2b31      	cmp	r3, #49	@ 0x31
 800d35e:	d9f0      	bls.n	800d342 <USB_SetCurrentMode+0x60>
 800d360:	e001      	b.n	800d366 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d362:	2301      	movs	r3, #1
 800d364:	e005      	b.n	800d372 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2b32      	cmp	r3, #50	@ 0x32
 800d36a:	d101      	bne.n	800d370 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	e000      	b.n	800d372 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
	...

0800d37c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d37c:	b084      	sub	sp, #16
 800d37e:	b580      	push	{r7, lr}
 800d380:	b086      	sub	sp, #24
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d38a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d396:	2300      	movs	r3, #0
 800d398:	613b      	str	r3, [r7, #16]
 800d39a:	e009      	b.n	800d3b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	3340      	adds	r3, #64	@ 0x40
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	4413      	add	r3, r2
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	613b      	str	r3, [r7, #16]
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	2b0e      	cmp	r3, #14
 800d3b4:	d9f2      	bls.n	800d39c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d3b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d11c      	bne.n	800d3f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d3ca:	f043 0302 	orr.w	r3, r3, #2
 800d3ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3d4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	e005      	b.n	800d402 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d408:	461a      	mov	r2, r3
 800d40a:	2300      	movs	r3, #0
 800d40c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d414:	4619      	mov	r1, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d41c:	461a      	mov	r2, r3
 800d41e:	680b      	ldr	r3, [r1, #0]
 800d420:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d424:	2b01      	cmp	r3, #1
 800d426:	d10c      	bne.n	800d442 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d104      	bne.n	800d438 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d42e:	2100      	movs	r1, #0
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 f965 	bl	800d700 <USB_SetDevSpeed>
 800d436:	e008      	b.n	800d44a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d438:	2101      	movs	r1, #1
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 f960 	bl	800d700 <USB_SetDevSpeed>
 800d440:	e003      	b.n	800d44a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d442:	2103      	movs	r1, #3
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 f95b 	bl	800d700 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d44a:	2110      	movs	r1, #16
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 f8f3 	bl	800d638 <USB_FlushTxFifo>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d001      	beq.n	800d45c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 f91f 	bl	800d6a0 <USB_FlushRxFifo>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d001      	beq.n	800d46c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d472:	461a      	mov	r2, r3
 800d474:	2300      	movs	r3, #0
 800d476:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d47e:	461a      	mov	r2, r3
 800d480:	2300      	movs	r3, #0
 800d482:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d48a:	461a      	mov	r2, r3
 800d48c:	2300      	movs	r3, #0
 800d48e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d490:	2300      	movs	r3, #0
 800d492:	613b      	str	r3, [r7, #16]
 800d494:	e043      	b.n	800d51e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	015a      	lsls	r2, r3, #5
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	4413      	add	r3, r2
 800d49e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d4a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d4ac:	d118      	bne.n	800d4e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10a      	bne.n	800d4ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	015a      	lsls	r2, r3, #5
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d4c6:	6013      	str	r3, [r2, #0]
 800d4c8:	e013      	b.n	800d4f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	015a      	lsls	r2, r3, #5
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d4dc:	6013      	str	r3, [r2, #0]
 800d4de:	e008      	b.n	800d4f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	015a      	lsls	r2, r3, #5
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	015a      	lsls	r2, r3, #5
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4fe:	461a      	mov	r2, r3
 800d500:	2300      	movs	r3, #0
 800d502:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	015a      	lsls	r2, r3, #5
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	4413      	add	r3, r2
 800d50c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d510:	461a      	mov	r2, r3
 800d512:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d516:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	3301      	adds	r3, #1
 800d51c:	613b      	str	r3, [r7, #16]
 800d51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	429a      	cmp	r2, r3
 800d524:	d3b7      	bcc.n	800d496 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d526:	2300      	movs	r3, #0
 800d528:	613b      	str	r3, [r7, #16]
 800d52a:	e043      	b.n	800d5b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	015a      	lsls	r2, r3, #5
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	4413      	add	r3, r2
 800d534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d53e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d542:	d118      	bne.n	800d576 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d10a      	bne.n	800d560 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	015a      	lsls	r2, r3, #5
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	4413      	add	r3, r2
 800d552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d556:	461a      	mov	r2, r3
 800d558:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d55c:	6013      	str	r3, [r2, #0]
 800d55e:	e013      	b.n	800d588 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	015a      	lsls	r2, r3, #5
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	4413      	add	r3, r2
 800d568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d56c:	461a      	mov	r2, r3
 800d56e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d572:	6013      	str	r3, [r2, #0]
 800d574:	e008      	b.n	800d588 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	015a      	lsls	r2, r3, #5
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	4413      	add	r3, r2
 800d57e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d582:	461a      	mov	r2, r3
 800d584:	2300      	movs	r3, #0
 800d586:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	015a      	lsls	r2, r3, #5
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	4413      	add	r3, r2
 800d590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d594:	461a      	mov	r2, r3
 800d596:	2300      	movs	r3, #0
 800d598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	015a      	lsls	r2, r3, #5
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d5ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	613b      	str	r3, [r7, #16]
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b6:	693a      	ldr	r2, [r7, #16]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d3b7      	bcc.n	800d52c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d5ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d5dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d105      	bne.n	800d5f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	f043 0210 	orr.w	r2, r3, #16
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	699a      	ldr	r2, [r3, #24]
 800d5f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d630 <USB_DevInit+0x2b4>)
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d5fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d005      	beq.n	800d60e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	699b      	ldr	r3, [r3, #24]
 800d606:	f043 0208 	orr.w	r2, r3, #8
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d60e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d610:	2b01      	cmp	r3, #1
 800d612:	d105      	bne.n	800d620 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	699a      	ldr	r2, [r3, #24]
 800d618:	4b06      	ldr	r3, [pc, #24]	@ (800d634 <USB_DevInit+0x2b8>)
 800d61a:	4313      	orrs	r3, r2
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d620:	7dfb      	ldrb	r3, [r7, #23]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3718      	adds	r7, #24
 800d626:	46bd      	mov	sp, r7
 800d628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d62c:	b004      	add	sp, #16
 800d62e:	4770      	bx	lr
 800d630:	803c3800 	.word	0x803c3800
 800d634:	40000004 	.word	0x40000004

0800d638 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d638:	b480      	push	{r7}
 800d63a:	b085      	sub	sp, #20
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d642:	2300      	movs	r3, #0
 800d644:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	3301      	adds	r3, #1
 800d64a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	4a13      	ldr	r2, [pc, #76]	@ (800d69c <USB_FlushTxFifo+0x64>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d901      	bls.n	800d658 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d654:	2303      	movs	r3, #3
 800d656:	e01b      	b.n	800d690 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	691b      	ldr	r3, [r3, #16]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	daf2      	bge.n	800d646 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d660:	2300      	movs	r3, #0
 800d662:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	019b      	lsls	r3, r3, #6
 800d668:	f043 0220 	orr.w	r2, r3, #32
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	3301      	adds	r3, #1
 800d674:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	4a08      	ldr	r2, [pc, #32]	@ (800d69c <USB_FlushTxFifo+0x64>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d901      	bls.n	800d682 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d67e:	2303      	movs	r3, #3
 800d680:	e006      	b.n	800d690 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	f003 0320 	and.w	r3, r3, #32
 800d68a:	2b20      	cmp	r3, #32
 800d68c:	d0f0      	beq.n	800d670 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3714      	adds	r7, #20
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr
 800d69c:	00030d40 	.word	0x00030d40

0800d6a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	4a11      	ldr	r2, [pc, #68]	@ (800d6fc <USB_FlushRxFifo+0x5c>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d901      	bls.n	800d6be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d6ba:	2303      	movs	r3, #3
 800d6bc:	e018      	b.n	800d6f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	daf2      	bge.n	800d6ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2210      	movs	r2, #16
 800d6ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	4a08      	ldr	r2, [pc, #32]	@ (800d6fc <USB_FlushRxFifo+0x5c>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d901      	bls.n	800d6e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	e006      	b.n	800d6f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	691b      	ldr	r3, [r3, #16]
 800d6e6:	f003 0310 	and.w	r3, r3, #16
 800d6ea:	2b10      	cmp	r3, #16
 800d6ec:	d0f0      	beq.n	800d6d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3714      	adds	r7, #20
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	00030d40 	.word	0x00030d40

0800d700 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	460b      	mov	r3, r1
 800d70a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d716:	681a      	ldr	r2, [r3, #0]
 800d718:	78fb      	ldrb	r3, [r7, #3]
 800d71a:	68f9      	ldr	r1, [r7, #12]
 800d71c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d720:	4313      	orrs	r3, r2
 800d722:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d724:	2300      	movs	r3, #0
}
 800d726:	4618      	mov	r0, r3
 800d728:	3714      	adds	r7, #20
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr

0800d732 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d732:	b480      	push	{r7}
 800d734:	b085      	sub	sp, #20
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d74c:	f023 0303 	bic.w	r3, r3, #3
 800d750:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d760:	f043 0302 	orr.w	r3, r3, #2
 800d764:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3714      	adds	r7, #20
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	f003 0301 	and.w	r3, r3, #1
}
 800d784:	4618      	mov	r0, r3
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d798:	2300      	movs	r3, #0
 800d79a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	4a13      	ldr	r2, [pc, #76]	@ (800d7f4 <USB_CoreReset+0x64>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d901      	bls.n	800d7ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d7aa:	2303      	movs	r3, #3
 800d7ac:	e01b      	b.n	800d7e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	daf2      	bge.n	800d79c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	f043 0201 	orr.w	r2, r3, #1
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	4a09      	ldr	r2, [pc, #36]	@ (800d7f4 <USB_CoreReset+0x64>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d901      	bls.n	800d7d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	e006      	b.n	800d7e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	691b      	ldr	r3, [r3, #16]
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d0f0      	beq.n	800d7c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800d7e4:	2300      	movs	r3, #0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3714      	adds	r7, #20
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	00030d40 	.word	0x00030d40

0800d7f8 <__NVIC_SetPriority>:
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	4603      	mov	r3, r0
 800d800:	6039      	str	r1, [r7, #0]
 800d802:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	db0a      	blt.n	800d822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	490c      	ldr	r1, [pc, #48]	@ (800d844 <__NVIC_SetPriority+0x4c>)
 800d812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d816:	0112      	lsls	r2, r2, #4
 800d818:	b2d2      	uxtb	r2, r2
 800d81a:	440b      	add	r3, r1
 800d81c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d820:	e00a      	b.n	800d838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	b2da      	uxtb	r2, r3
 800d826:	4908      	ldr	r1, [pc, #32]	@ (800d848 <__NVIC_SetPriority+0x50>)
 800d828:	88fb      	ldrh	r3, [r7, #6]
 800d82a:	f003 030f 	and.w	r3, r3, #15
 800d82e:	3b04      	subs	r3, #4
 800d830:	0112      	lsls	r2, r2, #4
 800d832:	b2d2      	uxtb	r2, r2
 800d834:	440b      	add	r3, r1
 800d836:	761a      	strb	r2, [r3, #24]
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr
 800d844:	e000e100 	.word	0xe000e100
 800d848:	e000ed00 	.word	0xe000ed00

0800d84c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d84c:	b580      	push	{r7, lr}
 800d84e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d850:	4b05      	ldr	r3, [pc, #20]	@ (800d868 <SysTick_Handler+0x1c>)
 800d852:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d854:	f001 ff32 	bl	800f6bc <xTaskGetSchedulerState>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d001      	beq.n	800d862 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d85e:	f002 fd2b 	bl	80102b8 <xPortSysTickHandler>
  }
}
 800d862:	bf00      	nop
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	e000e010 	.word	0xe000e010

0800d86c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d86c:	b580      	push	{r7, lr}
 800d86e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d870:	2100      	movs	r1, #0
 800d872:	f06f 0004 	mvn.w	r0, #4
 800d876:	f7ff ffbf 	bl	800d7f8 <__NVIC_SetPriority>
#endif
}
 800d87a:	bf00      	nop
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d886:	f3ef 8305 	mrs	r3, IPSR
 800d88a:	603b      	str	r3, [r7, #0]
  return(result);
 800d88c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d003      	beq.n	800d89a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d892:	f06f 0305 	mvn.w	r3, #5
 800d896:	607b      	str	r3, [r7, #4]
 800d898:	e00c      	b.n	800d8b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d89a:	4b0a      	ldr	r3, [pc, #40]	@ (800d8c4 <osKernelInitialize+0x44>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d105      	bne.n	800d8ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d8a2:	4b08      	ldr	r3, [pc, #32]	@ (800d8c4 <osKernelInitialize+0x44>)
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	607b      	str	r3, [r7, #4]
 800d8ac:	e002      	b.n	800d8b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d8b4:	687b      	ldr	r3, [r7, #4]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	370c      	adds	r7, #12
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	24001124 	.word	0x24001124

0800d8c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8ce:	f3ef 8305 	mrs	r3, IPSR
 800d8d2:	603b      	str	r3, [r7, #0]
  return(result);
 800d8d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d003      	beq.n	800d8e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d8da:	f06f 0305 	mvn.w	r3, #5
 800d8de:	607b      	str	r3, [r7, #4]
 800d8e0:	e010      	b.n	800d904 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d8e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d910 <osKernelStart+0x48>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d109      	bne.n	800d8fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d8ea:	f7ff ffbf 	bl	800d86c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d8ee:	4b08      	ldr	r3, [pc, #32]	@ (800d910 <osKernelStart+0x48>)
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d8f4:	f001 fa7e 	bl	800edf4 <vTaskStartScheduler>
      stat = osOK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	607b      	str	r3, [r7, #4]
 800d8fc:	e002      	b.n	800d904 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d902:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d904:	687b      	ldr	r3, [r7, #4]
}
 800d906:	4618      	mov	r0, r3
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	24001124 	.word	0x24001124

0800d914 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d914:	b580      	push	{r7, lr}
 800d916:	b08e      	sub	sp, #56	@ 0x38
 800d918:	af04      	add	r7, sp, #16
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d920:	2300      	movs	r3, #0
 800d922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d924:	f3ef 8305 	mrs	r3, IPSR
 800d928:	617b      	str	r3, [r7, #20]
  return(result);
 800d92a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d17e      	bne.n	800da2e <osThreadNew+0x11a>
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d07b      	beq.n	800da2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d936:	2380      	movs	r3, #128	@ 0x80
 800d938:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d93a:	2318      	movs	r3, #24
 800d93c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d942:	f04f 33ff 	mov.w	r3, #4294967295
 800d946:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d045      	beq.n	800d9da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d002      	beq.n	800d95c <osThreadNew+0x48>
        name = attr->name;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	699b      	ldr	r3, [r3, #24]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d008      	beq.n	800d982 <osThreadNew+0x6e>
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	2b38      	cmp	r3, #56	@ 0x38
 800d974:	d805      	bhi.n	800d982 <osThreadNew+0x6e>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	f003 0301 	and.w	r3, r3, #1
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <osThreadNew+0x72>
        return (NULL);
 800d982:	2300      	movs	r3, #0
 800d984:	e054      	b.n	800da30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	695b      	ldr	r3, [r3, #20]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d003      	beq.n	800d996 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	695b      	ldr	r3, [r3, #20]
 800d992:	089b      	lsrs	r3, r3, #2
 800d994:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00e      	beq.n	800d9bc <osThreadNew+0xa8>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	2ba7      	cmp	r3, #167	@ 0xa7
 800d9a4:	d90a      	bls.n	800d9bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d006      	beq.n	800d9bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	695b      	ldr	r3, [r3, #20]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d002      	beq.n	800d9bc <osThreadNew+0xa8>
        mem = 1;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	61bb      	str	r3, [r7, #24]
 800d9ba:	e010      	b.n	800d9de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10c      	bne.n	800d9de <osThreadNew+0xca>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d108      	bne.n	800d9de <osThreadNew+0xca>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	691b      	ldr	r3, [r3, #16]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d104      	bne.n	800d9de <osThreadNew+0xca>
          mem = 0;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	61bb      	str	r3, [r7, #24]
 800d9d8:	e001      	b.n	800d9de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d110      	bne.n	800da06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d9ec:	9202      	str	r2, [sp, #8]
 800d9ee:	9301      	str	r3, [sp, #4]
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	6a3a      	ldr	r2, [r7, #32]
 800d9f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f001 f806 	bl	800ea0c <xTaskCreateStatic>
 800da00:	4603      	mov	r3, r0
 800da02:	613b      	str	r3, [r7, #16]
 800da04:	e013      	b.n	800da2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d110      	bne.n	800da2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800da0c:	6a3b      	ldr	r3, [r7, #32]
 800da0e:	b29a      	uxth	r2, r3
 800da10:	f107 0310 	add.w	r3, r7, #16
 800da14:	9301      	str	r3, [sp, #4]
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	9300      	str	r3, [sp, #0]
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f001 f854 	bl	800eacc <xTaskCreate>
 800da24:	4603      	mov	r3, r0
 800da26:	2b01      	cmp	r3, #1
 800da28:	d001      	beq.n	800da2e <osThreadNew+0x11a>
            hTask = NULL;
 800da2a:	2300      	movs	r3, #0
 800da2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800da2e:	693b      	ldr	r3, [r7, #16]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3728      	adds	r7, #40	@ 0x28
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da40:	f3ef 8305 	mrs	r3, IPSR
 800da44:	60bb      	str	r3, [r7, #8]
  return(result);
 800da46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d003      	beq.n	800da54 <osDelay+0x1c>
    stat = osErrorISR;
 800da4c:	f06f 0305 	mvn.w	r3, #5
 800da50:	60fb      	str	r3, [r7, #12]
 800da52:	e007      	b.n	800da64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800da54:	2300      	movs	r3, #0
 800da56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d002      	beq.n	800da64 <osDelay+0x2c>
      vTaskDelay(ticks);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f001 f992 	bl	800ed88 <vTaskDelay>
    }
  }

  return (stat);
 800da64:	68fb      	ldr	r3, [r7, #12]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800da6e:	b580      	push	{r7, lr}
 800da70:	b08a      	sub	sp, #40	@ 0x28
 800da72:	af02      	add	r7, sp, #8
 800da74:	60f8      	str	r0, [r7, #12]
 800da76:	60b9      	str	r1, [r7, #8]
 800da78:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800da7a:	2300      	movs	r3, #0
 800da7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da7e:	f3ef 8305 	mrs	r3, IPSR
 800da82:	613b      	str	r3, [r7, #16]
  return(result);
 800da84:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800da86:	2b00      	cmp	r3, #0
 800da88:	d15f      	bne.n	800db4a <osMessageQueueNew+0xdc>
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d05c      	beq.n	800db4a <osMessageQueueNew+0xdc>
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d059      	beq.n	800db4a <osMessageQueueNew+0xdc>
    mem = -1;
 800da96:	f04f 33ff 	mov.w	r3, #4294967295
 800da9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d029      	beq.n	800daf6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d012      	beq.n	800dad0 <osMessageQueueNew+0x62>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	2b4f      	cmp	r3, #79	@ 0x4f
 800dab0:	d90e      	bls.n	800dad0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00a      	beq.n	800dad0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	695a      	ldr	r2, [r3, #20]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	68b9      	ldr	r1, [r7, #8]
 800dac2:	fb01 f303 	mul.w	r3, r1, r3
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d302      	bcc.n	800dad0 <osMessageQueueNew+0x62>
        mem = 1;
 800daca:	2301      	movs	r3, #1
 800dacc:	61bb      	str	r3, [r7, #24]
 800dace:	e014      	b.n	800dafa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	689b      	ldr	r3, [r3, #8]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d110      	bne.n	800dafa <osMessageQueueNew+0x8c>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10c      	bne.n	800dafa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d108      	bne.n	800dafa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	695b      	ldr	r3, [r3, #20]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d104      	bne.n	800dafa <osMessageQueueNew+0x8c>
          mem = 0;
 800daf0:	2300      	movs	r3, #0
 800daf2:	61bb      	str	r3, [r7, #24]
 800daf4:	e001      	b.n	800dafa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d10b      	bne.n	800db18 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	691a      	ldr	r2, [r3, #16]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	2100      	movs	r1, #0
 800db0a:	9100      	str	r1, [sp, #0]
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f000 f9f0 	bl	800def4 <xQueueGenericCreateStatic>
 800db14:	61f8      	str	r0, [r7, #28]
 800db16:	e008      	b.n	800db2a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d105      	bne.n	800db2a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800db1e:	2200      	movs	r2, #0
 800db20:	68b9      	ldr	r1, [r7, #8]
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f000 fa63 	bl	800dfee <xQueueGenericCreate>
 800db28:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00c      	beq.n	800db4a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d003      	beq.n	800db3e <osMessageQueueNew+0xd0>
        name = attr->name;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	617b      	str	r3, [r7, #20]
 800db3c:	e001      	b.n	800db42 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800db3e:	2300      	movs	r3, #0
 800db40:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800db42:	6979      	ldr	r1, [r7, #20]
 800db44:	69f8      	ldr	r0, [r7, #28]
 800db46:	f000 ff03 	bl	800e950 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800db4a:	69fb      	ldr	r3, [r7, #28]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3720      	adds	r7, #32
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800db54:	b580      	push	{r7, lr}
 800db56:	b088      	sub	sp, #32
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	607a      	str	r2, [r7, #4]
 800db60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800db66:	2300      	movs	r3, #0
 800db68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db6a:	f3ef 8305 	mrs	r3, IPSR
 800db6e:	617b      	str	r3, [r7, #20]
  return(result);
 800db70:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800db72:	2b00      	cmp	r3, #0
 800db74:	d028      	beq.n	800dbc8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d005      	beq.n	800db88 <osMessageQueueGet+0x34>
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d002      	beq.n	800db88 <osMessageQueueGet+0x34>
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d003      	beq.n	800db90 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800db88:	f06f 0303 	mvn.w	r3, #3
 800db8c:	61fb      	str	r3, [r7, #28]
 800db8e:	e037      	b.n	800dc00 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800db90:	2300      	movs	r3, #0
 800db92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800db94:	f107 0310 	add.w	r3, r7, #16
 800db98:	461a      	mov	r2, r3
 800db9a:	68b9      	ldr	r1, [r7, #8]
 800db9c:	69b8      	ldr	r0, [r7, #24]
 800db9e:	f000 fd07 	bl	800e5b0 <xQueueReceiveFromISR>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d003      	beq.n	800dbb0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dba8:	f06f 0302 	mvn.w	r3, #2
 800dbac:	61fb      	str	r3, [r7, #28]
 800dbae:	e027      	b.n	800dc00 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d024      	beq.n	800dc00 <osMessageQueueGet+0xac>
 800dbb6:	4b15      	ldr	r3, [pc, #84]	@ (800dc0c <osMessageQueueGet+0xb8>)
 800dbb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbbc:	601a      	str	r2, [r3, #0]
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	e01b      	b.n	800dc00 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d002      	beq.n	800dbd4 <osMessageQueueGet+0x80>
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d103      	bne.n	800dbdc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800dbd4:	f06f 0303 	mvn.w	r3, #3
 800dbd8:	61fb      	str	r3, [r7, #28]
 800dbda:	e011      	b.n	800dc00 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dbdc:	683a      	ldr	r2, [r7, #0]
 800dbde:	68b9      	ldr	r1, [r7, #8]
 800dbe0:	69b8      	ldr	r0, [r7, #24]
 800dbe2:	f000 fc03 	bl	800e3ec <xQueueReceive>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d009      	beq.n	800dc00 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d003      	beq.n	800dbfa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800dbf2:	f06f 0301 	mvn.w	r3, #1
 800dbf6:	61fb      	str	r3, [r7, #28]
 800dbf8:	e002      	b.n	800dc00 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800dbfa:	f06f 0302 	mvn.w	r3, #2
 800dbfe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dc00:	69fb      	ldr	r3, [r7, #28]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3720      	adds	r7, #32
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	e000ed04 	.word	0xe000ed04

0800dc10 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d102      	bne.n	800dc28 <osMessageQueueGetCount+0x18>
    count = 0U;
 800dc22:	2300      	movs	r3, #0
 800dc24:	617b      	str	r3, [r7, #20]
 800dc26:	e00e      	b.n	800dc46 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc28:	f3ef 8305 	mrs	r3, IPSR
 800dc2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d004      	beq.n	800dc3e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800dc34:	6938      	ldr	r0, [r7, #16]
 800dc36:	f000 fd5c 	bl	800e6f2 <uxQueueMessagesWaitingFromISR>
 800dc3a:	6178      	str	r0, [r7, #20]
 800dc3c:	e003      	b.n	800dc46 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800dc3e:	6938      	ldr	r0, [r7, #16]
 800dc40:	f000 fd38 	bl	800e6b4 <uxQueueMessagesWaiting>
 800dc44:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800dc46:	697b      	ldr	r3, [r7, #20]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3718      	adds	r7, #24
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dc50:	b480      	push	{r7}
 800dc52:	b085      	sub	sp, #20
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4a07      	ldr	r2, [pc, #28]	@ (800dc7c <vApplicationGetIdleTaskMemory+0x2c>)
 800dc60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	4a06      	ldr	r2, [pc, #24]	@ (800dc80 <vApplicationGetIdleTaskMemory+0x30>)
 800dc66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2280      	movs	r2, #128	@ 0x80
 800dc6c:	601a      	str	r2, [r3, #0]
}
 800dc6e:	bf00      	nop
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	24001128 	.word	0x24001128
 800dc80:	240011d0 	.word	0x240011d0

0800dc84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	4a07      	ldr	r2, [pc, #28]	@ (800dcb0 <vApplicationGetTimerTaskMemory+0x2c>)
 800dc94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	4a06      	ldr	r2, [pc, #24]	@ (800dcb4 <vApplicationGetTimerTaskMemory+0x30>)
 800dc9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dca2:	601a      	str	r2, [r3, #0]
}
 800dca4:	bf00      	nop
 800dca6:	3714      	adds	r7, #20
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr
 800dcb0:	240013d0 	.word	0x240013d0
 800dcb4:	24001478 	.word	0x24001478

0800dcb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f103 0208 	add.w	r2, r3, #8
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f103 0208 	add.w	r2, r3, #8
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f103 0208 	add.w	r2, r3, #8
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dcec:	bf00      	nop
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd06:	bf00      	nop
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd12:	b480      	push	{r7}
 800dd14:	b085      	sub	sp, #20
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	689a      	ldr	r2, [r3, #8]
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	683a      	ldr	r2, [r7, #0]
 800dd36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	601a      	str	r2, [r3, #0]
}
 800dd4e:	bf00      	nop
 800dd50:	3714      	adds	r7, #20
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr

0800dd5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd5a:	b480      	push	{r7}
 800dd5c:	b085      	sub	sp, #20
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd70:	d103      	bne.n	800dd7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	60fb      	str	r3, [r7, #12]
 800dd78:	e00c      	b.n	800dd94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	3308      	adds	r3, #8
 800dd7e:	60fb      	str	r3, [r7, #12]
 800dd80:	e002      	b.n	800dd88 <vListInsert+0x2e>
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	60fb      	str	r3, [r7, #12]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d2f6      	bcs.n	800dd82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	685a      	ldr	r2, [r3, #4]
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	683a      	ldr	r2, [r7, #0]
 800dda2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	683a      	ldr	r2, [r7, #0]
 800ddae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	1c5a      	adds	r2, r3, #1
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	601a      	str	r2, [r3, #0]
}
 800ddc0:	bf00      	nop
 800ddc2:	3714      	adds	r7, #20
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b085      	sub	sp, #20
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	6892      	ldr	r2, [r2, #8]
 800dde2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	6852      	ldr	r2, [r2, #4]
 800ddec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d103      	bne.n	800de00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	689a      	ldr	r2, [r3, #8]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	1e5a      	subs	r2, r3, #1
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3714      	adds	r7, #20
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d10b      	bne.n	800de4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800de34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de38:	f383 8811 	msr	BASEPRI, r3
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	f3bf 8f4f 	dsb	sy
 800de44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800de46:	bf00      	nop
 800de48:	bf00      	nop
 800de4a:	e7fd      	b.n	800de48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800de4c:	f002 f9a4 	bl	8010198 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de58:	68f9      	ldr	r1, [r7, #12]
 800de5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800de5c:	fb01 f303 	mul.w	r3, r1, r3
 800de60:	441a      	add	r2, r3
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2200      	movs	r2, #0
 800de6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de7c:	3b01      	subs	r3, #1
 800de7e:	68f9      	ldr	r1, [r7, #12]
 800de80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800de82:	fb01 f303 	mul.w	r3, r1, r3
 800de86:	441a      	add	r2, r3
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	22ff      	movs	r2, #255	@ 0xff
 800de90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	22ff      	movs	r2, #255	@ 0xff
 800de98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d114      	bne.n	800decc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	691b      	ldr	r3, [r3, #16]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d01a      	beq.n	800dee0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3310      	adds	r3, #16
 800deae:	4618      	mov	r0, r3
 800deb0:	f001 fa3e 	bl	800f330 <xTaskRemoveFromEventList>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d012      	beq.n	800dee0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800deba:	4b0d      	ldr	r3, [pc, #52]	@ (800def0 <xQueueGenericReset+0xd0>)
 800debc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dec0:	601a      	str	r2, [r3, #0]
 800dec2:	f3bf 8f4f 	dsb	sy
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	e009      	b.n	800dee0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	3310      	adds	r3, #16
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7ff fef1 	bl	800dcb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	3324      	adds	r3, #36	@ 0x24
 800deda:	4618      	mov	r0, r3
 800dedc:	f7ff feec 	bl	800dcb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dee0:	f002 f98c 	bl	80101fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dee4:	2301      	movs	r3, #1
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	e000ed04 	.word	0xe000ed04

0800def4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800def4:	b580      	push	{r7, lr}
 800def6:	b08e      	sub	sp, #56	@ 0x38
 800def8:	af02      	add	r7, sp, #8
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
 800df00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d10b      	bne.n	800df20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800df08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df0c:	f383 8811 	msr	BASEPRI, r3
 800df10:	f3bf 8f6f 	isb	sy
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800df1a:	bf00      	nop
 800df1c:	bf00      	nop
 800df1e:	e7fd      	b.n	800df1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d10b      	bne.n	800df3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800df26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df2a:	f383 8811 	msr	BASEPRI, r3
 800df2e:	f3bf 8f6f 	isb	sy
 800df32:	f3bf 8f4f 	dsb	sy
 800df36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800df38:	bf00      	nop
 800df3a:	bf00      	nop
 800df3c:	e7fd      	b.n	800df3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d002      	beq.n	800df4a <xQueueGenericCreateStatic+0x56>
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d001      	beq.n	800df4e <xQueueGenericCreateStatic+0x5a>
 800df4a:	2301      	movs	r3, #1
 800df4c:	e000      	b.n	800df50 <xQueueGenericCreateStatic+0x5c>
 800df4e:	2300      	movs	r3, #0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10b      	bne.n	800df6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800df54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	623b      	str	r3, [r7, #32]
}
 800df66:	bf00      	nop
 800df68:	bf00      	nop
 800df6a:	e7fd      	b.n	800df68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d102      	bne.n	800df78 <xQueueGenericCreateStatic+0x84>
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d101      	bne.n	800df7c <xQueueGenericCreateStatic+0x88>
 800df78:	2301      	movs	r3, #1
 800df7a:	e000      	b.n	800df7e <xQueueGenericCreateStatic+0x8a>
 800df7c:	2300      	movs	r3, #0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10b      	bne.n	800df9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800df82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df86:	f383 8811 	msr	BASEPRI, r3
 800df8a:	f3bf 8f6f 	isb	sy
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	61fb      	str	r3, [r7, #28]
}
 800df94:	bf00      	nop
 800df96:	bf00      	nop
 800df98:	e7fd      	b.n	800df96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df9a:	2350      	movs	r3, #80	@ 0x50
 800df9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	2b50      	cmp	r3, #80	@ 0x50
 800dfa2:	d00b      	beq.n	800dfbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800dfa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa8:	f383 8811 	msr	BASEPRI, r3
 800dfac:	f3bf 8f6f 	isb	sy
 800dfb0:	f3bf 8f4f 	dsb	sy
 800dfb4:	61bb      	str	r3, [r7, #24]
}
 800dfb6:	bf00      	nop
 800dfb8:	bf00      	nop
 800dfba:	e7fd      	b.n	800dfb8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dfbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800dfc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00d      	beq.n	800dfe4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dfd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800dfd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	68b9      	ldr	r1, [r7, #8]
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f000 f840 	bl	800e064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3730      	adds	r7, #48	@ 0x30
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b08a      	sub	sp, #40	@ 0x28
 800dff2:	af02      	add	r7, sp, #8
 800dff4:	60f8      	str	r0, [r7, #12]
 800dff6:	60b9      	str	r1, [r7, #8]
 800dff8:	4613      	mov	r3, r2
 800dffa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d10b      	bne.n	800e01a <xQueueGenericCreate+0x2c>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	613b      	str	r3, [r7, #16]
}
 800e014:	bf00      	nop
 800e016:	bf00      	nop
 800e018:	e7fd      	b.n	800e016 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	68ba      	ldr	r2, [r7, #8]
 800e01e:	fb02 f303 	mul.w	r3, r2, r3
 800e022:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	3350      	adds	r3, #80	@ 0x50
 800e028:	4618      	mov	r0, r3
 800e02a:	f002 f9d7 	bl	80103dc <pvPortMalloc>
 800e02e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d011      	beq.n	800e05a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	3350      	adds	r3, #80	@ 0x50
 800e03e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e040:	69bb      	ldr	r3, [r7, #24]
 800e042:	2200      	movs	r2, #0
 800e044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e048:	79fa      	ldrb	r2, [r7, #7]
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	9300      	str	r3, [sp, #0]
 800e04e:	4613      	mov	r3, r2
 800e050:	697a      	ldr	r2, [r7, #20]
 800e052:	68b9      	ldr	r1, [r7, #8]
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f000 f805 	bl	800e064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e05a:	69bb      	ldr	r3, [r7, #24]
	}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3720      	adds	r7, #32
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	607a      	str	r2, [r7, #4]
 800e070:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d103      	bne.n	800e080 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	69ba      	ldr	r2, [r7, #24]
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	e002      	b.n	800e086 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e08c:	69bb      	ldr	r3, [r7, #24]
 800e08e:	68ba      	ldr	r2, [r7, #8]
 800e090:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e092:	2101      	movs	r1, #1
 800e094:	69b8      	ldr	r0, [r7, #24]
 800e096:	f7ff fec3 	bl	800de20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	78fa      	ldrb	r2, [r7, #3]
 800e09e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e0a2:	bf00      	nop
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
	...

0800e0ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b08e      	sub	sp, #56	@ 0x38
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]
 800e0b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10b      	bne.n	800e0e0 <xQueueGenericSend+0x34>
	__asm volatile
 800e0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0cc:	f383 8811 	msr	BASEPRI, r3
 800e0d0:	f3bf 8f6f 	isb	sy
 800e0d4:	f3bf 8f4f 	dsb	sy
 800e0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e0da:	bf00      	nop
 800e0dc:	bf00      	nop
 800e0de:	e7fd      	b.n	800e0dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d103      	bne.n	800e0ee <xQueueGenericSend+0x42>
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <xQueueGenericSend+0x46>
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e000      	b.n	800e0f4 <xQueueGenericSend+0x48>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10b      	bne.n	800e110 <xQueueGenericSend+0x64>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e10a:	bf00      	nop
 800e10c:	bf00      	nop
 800e10e:	e7fd      	b.n	800e10c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	2b02      	cmp	r3, #2
 800e114:	d103      	bne.n	800e11e <xQueueGenericSend+0x72>
 800e116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d101      	bne.n	800e122 <xQueueGenericSend+0x76>
 800e11e:	2301      	movs	r3, #1
 800e120:	e000      	b.n	800e124 <xQueueGenericSend+0x78>
 800e122:	2300      	movs	r3, #0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10b      	bne.n	800e140 <xQueueGenericSend+0x94>
	__asm volatile
 800e128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	623b      	str	r3, [r7, #32]
}
 800e13a:	bf00      	nop
 800e13c:	bf00      	nop
 800e13e:	e7fd      	b.n	800e13c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e140:	f001 fabc 	bl	800f6bc <xTaskGetSchedulerState>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d102      	bne.n	800e150 <xQueueGenericSend+0xa4>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d101      	bne.n	800e154 <xQueueGenericSend+0xa8>
 800e150:	2301      	movs	r3, #1
 800e152:	e000      	b.n	800e156 <xQueueGenericSend+0xaa>
 800e154:	2300      	movs	r3, #0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d10b      	bne.n	800e172 <xQueueGenericSend+0xc6>
	__asm volatile
 800e15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	61fb      	str	r3, [r7, #28]
}
 800e16c:	bf00      	nop
 800e16e:	bf00      	nop
 800e170:	e7fd      	b.n	800e16e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e172:	f002 f811 	bl	8010198 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e17e:	429a      	cmp	r2, r3
 800e180:	d302      	bcc.n	800e188 <xQueueGenericSend+0xdc>
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b02      	cmp	r3, #2
 800e186:	d129      	bne.n	800e1dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	68b9      	ldr	r1, [r7, #8]
 800e18c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e18e:	f000 facf 	bl	800e730 <prvCopyDataToQueue>
 800e192:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d010      	beq.n	800e1be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19e:	3324      	adds	r3, #36	@ 0x24
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f001 f8c5 	bl	800f330 <xTaskRemoveFromEventList>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d013      	beq.n	800e1d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e1ac:	4b3f      	ldr	r3, [pc, #252]	@ (800e2ac <xQueueGenericSend+0x200>)
 800e1ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1b2:	601a      	str	r2, [r3, #0]
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	e00a      	b.n	800e1d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d007      	beq.n	800e1d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e1c4:	4b39      	ldr	r3, [pc, #228]	@ (800e2ac <xQueueGenericSend+0x200>)
 800e1c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1ca:	601a      	str	r2, [r3, #0]
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e1d4:	f002 f812 	bl	80101fc <vPortExitCritical>
				return pdPASS;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	e063      	b.n	800e2a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d103      	bne.n	800e1ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e1e2:	f002 f80b 	bl	80101fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	e05c      	b.n	800e2a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d106      	bne.n	800e1fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e1f0:	f107 0314 	add.w	r3, r7, #20
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f001 f8ff 	bl	800f3f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e1fe:	f001 fffd 	bl	80101fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e202:	f000 fe67 	bl	800eed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e206:	f001 ffc7 	bl	8010198 <vPortEnterCritical>
 800e20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e210:	b25b      	sxtb	r3, r3
 800e212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e216:	d103      	bne.n	800e220 <xQueueGenericSend+0x174>
 800e218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e222:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e226:	b25b      	sxtb	r3, r3
 800e228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22c:	d103      	bne.n	800e236 <xQueueGenericSend+0x18a>
 800e22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e230:	2200      	movs	r2, #0
 800e232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e236:	f001 ffe1 	bl	80101fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e23a:	1d3a      	adds	r2, r7, #4
 800e23c:	f107 0314 	add.w	r3, r7, #20
 800e240:	4611      	mov	r1, r2
 800e242:	4618      	mov	r0, r3
 800e244:	f001 f8ee 	bl	800f424 <xTaskCheckForTimeOut>
 800e248:	4603      	mov	r3, r0
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d124      	bne.n	800e298 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e24e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e250:	f000 fb66 	bl	800e920 <prvIsQueueFull>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d018      	beq.n	800e28c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25c:	3310      	adds	r3, #16
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	4611      	mov	r1, r2
 800e262:	4618      	mov	r0, r3
 800e264:	f001 f812 	bl	800f28c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e26a:	f000 faf1 	bl	800e850 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e26e:	f000 fe3f 	bl	800eef0 <xTaskResumeAll>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	f47f af7c 	bne.w	800e172 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e27a:	4b0c      	ldr	r3, [pc, #48]	@ (800e2ac <xQueueGenericSend+0x200>)
 800e27c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	e772      	b.n	800e172 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e28c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e28e:	f000 fadf 	bl	800e850 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e292:	f000 fe2d 	bl	800eef0 <xTaskResumeAll>
 800e296:	e76c      	b.n	800e172 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e298:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e29a:	f000 fad9 	bl	800e850 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e29e:	f000 fe27 	bl	800eef0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e2a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3738      	adds	r7, #56	@ 0x38
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	e000ed04 	.word	0xe000ed04

0800e2b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b090      	sub	sp, #64	@ 0x40
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
 800e2bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10b      	bne.n	800e2e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e2da:	bf00      	nop
 800e2dc:	bf00      	nop
 800e2de:	e7fd      	b.n	800e2dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d103      	bne.n	800e2ee <xQueueGenericSendFromISR+0x3e>
 800e2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <xQueueGenericSendFromISR+0x42>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e000      	b.n	800e2f4 <xQueueGenericSendFromISR+0x44>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10b      	bne.n	800e310 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2fc:	f383 8811 	msr	BASEPRI, r3
 800e300:	f3bf 8f6f 	isb	sy
 800e304:	f3bf 8f4f 	dsb	sy
 800e308:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e30a:	bf00      	nop
 800e30c:	bf00      	nop
 800e30e:	e7fd      	b.n	800e30c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	2b02      	cmp	r3, #2
 800e314:	d103      	bne.n	800e31e <xQueueGenericSendFromISR+0x6e>
 800e316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d101      	bne.n	800e322 <xQueueGenericSendFromISR+0x72>
 800e31e:	2301      	movs	r3, #1
 800e320:	e000      	b.n	800e324 <xQueueGenericSendFromISR+0x74>
 800e322:	2300      	movs	r3, #0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10b      	bne.n	800e340 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	623b      	str	r3, [r7, #32]
}
 800e33a:	bf00      	nop
 800e33c:	bf00      	nop
 800e33e:	e7fd      	b.n	800e33c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e340:	f002 f80a 	bl	8010358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e344:	f3ef 8211 	mrs	r2, BASEPRI
 800e348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	61fa      	str	r2, [r7, #28]
 800e35a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e35c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e35e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e368:	429a      	cmp	r2, r3
 800e36a:	d302      	bcc.n	800e372 <xQueueGenericSendFromISR+0xc2>
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	2b02      	cmp	r3, #2
 800e370:	d12f      	bne.n	800e3d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e378:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e37e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e380:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e382:	683a      	ldr	r2, [r7, #0]
 800e384:	68b9      	ldr	r1, [r7, #8]
 800e386:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e388:	f000 f9d2 	bl	800e730 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e38c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e394:	d112      	bne.n	800e3bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d016      	beq.n	800e3cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a0:	3324      	adds	r3, #36	@ 0x24
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f000 ffc4 	bl	800f330 <xTaskRemoveFromEventList>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00e      	beq.n	800e3cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00b      	beq.n	800e3cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	601a      	str	r2, [r3, #0]
 800e3ba:	e007      	b.n	800e3cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e3bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	b25a      	sxtb	r2, r3
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e3d0:	e001      	b.n	800e3d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e3e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3740      	adds	r7, #64	@ 0x40
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b08c      	sub	sp, #48	@ 0x30
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10b      	bne.n	800e41e <xQueueReceive+0x32>
	__asm volatile
 800e406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e40a:	f383 8811 	msr	BASEPRI, r3
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	f3bf 8f4f 	dsb	sy
 800e416:	623b      	str	r3, [r7, #32]
}
 800e418:	bf00      	nop
 800e41a:	bf00      	nop
 800e41c:	e7fd      	b.n	800e41a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d103      	bne.n	800e42c <xQueueReceive+0x40>
 800e424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <xQueueReceive+0x44>
 800e42c:	2301      	movs	r3, #1
 800e42e:	e000      	b.n	800e432 <xQueueReceive+0x46>
 800e430:	2300      	movs	r3, #0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d10b      	bne.n	800e44e <xQueueReceive+0x62>
	__asm volatile
 800e436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e43a:	f383 8811 	msr	BASEPRI, r3
 800e43e:	f3bf 8f6f 	isb	sy
 800e442:	f3bf 8f4f 	dsb	sy
 800e446:	61fb      	str	r3, [r7, #28]
}
 800e448:	bf00      	nop
 800e44a:	bf00      	nop
 800e44c:	e7fd      	b.n	800e44a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e44e:	f001 f935 	bl	800f6bc <xTaskGetSchedulerState>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d102      	bne.n	800e45e <xQueueReceive+0x72>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <xQueueReceive+0x76>
 800e45e:	2301      	movs	r3, #1
 800e460:	e000      	b.n	800e464 <xQueueReceive+0x78>
 800e462:	2300      	movs	r3, #0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10b      	bne.n	800e480 <xQueueReceive+0x94>
	__asm volatile
 800e468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e46c:	f383 8811 	msr	BASEPRI, r3
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	61bb      	str	r3, [r7, #24]
}
 800e47a:	bf00      	nop
 800e47c:	bf00      	nop
 800e47e:	e7fd      	b.n	800e47c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e480:	f001 fe8a 	bl	8010198 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e488:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d01f      	beq.n	800e4d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e490:	68b9      	ldr	r1, [r7, #8]
 800e492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e494:	f000 f9b6 	bl	800e804 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e49a:	1e5a      	subs	r2, r3, #1
 800e49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a2:	691b      	ldr	r3, [r3, #16]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00f      	beq.n	800e4c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4aa:	3310      	adds	r3, #16
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f000 ff3f 	bl	800f330 <xTaskRemoveFromEventList>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d007      	beq.n	800e4c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e4b8:	4b3c      	ldr	r3, [pc, #240]	@ (800e5ac <xQueueReceive+0x1c0>)
 800e4ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4be:	601a      	str	r2, [r3, #0]
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e4c8:	f001 fe98 	bl	80101fc <vPortExitCritical>
				return pdPASS;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e069      	b.n	800e5a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d103      	bne.n	800e4de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4d6:	f001 fe91 	bl	80101fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	e062      	b.n	800e5a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d106      	bne.n	800e4f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4e4:	f107 0310 	add.w	r3, r7, #16
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f000 ff85 	bl	800f3f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4f2:	f001 fe83 	bl	80101fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4f6:	f000 fced 	bl	800eed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4fa:	f001 fe4d 	bl	8010198 <vPortEnterCritical>
 800e4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e504:	b25b      	sxtb	r3, r3
 800e506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e50a:	d103      	bne.n	800e514 <xQueueReceive+0x128>
 800e50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e50e:	2200      	movs	r2, #0
 800e510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e516:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e51a:	b25b      	sxtb	r3, r3
 800e51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e520:	d103      	bne.n	800e52a <xQueueReceive+0x13e>
 800e522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e524:	2200      	movs	r2, #0
 800e526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e52a:	f001 fe67 	bl	80101fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e52e:	1d3a      	adds	r2, r7, #4
 800e530:	f107 0310 	add.w	r3, r7, #16
 800e534:	4611      	mov	r1, r2
 800e536:	4618      	mov	r0, r3
 800e538:	f000 ff74 	bl	800f424 <xTaskCheckForTimeOut>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d123      	bne.n	800e58a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e544:	f000 f9d6 	bl	800e8f4 <prvIsQueueEmpty>
 800e548:	4603      	mov	r3, r0
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d017      	beq.n	800e57e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e550:	3324      	adds	r3, #36	@ 0x24
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	4611      	mov	r1, r2
 800e556:	4618      	mov	r0, r3
 800e558:	f000 fe98 	bl	800f28c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e55c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e55e:	f000 f977 	bl	800e850 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e562:	f000 fcc5 	bl	800eef0 <xTaskResumeAll>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d189      	bne.n	800e480 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e56c:	4b0f      	ldr	r3, [pc, #60]	@ (800e5ac <xQueueReceive+0x1c0>)
 800e56e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e572:	601a      	str	r2, [r3, #0]
 800e574:	f3bf 8f4f 	dsb	sy
 800e578:	f3bf 8f6f 	isb	sy
 800e57c:	e780      	b.n	800e480 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e57e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e580:	f000 f966 	bl	800e850 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e584:	f000 fcb4 	bl	800eef0 <xTaskResumeAll>
 800e588:	e77a      	b.n	800e480 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e58a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e58c:	f000 f960 	bl	800e850 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e590:	f000 fcae 	bl	800eef0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e596:	f000 f9ad 	bl	800e8f4 <prvIsQueueEmpty>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f43f af6f 	beq.w	800e480 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e5a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3730      	adds	r7, #48	@ 0x30
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	e000ed04 	.word	0xe000ed04

0800e5b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b08e      	sub	sp, #56	@ 0x38
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10b      	bne.n	800e5de <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800e5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ca:	f383 8811 	msr	BASEPRI, r3
 800e5ce:	f3bf 8f6f 	isb	sy
 800e5d2:	f3bf 8f4f 	dsb	sy
 800e5d6:	623b      	str	r3, [r7, #32]
}
 800e5d8:	bf00      	nop
 800e5da:	bf00      	nop
 800e5dc:	e7fd      	b.n	800e5da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d103      	bne.n	800e5ec <xQueueReceiveFromISR+0x3c>
 800e5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d101      	bne.n	800e5f0 <xQueueReceiveFromISR+0x40>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e000      	b.n	800e5f2 <xQueueReceiveFromISR+0x42>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d10b      	bne.n	800e60e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800e5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	61fb      	str	r3, [r7, #28]
}
 800e608:	bf00      	nop
 800e60a:	bf00      	nop
 800e60c:	e7fd      	b.n	800e60a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e60e:	f001 fea3 	bl	8010358 <vPortValidateInterruptPriority>
	__asm volatile
 800e612:	f3ef 8211 	mrs	r2, BASEPRI
 800e616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61a:	f383 8811 	msr	BASEPRI, r3
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	61ba      	str	r2, [r7, #24]
 800e628:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e62a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e62c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e632:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e636:	2b00      	cmp	r3, #0
 800e638:	d02f      	beq.n	800e69a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e644:	68b9      	ldr	r1, [r7, #8]
 800e646:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e648:	f000 f8dc 	bl	800e804 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e64e:	1e5a      	subs	r2, r3, #1
 800e650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e652:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e654:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e65c:	d112      	bne.n	800e684 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d016      	beq.n	800e694 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e668:	3310      	adds	r3, #16
 800e66a:	4618      	mov	r0, r3
 800e66c:	f000 fe60 	bl	800f330 <xTaskRemoveFromEventList>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d00e      	beq.n	800e694 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00b      	beq.n	800e694 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2201      	movs	r2, #1
 800e680:	601a      	str	r2, [r3, #0]
 800e682:	e007      	b.n	800e694 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e688:	3301      	adds	r3, #1
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	b25a      	sxtb	r2, r3
 800e68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e694:	2301      	movs	r3, #1
 800e696:	637b      	str	r3, [r7, #52]	@ 0x34
 800e698:	e001      	b.n	800e69e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800e69a:	2300      	movs	r3, #0
 800e69c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	f383 8811 	msr	BASEPRI, r3
}
 800e6a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3738      	adds	r7, #56	@ 0x38
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10b      	bne.n	800e6da <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800e6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	60bb      	str	r3, [r7, #8]
}
 800e6d4:	bf00      	nop
 800e6d6:	bf00      	nop
 800e6d8:	e7fd      	b.n	800e6d6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800e6da:	f001 fd5d 	bl	8010198 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6e2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e6e4:	f001 fd8a 	bl	80101fc <vPortExitCritical>

	return uxReturn;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e6f2:	b480      	push	{r7}
 800e6f4:	b087      	sub	sp, #28
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10b      	bne.n	800e71c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800e704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e708:	f383 8811 	msr	BASEPRI, r3
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	60fb      	str	r3, [r7, #12]
}
 800e716:	bf00      	nop
 800e718:	bf00      	nop
 800e71a:	e7fd      	b.n	800e718 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e720:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800e722:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e724:	4618      	mov	r0, r3
 800e726:	371c      	adds	r7, #28
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af00      	add	r7, sp, #0
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e73c:	2300      	movs	r3, #0
 800e73e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e744:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d10d      	bne.n	800e76a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d14d      	bne.n	800e7f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f000 ffcc 	bl	800f6f8 <xTaskPriorityDisinherit>
 800e760:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2200      	movs	r2, #0
 800e766:	609a      	str	r2, [r3, #8]
 800e768:	e043      	b.n	800e7f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d119      	bne.n	800e7a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	6858      	ldr	r0, [r3, #4]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e778:	461a      	mov	r2, r3
 800e77a:	68b9      	ldr	r1, [r7, #8]
 800e77c:	f002 f8a0 	bl	80108c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e788:	441a      	add	r2, r3
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	685a      	ldr	r2, [r3, #4]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	429a      	cmp	r2, r3
 800e798:	d32b      	bcc.n	800e7f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	605a      	str	r2, [r3, #4]
 800e7a2:	e026      	b.n	800e7f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	68d8      	ldr	r0, [r3, #12]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	68b9      	ldr	r1, [r7, #8]
 800e7b0:	f002 f886 	bl	80108c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	68da      	ldr	r2, [r3, #12]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7bc:	425b      	negs	r3, r3
 800e7be:	441a      	add	r2, r3
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	68da      	ldr	r2, [r3, #12]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d207      	bcs.n	800e7e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	689a      	ldr	r2, [r3, #8]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7d8:	425b      	negs	r3, r3
 800e7da:	441a      	add	r2, r3
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d105      	bne.n	800e7f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d002      	beq.n	800e7f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	1c5a      	adds	r2, r3, #1
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e7fa:	697b      	ldr	r3, [r7, #20]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3718      	adds	r7, #24
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e812:	2b00      	cmp	r3, #0
 800e814:	d018      	beq.n	800e848 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	68da      	ldr	r2, [r3, #12]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e81e:	441a      	add	r2, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	68da      	ldr	r2, [r3, #12]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	689b      	ldr	r3, [r3, #8]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d303      	bcc.n	800e838 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	68d9      	ldr	r1, [r3, #12]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e840:	461a      	mov	r2, r3
 800e842:	6838      	ldr	r0, [r7, #0]
 800e844:	f002 f83c 	bl	80108c0 <memcpy>
	}
}
 800e848:	bf00      	nop
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e858:	f001 fc9e 	bl	8010198 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e862:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e864:	e011      	b.n	800e88a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d012      	beq.n	800e894 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	3324      	adds	r3, #36	@ 0x24
 800e872:	4618      	mov	r0, r3
 800e874:	f000 fd5c 	bl	800f330 <xTaskRemoveFromEventList>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d001      	beq.n	800e882 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e87e:	f000 fe35 	bl	800f4ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e882:	7bfb      	ldrb	r3, [r7, #15]
 800e884:	3b01      	subs	r3, #1
 800e886:	b2db      	uxtb	r3, r3
 800e888:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e88a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	dce9      	bgt.n	800e866 <prvUnlockQueue+0x16>
 800e892:	e000      	b.n	800e896 <prvUnlockQueue+0x46>
					break;
 800e894:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	22ff      	movs	r2, #255	@ 0xff
 800e89a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e89e:	f001 fcad 	bl	80101fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e8a2:	f001 fc79 	bl	8010198 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e8ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8ae:	e011      	b.n	800e8d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	691b      	ldr	r3, [r3, #16]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d012      	beq.n	800e8de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	3310      	adds	r3, #16
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f000 fd37 	bl	800f330 <xTaskRemoveFromEventList>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d001      	beq.n	800e8cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e8c8:	f000 fe10 	bl	800f4ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e8cc:	7bbb      	ldrb	r3, [r7, #14]
 800e8ce:	3b01      	subs	r3, #1
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	dce9      	bgt.n	800e8b0 <prvUnlockQueue+0x60>
 800e8dc:	e000      	b.n	800e8e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e8de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	22ff      	movs	r2, #255	@ 0xff
 800e8e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e8e8:	f001 fc88 	bl	80101fc <vPortExitCritical>
}
 800e8ec:	bf00      	nop
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e8fc:	f001 fc4c 	bl	8010198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e904:	2b00      	cmp	r3, #0
 800e906:	d102      	bne.n	800e90e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e908:	2301      	movs	r3, #1
 800e90a:	60fb      	str	r3, [r7, #12]
 800e90c:	e001      	b.n	800e912 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e90e:	2300      	movs	r3, #0
 800e910:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e912:	f001 fc73 	bl	80101fc <vPortExitCritical>

	return xReturn;
 800e916:	68fb      	ldr	r3, [r7, #12]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e928:	f001 fc36 	bl	8010198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e934:	429a      	cmp	r2, r3
 800e936:	d102      	bne.n	800e93e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e938:	2301      	movs	r3, #1
 800e93a:	60fb      	str	r3, [r7, #12]
 800e93c:	e001      	b.n	800e942 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e93e:	2300      	movs	r3, #0
 800e940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e942:	f001 fc5b 	bl	80101fc <vPortExitCritical>

	return xReturn;
 800e946:	68fb      	ldr	r3, [r7, #12]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3710      	adds	r7, #16
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e950:	b480      	push	{r7}
 800e952:	b085      	sub	sp, #20
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e95a:	2300      	movs	r3, #0
 800e95c:	60fb      	str	r3, [r7, #12]
 800e95e:	e014      	b.n	800e98a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e960:	4a0f      	ldr	r2, [pc, #60]	@ (800e9a0 <vQueueAddToRegistry+0x50>)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d10b      	bne.n	800e984 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e96c:	490c      	ldr	r1, [pc, #48]	@ (800e9a0 <vQueueAddToRegistry+0x50>)
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	683a      	ldr	r2, [r7, #0]
 800e972:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e976:	4a0a      	ldr	r2, [pc, #40]	@ (800e9a0 <vQueueAddToRegistry+0x50>)
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	00db      	lsls	r3, r3, #3
 800e97c:	4413      	add	r3, r2
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e982:	e006      	b.n	800e992 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	3301      	adds	r3, #1
 800e988:	60fb      	str	r3, [r7, #12]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2b07      	cmp	r3, #7
 800e98e:	d9e7      	bls.n	800e960 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e990:	bf00      	nop
 800e992:	bf00      	nop
 800e994:	3714      	adds	r7, #20
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	24001878 	.word	0x24001878

0800e9a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e9b4:	f001 fbf0 	bl	8010198 <vPortEnterCritical>
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e9be:	b25b      	sxtb	r3, r3
 800e9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c4:	d103      	bne.n	800e9ce <vQueueWaitForMessageRestricted+0x2a>
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9d4:	b25b      	sxtb	r3, r3
 800e9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9da:	d103      	bne.n	800e9e4 <vQueueWaitForMessageRestricted+0x40>
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9e4:	f001 fc0a 	bl	80101fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d106      	bne.n	800e9fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	3324      	adds	r3, #36	@ 0x24
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	68b9      	ldr	r1, [r7, #8]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f000 fc6d 	bl	800f2d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e9fe:	6978      	ldr	r0, [r7, #20]
 800ea00:	f7ff ff26 	bl	800e850 <prvUnlockQueue>
	}
 800ea04:	bf00      	nop
 800ea06:	3718      	adds	r7, #24
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b08e      	sub	sp, #56	@ 0x38
 800ea10:	af04      	add	r7, sp, #16
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
 800ea18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ea1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10b      	bne.n	800ea38 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ea20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	623b      	str	r3, [r7, #32]
}
 800ea32:	bf00      	nop
 800ea34:	bf00      	nop
 800ea36:	e7fd      	b.n	800ea34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ea38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d10b      	bne.n	800ea56 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ea3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea42:	f383 8811 	msr	BASEPRI, r3
 800ea46:	f3bf 8f6f 	isb	sy
 800ea4a:	f3bf 8f4f 	dsb	sy
 800ea4e:	61fb      	str	r3, [r7, #28]
}
 800ea50:	bf00      	nop
 800ea52:	bf00      	nop
 800ea54:	e7fd      	b.n	800ea52 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ea56:	23a8      	movs	r3, #168	@ 0xa8
 800ea58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	2ba8      	cmp	r3, #168	@ 0xa8
 800ea5e:	d00b      	beq.n	800ea78 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ea60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea64:	f383 8811 	msr	BASEPRI, r3
 800ea68:	f3bf 8f6f 	isb	sy
 800ea6c:	f3bf 8f4f 	dsb	sy
 800ea70:	61bb      	str	r3, [r7, #24]
}
 800ea72:	bf00      	nop
 800ea74:	bf00      	nop
 800ea76:	e7fd      	b.n	800ea74 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ea78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ea7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d01e      	beq.n	800eabe <xTaskCreateStatic+0xb2>
 800ea80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d01b      	beq.n	800eabe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ea90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea92:	2202      	movs	r2, #2
 800ea94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ea98:	2300      	movs	r3, #0
 800ea9a:	9303      	str	r3, [sp, #12]
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9e:	9302      	str	r3, [sp, #8]
 800eaa0:	f107 0314 	add.w	r3, r7, #20
 800eaa4:	9301      	str	r3, [sp, #4]
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	68b9      	ldr	r1, [r7, #8]
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f000 f851 	bl	800eb58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eab6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eab8:	f000 f8f6 	bl	800eca8 <prvAddNewTaskToReadyList>
 800eabc:	e001      	b.n	800eac2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800eabe:	2300      	movs	r3, #0
 800eac0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eac2:	697b      	ldr	r3, [r7, #20]
	}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3728      	adds	r7, #40	@ 0x28
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b08c      	sub	sp, #48	@ 0x30
 800ead0:	af04      	add	r7, sp, #16
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	603b      	str	r3, [r7, #0]
 800ead8:	4613      	mov	r3, r2
 800eada:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eadc:	88fb      	ldrh	r3, [r7, #6]
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	4618      	mov	r0, r3
 800eae2:	f001 fc7b 	bl	80103dc <pvPortMalloc>
 800eae6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00e      	beq.n	800eb0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eaee:	20a8      	movs	r0, #168	@ 0xa8
 800eaf0:	f001 fc74 	bl	80103dc <pvPortMalloc>
 800eaf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d003      	beq.n	800eb04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eafc:	69fb      	ldr	r3, [r7, #28]
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	631a      	str	r2, [r3, #48]	@ 0x30
 800eb02:	e005      	b.n	800eb10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eb04:	6978      	ldr	r0, [r7, #20]
 800eb06:	f001 fd37 	bl	8010578 <vPortFree>
 800eb0a:	e001      	b.n	800eb10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d017      	beq.n	800eb46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eb1e:	88fa      	ldrh	r2, [r7, #6]
 800eb20:	2300      	movs	r3, #0
 800eb22:	9303      	str	r3, [sp, #12]
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	9302      	str	r3, [sp, #8]
 800eb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2a:	9301      	str	r3, [sp, #4]
 800eb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	68b9      	ldr	r1, [r7, #8]
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f000 f80f 	bl	800eb58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb3a:	69f8      	ldr	r0, [r7, #28]
 800eb3c:	f000 f8b4 	bl	800eca8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eb40:	2301      	movs	r3, #1
 800eb42:	61bb      	str	r3, [r7, #24]
 800eb44:	e002      	b.n	800eb4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb46:	f04f 33ff 	mov.w	r3, #4294967295
 800eb4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eb4c:	69bb      	ldr	r3, [r7, #24]
	}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3720      	adds	r7, #32
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
	...

0800eb58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b088      	sub	sp, #32
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
 800eb64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb68:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	009b      	lsls	r3, r3, #2
 800eb6e:	461a      	mov	r2, r3
 800eb70:	21a5      	movs	r1, #165	@ 0xa5
 800eb72:	f001 fe21 	bl	80107b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eb7a:	6879      	ldr	r1, [r7, #4]
 800eb7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800eb80:	440b      	add	r3, r1
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	4413      	add	r3, r2
 800eb86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eb88:	69bb      	ldr	r3, [r7, #24]
 800eb8a:	f023 0307 	bic.w	r3, r3, #7
 800eb8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	f003 0307 	and.w	r3, r3, #7
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00b      	beq.n	800ebb2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800eb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9e:	f383 8811 	msr	BASEPRI, r3
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	f3bf 8f4f 	dsb	sy
 800ebaa:	617b      	str	r3, [r7, #20]
}
 800ebac:	bf00      	nop
 800ebae:	bf00      	nop
 800ebb0:	e7fd      	b.n	800ebae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d01f      	beq.n	800ebf8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebb8:	2300      	movs	r3, #0
 800ebba:	61fb      	str	r3, [r7, #28]
 800ebbc:	e012      	b.n	800ebe4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ebbe:	68ba      	ldr	r2, [r7, #8]
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	7819      	ldrb	r1, [r3, #0]
 800ebc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	4413      	add	r3, r2
 800ebcc:	3334      	adds	r3, #52	@ 0x34
 800ebce:	460a      	mov	r2, r1
 800ebd0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ebd2:	68ba      	ldr	r2, [r7, #8]
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d006      	beq.n	800ebec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	61fb      	str	r3, [r7, #28]
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	2b0f      	cmp	r3, #15
 800ebe8:	d9e9      	bls.n	800ebbe <prvInitialiseNewTask+0x66>
 800ebea:	e000      	b.n	800ebee <prvInitialiseNewTask+0x96>
			{
				break;
 800ebec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ebee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ebf6:	e003      	b.n	800ec00 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ebf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec02:	2b37      	cmp	r3, #55	@ 0x37
 800ec04:	d901      	bls.n	800ec0a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec06:	2337      	movs	r3, #55	@ 0x37
 800ec08:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ec10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec14:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ec16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec18:	2200      	movs	r2, #0
 800ec1a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec1e:	3304      	adds	r3, #4
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7ff f869 	bl	800dcf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec28:	3318      	adds	r3, #24
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7ff f864 	bl	800dcf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec38:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec44:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ec46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec48:	2200      	movs	r2, #0
 800ec4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec50:	2200      	movs	r2, #0
 800ec52:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ec56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec58:	3354      	adds	r3, #84	@ 0x54
 800ec5a:	224c      	movs	r2, #76	@ 0x4c
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f001 fdaa 	bl	80107b8 <memset>
 800ec64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec66:	4a0d      	ldr	r2, [pc, #52]	@ (800ec9c <prvInitialiseNewTask+0x144>)
 800ec68:	659a      	str	r2, [r3, #88]	@ 0x58
 800ec6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec6c:	4a0c      	ldr	r2, [pc, #48]	@ (800eca0 <prvInitialiseNewTask+0x148>)
 800ec6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ec70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec72:	4a0c      	ldr	r2, [pc, #48]	@ (800eca4 <prvInitialiseNewTask+0x14c>)
 800ec74:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ec76:	683a      	ldr	r2, [r7, #0]
 800ec78:	68f9      	ldr	r1, [r7, #12]
 800ec7a:	69b8      	ldr	r0, [r7, #24]
 800ec7c:	f001 f95a 	bl	800ff34 <pxPortInitialiseStack>
 800ec80:	4602      	mov	r2, r0
 800ec82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ec86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d002      	beq.n	800ec92 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ec8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec92:	bf00      	nop
 800ec94:	3720      	adds	r7, #32
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	24005b0c 	.word	0x24005b0c
 800eca0:	24005b74 	.word	0x24005b74
 800eca4:	24005bdc 	.word	0x24005bdc

0800eca8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ecb0:	f001 fa72 	bl	8010198 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ecb4:	4b2d      	ldr	r3, [pc, #180]	@ (800ed6c <prvAddNewTaskToReadyList+0xc4>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	3301      	adds	r3, #1
 800ecba:	4a2c      	ldr	r2, [pc, #176]	@ (800ed6c <prvAddNewTaskToReadyList+0xc4>)
 800ecbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ecbe:	4b2c      	ldr	r3, [pc, #176]	@ (800ed70 <prvAddNewTaskToReadyList+0xc8>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d109      	bne.n	800ecda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ecc6:	4a2a      	ldr	r2, [pc, #168]	@ (800ed70 <prvAddNewTaskToReadyList+0xc8>)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eccc:	4b27      	ldr	r3, [pc, #156]	@ (800ed6c <prvAddNewTaskToReadyList+0xc4>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	d110      	bne.n	800ecf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ecd4:	f000 fc2e 	bl	800f534 <prvInitialiseTaskLists>
 800ecd8:	e00d      	b.n	800ecf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ecda:	4b26      	ldr	r3, [pc, #152]	@ (800ed74 <prvAddNewTaskToReadyList+0xcc>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d109      	bne.n	800ecf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ece2:	4b23      	ldr	r3, [pc, #140]	@ (800ed70 <prvAddNewTaskToReadyList+0xc8>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d802      	bhi.n	800ecf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ecf0:	4a1f      	ldr	r2, [pc, #124]	@ (800ed70 <prvAddNewTaskToReadyList+0xc8>)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ecf6:	4b20      	ldr	r3, [pc, #128]	@ (800ed78 <prvAddNewTaskToReadyList+0xd0>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	4a1e      	ldr	r2, [pc, #120]	@ (800ed78 <prvAddNewTaskToReadyList+0xd0>)
 800ecfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ed00:	4b1d      	ldr	r3, [pc, #116]	@ (800ed78 <prvAddNewTaskToReadyList+0xd0>)
 800ed02:	681a      	ldr	r2, [r3, #0]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed0c:	4b1b      	ldr	r3, [pc, #108]	@ (800ed7c <prvAddNewTaskToReadyList+0xd4>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d903      	bls.n	800ed1c <prvAddNewTaskToReadyList+0x74>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed18:	4a18      	ldr	r2, [pc, #96]	@ (800ed7c <prvAddNewTaskToReadyList+0xd4>)
 800ed1a:	6013      	str	r3, [r2, #0]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed20:	4613      	mov	r3, r2
 800ed22:	009b      	lsls	r3, r3, #2
 800ed24:	4413      	add	r3, r2
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	4a15      	ldr	r2, [pc, #84]	@ (800ed80 <prvAddNewTaskToReadyList+0xd8>)
 800ed2a:	441a      	add	r2, r3
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	3304      	adds	r3, #4
 800ed30:	4619      	mov	r1, r3
 800ed32:	4610      	mov	r0, r2
 800ed34:	f7fe ffed 	bl	800dd12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed38:	f001 fa60 	bl	80101fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ed74 <prvAddNewTaskToReadyList+0xcc>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d00e      	beq.n	800ed62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed44:	4b0a      	ldr	r3, [pc, #40]	@ (800ed70 <prvAddNewTaskToReadyList+0xc8>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d207      	bcs.n	800ed62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ed52:	4b0c      	ldr	r3, [pc, #48]	@ (800ed84 <prvAddNewTaskToReadyList+0xdc>)
 800ed54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	f3bf 8f4f 	dsb	sy
 800ed5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed62:	bf00      	nop
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	24001d8c 	.word	0x24001d8c
 800ed70:	240018b8 	.word	0x240018b8
 800ed74:	24001d98 	.word	0x24001d98
 800ed78:	24001da8 	.word	0x24001da8
 800ed7c:	24001d94 	.word	0x24001d94
 800ed80:	240018bc 	.word	0x240018bc
 800ed84:	e000ed04 	.word	0xe000ed04

0800ed88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ed90:	2300      	movs	r3, #0
 800ed92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d018      	beq.n	800edcc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ed9a:	4b14      	ldr	r3, [pc, #80]	@ (800edec <vTaskDelay+0x64>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d00b      	beq.n	800edba <vTaskDelay+0x32>
	__asm volatile
 800eda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eda6:	f383 8811 	msr	BASEPRI, r3
 800edaa:	f3bf 8f6f 	isb	sy
 800edae:	f3bf 8f4f 	dsb	sy
 800edb2:	60bb      	str	r3, [r7, #8]
}
 800edb4:	bf00      	nop
 800edb6:	bf00      	nop
 800edb8:	e7fd      	b.n	800edb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800edba:	f000 f88b 	bl	800eed4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800edbe:	2100      	movs	r1, #0
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 fd09 	bl	800f7d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800edc6:	f000 f893 	bl	800eef0 <xTaskResumeAll>
 800edca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d107      	bne.n	800ede2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800edd2:	4b07      	ldr	r3, [pc, #28]	@ (800edf0 <vTaskDelay+0x68>)
 800edd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800edd8:	601a      	str	r2, [r3, #0]
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ede2:	bf00      	nop
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	24001db4 	.word	0x24001db4
 800edf0:	e000ed04 	.word	0xe000ed04

0800edf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b08a      	sub	sp, #40	@ 0x28
 800edf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800edfa:	2300      	movs	r3, #0
 800edfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800edfe:	2300      	movs	r3, #0
 800ee00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ee02:	463a      	mov	r2, r7
 800ee04:	1d39      	adds	r1, r7, #4
 800ee06:	f107 0308 	add.w	r3, r7, #8
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fe ff20 	bl	800dc50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ee10:	6839      	ldr	r1, [r7, #0]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	68ba      	ldr	r2, [r7, #8]
 800ee16:	9202      	str	r2, [sp, #8]
 800ee18:	9301      	str	r3, [sp, #4]
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	9300      	str	r3, [sp, #0]
 800ee1e:	2300      	movs	r3, #0
 800ee20:	460a      	mov	r2, r1
 800ee22:	4924      	ldr	r1, [pc, #144]	@ (800eeb4 <vTaskStartScheduler+0xc0>)
 800ee24:	4824      	ldr	r0, [pc, #144]	@ (800eeb8 <vTaskStartScheduler+0xc4>)
 800ee26:	f7ff fdf1 	bl	800ea0c <xTaskCreateStatic>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	4a23      	ldr	r2, [pc, #140]	@ (800eebc <vTaskStartScheduler+0xc8>)
 800ee2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ee30:	4b22      	ldr	r3, [pc, #136]	@ (800eebc <vTaskStartScheduler+0xc8>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d002      	beq.n	800ee3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	617b      	str	r3, [r7, #20]
 800ee3c:	e001      	b.n	800ee42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d102      	bne.n	800ee4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ee48:	f000 fd1a 	bl	800f880 <xTimerCreateTimerTask>
 800ee4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d11b      	bne.n	800ee8c <vTaskStartScheduler+0x98>
	__asm volatile
 800ee54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee58:	f383 8811 	msr	BASEPRI, r3
 800ee5c:	f3bf 8f6f 	isb	sy
 800ee60:	f3bf 8f4f 	dsb	sy
 800ee64:	613b      	str	r3, [r7, #16]
}
 800ee66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ee68:	4b15      	ldr	r3, [pc, #84]	@ (800eec0 <vTaskStartScheduler+0xcc>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	3354      	adds	r3, #84	@ 0x54
 800ee6e:	4a15      	ldr	r2, [pc, #84]	@ (800eec4 <vTaskStartScheduler+0xd0>)
 800ee70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ee72:	4b15      	ldr	r3, [pc, #84]	@ (800eec8 <vTaskStartScheduler+0xd4>)
 800ee74:	f04f 32ff 	mov.w	r2, #4294967295
 800ee78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ee7a:	4b14      	ldr	r3, [pc, #80]	@ (800eecc <vTaskStartScheduler+0xd8>)
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ee80:	4b13      	ldr	r3, [pc, #76]	@ (800eed0 <vTaskStartScheduler+0xdc>)
 800ee82:	2200      	movs	r2, #0
 800ee84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ee86:	f001 f8e3 	bl	8010050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ee8a:	e00f      	b.n	800eeac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee92:	d10b      	bne.n	800eeac <vTaskStartScheduler+0xb8>
	__asm volatile
 800ee94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	60fb      	str	r3, [r7, #12]
}
 800eea6:	bf00      	nop
 800eea8:	bf00      	nop
 800eeaa:	e7fd      	b.n	800eea8 <vTaskStartScheduler+0xb4>
}
 800eeac:	bf00      	nop
 800eeae:	3718      	adds	r7, #24
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	08010a14 	.word	0x08010a14
 800eeb8:	0800f505 	.word	0x0800f505
 800eebc:	24001db0 	.word	0x24001db0
 800eec0:	240018b8 	.word	0x240018b8
 800eec4:	24000014 	.word	0x24000014
 800eec8:	24001dac 	.word	0x24001dac
 800eecc:	24001d98 	.word	0x24001d98
 800eed0:	24001d90 	.word	0x24001d90

0800eed4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eed4:	b480      	push	{r7}
 800eed6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eed8:	4b04      	ldr	r3, [pc, #16]	@ (800eeec <vTaskSuspendAll+0x18>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	3301      	adds	r3, #1
 800eede:	4a03      	ldr	r2, [pc, #12]	@ (800eeec <vTaskSuspendAll+0x18>)
 800eee0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800eee2:	bf00      	nop
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr
 800eeec:	24001db4 	.word	0x24001db4

0800eef0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eef6:	2300      	movs	r3, #0
 800eef8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eefa:	2300      	movs	r3, #0
 800eefc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eefe:	4b42      	ldr	r3, [pc, #264]	@ (800f008 <xTaskResumeAll+0x118>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d10b      	bne.n	800ef1e <xTaskResumeAll+0x2e>
	__asm volatile
 800ef06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef0a:	f383 8811 	msr	BASEPRI, r3
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	603b      	str	r3, [r7, #0]
}
 800ef18:	bf00      	nop
 800ef1a:	bf00      	nop
 800ef1c:	e7fd      	b.n	800ef1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ef1e:	f001 f93b 	bl	8010198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ef22:	4b39      	ldr	r3, [pc, #228]	@ (800f008 <xTaskResumeAll+0x118>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	3b01      	subs	r3, #1
 800ef28:	4a37      	ldr	r2, [pc, #220]	@ (800f008 <xTaskResumeAll+0x118>)
 800ef2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef2c:	4b36      	ldr	r3, [pc, #216]	@ (800f008 <xTaskResumeAll+0x118>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d162      	bne.n	800effa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef34:	4b35      	ldr	r3, [pc, #212]	@ (800f00c <xTaskResumeAll+0x11c>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d05e      	beq.n	800effa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef3c:	e02f      	b.n	800ef9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef3e:	4b34      	ldr	r3, [pc, #208]	@ (800f010 <xTaskResumeAll+0x120>)
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	3318      	adds	r3, #24
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fe ff3e 	bl	800ddcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	3304      	adds	r3, #4
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7fe ff39 	bl	800ddcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef5e:	4b2d      	ldr	r3, [pc, #180]	@ (800f014 <xTaskResumeAll+0x124>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d903      	bls.n	800ef6e <xTaskResumeAll+0x7e>
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef6a:	4a2a      	ldr	r2, [pc, #168]	@ (800f014 <xTaskResumeAll+0x124>)
 800ef6c:	6013      	str	r3, [r2, #0]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef72:	4613      	mov	r3, r2
 800ef74:	009b      	lsls	r3, r3, #2
 800ef76:	4413      	add	r3, r2
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	4a27      	ldr	r2, [pc, #156]	@ (800f018 <xTaskResumeAll+0x128>)
 800ef7c:	441a      	add	r2, r3
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	3304      	adds	r3, #4
 800ef82:	4619      	mov	r1, r3
 800ef84:	4610      	mov	r0, r2
 800ef86:	f7fe fec4 	bl	800dd12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef8e:	4b23      	ldr	r3, [pc, #140]	@ (800f01c <xTaskResumeAll+0x12c>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d302      	bcc.n	800ef9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ef98:	4b21      	ldr	r3, [pc, #132]	@ (800f020 <xTaskResumeAll+0x130>)
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef9e:	4b1c      	ldr	r3, [pc, #112]	@ (800f010 <xTaskResumeAll+0x120>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1cb      	bne.n	800ef3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d001      	beq.n	800efb0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800efac:	f000 fb66 	bl	800f67c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800efb0:	4b1c      	ldr	r3, [pc, #112]	@ (800f024 <xTaskResumeAll+0x134>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d010      	beq.n	800efde <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800efbc:	f000 f846 	bl	800f04c <xTaskIncrementTick>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d002      	beq.n	800efcc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800efc6:	4b16      	ldr	r3, [pc, #88]	@ (800f020 <xTaskResumeAll+0x130>)
 800efc8:	2201      	movs	r2, #1
 800efca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	3b01      	subs	r3, #1
 800efd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d1f1      	bne.n	800efbc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800efd8:	4b12      	ldr	r3, [pc, #72]	@ (800f024 <xTaskResumeAll+0x134>)
 800efda:	2200      	movs	r2, #0
 800efdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800efde:	4b10      	ldr	r3, [pc, #64]	@ (800f020 <xTaskResumeAll+0x130>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d009      	beq.n	800effa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800efe6:	2301      	movs	r3, #1
 800efe8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800efea:	4b0f      	ldr	r3, [pc, #60]	@ (800f028 <xTaskResumeAll+0x138>)
 800efec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eff0:	601a      	str	r2, [r3, #0]
 800eff2:	f3bf 8f4f 	dsb	sy
 800eff6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800effa:	f001 f8ff 	bl	80101fc <vPortExitCritical>

	return xAlreadyYielded;
 800effe:	68bb      	ldr	r3, [r7, #8]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	24001db4 	.word	0x24001db4
 800f00c:	24001d8c 	.word	0x24001d8c
 800f010:	24001d4c 	.word	0x24001d4c
 800f014:	24001d94 	.word	0x24001d94
 800f018:	240018bc 	.word	0x240018bc
 800f01c:	240018b8 	.word	0x240018b8
 800f020:	24001da0 	.word	0x24001da0
 800f024:	24001d9c 	.word	0x24001d9c
 800f028:	e000ed04 	.word	0xe000ed04

0800f02c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f032:	4b05      	ldr	r3, [pc, #20]	@ (800f048 <xTaskGetTickCount+0x1c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f038:	687b      	ldr	r3, [r7, #4]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	370c      	adds	r7, #12
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop
 800f048:	24001d90 	.word	0x24001d90

0800f04c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b086      	sub	sp, #24
 800f050:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f052:	2300      	movs	r3, #0
 800f054:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f056:	4b4f      	ldr	r3, [pc, #316]	@ (800f194 <xTaskIncrementTick+0x148>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f040 8090 	bne.w	800f180 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f060:	4b4d      	ldr	r3, [pc, #308]	@ (800f198 <xTaskIncrementTick+0x14c>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	3301      	adds	r3, #1
 800f066:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f068:	4a4b      	ldr	r2, [pc, #300]	@ (800f198 <xTaskIncrementTick+0x14c>)
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d121      	bne.n	800f0b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f074:	4b49      	ldr	r3, [pc, #292]	@ (800f19c <xTaskIncrementTick+0x150>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00b      	beq.n	800f096 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f082:	f383 8811 	msr	BASEPRI, r3
 800f086:	f3bf 8f6f 	isb	sy
 800f08a:	f3bf 8f4f 	dsb	sy
 800f08e:	603b      	str	r3, [r7, #0]
}
 800f090:	bf00      	nop
 800f092:	bf00      	nop
 800f094:	e7fd      	b.n	800f092 <xTaskIncrementTick+0x46>
 800f096:	4b41      	ldr	r3, [pc, #260]	@ (800f19c <xTaskIncrementTick+0x150>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	60fb      	str	r3, [r7, #12]
 800f09c:	4b40      	ldr	r3, [pc, #256]	@ (800f1a0 <xTaskIncrementTick+0x154>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a3e      	ldr	r2, [pc, #248]	@ (800f19c <xTaskIncrementTick+0x150>)
 800f0a2:	6013      	str	r3, [r2, #0]
 800f0a4:	4a3e      	ldr	r2, [pc, #248]	@ (800f1a0 <xTaskIncrementTick+0x154>)
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	6013      	str	r3, [r2, #0]
 800f0aa:	4b3e      	ldr	r3, [pc, #248]	@ (800f1a4 <xTaskIncrementTick+0x158>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	4a3c      	ldr	r2, [pc, #240]	@ (800f1a4 <xTaskIncrementTick+0x158>)
 800f0b2:	6013      	str	r3, [r2, #0]
 800f0b4:	f000 fae2 	bl	800f67c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f0b8:	4b3b      	ldr	r3, [pc, #236]	@ (800f1a8 <xTaskIncrementTick+0x15c>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	693a      	ldr	r2, [r7, #16]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d349      	bcc.n	800f156 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0c2:	4b36      	ldr	r3, [pc, #216]	@ (800f19c <xTaskIncrementTick+0x150>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d104      	bne.n	800f0d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0cc:	4b36      	ldr	r3, [pc, #216]	@ (800f1a8 <xTaskIncrementTick+0x15c>)
 800f0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f0d2:	601a      	str	r2, [r3, #0]
					break;
 800f0d4:	e03f      	b.n	800f156 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0d6:	4b31      	ldr	r3, [pc, #196]	@ (800f19c <xTaskIncrementTick+0x150>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f0e6:	693a      	ldr	r2, [r7, #16]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d203      	bcs.n	800f0f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f0ee:	4a2e      	ldr	r2, [pc, #184]	@ (800f1a8 <xTaskIncrementTick+0x15c>)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f0f4:	e02f      	b.n	800f156 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fe fe66 	bl	800ddcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f104:	2b00      	cmp	r3, #0
 800f106:	d004      	beq.n	800f112 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	3318      	adds	r3, #24
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fe fe5d 	bl	800ddcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f116:	4b25      	ldr	r3, [pc, #148]	@ (800f1ac <xTaskIncrementTick+0x160>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d903      	bls.n	800f126 <xTaskIncrementTick+0xda>
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f122:	4a22      	ldr	r2, [pc, #136]	@ (800f1ac <xTaskIncrementTick+0x160>)
 800f124:	6013      	str	r3, [r2, #0]
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f12a:	4613      	mov	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4413      	add	r3, r2
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	4a1f      	ldr	r2, [pc, #124]	@ (800f1b0 <xTaskIncrementTick+0x164>)
 800f134:	441a      	add	r2, r3
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	3304      	adds	r3, #4
 800f13a:	4619      	mov	r1, r3
 800f13c:	4610      	mov	r0, r2
 800f13e:	f7fe fde8 	bl	800dd12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f146:	4b1b      	ldr	r3, [pc, #108]	@ (800f1b4 <xTaskIncrementTick+0x168>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d3b8      	bcc.n	800f0c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f150:	2301      	movs	r3, #1
 800f152:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f154:	e7b5      	b.n	800f0c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f156:	4b17      	ldr	r3, [pc, #92]	@ (800f1b4 <xTaskIncrementTick+0x168>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f15c:	4914      	ldr	r1, [pc, #80]	@ (800f1b0 <xTaskIncrementTick+0x164>)
 800f15e:	4613      	mov	r3, r2
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	4413      	add	r3, r2
 800f164:	009b      	lsls	r3, r3, #2
 800f166:	440b      	add	r3, r1
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d901      	bls.n	800f172 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f16e:	2301      	movs	r3, #1
 800f170:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f172:	4b11      	ldr	r3, [pc, #68]	@ (800f1b8 <xTaskIncrementTick+0x16c>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d007      	beq.n	800f18a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f17a:	2301      	movs	r3, #1
 800f17c:	617b      	str	r3, [r7, #20]
 800f17e:	e004      	b.n	800f18a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f180:	4b0e      	ldr	r3, [pc, #56]	@ (800f1bc <xTaskIncrementTick+0x170>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	3301      	adds	r3, #1
 800f186:	4a0d      	ldr	r2, [pc, #52]	@ (800f1bc <xTaskIncrementTick+0x170>)
 800f188:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f18a:	697b      	ldr	r3, [r7, #20]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3718      	adds	r7, #24
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	24001db4 	.word	0x24001db4
 800f198:	24001d90 	.word	0x24001d90
 800f19c:	24001d44 	.word	0x24001d44
 800f1a0:	24001d48 	.word	0x24001d48
 800f1a4:	24001da4 	.word	0x24001da4
 800f1a8:	24001dac 	.word	0x24001dac
 800f1ac:	24001d94 	.word	0x24001d94
 800f1b0:	240018bc 	.word	0x240018bc
 800f1b4:	240018b8 	.word	0x240018b8
 800f1b8:	24001da0 	.word	0x24001da0
 800f1bc:	24001d9c 	.word	0x24001d9c

0800f1c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b085      	sub	sp, #20
 800f1c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f1c6:	4b2b      	ldr	r3, [pc, #172]	@ (800f274 <vTaskSwitchContext+0xb4>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d003      	beq.n	800f1d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f1ce:	4b2a      	ldr	r3, [pc, #168]	@ (800f278 <vTaskSwitchContext+0xb8>)
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f1d4:	e047      	b.n	800f266 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f1d6:	4b28      	ldr	r3, [pc, #160]	@ (800f278 <vTaskSwitchContext+0xb8>)
 800f1d8:	2200      	movs	r2, #0
 800f1da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1dc:	4b27      	ldr	r3, [pc, #156]	@ (800f27c <vTaskSwitchContext+0xbc>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	60fb      	str	r3, [r7, #12]
 800f1e2:	e011      	b.n	800f208 <vTaskSwitchContext+0x48>
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d10b      	bne.n	800f202 <vTaskSwitchContext+0x42>
	__asm volatile
 800f1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ee:	f383 8811 	msr	BASEPRI, r3
 800f1f2:	f3bf 8f6f 	isb	sy
 800f1f6:	f3bf 8f4f 	dsb	sy
 800f1fa:	607b      	str	r3, [r7, #4]
}
 800f1fc:	bf00      	nop
 800f1fe:	bf00      	nop
 800f200:	e7fd      	b.n	800f1fe <vTaskSwitchContext+0x3e>
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	3b01      	subs	r3, #1
 800f206:	60fb      	str	r3, [r7, #12]
 800f208:	491d      	ldr	r1, [pc, #116]	@ (800f280 <vTaskSwitchContext+0xc0>)
 800f20a:	68fa      	ldr	r2, [r7, #12]
 800f20c:	4613      	mov	r3, r2
 800f20e:	009b      	lsls	r3, r3, #2
 800f210:	4413      	add	r3, r2
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	440b      	add	r3, r1
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d0e3      	beq.n	800f1e4 <vTaskSwitchContext+0x24>
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	4613      	mov	r3, r2
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	4413      	add	r3, r2
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	4a16      	ldr	r2, [pc, #88]	@ (800f280 <vTaskSwitchContext+0xc0>)
 800f228:	4413      	add	r3, r2
 800f22a:	60bb      	str	r3, [r7, #8]
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	685a      	ldr	r2, [r3, #4]
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	605a      	str	r2, [r3, #4]
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	685a      	ldr	r2, [r3, #4]
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	3308      	adds	r3, #8
 800f23e:	429a      	cmp	r2, r3
 800f240:	d104      	bne.n	800f24c <vTaskSwitchContext+0x8c>
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	685a      	ldr	r2, [r3, #4]
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	605a      	str	r2, [r3, #4]
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	4a0c      	ldr	r2, [pc, #48]	@ (800f284 <vTaskSwitchContext+0xc4>)
 800f254:	6013      	str	r3, [r2, #0]
 800f256:	4a09      	ldr	r2, [pc, #36]	@ (800f27c <vTaskSwitchContext+0xbc>)
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f25c:	4b09      	ldr	r3, [pc, #36]	@ (800f284 <vTaskSwitchContext+0xc4>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	3354      	adds	r3, #84	@ 0x54
 800f262:	4a09      	ldr	r2, [pc, #36]	@ (800f288 <vTaskSwitchContext+0xc8>)
 800f264:	6013      	str	r3, [r2, #0]
}
 800f266:	bf00      	nop
 800f268:	3714      	adds	r7, #20
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	24001db4 	.word	0x24001db4
 800f278:	24001da0 	.word	0x24001da0
 800f27c:	24001d94 	.word	0x24001d94
 800f280:	240018bc 	.word	0x240018bc
 800f284:	240018b8 	.word	0x240018b8
 800f288:	24000014 	.word	0x24000014

0800f28c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d10b      	bne.n	800f2b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2a0:	f383 8811 	msr	BASEPRI, r3
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	60fb      	str	r3, [r7, #12]
}
 800f2ae:	bf00      	nop
 800f2b0:	bf00      	nop
 800f2b2:	e7fd      	b.n	800f2b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2b4:	4b07      	ldr	r3, [pc, #28]	@ (800f2d4 <vTaskPlaceOnEventList+0x48>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	3318      	adds	r3, #24
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7fe fd4c 	bl	800dd5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f2c2:	2101      	movs	r1, #1
 800f2c4:	6838      	ldr	r0, [r7, #0]
 800f2c6:	f000 fa87 	bl	800f7d8 <prvAddCurrentTaskToDelayedList>
}
 800f2ca:	bf00      	nop
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	240018b8 	.word	0x240018b8

0800f2d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b086      	sub	sp, #24
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d10b      	bne.n	800f302 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ee:	f383 8811 	msr	BASEPRI, r3
 800f2f2:	f3bf 8f6f 	isb	sy
 800f2f6:	f3bf 8f4f 	dsb	sy
 800f2fa:	617b      	str	r3, [r7, #20]
}
 800f2fc:	bf00      	nop
 800f2fe:	bf00      	nop
 800f300:	e7fd      	b.n	800f2fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f302:	4b0a      	ldr	r3, [pc, #40]	@ (800f32c <vTaskPlaceOnEventListRestricted+0x54>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	3318      	adds	r3, #24
 800f308:	4619      	mov	r1, r3
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f7fe fd01 	bl	800dd12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d002      	beq.n	800f31c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f316:	f04f 33ff 	mov.w	r3, #4294967295
 800f31a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f31c:	6879      	ldr	r1, [r7, #4]
 800f31e:	68b8      	ldr	r0, [r7, #8]
 800f320:	f000 fa5a 	bl	800f7d8 <prvAddCurrentTaskToDelayedList>
	}
 800f324:	bf00      	nop
 800f326:	3718      	adds	r7, #24
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	240018b8 	.word	0x240018b8

0800f330 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b086      	sub	sp, #24
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d10b      	bne.n	800f35e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f34a:	f383 8811 	msr	BASEPRI, r3
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	f3bf 8f4f 	dsb	sy
 800f356:	60fb      	str	r3, [r7, #12]
}
 800f358:	bf00      	nop
 800f35a:	bf00      	nop
 800f35c:	e7fd      	b.n	800f35a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	3318      	adds	r3, #24
 800f362:	4618      	mov	r0, r3
 800f364:	f7fe fd32 	bl	800ddcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f368:	4b1d      	ldr	r3, [pc, #116]	@ (800f3e0 <xTaskRemoveFromEventList+0xb0>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d11d      	bne.n	800f3ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	3304      	adds	r3, #4
 800f374:	4618      	mov	r0, r3
 800f376:	f7fe fd29 	bl	800ddcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f37e:	4b19      	ldr	r3, [pc, #100]	@ (800f3e4 <xTaskRemoveFromEventList+0xb4>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	429a      	cmp	r2, r3
 800f384:	d903      	bls.n	800f38e <xTaskRemoveFromEventList+0x5e>
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f38a:	4a16      	ldr	r2, [pc, #88]	@ (800f3e4 <xTaskRemoveFromEventList+0xb4>)
 800f38c:	6013      	str	r3, [r2, #0]
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f392:	4613      	mov	r3, r2
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	4413      	add	r3, r2
 800f398:	009b      	lsls	r3, r3, #2
 800f39a:	4a13      	ldr	r2, [pc, #76]	@ (800f3e8 <xTaskRemoveFromEventList+0xb8>)
 800f39c:	441a      	add	r2, r3
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	3304      	adds	r3, #4
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	4610      	mov	r0, r2
 800f3a6:	f7fe fcb4 	bl	800dd12 <vListInsertEnd>
 800f3aa:	e005      	b.n	800f3b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	3318      	adds	r3, #24
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	480e      	ldr	r0, [pc, #56]	@ (800f3ec <xTaskRemoveFromEventList+0xbc>)
 800f3b4:	f7fe fcad 	bl	800dd12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3bc:	4b0c      	ldr	r3, [pc, #48]	@ (800f3f0 <xTaskRemoveFromEventList+0xc0>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d905      	bls.n	800f3d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f3ca:	4b0a      	ldr	r3, [pc, #40]	@ (800f3f4 <xTaskRemoveFromEventList+0xc4>)
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	601a      	str	r2, [r3, #0]
 800f3d0:	e001      	b.n	800f3d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f3d6:	697b      	ldr	r3, [r7, #20]
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3718      	adds	r7, #24
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	24001db4 	.word	0x24001db4
 800f3e4:	24001d94 	.word	0x24001d94
 800f3e8:	240018bc 	.word	0x240018bc
 800f3ec:	24001d4c 	.word	0x24001d4c
 800f3f0:	240018b8 	.word	0x240018b8
 800f3f4:	24001da0 	.word	0x24001da0

0800f3f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b083      	sub	sp, #12
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f400:	4b06      	ldr	r3, [pc, #24]	@ (800f41c <vTaskInternalSetTimeOutState+0x24>)
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f408:	4b05      	ldr	r3, [pc, #20]	@ (800f420 <vTaskInternalSetTimeOutState+0x28>)
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	605a      	str	r2, [r3, #4]
}
 800f410:	bf00      	nop
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr
 800f41c:	24001da4 	.word	0x24001da4
 800f420:	24001d90 	.word	0x24001d90

0800f424 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b088      	sub	sp, #32
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d10b      	bne.n	800f44c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f438:	f383 8811 	msr	BASEPRI, r3
 800f43c:	f3bf 8f6f 	isb	sy
 800f440:	f3bf 8f4f 	dsb	sy
 800f444:	613b      	str	r3, [r7, #16]
}
 800f446:	bf00      	nop
 800f448:	bf00      	nop
 800f44a:	e7fd      	b.n	800f448 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d10b      	bne.n	800f46a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f456:	f383 8811 	msr	BASEPRI, r3
 800f45a:	f3bf 8f6f 	isb	sy
 800f45e:	f3bf 8f4f 	dsb	sy
 800f462:	60fb      	str	r3, [r7, #12]
}
 800f464:	bf00      	nop
 800f466:	bf00      	nop
 800f468:	e7fd      	b.n	800f466 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f46a:	f000 fe95 	bl	8010198 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f46e:	4b1d      	ldr	r3, [pc, #116]	@ (800f4e4 <xTaskCheckForTimeOut+0xc0>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	69ba      	ldr	r2, [r7, #24]
 800f47a:	1ad3      	subs	r3, r2, r3
 800f47c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f486:	d102      	bne.n	800f48e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f488:	2300      	movs	r3, #0
 800f48a:	61fb      	str	r3, [r7, #28]
 800f48c:	e023      	b.n	800f4d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	4b15      	ldr	r3, [pc, #84]	@ (800f4e8 <xTaskCheckForTimeOut+0xc4>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	429a      	cmp	r2, r3
 800f498:	d007      	beq.n	800f4aa <xTaskCheckForTimeOut+0x86>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	69ba      	ldr	r2, [r7, #24]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d302      	bcc.n	800f4aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	61fb      	str	r3, [r7, #28]
 800f4a8:	e015      	b.n	800f4d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	697a      	ldr	r2, [r7, #20]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d20b      	bcs.n	800f4cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	1ad2      	subs	r2, r2, r3
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7ff ff99 	bl	800f3f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	61fb      	str	r3, [r7, #28]
 800f4ca:	e004      	b.n	800f4d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f4d6:	f000 fe91 	bl	80101fc <vPortExitCritical>

	return xReturn;
 800f4da:	69fb      	ldr	r3, [r7, #28]
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3720      	adds	r7, #32
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	24001d90 	.word	0x24001d90
 800f4e8:	24001da4 	.word	0x24001da4

0800f4ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f4f0:	4b03      	ldr	r3, [pc, #12]	@ (800f500 <vTaskMissedYield+0x14>)
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	601a      	str	r2, [r3, #0]
}
 800f4f6:	bf00      	nop
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr
 800f500:	24001da0 	.word	0x24001da0

0800f504 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f50c:	f000 f852 	bl	800f5b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f510:	4b06      	ldr	r3, [pc, #24]	@ (800f52c <prvIdleTask+0x28>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b01      	cmp	r3, #1
 800f516:	d9f9      	bls.n	800f50c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f518:	4b05      	ldr	r3, [pc, #20]	@ (800f530 <prvIdleTask+0x2c>)
 800f51a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f51e:	601a      	str	r2, [r3, #0]
 800f520:	f3bf 8f4f 	dsb	sy
 800f524:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f528:	e7f0      	b.n	800f50c <prvIdleTask+0x8>
 800f52a:	bf00      	nop
 800f52c:	240018bc 	.word	0x240018bc
 800f530:	e000ed04 	.word	0xe000ed04

0800f534 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f53a:	2300      	movs	r3, #0
 800f53c:	607b      	str	r3, [r7, #4]
 800f53e:	e00c      	b.n	800f55a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	4613      	mov	r3, r2
 800f544:	009b      	lsls	r3, r3, #2
 800f546:	4413      	add	r3, r2
 800f548:	009b      	lsls	r3, r3, #2
 800f54a:	4a12      	ldr	r2, [pc, #72]	@ (800f594 <prvInitialiseTaskLists+0x60>)
 800f54c:	4413      	add	r3, r2
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fe fbb2 	bl	800dcb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	3301      	adds	r3, #1
 800f558:	607b      	str	r3, [r7, #4]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2b37      	cmp	r3, #55	@ 0x37
 800f55e:	d9ef      	bls.n	800f540 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f560:	480d      	ldr	r0, [pc, #52]	@ (800f598 <prvInitialiseTaskLists+0x64>)
 800f562:	f7fe fba9 	bl	800dcb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f566:	480d      	ldr	r0, [pc, #52]	@ (800f59c <prvInitialiseTaskLists+0x68>)
 800f568:	f7fe fba6 	bl	800dcb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f56c:	480c      	ldr	r0, [pc, #48]	@ (800f5a0 <prvInitialiseTaskLists+0x6c>)
 800f56e:	f7fe fba3 	bl	800dcb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f572:	480c      	ldr	r0, [pc, #48]	@ (800f5a4 <prvInitialiseTaskLists+0x70>)
 800f574:	f7fe fba0 	bl	800dcb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f578:	480b      	ldr	r0, [pc, #44]	@ (800f5a8 <prvInitialiseTaskLists+0x74>)
 800f57a:	f7fe fb9d 	bl	800dcb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f57e:	4b0b      	ldr	r3, [pc, #44]	@ (800f5ac <prvInitialiseTaskLists+0x78>)
 800f580:	4a05      	ldr	r2, [pc, #20]	@ (800f598 <prvInitialiseTaskLists+0x64>)
 800f582:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f584:	4b0a      	ldr	r3, [pc, #40]	@ (800f5b0 <prvInitialiseTaskLists+0x7c>)
 800f586:	4a05      	ldr	r2, [pc, #20]	@ (800f59c <prvInitialiseTaskLists+0x68>)
 800f588:	601a      	str	r2, [r3, #0]
}
 800f58a:	bf00      	nop
 800f58c:	3708      	adds	r7, #8
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	240018bc 	.word	0x240018bc
 800f598:	24001d1c 	.word	0x24001d1c
 800f59c:	24001d30 	.word	0x24001d30
 800f5a0:	24001d4c 	.word	0x24001d4c
 800f5a4:	24001d60 	.word	0x24001d60
 800f5a8:	24001d78 	.word	0x24001d78
 800f5ac:	24001d44 	.word	0x24001d44
 800f5b0:	24001d48 	.word	0x24001d48

0800f5b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5ba:	e019      	b.n	800f5f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f5bc:	f000 fdec 	bl	8010198 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5c0:	4b10      	ldr	r3, [pc, #64]	@ (800f604 <prvCheckTasksWaitingTermination+0x50>)
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	68db      	ldr	r3, [r3, #12]
 800f5c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	3304      	adds	r3, #4
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fe fbfd 	bl	800ddcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f608 <prvCheckTasksWaitingTermination+0x54>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	3b01      	subs	r3, #1
 800f5d8:	4a0b      	ldr	r2, [pc, #44]	@ (800f608 <prvCheckTasksWaitingTermination+0x54>)
 800f5da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f5dc:	4b0b      	ldr	r3, [pc, #44]	@ (800f60c <prvCheckTasksWaitingTermination+0x58>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	4a0a      	ldr	r2, [pc, #40]	@ (800f60c <prvCheckTasksWaitingTermination+0x58>)
 800f5e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f5e6:	f000 fe09 	bl	80101fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 f810 	bl	800f610 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5f0:	4b06      	ldr	r3, [pc, #24]	@ (800f60c <prvCheckTasksWaitingTermination+0x58>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d1e1      	bne.n	800f5bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f5f8:	bf00      	nop
 800f5fa:	bf00      	nop
 800f5fc:	3708      	adds	r7, #8
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	24001d60 	.word	0x24001d60
 800f608:	24001d8c 	.word	0x24001d8c
 800f60c:	24001d74 	.word	0x24001d74

0800f610 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	3354      	adds	r3, #84	@ 0x54
 800f61c:	4618      	mov	r0, r3
 800f61e:	f001 f8d3 	bl	80107c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d108      	bne.n	800f63e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f630:	4618      	mov	r0, r3
 800f632:	f000 ffa1 	bl	8010578 <vPortFree>
				vPortFree( pxTCB );
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 ff9e 	bl	8010578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f63c:	e019      	b.n	800f672 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f644:	2b01      	cmp	r3, #1
 800f646:	d103      	bne.n	800f650 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f000 ff95 	bl	8010578 <vPortFree>
	}
 800f64e:	e010      	b.n	800f672 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f656:	2b02      	cmp	r3, #2
 800f658:	d00b      	beq.n	800f672 <prvDeleteTCB+0x62>
	__asm volatile
 800f65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f65e:	f383 8811 	msr	BASEPRI, r3
 800f662:	f3bf 8f6f 	isb	sy
 800f666:	f3bf 8f4f 	dsb	sy
 800f66a:	60fb      	str	r3, [r7, #12]
}
 800f66c:	bf00      	nop
 800f66e:	bf00      	nop
 800f670:	e7fd      	b.n	800f66e <prvDeleteTCB+0x5e>
	}
 800f672:	bf00      	nop
 800f674:	3710      	adds	r7, #16
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
	...

0800f67c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f682:	4b0c      	ldr	r3, [pc, #48]	@ (800f6b4 <prvResetNextTaskUnblockTime+0x38>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d104      	bne.n	800f696 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f68c:	4b0a      	ldr	r3, [pc, #40]	@ (800f6b8 <prvResetNextTaskUnblockTime+0x3c>)
 800f68e:	f04f 32ff 	mov.w	r2, #4294967295
 800f692:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f694:	e008      	b.n	800f6a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f696:	4b07      	ldr	r3, [pc, #28]	@ (800f6b4 <prvResetNextTaskUnblockTime+0x38>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	68db      	ldr	r3, [r3, #12]
 800f69c:	68db      	ldr	r3, [r3, #12]
 800f69e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	4a04      	ldr	r2, [pc, #16]	@ (800f6b8 <prvResetNextTaskUnblockTime+0x3c>)
 800f6a6:	6013      	str	r3, [r2, #0]
}
 800f6a8:	bf00      	nop
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	24001d44 	.word	0x24001d44
 800f6b8:	24001dac 	.word	0x24001dac

0800f6bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f6c2:	4b0b      	ldr	r3, [pc, #44]	@ (800f6f0 <xTaskGetSchedulerState+0x34>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d102      	bne.n	800f6d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	607b      	str	r3, [r7, #4]
 800f6ce:	e008      	b.n	800f6e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6d0:	4b08      	ldr	r3, [pc, #32]	@ (800f6f4 <xTaskGetSchedulerState+0x38>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d102      	bne.n	800f6de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f6d8:	2302      	movs	r3, #2
 800f6da:	607b      	str	r3, [r7, #4]
 800f6dc:	e001      	b.n	800f6e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f6e2:	687b      	ldr	r3, [r7, #4]
	}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr
 800f6f0:	24001d98 	.word	0x24001d98
 800f6f4:	24001db4 	.word	0x24001db4

0800f6f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b086      	sub	sp, #24
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f704:	2300      	movs	r3, #0
 800f706:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d058      	beq.n	800f7c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f70e:	4b2f      	ldr	r3, [pc, #188]	@ (800f7cc <xTaskPriorityDisinherit+0xd4>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	693a      	ldr	r2, [r7, #16]
 800f714:	429a      	cmp	r2, r3
 800f716:	d00b      	beq.n	800f730 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f71c:	f383 8811 	msr	BASEPRI, r3
 800f720:	f3bf 8f6f 	isb	sy
 800f724:	f3bf 8f4f 	dsb	sy
 800f728:	60fb      	str	r3, [r7, #12]
}
 800f72a:	bf00      	nop
 800f72c:	bf00      	nop
 800f72e:	e7fd      	b.n	800f72c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f734:	2b00      	cmp	r3, #0
 800f736:	d10b      	bne.n	800f750 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f73c:	f383 8811 	msr	BASEPRI, r3
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	f3bf 8f4f 	dsb	sy
 800f748:	60bb      	str	r3, [r7, #8]
}
 800f74a:	bf00      	nop
 800f74c:	bf00      	nop
 800f74e:	e7fd      	b.n	800f74c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f754:	1e5a      	subs	r2, r3, #1
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f762:	429a      	cmp	r2, r3
 800f764:	d02c      	beq.n	800f7c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d128      	bne.n	800f7c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	3304      	adds	r3, #4
 800f772:	4618      	mov	r0, r3
 800f774:	f7fe fb2a 	bl	800ddcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f784:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f790:	4b0f      	ldr	r3, [pc, #60]	@ (800f7d0 <xTaskPriorityDisinherit+0xd8>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	429a      	cmp	r2, r3
 800f796:	d903      	bls.n	800f7a0 <xTaskPriorityDisinherit+0xa8>
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f79c:	4a0c      	ldr	r2, [pc, #48]	@ (800f7d0 <xTaskPriorityDisinherit+0xd8>)
 800f79e:	6013      	str	r3, [r2, #0]
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7a4:	4613      	mov	r3, r2
 800f7a6:	009b      	lsls	r3, r3, #2
 800f7a8:	4413      	add	r3, r2
 800f7aa:	009b      	lsls	r3, r3, #2
 800f7ac:	4a09      	ldr	r2, [pc, #36]	@ (800f7d4 <xTaskPriorityDisinherit+0xdc>)
 800f7ae:	441a      	add	r2, r3
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	3304      	adds	r3, #4
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	4610      	mov	r0, r2
 800f7b8:	f7fe faab 	bl	800dd12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f7c0:	697b      	ldr	r3, [r7, #20]
	}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3718      	adds	r7, #24
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	240018b8 	.word	0x240018b8
 800f7d0:	24001d94 	.word	0x24001d94
 800f7d4:	240018bc 	.word	0x240018bc

0800f7d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f7e2:	4b21      	ldr	r3, [pc, #132]	@ (800f868 <prvAddCurrentTaskToDelayedList+0x90>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7e8:	4b20      	ldr	r3, [pc, #128]	@ (800f86c <prvAddCurrentTaskToDelayedList+0x94>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	3304      	adds	r3, #4
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fe faec 	bl	800ddcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7fa:	d10a      	bne.n	800f812 <prvAddCurrentTaskToDelayedList+0x3a>
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d007      	beq.n	800f812 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f802:	4b1a      	ldr	r3, [pc, #104]	@ (800f86c <prvAddCurrentTaskToDelayedList+0x94>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	3304      	adds	r3, #4
 800f808:	4619      	mov	r1, r3
 800f80a:	4819      	ldr	r0, [pc, #100]	@ (800f870 <prvAddCurrentTaskToDelayedList+0x98>)
 800f80c:	f7fe fa81 	bl	800dd12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f810:	e026      	b.n	800f860 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f812:	68fa      	ldr	r2, [r7, #12]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4413      	add	r3, r2
 800f818:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f81a:	4b14      	ldr	r3, [pc, #80]	@ (800f86c <prvAddCurrentTaskToDelayedList+0x94>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	68ba      	ldr	r2, [r7, #8]
 800f820:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f822:	68ba      	ldr	r2, [r7, #8]
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	429a      	cmp	r2, r3
 800f828:	d209      	bcs.n	800f83e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f82a:	4b12      	ldr	r3, [pc, #72]	@ (800f874 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	4b0f      	ldr	r3, [pc, #60]	@ (800f86c <prvAddCurrentTaskToDelayedList+0x94>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	3304      	adds	r3, #4
 800f834:	4619      	mov	r1, r3
 800f836:	4610      	mov	r0, r2
 800f838:	f7fe fa8f 	bl	800dd5a <vListInsert>
}
 800f83c:	e010      	b.n	800f860 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f83e:	4b0e      	ldr	r3, [pc, #56]	@ (800f878 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	4b0a      	ldr	r3, [pc, #40]	@ (800f86c <prvAddCurrentTaskToDelayedList+0x94>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	3304      	adds	r3, #4
 800f848:	4619      	mov	r1, r3
 800f84a:	4610      	mov	r0, r2
 800f84c:	f7fe fa85 	bl	800dd5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f850:	4b0a      	ldr	r3, [pc, #40]	@ (800f87c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68ba      	ldr	r2, [r7, #8]
 800f856:	429a      	cmp	r2, r3
 800f858:	d202      	bcs.n	800f860 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f85a:	4a08      	ldr	r2, [pc, #32]	@ (800f87c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	6013      	str	r3, [r2, #0]
}
 800f860:	bf00      	nop
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	24001d90 	.word	0x24001d90
 800f86c:	240018b8 	.word	0x240018b8
 800f870:	24001d78 	.word	0x24001d78
 800f874:	24001d48 	.word	0x24001d48
 800f878:	24001d44 	.word	0x24001d44
 800f87c:	24001dac 	.word	0x24001dac

0800f880 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b08a      	sub	sp, #40	@ 0x28
 800f884:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f886:	2300      	movs	r3, #0
 800f888:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f88a:	f000 fb13 	bl	800feb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f88e:	4b1d      	ldr	r3, [pc, #116]	@ (800f904 <xTimerCreateTimerTask+0x84>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d021      	beq.n	800f8da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f896:	2300      	movs	r3, #0
 800f898:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f89a:	2300      	movs	r3, #0
 800f89c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f89e:	1d3a      	adds	r2, r7, #4
 800f8a0:	f107 0108 	add.w	r1, r7, #8
 800f8a4:	f107 030c 	add.w	r3, r7, #12
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7fe f9eb 	bl	800dc84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f8ae:	6879      	ldr	r1, [r7, #4]
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	9202      	str	r2, [sp, #8]
 800f8b6:	9301      	str	r3, [sp, #4]
 800f8b8:	2302      	movs	r3, #2
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	2300      	movs	r3, #0
 800f8be:	460a      	mov	r2, r1
 800f8c0:	4911      	ldr	r1, [pc, #68]	@ (800f908 <xTimerCreateTimerTask+0x88>)
 800f8c2:	4812      	ldr	r0, [pc, #72]	@ (800f90c <xTimerCreateTimerTask+0x8c>)
 800f8c4:	f7ff f8a2 	bl	800ea0c <xTaskCreateStatic>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	4a11      	ldr	r2, [pc, #68]	@ (800f910 <xTimerCreateTimerTask+0x90>)
 800f8cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f8ce:	4b10      	ldr	r3, [pc, #64]	@ (800f910 <xTimerCreateTimerTask+0x90>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d001      	beq.n	800f8da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d10b      	bne.n	800f8f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8e4:	f383 8811 	msr	BASEPRI, r3
 800f8e8:	f3bf 8f6f 	isb	sy
 800f8ec:	f3bf 8f4f 	dsb	sy
 800f8f0:	613b      	str	r3, [r7, #16]
}
 800f8f2:	bf00      	nop
 800f8f4:	bf00      	nop
 800f8f6:	e7fd      	b.n	800f8f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f8f8:	697b      	ldr	r3, [r7, #20]
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3718      	adds	r7, #24
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	24001de8 	.word	0x24001de8
 800f908:	08010a1c 	.word	0x08010a1c
 800f90c:	0800fa4d 	.word	0x0800fa4d
 800f910:	24001dec 	.word	0x24001dec

0800f914 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b08a      	sub	sp, #40	@ 0x28
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
 800f920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f922:	2300      	movs	r3, #0
 800f924:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d10b      	bne.n	800f944 <xTimerGenericCommand+0x30>
	__asm volatile
 800f92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f930:	f383 8811 	msr	BASEPRI, r3
 800f934:	f3bf 8f6f 	isb	sy
 800f938:	f3bf 8f4f 	dsb	sy
 800f93c:	623b      	str	r3, [r7, #32]
}
 800f93e:	bf00      	nop
 800f940:	bf00      	nop
 800f942:	e7fd      	b.n	800f940 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f944:	4b19      	ldr	r3, [pc, #100]	@ (800f9ac <xTimerGenericCommand+0x98>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d02a      	beq.n	800f9a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	2b05      	cmp	r3, #5
 800f95c:	dc18      	bgt.n	800f990 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f95e:	f7ff fead 	bl	800f6bc <xTaskGetSchedulerState>
 800f962:	4603      	mov	r3, r0
 800f964:	2b02      	cmp	r3, #2
 800f966:	d109      	bne.n	800f97c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f968:	4b10      	ldr	r3, [pc, #64]	@ (800f9ac <xTimerGenericCommand+0x98>)
 800f96a:	6818      	ldr	r0, [r3, #0]
 800f96c:	f107 0110 	add.w	r1, r7, #16
 800f970:	2300      	movs	r3, #0
 800f972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f974:	f7fe fb9a 	bl	800e0ac <xQueueGenericSend>
 800f978:	6278      	str	r0, [r7, #36]	@ 0x24
 800f97a:	e012      	b.n	800f9a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f97c:	4b0b      	ldr	r3, [pc, #44]	@ (800f9ac <xTimerGenericCommand+0x98>)
 800f97e:	6818      	ldr	r0, [r3, #0]
 800f980:	f107 0110 	add.w	r1, r7, #16
 800f984:	2300      	movs	r3, #0
 800f986:	2200      	movs	r2, #0
 800f988:	f7fe fb90 	bl	800e0ac <xQueueGenericSend>
 800f98c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f98e:	e008      	b.n	800f9a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f990:	4b06      	ldr	r3, [pc, #24]	@ (800f9ac <xTimerGenericCommand+0x98>)
 800f992:	6818      	ldr	r0, [r3, #0]
 800f994:	f107 0110 	add.w	r1, r7, #16
 800f998:	2300      	movs	r3, #0
 800f99a:	683a      	ldr	r2, [r7, #0]
 800f99c:	f7fe fc88 	bl	800e2b0 <xQueueGenericSendFromISR>
 800f9a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3728      	adds	r7, #40	@ 0x28
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	24001de8 	.word	0x24001de8

0800f9b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b088      	sub	sp, #32
 800f9b4:	af02      	add	r7, sp, #8
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9ba:	4b23      	ldr	r3, [pc, #140]	@ (800fa48 <prvProcessExpiredTimer+0x98>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	68db      	ldr	r3, [r3, #12]
 800f9c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	3304      	adds	r3, #4
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fe f9ff 	bl	800ddcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9d4:	f003 0304 	and.w	r3, r3, #4
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d023      	beq.n	800fa24 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	699a      	ldr	r2, [r3, #24]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	18d1      	adds	r1, r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	683a      	ldr	r2, [r7, #0]
 800f9e8:	6978      	ldr	r0, [r7, #20]
 800f9ea:	f000 f8d5 	bl	800fb98 <prvInsertTimerInActiveList>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d020      	beq.n	800fa36 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	2100      	movs	r1, #0
 800f9fe:	6978      	ldr	r0, [r7, #20]
 800fa00:	f7ff ff88 	bl	800f914 <xTimerGenericCommand>
 800fa04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d114      	bne.n	800fa36 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800fa0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa10:	f383 8811 	msr	BASEPRI, r3
 800fa14:	f3bf 8f6f 	isb	sy
 800fa18:	f3bf 8f4f 	dsb	sy
 800fa1c:	60fb      	str	r3, [r7, #12]
}
 800fa1e:	bf00      	nop
 800fa20:	bf00      	nop
 800fa22:	e7fd      	b.n	800fa20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa2a:	f023 0301 	bic.w	r3, r3, #1
 800fa2e:	b2da      	uxtb	r2, r3
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	6978      	ldr	r0, [r7, #20]
 800fa3c:	4798      	blx	r3
}
 800fa3e:	bf00      	nop
 800fa40:	3718      	adds	r7, #24
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	24001de0 	.word	0x24001de0

0800fa4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b084      	sub	sp, #16
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fa54:	f107 0308 	add.w	r3, r7, #8
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f000 f859 	bl	800fb10 <prvGetNextExpireTime>
 800fa5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	4619      	mov	r1, r3
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f000 f805 	bl	800fa74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fa6a:	f000 f8d7 	bl	800fc1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fa6e:	bf00      	nop
 800fa70:	e7f0      	b.n	800fa54 <prvTimerTask+0x8>
	...

0800fa74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fa7e:	f7ff fa29 	bl	800eed4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fa82:	f107 0308 	add.w	r3, r7, #8
 800fa86:	4618      	mov	r0, r3
 800fa88:	f000 f866 	bl	800fb58 <prvSampleTimeNow>
 800fa8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d130      	bne.n	800faf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d10a      	bne.n	800fab0 <prvProcessTimerOrBlockTask+0x3c>
 800fa9a:	687a      	ldr	r2, [r7, #4]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d806      	bhi.n	800fab0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800faa2:	f7ff fa25 	bl	800eef0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800faa6:	68f9      	ldr	r1, [r7, #12]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f7ff ff81 	bl	800f9b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800faae:	e024      	b.n	800fafa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d008      	beq.n	800fac8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fab6:	4b13      	ldr	r3, [pc, #76]	@ (800fb04 <prvProcessTimerOrBlockTask+0x90>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d101      	bne.n	800fac4 <prvProcessTimerOrBlockTask+0x50>
 800fac0:	2301      	movs	r3, #1
 800fac2:	e000      	b.n	800fac6 <prvProcessTimerOrBlockTask+0x52>
 800fac4:	2300      	movs	r3, #0
 800fac6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fac8:	4b0f      	ldr	r3, [pc, #60]	@ (800fb08 <prvProcessTimerOrBlockTask+0x94>)
 800faca:	6818      	ldr	r0, [r3, #0]
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	1ad3      	subs	r3, r2, r3
 800fad2:	683a      	ldr	r2, [r7, #0]
 800fad4:	4619      	mov	r1, r3
 800fad6:	f7fe ff65 	bl	800e9a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fada:	f7ff fa09 	bl	800eef0 <xTaskResumeAll>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d10a      	bne.n	800fafa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fae4:	4b09      	ldr	r3, [pc, #36]	@ (800fb0c <prvProcessTimerOrBlockTask+0x98>)
 800fae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800faea:	601a      	str	r2, [r3, #0]
 800faec:	f3bf 8f4f 	dsb	sy
 800faf0:	f3bf 8f6f 	isb	sy
}
 800faf4:	e001      	b.n	800fafa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800faf6:	f7ff f9fb 	bl	800eef0 <xTaskResumeAll>
}
 800fafa:	bf00      	nop
 800fafc:	3710      	adds	r7, #16
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	24001de4 	.word	0x24001de4
 800fb08:	24001de8 	.word	0x24001de8
 800fb0c:	e000ed04 	.word	0xe000ed04

0800fb10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fb10:	b480      	push	{r7}
 800fb12:	b085      	sub	sp, #20
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fb18:	4b0e      	ldr	r3, [pc, #56]	@ (800fb54 <prvGetNextExpireTime+0x44>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d101      	bne.n	800fb26 <prvGetNextExpireTime+0x16>
 800fb22:	2201      	movs	r2, #1
 800fb24:	e000      	b.n	800fb28 <prvGetNextExpireTime+0x18>
 800fb26:	2200      	movs	r2, #0
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d105      	bne.n	800fb40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb34:	4b07      	ldr	r3, [pc, #28]	@ (800fb54 <prvGetNextExpireTime+0x44>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	60fb      	str	r3, [r7, #12]
 800fb3e:	e001      	b.n	800fb44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fb40:	2300      	movs	r3, #0
 800fb42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fb44:	68fb      	ldr	r3, [r7, #12]
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	24001de0 	.word	0x24001de0

0800fb58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fb60:	f7ff fa64 	bl	800f02c <xTaskGetTickCount>
 800fb64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fb66:	4b0b      	ldr	r3, [pc, #44]	@ (800fb94 <prvSampleTimeNow+0x3c>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	68fa      	ldr	r2, [r7, #12]
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d205      	bcs.n	800fb7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fb70:	f000 f93a 	bl	800fde8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2201      	movs	r2, #1
 800fb78:	601a      	str	r2, [r3, #0]
 800fb7a:	e002      	b.n	800fb82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fb82:	4a04      	ldr	r2, [pc, #16]	@ (800fb94 <prvSampleTimeNow+0x3c>)
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fb88:	68fb      	ldr	r3, [r7, #12]
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	24001df0 	.word	0x24001df0

0800fb98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b086      	sub	sp, #24
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
 800fba4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fba6:	2300      	movs	r3, #0
 800fba8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	68ba      	ldr	r2, [r7, #8]
 800fbae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	68fa      	ldr	r2, [r7, #12]
 800fbb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fbb6:	68ba      	ldr	r2, [r7, #8]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d812      	bhi.n	800fbe4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	1ad2      	subs	r2, r2, r3
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	699b      	ldr	r3, [r3, #24]
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d302      	bcc.n	800fbd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fbcc:	2301      	movs	r3, #1
 800fbce:	617b      	str	r3, [r7, #20]
 800fbd0:	e01b      	b.n	800fc0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fbd2:	4b10      	ldr	r3, [pc, #64]	@ (800fc14 <prvInsertTimerInActiveList+0x7c>)
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	3304      	adds	r3, #4
 800fbda:	4619      	mov	r1, r3
 800fbdc:	4610      	mov	r0, r2
 800fbde:	f7fe f8bc 	bl	800dd5a <vListInsert>
 800fbe2:	e012      	b.n	800fc0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fbe4:	687a      	ldr	r2, [r7, #4]
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d206      	bcs.n	800fbfa <prvInsertTimerInActiveList+0x62>
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d302      	bcc.n	800fbfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	617b      	str	r3, [r7, #20]
 800fbf8:	e007      	b.n	800fc0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fbfa:	4b07      	ldr	r3, [pc, #28]	@ (800fc18 <prvInsertTimerInActiveList+0x80>)
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	3304      	adds	r3, #4
 800fc02:	4619      	mov	r1, r3
 800fc04:	4610      	mov	r0, r2
 800fc06:	f7fe f8a8 	bl	800dd5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fc0a:	697b      	ldr	r3, [r7, #20]
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3718      	adds	r7, #24
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	24001de4 	.word	0x24001de4
 800fc18:	24001de0 	.word	0x24001de0

0800fc1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b08e      	sub	sp, #56	@ 0x38
 800fc20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fc22:	e0ce      	b.n	800fdc2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	da19      	bge.n	800fc5e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fc2a:	1d3b      	adds	r3, r7, #4
 800fc2c:	3304      	adds	r3, #4
 800fc2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d10b      	bne.n	800fc4e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800fc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc3a:	f383 8811 	msr	BASEPRI, r3
 800fc3e:	f3bf 8f6f 	isb	sy
 800fc42:	f3bf 8f4f 	dsb	sy
 800fc46:	61fb      	str	r3, [r7, #28]
}
 800fc48:	bf00      	nop
 800fc4a:	bf00      	nop
 800fc4c:	e7fd      	b.n	800fc4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fc4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc54:	6850      	ldr	r0, [r2, #4]
 800fc56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc58:	6892      	ldr	r2, [r2, #8]
 800fc5a:	4611      	mov	r1, r2
 800fc5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	f2c0 80ae 	blt.w	800fdc2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fc6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc6c:	695b      	ldr	r3, [r3, #20]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d004      	beq.n	800fc7c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc74:	3304      	adds	r3, #4
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7fe f8a8 	bl	800ddcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc7c:	463b      	mov	r3, r7
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff ff6a 	bl	800fb58 <prvSampleTimeNow>
 800fc84:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2b09      	cmp	r3, #9
 800fc8a:	f200 8097 	bhi.w	800fdbc <prvProcessReceivedCommands+0x1a0>
 800fc8e:	a201      	add	r2, pc, #4	@ (adr r2, 800fc94 <prvProcessReceivedCommands+0x78>)
 800fc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc94:	0800fcbd 	.word	0x0800fcbd
 800fc98:	0800fcbd 	.word	0x0800fcbd
 800fc9c:	0800fcbd 	.word	0x0800fcbd
 800fca0:	0800fd33 	.word	0x0800fd33
 800fca4:	0800fd47 	.word	0x0800fd47
 800fca8:	0800fd93 	.word	0x0800fd93
 800fcac:	0800fcbd 	.word	0x0800fcbd
 800fcb0:	0800fcbd 	.word	0x0800fcbd
 800fcb4:	0800fd33 	.word	0x0800fd33
 800fcb8:	0800fd47 	.word	0x0800fd47
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fcc2:	f043 0301 	orr.w	r3, r3, #1
 800fcc6:	b2da      	uxtb	r2, r3
 800fcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fcce:	68ba      	ldr	r2, [r7, #8]
 800fcd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd2:	699b      	ldr	r3, [r3, #24]
 800fcd4:	18d1      	adds	r1, r2, r3
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fcdc:	f7ff ff5c 	bl	800fb98 <prvInsertTimerInActiveList>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d06c      	beq.n	800fdc0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fce8:	6a1b      	ldr	r3, [r3, #32]
 800fcea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fcec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fcee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fcf4:	f003 0304 	and.w	r3, r3, #4
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d061      	beq.n	800fdc0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fcfc:	68ba      	ldr	r2, [r7, #8]
 800fcfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd00:	699b      	ldr	r3, [r3, #24]
 800fd02:	441a      	add	r2, r3
 800fd04:	2300      	movs	r3, #0
 800fd06:	9300      	str	r3, [sp, #0]
 800fd08:	2300      	movs	r3, #0
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd0e:	f7ff fe01 	bl	800f914 <xTimerGenericCommand>
 800fd12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fd14:	6a3b      	ldr	r3, [r7, #32]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d152      	bne.n	800fdc0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800fd1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1e:	f383 8811 	msr	BASEPRI, r3
 800fd22:	f3bf 8f6f 	isb	sy
 800fd26:	f3bf 8f4f 	dsb	sy
 800fd2a:	61bb      	str	r3, [r7, #24]
}
 800fd2c:	bf00      	nop
 800fd2e:	bf00      	nop
 800fd30:	e7fd      	b.n	800fd2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd38:	f023 0301 	bic.w	r3, r3, #1
 800fd3c:	b2da      	uxtb	r2, r3
 800fd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fd44:	e03d      	b.n	800fdc2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd4c:	f043 0301 	orr.w	r3, r3, #1
 800fd50:	b2da      	uxtb	r2, r3
 800fd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fd58:	68ba      	ldr	r2, [r7, #8]
 800fd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd60:	699b      	ldr	r3, [r3, #24]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d10b      	bne.n	800fd7e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800fd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6a:	f383 8811 	msr	BASEPRI, r3
 800fd6e:	f3bf 8f6f 	isb	sy
 800fd72:	f3bf 8f4f 	dsb	sy
 800fd76:	617b      	str	r3, [r7, #20]
}
 800fd78:	bf00      	nop
 800fd7a:	bf00      	nop
 800fd7c:	e7fd      	b.n	800fd7a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd80:	699a      	ldr	r2, [r3, #24]
 800fd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd84:	18d1      	adds	r1, r2, r3
 800fd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd8c:	f7ff ff04 	bl	800fb98 <prvInsertTimerInActiveList>
					break;
 800fd90:	e017      	b.n	800fdc2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd98:	f003 0302 	and.w	r3, r3, #2
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d103      	bne.n	800fda8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fda0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fda2:	f000 fbe9 	bl	8010578 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fda6:	e00c      	b.n	800fdc2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fdae:	f023 0301 	bic.w	r3, r3, #1
 800fdb2:	b2da      	uxtb	r2, r3
 800fdb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fdba:	e002      	b.n	800fdc2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fdbc:	bf00      	nop
 800fdbe:	e000      	b.n	800fdc2 <prvProcessReceivedCommands+0x1a6>
					break;
 800fdc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fdc2:	4b08      	ldr	r3, [pc, #32]	@ (800fde4 <prvProcessReceivedCommands+0x1c8>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	1d39      	adds	r1, r7, #4
 800fdc8:	2200      	movs	r2, #0
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7fe fb0e 	bl	800e3ec <xQueueReceive>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	f47f af26 	bne.w	800fc24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fdd8:	bf00      	nop
 800fdda:	bf00      	nop
 800fddc:	3730      	adds	r7, #48	@ 0x30
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	24001de8 	.word	0x24001de8

0800fde8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b088      	sub	sp, #32
 800fdec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fdee:	e049      	b.n	800fe84 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fdf0:	4b2e      	ldr	r3, [pc, #184]	@ (800feac <prvSwitchTimerLists+0xc4>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdfa:	4b2c      	ldr	r3, [pc, #176]	@ (800feac <prvSwitchTimerLists+0xc4>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	3304      	adds	r3, #4
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fd ffdf 	bl	800ddcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	6a1b      	ldr	r3, [r3, #32]
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fe1c:	f003 0304 	and.w	r3, r3, #4
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d02f      	beq.n	800fe84 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	699b      	ldr	r3, [r3, #24]
 800fe28:	693a      	ldr	r2, [r7, #16]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fe2e:	68ba      	ldr	r2, [r7, #8]
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d90e      	bls.n	800fe54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	68ba      	ldr	r2, [r7, #8]
 800fe3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	68fa      	ldr	r2, [r7, #12]
 800fe40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fe42:	4b1a      	ldr	r3, [pc, #104]	@ (800feac <prvSwitchTimerLists+0xc4>)
 800fe44:	681a      	ldr	r2, [r3, #0]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	3304      	adds	r3, #4
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	4610      	mov	r0, r2
 800fe4e:	f7fd ff84 	bl	800dd5a <vListInsert>
 800fe52:	e017      	b.n	800fe84 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe54:	2300      	movs	r3, #0
 800fe56:	9300      	str	r3, [sp, #0]
 800fe58:	2300      	movs	r3, #0
 800fe5a:	693a      	ldr	r2, [r7, #16]
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	68f8      	ldr	r0, [r7, #12]
 800fe60:	f7ff fd58 	bl	800f914 <xTimerGenericCommand>
 800fe64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10b      	bne.n	800fe84 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fe6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe70:	f383 8811 	msr	BASEPRI, r3
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	603b      	str	r3, [r7, #0]
}
 800fe7e:	bf00      	nop
 800fe80:	bf00      	nop
 800fe82:	e7fd      	b.n	800fe80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe84:	4b09      	ldr	r3, [pc, #36]	@ (800feac <prvSwitchTimerLists+0xc4>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d1b0      	bne.n	800fdf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fe8e:	4b07      	ldr	r3, [pc, #28]	@ (800feac <prvSwitchTimerLists+0xc4>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fe94:	4b06      	ldr	r3, [pc, #24]	@ (800feb0 <prvSwitchTimerLists+0xc8>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a04      	ldr	r2, [pc, #16]	@ (800feac <prvSwitchTimerLists+0xc4>)
 800fe9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fe9c:	4a04      	ldr	r2, [pc, #16]	@ (800feb0 <prvSwitchTimerLists+0xc8>)
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	6013      	str	r3, [r2, #0]
}
 800fea2:	bf00      	nop
 800fea4:	3718      	adds	r7, #24
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
 800feaa:	bf00      	nop
 800feac:	24001de0 	.word	0x24001de0
 800feb0:	24001de4 	.word	0x24001de4

0800feb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800feba:	f000 f96d 	bl	8010198 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800febe:	4b15      	ldr	r3, [pc, #84]	@ (800ff14 <prvCheckForValidListAndQueue+0x60>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d120      	bne.n	800ff08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fec6:	4814      	ldr	r0, [pc, #80]	@ (800ff18 <prvCheckForValidListAndQueue+0x64>)
 800fec8:	f7fd fef6 	bl	800dcb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fecc:	4813      	ldr	r0, [pc, #76]	@ (800ff1c <prvCheckForValidListAndQueue+0x68>)
 800fece:	f7fd fef3 	bl	800dcb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fed2:	4b13      	ldr	r3, [pc, #76]	@ (800ff20 <prvCheckForValidListAndQueue+0x6c>)
 800fed4:	4a10      	ldr	r2, [pc, #64]	@ (800ff18 <prvCheckForValidListAndQueue+0x64>)
 800fed6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fed8:	4b12      	ldr	r3, [pc, #72]	@ (800ff24 <prvCheckForValidListAndQueue+0x70>)
 800feda:	4a10      	ldr	r2, [pc, #64]	@ (800ff1c <prvCheckForValidListAndQueue+0x68>)
 800fedc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fede:	2300      	movs	r3, #0
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	4b11      	ldr	r3, [pc, #68]	@ (800ff28 <prvCheckForValidListAndQueue+0x74>)
 800fee4:	4a11      	ldr	r2, [pc, #68]	@ (800ff2c <prvCheckForValidListAndQueue+0x78>)
 800fee6:	2110      	movs	r1, #16
 800fee8:	200a      	movs	r0, #10
 800feea:	f7fe f803 	bl	800def4 <xQueueGenericCreateStatic>
 800feee:	4603      	mov	r3, r0
 800fef0:	4a08      	ldr	r2, [pc, #32]	@ (800ff14 <prvCheckForValidListAndQueue+0x60>)
 800fef2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fef4:	4b07      	ldr	r3, [pc, #28]	@ (800ff14 <prvCheckForValidListAndQueue+0x60>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d005      	beq.n	800ff08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fefc:	4b05      	ldr	r3, [pc, #20]	@ (800ff14 <prvCheckForValidListAndQueue+0x60>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	490b      	ldr	r1, [pc, #44]	@ (800ff30 <prvCheckForValidListAndQueue+0x7c>)
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fe fd24 	bl	800e950 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff08:	f000 f978 	bl	80101fc <vPortExitCritical>
}
 800ff0c:	bf00      	nop
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	24001de8 	.word	0x24001de8
 800ff18:	24001db8 	.word	0x24001db8
 800ff1c:	24001dcc 	.word	0x24001dcc
 800ff20:	24001de0 	.word	0x24001de0
 800ff24:	24001de4 	.word	0x24001de4
 800ff28:	24001e94 	.word	0x24001e94
 800ff2c:	24001df4 	.word	0x24001df4
 800ff30:	08010a24 	.word	0x08010a24

0800ff34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ff34:	b480      	push	{r7}
 800ff36:	b085      	sub	sp, #20
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	3b04      	subs	r3, #4
 800ff44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ff4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	3b04      	subs	r3, #4
 800ff52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	f023 0201 	bic.w	r2, r3, #1
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	3b04      	subs	r3, #4
 800ff62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ff64:	4a0c      	ldr	r2, [pc, #48]	@ (800ff98 <pxPortInitialiseStack+0x64>)
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	3b14      	subs	r3, #20
 800ff6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	3b04      	subs	r3, #4
 800ff7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f06f 0202 	mvn.w	r2, #2
 800ff82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	3b20      	subs	r3, #32
 800ff88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr
 800ff98:	0800ff9d 	.word	0x0800ff9d

0800ff9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b085      	sub	sp, #20
 800ffa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ffa6:	4b13      	ldr	r3, [pc, #76]	@ (800fff4 <prvTaskExitError+0x58>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffae:	d00b      	beq.n	800ffc8 <prvTaskExitError+0x2c>
	__asm volatile
 800ffb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffb4:	f383 8811 	msr	BASEPRI, r3
 800ffb8:	f3bf 8f6f 	isb	sy
 800ffbc:	f3bf 8f4f 	dsb	sy
 800ffc0:	60fb      	str	r3, [r7, #12]
}
 800ffc2:	bf00      	nop
 800ffc4:	bf00      	nop
 800ffc6:	e7fd      	b.n	800ffc4 <prvTaskExitError+0x28>
	__asm volatile
 800ffc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffcc:	f383 8811 	msr	BASEPRI, r3
 800ffd0:	f3bf 8f6f 	isb	sy
 800ffd4:	f3bf 8f4f 	dsb	sy
 800ffd8:	60bb      	str	r3, [r7, #8]
}
 800ffda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ffdc:	bf00      	nop
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d0fc      	beq.n	800ffde <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ffe4:	bf00      	nop
 800ffe6:	bf00      	nop
 800ffe8:	3714      	adds	r7, #20
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr
 800fff2:	bf00      	nop
 800fff4:	24000010 	.word	0x24000010
	...

08010000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010000:	4b07      	ldr	r3, [pc, #28]	@ (8010020 <pxCurrentTCBConst2>)
 8010002:	6819      	ldr	r1, [r3, #0]
 8010004:	6808      	ldr	r0, [r1, #0]
 8010006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000a:	f380 8809 	msr	PSP, r0
 801000e:	f3bf 8f6f 	isb	sy
 8010012:	f04f 0000 	mov.w	r0, #0
 8010016:	f380 8811 	msr	BASEPRI, r0
 801001a:	4770      	bx	lr
 801001c:	f3af 8000 	nop.w

08010020 <pxCurrentTCBConst2>:
 8010020:	240018b8 	.word	0x240018b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010024:	bf00      	nop
 8010026:	bf00      	nop

08010028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010028:	4808      	ldr	r0, [pc, #32]	@ (801004c <prvPortStartFirstTask+0x24>)
 801002a:	6800      	ldr	r0, [r0, #0]
 801002c:	6800      	ldr	r0, [r0, #0]
 801002e:	f380 8808 	msr	MSP, r0
 8010032:	f04f 0000 	mov.w	r0, #0
 8010036:	f380 8814 	msr	CONTROL, r0
 801003a:	b662      	cpsie	i
 801003c:	b661      	cpsie	f
 801003e:	f3bf 8f4f 	dsb	sy
 8010042:	f3bf 8f6f 	isb	sy
 8010046:	df00      	svc	0
 8010048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801004a:	bf00      	nop
 801004c:	e000ed08 	.word	0xe000ed08

08010050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b086      	sub	sp, #24
 8010054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010056:	4b47      	ldr	r3, [pc, #284]	@ (8010174 <xPortStartScheduler+0x124>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4a47      	ldr	r2, [pc, #284]	@ (8010178 <xPortStartScheduler+0x128>)
 801005c:	4293      	cmp	r3, r2
 801005e:	d10b      	bne.n	8010078 <xPortStartScheduler+0x28>
	__asm volatile
 8010060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010064:	f383 8811 	msr	BASEPRI, r3
 8010068:	f3bf 8f6f 	isb	sy
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	613b      	str	r3, [r7, #16]
}
 8010072:	bf00      	nop
 8010074:	bf00      	nop
 8010076:	e7fd      	b.n	8010074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010078:	4b3e      	ldr	r3, [pc, #248]	@ (8010174 <xPortStartScheduler+0x124>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4a3f      	ldr	r2, [pc, #252]	@ (801017c <xPortStartScheduler+0x12c>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d10b      	bne.n	801009a <xPortStartScheduler+0x4a>
	__asm volatile
 8010082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010086:	f383 8811 	msr	BASEPRI, r3
 801008a:	f3bf 8f6f 	isb	sy
 801008e:	f3bf 8f4f 	dsb	sy
 8010092:	60fb      	str	r3, [r7, #12]
}
 8010094:	bf00      	nop
 8010096:	bf00      	nop
 8010098:	e7fd      	b.n	8010096 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801009a:	4b39      	ldr	r3, [pc, #228]	@ (8010180 <xPortStartScheduler+0x130>)
 801009c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	22ff      	movs	r2, #255	@ 0xff
 80100aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80100b4:	78fb      	ldrb	r3, [r7, #3]
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80100bc:	b2da      	uxtb	r2, r3
 80100be:	4b31      	ldr	r3, [pc, #196]	@ (8010184 <xPortStartScheduler+0x134>)
 80100c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80100c2:	4b31      	ldr	r3, [pc, #196]	@ (8010188 <xPortStartScheduler+0x138>)
 80100c4:	2207      	movs	r2, #7
 80100c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80100c8:	e009      	b.n	80100de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80100ca:	4b2f      	ldr	r3, [pc, #188]	@ (8010188 <xPortStartScheduler+0x138>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	3b01      	subs	r3, #1
 80100d0:	4a2d      	ldr	r2, [pc, #180]	@ (8010188 <xPortStartScheduler+0x138>)
 80100d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80100d4:	78fb      	ldrb	r3, [r7, #3]
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	005b      	lsls	r3, r3, #1
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80100de:	78fb      	ldrb	r3, [r7, #3]
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100e6:	2b80      	cmp	r3, #128	@ 0x80
 80100e8:	d0ef      	beq.n	80100ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80100ea:	4b27      	ldr	r3, [pc, #156]	@ (8010188 <xPortStartScheduler+0x138>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f1c3 0307 	rsb	r3, r3, #7
 80100f2:	2b04      	cmp	r3, #4
 80100f4:	d00b      	beq.n	801010e <xPortStartScheduler+0xbe>
	__asm volatile
 80100f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100fa:	f383 8811 	msr	BASEPRI, r3
 80100fe:	f3bf 8f6f 	isb	sy
 8010102:	f3bf 8f4f 	dsb	sy
 8010106:	60bb      	str	r3, [r7, #8]
}
 8010108:	bf00      	nop
 801010a:	bf00      	nop
 801010c:	e7fd      	b.n	801010a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801010e:	4b1e      	ldr	r3, [pc, #120]	@ (8010188 <xPortStartScheduler+0x138>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	021b      	lsls	r3, r3, #8
 8010114:	4a1c      	ldr	r2, [pc, #112]	@ (8010188 <xPortStartScheduler+0x138>)
 8010116:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010118:	4b1b      	ldr	r3, [pc, #108]	@ (8010188 <xPortStartScheduler+0x138>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010120:	4a19      	ldr	r2, [pc, #100]	@ (8010188 <xPortStartScheduler+0x138>)
 8010122:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	b2da      	uxtb	r2, r3
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801012c:	4b17      	ldr	r3, [pc, #92]	@ (801018c <xPortStartScheduler+0x13c>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a16      	ldr	r2, [pc, #88]	@ (801018c <xPortStartScheduler+0x13c>)
 8010132:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010136:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010138:	4b14      	ldr	r3, [pc, #80]	@ (801018c <xPortStartScheduler+0x13c>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4a13      	ldr	r2, [pc, #76]	@ (801018c <xPortStartScheduler+0x13c>)
 801013e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010142:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010144:	f000 f8da 	bl	80102fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010148:	4b11      	ldr	r3, [pc, #68]	@ (8010190 <xPortStartScheduler+0x140>)
 801014a:	2200      	movs	r2, #0
 801014c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801014e:	f000 f8f9 	bl	8010344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010152:	4b10      	ldr	r3, [pc, #64]	@ (8010194 <xPortStartScheduler+0x144>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	4a0f      	ldr	r2, [pc, #60]	@ (8010194 <xPortStartScheduler+0x144>)
 8010158:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801015c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801015e:	f7ff ff63 	bl	8010028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010162:	f7ff f82d 	bl	800f1c0 <vTaskSwitchContext>
	prvTaskExitError();
 8010166:	f7ff ff19 	bl	800ff9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801016a:	2300      	movs	r3, #0
}
 801016c:	4618      	mov	r0, r3
 801016e:	3718      	adds	r7, #24
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	e000ed00 	.word	0xe000ed00
 8010178:	410fc271 	.word	0x410fc271
 801017c:	410fc270 	.word	0x410fc270
 8010180:	e000e400 	.word	0xe000e400
 8010184:	24001ee4 	.word	0x24001ee4
 8010188:	24001ee8 	.word	0x24001ee8
 801018c:	e000ed20 	.word	0xe000ed20
 8010190:	24000010 	.word	0x24000010
 8010194:	e000ef34 	.word	0xe000ef34

08010198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
	__asm volatile
 801019e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101a2:	f383 8811 	msr	BASEPRI, r3
 80101a6:	f3bf 8f6f 	isb	sy
 80101aa:	f3bf 8f4f 	dsb	sy
 80101ae:	607b      	str	r3, [r7, #4]
}
 80101b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80101b2:	4b10      	ldr	r3, [pc, #64]	@ (80101f4 <vPortEnterCritical+0x5c>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	3301      	adds	r3, #1
 80101b8:	4a0e      	ldr	r2, [pc, #56]	@ (80101f4 <vPortEnterCritical+0x5c>)
 80101ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80101bc:	4b0d      	ldr	r3, [pc, #52]	@ (80101f4 <vPortEnterCritical+0x5c>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d110      	bne.n	80101e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80101c4:	4b0c      	ldr	r3, [pc, #48]	@ (80101f8 <vPortEnterCritical+0x60>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00b      	beq.n	80101e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d2:	f383 8811 	msr	BASEPRI, r3
 80101d6:	f3bf 8f6f 	isb	sy
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	603b      	str	r3, [r7, #0]
}
 80101e0:	bf00      	nop
 80101e2:	bf00      	nop
 80101e4:	e7fd      	b.n	80101e2 <vPortEnterCritical+0x4a>
	}
}
 80101e6:	bf00      	nop
 80101e8:	370c      	adds	r7, #12
 80101ea:	46bd      	mov	sp, r7
 80101ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f0:	4770      	bx	lr
 80101f2:	bf00      	nop
 80101f4:	24000010 	.word	0x24000010
 80101f8:	e000ed04 	.word	0xe000ed04

080101fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010202:	4b12      	ldr	r3, [pc, #72]	@ (801024c <vPortExitCritical+0x50>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d10b      	bne.n	8010222 <vPortExitCritical+0x26>
	__asm volatile
 801020a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801020e:	f383 8811 	msr	BASEPRI, r3
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	f3bf 8f4f 	dsb	sy
 801021a:	607b      	str	r3, [r7, #4]
}
 801021c:	bf00      	nop
 801021e:	bf00      	nop
 8010220:	e7fd      	b.n	801021e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010222:	4b0a      	ldr	r3, [pc, #40]	@ (801024c <vPortExitCritical+0x50>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	3b01      	subs	r3, #1
 8010228:	4a08      	ldr	r2, [pc, #32]	@ (801024c <vPortExitCritical+0x50>)
 801022a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801022c:	4b07      	ldr	r3, [pc, #28]	@ (801024c <vPortExitCritical+0x50>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d105      	bne.n	8010240 <vPortExitCritical+0x44>
 8010234:	2300      	movs	r3, #0
 8010236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	f383 8811 	msr	BASEPRI, r3
}
 801023e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010240:	bf00      	nop
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr
 801024c:	24000010 	.word	0x24000010

08010250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010250:	f3ef 8009 	mrs	r0, PSP
 8010254:	f3bf 8f6f 	isb	sy
 8010258:	4b15      	ldr	r3, [pc, #84]	@ (80102b0 <pxCurrentTCBConst>)
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	f01e 0f10 	tst.w	lr, #16
 8010260:	bf08      	it	eq
 8010262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801026a:	6010      	str	r0, [r2, #0]
 801026c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010274:	f380 8811 	msr	BASEPRI, r0
 8010278:	f3bf 8f4f 	dsb	sy
 801027c:	f3bf 8f6f 	isb	sy
 8010280:	f7fe ff9e 	bl	800f1c0 <vTaskSwitchContext>
 8010284:	f04f 0000 	mov.w	r0, #0
 8010288:	f380 8811 	msr	BASEPRI, r0
 801028c:	bc09      	pop	{r0, r3}
 801028e:	6819      	ldr	r1, [r3, #0]
 8010290:	6808      	ldr	r0, [r1, #0]
 8010292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010296:	f01e 0f10 	tst.w	lr, #16
 801029a:	bf08      	it	eq
 801029c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80102a0:	f380 8809 	msr	PSP, r0
 80102a4:	f3bf 8f6f 	isb	sy
 80102a8:	4770      	bx	lr
 80102aa:	bf00      	nop
 80102ac:	f3af 8000 	nop.w

080102b0 <pxCurrentTCBConst>:
 80102b0:	240018b8 	.word	0x240018b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80102b4:	bf00      	nop
 80102b6:	bf00      	nop

080102b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
	__asm volatile
 80102be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c2:	f383 8811 	msr	BASEPRI, r3
 80102c6:	f3bf 8f6f 	isb	sy
 80102ca:	f3bf 8f4f 	dsb	sy
 80102ce:	607b      	str	r3, [r7, #4]
}
 80102d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80102d2:	f7fe febb 	bl	800f04c <xTaskIncrementTick>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d003      	beq.n	80102e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80102dc:	4b06      	ldr	r3, [pc, #24]	@ (80102f8 <xPortSysTickHandler+0x40>)
 80102de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102e2:	601a      	str	r2, [r3, #0]
 80102e4:	2300      	movs	r3, #0
 80102e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	f383 8811 	msr	BASEPRI, r3
}
 80102ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80102f0:	bf00      	nop
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	e000ed04 	.word	0xe000ed04

080102fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80102fc:	b480      	push	{r7}
 80102fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010300:	4b0b      	ldr	r3, [pc, #44]	@ (8010330 <vPortSetupTimerInterrupt+0x34>)
 8010302:	2200      	movs	r2, #0
 8010304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010306:	4b0b      	ldr	r3, [pc, #44]	@ (8010334 <vPortSetupTimerInterrupt+0x38>)
 8010308:	2200      	movs	r2, #0
 801030a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801030c:	4b0a      	ldr	r3, [pc, #40]	@ (8010338 <vPortSetupTimerInterrupt+0x3c>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4a0a      	ldr	r2, [pc, #40]	@ (801033c <vPortSetupTimerInterrupt+0x40>)
 8010312:	fba2 2303 	umull	r2, r3, r2, r3
 8010316:	099b      	lsrs	r3, r3, #6
 8010318:	4a09      	ldr	r2, [pc, #36]	@ (8010340 <vPortSetupTimerInterrupt+0x44>)
 801031a:	3b01      	subs	r3, #1
 801031c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801031e:	4b04      	ldr	r3, [pc, #16]	@ (8010330 <vPortSetupTimerInterrupt+0x34>)
 8010320:	2207      	movs	r2, #7
 8010322:	601a      	str	r2, [r3, #0]
}
 8010324:	bf00      	nop
 8010326:	46bd      	mov	sp, r7
 8010328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032c:	4770      	bx	lr
 801032e:	bf00      	nop
 8010330:	e000e010 	.word	0xe000e010
 8010334:	e000e018 	.word	0xe000e018
 8010338:	24000000 	.word	0x24000000
 801033c:	10624dd3 	.word	0x10624dd3
 8010340:	e000e014 	.word	0xe000e014

08010344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010344:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010354 <vPortEnableVFP+0x10>
 8010348:	6801      	ldr	r1, [r0, #0]
 801034a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801034e:	6001      	str	r1, [r0, #0]
 8010350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010352:	bf00      	nop
 8010354:	e000ed88 	.word	0xe000ed88

08010358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010358:	b480      	push	{r7}
 801035a:	b085      	sub	sp, #20
 801035c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801035e:	f3ef 8305 	mrs	r3, IPSR
 8010362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2b0f      	cmp	r3, #15
 8010368:	d915      	bls.n	8010396 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801036a:	4a18      	ldr	r2, [pc, #96]	@ (80103cc <vPortValidateInterruptPriority+0x74>)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	4413      	add	r3, r2
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010374:	4b16      	ldr	r3, [pc, #88]	@ (80103d0 <vPortValidateInterruptPriority+0x78>)
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	7afa      	ldrb	r2, [r7, #11]
 801037a:	429a      	cmp	r2, r3
 801037c:	d20b      	bcs.n	8010396 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801037e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010382:	f383 8811 	msr	BASEPRI, r3
 8010386:	f3bf 8f6f 	isb	sy
 801038a:	f3bf 8f4f 	dsb	sy
 801038e:	607b      	str	r3, [r7, #4]
}
 8010390:	bf00      	nop
 8010392:	bf00      	nop
 8010394:	e7fd      	b.n	8010392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010396:	4b0f      	ldr	r3, [pc, #60]	@ (80103d4 <vPortValidateInterruptPriority+0x7c>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801039e:	4b0e      	ldr	r3, [pc, #56]	@ (80103d8 <vPortValidateInterruptPriority+0x80>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d90b      	bls.n	80103be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80103a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103aa:	f383 8811 	msr	BASEPRI, r3
 80103ae:	f3bf 8f6f 	isb	sy
 80103b2:	f3bf 8f4f 	dsb	sy
 80103b6:	603b      	str	r3, [r7, #0]
}
 80103b8:	bf00      	nop
 80103ba:	bf00      	nop
 80103bc:	e7fd      	b.n	80103ba <vPortValidateInterruptPriority+0x62>
	}
 80103be:	bf00      	nop
 80103c0:	3714      	adds	r7, #20
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop
 80103cc:	e000e3f0 	.word	0xe000e3f0
 80103d0:	24001ee4 	.word	0x24001ee4
 80103d4:	e000ed0c 	.word	0xe000ed0c
 80103d8:	24001ee8 	.word	0x24001ee8

080103dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b08a      	sub	sp, #40	@ 0x28
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80103e4:	2300      	movs	r3, #0
 80103e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80103e8:	f7fe fd74 	bl	800eed4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80103ec:	4b5c      	ldr	r3, [pc, #368]	@ (8010560 <pvPortMalloc+0x184>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d101      	bne.n	80103f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80103f4:	f000 f924 	bl	8010640 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80103f8:	4b5a      	ldr	r3, [pc, #360]	@ (8010564 <pvPortMalloc+0x188>)
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4013      	ands	r3, r2
 8010400:	2b00      	cmp	r3, #0
 8010402:	f040 8095 	bne.w	8010530 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d01e      	beq.n	801044a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801040c:	2208      	movs	r2, #8
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4413      	add	r3, r2
 8010412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f003 0307 	and.w	r3, r3, #7
 801041a:	2b00      	cmp	r3, #0
 801041c:	d015      	beq.n	801044a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f023 0307 	bic.w	r3, r3, #7
 8010424:	3308      	adds	r3, #8
 8010426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f003 0307 	and.w	r3, r3, #7
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00b      	beq.n	801044a <pvPortMalloc+0x6e>
	__asm volatile
 8010432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010436:	f383 8811 	msr	BASEPRI, r3
 801043a:	f3bf 8f6f 	isb	sy
 801043e:	f3bf 8f4f 	dsb	sy
 8010442:	617b      	str	r3, [r7, #20]
}
 8010444:	bf00      	nop
 8010446:	bf00      	nop
 8010448:	e7fd      	b.n	8010446 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d06f      	beq.n	8010530 <pvPortMalloc+0x154>
 8010450:	4b45      	ldr	r3, [pc, #276]	@ (8010568 <pvPortMalloc+0x18c>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	429a      	cmp	r2, r3
 8010458:	d86a      	bhi.n	8010530 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801045a:	4b44      	ldr	r3, [pc, #272]	@ (801056c <pvPortMalloc+0x190>)
 801045c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801045e:	4b43      	ldr	r3, [pc, #268]	@ (801056c <pvPortMalloc+0x190>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010464:	e004      	b.n	8010470 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801046a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	429a      	cmp	r2, r3
 8010478:	d903      	bls.n	8010482 <pvPortMalloc+0xa6>
 801047a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d1f1      	bne.n	8010466 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010482:	4b37      	ldr	r3, [pc, #220]	@ (8010560 <pvPortMalloc+0x184>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010488:	429a      	cmp	r2, r3
 801048a:	d051      	beq.n	8010530 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801048c:	6a3b      	ldr	r3, [r7, #32]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	2208      	movs	r2, #8
 8010492:	4413      	add	r3, r2
 8010494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	6a3b      	ldr	r3, [r7, #32]
 801049c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801049e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a0:	685a      	ldr	r2, [r3, #4]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	1ad2      	subs	r2, r2, r3
 80104a6:	2308      	movs	r3, #8
 80104a8:	005b      	lsls	r3, r3, #1
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d920      	bls.n	80104f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80104ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	4413      	add	r3, r2
 80104b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	f003 0307 	and.w	r3, r3, #7
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d00b      	beq.n	80104d8 <pvPortMalloc+0xfc>
	__asm volatile
 80104c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104c4:	f383 8811 	msr	BASEPRI, r3
 80104c8:	f3bf 8f6f 	isb	sy
 80104cc:	f3bf 8f4f 	dsb	sy
 80104d0:	613b      	str	r3, [r7, #16]
}
 80104d2:	bf00      	nop
 80104d4:	bf00      	nop
 80104d6:	e7fd      	b.n	80104d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80104d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104da:	685a      	ldr	r2, [r3, #4]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	1ad2      	subs	r2, r2, r3
 80104e0:	69bb      	ldr	r3, [r7, #24]
 80104e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80104e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80104ea:	69b8      	ldr	r0, [r7, #24]
 80104ec:	f000 f90a 	bl	8010704 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80104f0:	4b1d      	ldr	r3, [pc, #116]	@ (8010568 <pvPortMalloc+0x18c>)
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	4a1b      	ldr	r2, [pc, #108]	@ (8010568 <pvPortMalloc+0x18c>)
 80104fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80104fe:	4b1a      	ldr	r3, [pc, #104]	@ (8010568 <pvPortMalloc+0x18c>)
 8010500:	681a      	ldr	r2, [r3, #0]
 8010502:	4b1b      	ldr	r3, [pc, #108]	@ (8010570 <pvPortMalloc+0x194>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	429a      	cmp	r2, r3
 8010508:	d203      	bcs.n	8010512 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801050a:	4b17      	ldr	r3, [pc, #92]	@ (8010568 <pvPortMalloc+0x18c>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4a18      	ldr	r2, [pc, #96]	@ (8010570 <pvPortMalloc+0x194>)
 8010510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010514:	685a      	ldr	r2, [r3, #4]
 8010516:	4b13      	ldr	r3, [pc, #76]	@ (8010564 <pvPortMalloc+0x188>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	431a      	orrs	r2, r3
 801051c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801051e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010522:	2200      	movs	r2, #0
 8010524:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010526:	4b13      	ldr	r3, [pc, #76]	@ (8010574 <pvPortMalloc+0x198>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	3301      	adds	r3, #1
 801052c:	4a11      	ldr	r2, [pc, #68]	@ (8010574 <pvPortMalloc+0x198>)
 801052e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010530:	f7fe fcde 	bl	800eef0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	f003 0307 	and.w	r3, r3, #7
 801053a:	2b00      	cmp	r3, #0
 801053c:	d00b      	beq.n	8010556 <pvPortMalloc+0x17a>
	__asm volatile
 801053e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010542:	f383 8811 	msr	BASEPRI, r3
 8010546:	f3bf 8f6f 	isb	sy
 801054a:	f3bf 8f4f 	dsb	sy
 801054e:	60fb      	str	r3, [r7, #12]
}
 8010550:	bf00      	nop
 8010552:	bf00      	nop
 8010554:	e7fd      	b.n	8010552 <pvPortMalloc+0x176>
	return pvReturn;
 8010556:	69fb      	ldr	r3, [r7, #28]
}
 8010558:	4618      	mov	r0, r3
 801055a:	3728      	adds	r7, #40	@ 0x28
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}
 8010560:	24005af4 	.word	0x24005af4
 8010564:	24005b08 	.word	0x24005b08
 8010568:	24005af8 	.word	0x24005af8
 801056c:	24005aec 	.word	0x24005aec
 8010570:	24005afc 	.word	0x24005afc
 8010574:	24005b00 	.word	0x24005b00

08010578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b086      	sub	sp, #24
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d04f      	beq.n	801062a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801058a:	2308      	movs	r3, #8
 801058c:	425b      	negs	r3, r3
 801058e:	697a      	ldr	r2, [r7, #20]
 8010590:	4413      	add	r3, r2
 8010592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	685a      	ldr	r2, [r3, #4]
 801059c:	4b25      	ldr	r3, [pc, #148]	@ (8010634 <vPortFree+0xbc>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4013      	ands	r3, r2
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d10b      	bne.n	80105be <vPortFree+0x46>
	__asm volatile
 80105a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105aa:	f383 8811 	msr	BASEPRI, r3
 80105ae:	f3bf 8f6f 	isb	sy
 80105b2:	f3bf 8f4f 	dsb	sy
 80105b6:	60fb      	str	r3, [r7, #12]
}
 80105b8:	bf00      	nop
 80105ba:	bf00      	nop
 80105bc:	e7fd      	b.n	80105ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00b      	beq.n	80105de <vPortFree+0x66>
	__asm volatile
 80105c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105ca:	f383 8811 	msr	BASEPRI, r3
 80105ce:	f3bf 8f6f 	isb	sy
 80105d2:	f3bf 8f4f 	dsb	sy
 80105d6:	60bb      	str	r3, [r7, #8]
}
 80105d8:	bf00      	nop
 80105da:	bf00      	nop
 80105dc:	e7fd      	b.n	80105da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	685a      	ldr	r2, [r3, #4]
 80105e2:	4b14      	ldr	r3, [pc, #80]	@ (8010634 <vPortFree+0xbc>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4013      	ands	r3, r2
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d01e      	beq.n	801062a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d11a      	bne.n	801062a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	685a      	ldr	r2, [r3, #4]
 80105f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010634 <vPortFree+0xbc>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	43db      	mvns	r3, r3
 80105fe:	401a      	ands	r2, r3
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010604:	f7fe fc66 	bl	800eed4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	685a      	ldr	r2, [r3, #4]
 801060c:	4b0a      	ldr	r3, [pc, #40]	@ (8010638 <vPortFree+0xc0>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4413      	add	r3, r2
 8010612:	4a09      	ldr	r2, [pc, #36]	@ (8010638 <vPortFree+0xc0>)
 8010614:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010616:	6938      	ldr	r0, [r7, #16]
 8010618:	f000 f874 	bl	8010704 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801061c:	4b07      	ldr	r3, [pc, #28]	@ (801063c <vPortFree+0xc4>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	3301      	adds	r3, #1
 8010622:	4a06      	ldr	r2, [pc, #24]	@ (801063c <vPortFree+0xc4>)
 8010624:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010626:	f7fe fc63 	bl	800eef0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801062a:	bf00      	nop
 801062c:	3718      	adds	r7, #24
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	24005b08 	.word	0x24005b08
 8010638:	24005af8 	.word	0x24005af8
 801063c:	24005b04 	.word	0x24005b04

08010640 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010640:	b480      	push	{r7}
 8010642:	b085      	sub	sp, #20
 8010644:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010646:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801064a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801064c:	4b27      	ldr	r3, [pc, #156]	@ (80106ec <prvHeapInit+0xac>)
 801064e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f003 0307 	and.w	r3, r3, #7
 8010656:	2b00      	cmp	r3, #0
 8010658:	d00c      	beq.n	8010674 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	3307      	adds	r3, #7
 801065e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f023 0307 	bic.w	r3, r3, #7
 8010666:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010668:	68ba      	ldr	r2, [r7, #8]
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	1ad3      	subs	r3, r2, r3
 801066e:	4a1f      	ldr	r2, [pc, #124]	@ (80106ec <prvHeapInit+0xac>)
 8010670:	4413      	add	r3, r2
 8010672:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010678:	4a1d      	ldr	r2, [pc, #116]	@ (80106f0 <prvHeapInit+0xb0>)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801067e:	4b1c      	ldr	r3, [pc, #112]	@ (80106f0 <prvHeapInit+0xb0>)
 8010680:	2200      	movs	r2, #0
 8010682:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	68ba      	ldr	r2, [r7, #8]
 8010688:	4413      	add	r3, r2
 801068a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801068c:	2208      	movs	r2, #8
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	1a9b      	subs	r3, r3, r2
 8010692:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f023 0307 	bic.w	r3, r3, #7
 801069a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	4a15      	ldr	r2, [pc, #84]	@ (80106f4 <prvHeapInit+0xb4>)
 80106a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80106a2:	4b14      	ldr	r3, [pc, #80]	@ (80106f4 <prvHeapInit+0xb4>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	2200      	movs	r2, #0
 80106a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80106aa:	4b12      	ldr	r3, [pc, #72]	@ (80106f4 <prvHeapInit+0xb4>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	2200      	movs	r2, #0
 80106b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	68fa      	ldr	r2, [r7, #12]
 80106ba:	1ad2      	subs	r2, r2, r3
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80106c0:	4b0c      	ldr	r3, [pc, #48]	@ (80106f4 <prvHeapInit+0xb4>)
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	4a0a      	ldr	r2, [pc, #40]	@ (80106f8 <prvHeapInit+0xb8>)
 80106ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	685b      	ldr	r3, [r3, #4]
 80106d4:	4a09      	ldr	r2, [pc, #36]	@ (80106fc <prvHeapInit+0xbc>)
 80106d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80106d8:	4b09      	ldr	r3, [pc, #36]	@ (8010700 <prvHeapInit+0xc0>)
 80106da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80106de:	601a      	str	r2, [r3, #0]
}
 80106e0:	bf00      	nop
 80106e2:	3714      	adds	r7, #20
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr
 80106ec:	24001eec 	.word	0x24001eec
 80106f0:	24005aec 	.word	0x24005aec
 80106f4:	24005af4 	.word	0x24005af4
 80106f8:	24005afc 	.word	0x24005afc
 80106fc:	24005af8 	.word	0x24005af8
 8010700:	24005b08 	.word	0x24005b08

08010704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010704:	b480      	push	{r7}
 8010706:	b085      	sub	sp, #20
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801070c:	4b28      	ldr	r3, [pc, #160]	@ (80107b0 <prvInsertBlockIntoFreeList+0xac>)
 801070e:	60fb      	str	r3, [r7, #12]
 8010710:	e002      	b.n	8010718 <prvInsertBlockIntoFreeList+0x14>
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	60fb      	str	r3, [r7, #12]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	429a      	cmp	r2, r3
 8010720:	d8f7      	bhi.n	8010712 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	685b      	ldr	r3, [r3, #4]
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	4413      	add	r3, r2
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	429a      	cmp	r2, r3
 8010732:	d108      	bne.n	8010746 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	685a      	ldr	r2, [r3, #4]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	685b      	ldr	r3, [r3, #4]
 801073c:	441a      	add	r2, r3
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	68ba      	ldr	r2, [r7, #8]
 8010750:	441a      	add	r2, r3
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	429a      	cmp	r2, r3
 8010758:	d118      	bne.n	801078c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	4b15      	ldr	r3, [pc, #84]	@ (80107b4 <prvInsertBlockIntoFreeList+0xb0>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	429a      	cmp	r2, r3
 8010764:	d00d      	beq.n	8010782 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	685a      	ldr	r2, [r3, #4]
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	441a      	add	r2, r3
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	601a      	str	r2, [r3, #0]
 8010780:	e008      	b.n	8010794 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010782:	4b0c      	ldr	r3, [pc, #48]	@ (80107b4 <prvInsertBlockIntoFreeList+0xb0>)
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	601a      	str	r2, [r3, #0]
 801078a:	e003      	b.n	8010794 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681a      	ldr	r2, [r3, #0]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	429a      	cmp	r2, r3
 801079a:	d002      	beq.n	80107a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80107a2:	bf00      	nop
 80107a4:	3714      	adds	r7, #20
 80107a6:	46bd      	mov	sp, r7
 80107a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ac:	4770      	bx	lr
 80107ae:	bf00      	nop
 80107b0:	24005aec 	.word	0x24005aec
 80107b4:	24005af4 	.word	0x24005af4

080107b8 <memset>:
 80107b8:	4402      	add	r2, r0
 80107ba:	4603      	mov	r3, r0
 80107bc:	4293      	cmp	r3, r2
 80107be:	d100      	bne.n	80107c2 <memset+0xa>
 80107c0:	4770      	bx	lr
 80107c2:	f803 1b01 	strb.w	r1, [r3], #1
 80107c6:	e7f9      	b.n	80107bc <memset+0x4>

080107c8 <_reclaim_reent>:
 80107c8:	4b29      	ldr	r3, [pc, #164]	@ (8010870 <_reclaim_reent+0xa8>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	4283      	cmp	r3, r0
 80107ce:	b570      	push	{r4, r5, r6, lr}
 80107d0:	4604      	mov	r4, r0
 80107d2:	d04b      	beq.n	801086c <_reclaim_reent+0xa4>
 80107d4:	69c3      	ldr	r3, [r0, #28]
 80107d6:	b1ab      	cbz	r3, 8010804 <_reclaim_reent+0x3c>
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	b16b      	cbz	r3, 80107f8 <_reclaim_reent+0x30>
 80107dc:	2500      	movs	r5, #0
 80107de:	69e3      	ldr	r3, [r4, #28]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	5959      	ldr	r1, [r3, r5]
 80107e4:	2900      	cmp	r1, #0
 80107e6:	d13b      	bne.n	8010860 <_reclaim_reent+0x98>
 80107e8:	3504      	adds	r5, #4
 80107ea:	2d80      	cmp	r5, #128	@ 0x80
 80107ec:	d1f7      	bne.n	80107de <_reclaim_reent+0x16>
 80107ee:	69e3      	ldr	r3, [r4, #28]
 80107f0:	4620      	mov	r0, r4
 80107f2:	68d9      	ldr	r1, [r3, #12]
 80107f4:	f000 f872 	bl	80108dc <_free_r>
 80107f8:	69e3      	ldr	r3, [r4, #28]
 80107fa:	6819      	ldr	r1, [r3, #0]
 80107fc:	b111      	cbz	r1, 8010804 <_reclaim_reent+0x3c>
 80107fe:	4620      	mov	r0, r4
 8010800:	f000 f86c 	bl	80108dc <_free_r>
 8010804:	6961      	ldr	r1, [r4, #20]
 8010806:	b111      	cbz	r1, 801080e <_reclaim_reent+0x46>
 8010808:	4620      	mov	r0, r4
 801080a:	f000 f867 	bl	80108dc <_free_r>
 801080e:	69e1      	ldr	r1, [r4, #28]
 8010810:	b111      	cbz	r1, 8010818 <_reclaim_reent+0x50>
 8010812:	4620      	mov	r0, r4
 8010814:	f000 f862 	bl	80108dc <_free_r>
 8010818:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801081a:	b111      	cbz	r1, 8010822 <_reclaim_reent+0x5a>
 801081c:	4620      	mov	r0, r4
 801081e:	f000 f85d 	bl	80108dc <_free_r>
 8010822:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010824:	b111      	cbz	r1, 801082c <_reclaim_reent+0x64>
 8010826:	4620      	mov	r0, r4
 8010828:	f000 f858 	bl	80108dc <_free_r>
 801082c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801082e:	b111      	cbz	r1, 8010836 <_reclaim_reent+0x6e>
 8010830:	4620      	mov	r0, r4
 8010832:	f000 f853 	bl	80108dc <_free_r>
 8010836:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010838:	b111      	cbz	r1, 8010840 <_reclaim_reent+0x78>
 801083a:	4620      	mov	r0, r4
 801083c:	f000 f84e 	bl	80108dc <_free_r>
 8010840:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010842:	b111      	cbz	r1, 801084a <_reclaim_reent+0x82>
 8010844:	4620      	mov	r0, r4
 8010846:	f000 f849 	bl	80108dc <_free_r>
 801084a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801084c:	b111      	cbz	r1, 8010854 <_reclaim_reent+0x8c>
 801084e:	4620      	mov	r0, r4
 8010850:	f000 f844 	bl	80108dc <_free_r>
 8010854:	6a23      	ldr	r3, [r4, #32]
 8010856:	b14b      	cbz	r3, 801086c <_reclaim_reent+0xa4>
 8010858:	4620      	mov	r0, r4
 801085a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801085e:	4718      	bx	r3
 8010860:	680e      	ldr	r6, [r1, #0]
 8010862:	4620      	mov	r0, r4
 8010864:	f000 f83a 	bl	80108dc <_free_r>
 8010868:	4631      	mov	r1, r6
 801086a:	e7bb      	b.n	80107e4 <_reclaim_reent+0x1c>
 801086c:	bd70      	pop	{r4, r5, r6, pc}
 801086e:	bf00      	nop
 8010870:	24000014 	.word	0x24000014

08010874 <__libc_init_array>:
 8010874:	b570      	push	{r4, r5, r6, lr}
 8010876:	4d0d      	ldr	r5, [pc, #52]	@ (80108ac <__libc_init_array+0x38>)
 8010878:	4c0d      	ldr	r4, [pc, #52]	@ (80108b0 <__libc_init_array+0x3c>)
 801087a:	1b64      	subs	r4, r4, r5
 801087c:	10a4      	asrs	r4, r4, #2
 801087e:	2600      	movs	r6, #0
 8010880:	42a6      	cmp	r6, r4
 8010882:	d109      	bne.n	8010898 <__libc_init_array+0x24>
 8010884:	4d0b      	ldr	r5, [pc, #44]	@ (80108b4 <__libc_init_array+0x40>)
 8010886:	4c0c      	ldr	r4, [pc, #48]	@ (80108b8 <__libc_init_array+0x44>)
 8010888:	f000 f87e 	bl	8010988 <_init>
 801088c:	1b64      	subs	r4, r4, r5
 801088e:	10a4      	asrs	r4, r4, #2
 8010890:	2600      	movs	r6, #0
 8010892:	42a6      	cmp	r6, r4
 8010894:	d105      	bne.n	80108a2 <__libc_init_array+0x2e>
 8010896:	bd70      	pop	{r4, r5, r6, pc}
 8010898:	f855 3b04 	ldr.w	r3, [r5], #4
 801089c:	4798      	blx	r3
 801089e:	3601      	adds	r6, #1
 80108a0:	e7ee      	b.n	8010880 <__libc_init_array+0xc>
 80108a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80108a6:	4798      	blx	r3
 80108a8:	3601      	adds	r6, #1
 80108aa:	e7f2      	b.n	8010892 <__libc_init_array+0x1e>
 80108ac:	08010acc 	.word	0x08010acc
 80108b0:	08010acc 	.word	0x08010acc
 80108b4:	08010acc 	.word	0x08010acc
 80108b8:	08010ad0 	.word	0x08010ad0

080108bc <__retarget_lock_acquire_recursive>:
 80108bc:	4770      	bx	lr

080108be <__retarget_lock_release_recursive>:
 80108be:	4770      	bx	lr

080108c0 <memcpy>:
 80108c0:	440a      	add	r2, r1
 80108c2:	4291      	cmp	r1, r2
 80108c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80108c8:	d100      	bne.n	80108cc <memcpy+0xc>
 80108ca:	4770      	bx	lr
 80108cc:	b510      	push	{r4, lr}
 80108ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108d6:	4291      	cmp	r1, r2
 80108d8:	d1f9      	bne.n	80108ce <memcpy+0xe>
 80108da:	bd10      	pop	{r4, pc}

080108dc <_free_r>:
 80108dc:	b538      	push	{r3, r4, r5, lr}
 80108de:	4605      	mov	r5, r0
 80108e0:	2900      	cmp	r1, #0
 80108e2:	d041      	beq.n	8010968 <_free_r+0x8c>
 80108e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108e8:	1f0c      	subs	r4, r1, #4
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	bfb8      	it	lt
 80108ee:	18e4      	addlt	r4, r4, r3
 80108f0:	f000 f83e 	bl	8010970 <__malloc_lock>
 80108f4:	4a1d      	ldr	r2, [pc, #116]	@ (801096c <_free_r+0x90>)
 80108f6:	6813      	ldr	r3, [r2, #0]
 80108f8:	b933      	cbnz	r3, 8010908 <_free_r+0x2c>
 80108fa:	6063      	str	r3, [r4, #4]
 80108fc:	6014      	str	r4, [r2, #0]
 80108fe:	4628      	mov	r0, r5
 8010900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010904:	f000 b83a 	b.w	801097c <__malloc_unlock>
 8010908:	42a3      	cmp	r3, r4
 801090a:	d908      	bls.n	801091e <_free_r+0x42>
 801090c:	6820      	ldr	r0, [r4, #0]
 801090e:	1821      	adds	r1, r4, r0
 8010910:	428b      	cmp	r3, r1
 8010912:	bf01      	itttt	eq
 8010914:	6819      	ldreq	r1, [r3, #0]
 8010916:	685b      	ldreq	r3, [r3, #4]
 8010918:	1809      	addeq	r1, r1, r0
 801091a:	6021      	streq	r1, [r4, #0]
 801091c:	e7ed      	b.n	80108fa <_free_r+0x1e>
 801091e:	461a      	mov	r2, r3
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	b10b      	cbz	r3, 8010928 <_free_r+0x4c>
 8010924:	42a3      	cmp	r3, r4
 8010926:	d9fa      	bls.n	801091e <_free_r+0x42>
 8010928:	6811      	ldr	r1, [r2, #0]
 801092a:	1850      	adds	r0, r2, r1
 801092c:	42a0      	cmp	r0, r4
 801092e:	d10b      	bne.n	8010948 <_free_r+0x6c>
 8010930:	6820      	ldr	r0, [r4, #0]
 8010932:	4401      	add	r1, r0
 8010934:	1850      	adds	r0, r2, r1
 8010936:	4283      	cmp	r3, r0
 8010938:	6011      	str	r1, [r2, #0]
 801093a:	d1e0      	bne.n	80108fe <_free_r+0x22>
 801093c:	6818      	ldr	r0, [r3, #0]
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	6053      	str	r3, [r2, #4]
 8010942:	4408      	add	r0, r1
 8010944:	6010      	str	r0, [r2, #0]
 8010946:	e7da      	b.n	80108fe <_free_r+0x22>
 8010948:	d902      	bls.n	8010950 <_free_r+0x74>
 801094a:	230c      	movs	r3, #12
 801094c:	602b      	str	r3, [r5, #0]
 801094e:	e7d6      	b.n	80108fe <_free_r+0x22>
 8010950:	6820      	ldr	r0, [r4, #0]
 8010952:	1821      	adds	r1, r4, r0
 8010954:	428b      	cmp	r3, r1
 8010956:	bf04      	itt	eq
 8010958:	6819      	ldreq	r1, [r3, #0]
 801095a:	685b      	ldreq	r3, [r3, #4]
 801095c:	6063      	str	r3, [r4, #4]
 801095e:	bf04      	itt	eq
 8010960:	1809      	addeq	r1, r1, r0
 8010962:	6021      	streq	r1, [r4, #0]
 8010964:	6054      	str	r4, [r2, #4]
 8010966:	e7ca      	b.n	80108fe <_free_r+0x22>
 8010968:	bd38      	pop	{r3, r4, r5, pc}
 801096a:	bf00      	nop
 801096c:	24005c48 	.word	0x24005c48

08010970 <__malloc_lock>:
 8010970:	4801      	ldr	r0, [pc, #4]	@ (8010978 <__malloc_lock+0x8>)
 8010972:	f7ff bfa3 	b.w	80108bc <__retarget_lock_acquire_recursive>
 8010976:	bf00      	nop
 8010978:	24005c44 	.word	0x24005c44

0801097c <__malloc_unlock>:
 801097c:	4801      	ldr	r0, [pc, #4]	@ (8010984 <__malloc_unlock+0x8>)
 801097e:	f7ff bf9e 	b.w	80108be <__retarget_lock_release_recursive>
 8010982:	bf00      	nop
 8010984:	24005c44 	.word	0x24005c44

08010988 <_init>:
 8010988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801098a:	bf00      	nop
 801098c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801098e:	bc08      	pop	{r3}
 8010990:	469e      	mov	lr, r3
 8010992:	4770      	bx	lr

08010994 <_fini>:
 8010994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010996:	bf00      	nop
 8010998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801099a:	bc08      	pop	{r3}
 801099c:	469e      	mov	lr, r3
 801099e:	4770      	bx	lr
