
Travel-Ticket-System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2a8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800e548  0800e548  0001e548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e5fc  0800e5fc  0001e5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e604  0800e604  0001e604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e608  0800e608  0001e608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800e60c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800e620  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800e680  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ee4  240000d4  0800e6e0  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004fb8  0800e6e0  00024fb8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003317d  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052bd  00000000  00000000  000532c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027b0  00000000  00000000  00058580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ed5  00000000  00000000  0005ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00042682  00000000  00000000  0005cc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031424  00000000  00000000  0009f287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a3f43  00000000  00000000  000d06ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000aea4  00000000  00000000  002745f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0027f494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e530 	.word	0x0800e530

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	0800e530 	.word	0x0800e530

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	240000f0 	.word	0x240000f0
 800060c:	24000144 	.word	0x24000144

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f002 fa4f 	bl	8002ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f83d 	bl	8000698 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800061e:	f000 f8bd 	bl	800079c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 fe8f 	bl	8001344 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000626:	f000 f8e9 	bl	80007fc <MX_ADC1_Init>
  MX_ADC2_Init();
 800062a:	f000 f95d 	bl	80008e8 <MX_ADC2_Init>
  MX_ADC3_Init();
 800062e:	f000 f9bf 	bl	80009b0 <MX_ADC3_Init>
  MX_ETH_Init();
 8000632:	f000 fa1f 	bl	8000a74 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8000636:	f000 fa69 	bl	8000b0c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800063a:	f000 facb 	bl	8000bd4 <MX_FDCAN2_Init>
  MX_FMC_Init();
 800063e:	f000 fe33 	bl	80012a8 <MX_FMC_Init>
  MX_LTDC_Init();
 8000642:	f000 fb2b 	bl	8000c9c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000646:	f000 fbdb 	bl	8000e00 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800064a:	f000 fc05 	bl	8000e58 <MX_RTC_Init>
  MX_SAI2_Init();
 800064e:	f000 fc2b 	bl	8000ea8 <MX_SAI2_Init>
  MX_SDMMC1_MMC_Init();
 8000652:	f000 fce7 	bl	8001024 <MX_SDMMC1_MMC_Init>
  MX_SPI2_Init();
 8000656:	f000 fd09 	bl	800106c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800065a:	f000 fda7 	bl	80011ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800065e:	f000 fdf1 	bl	8001244 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000662:	f000 fd57 	bl	8001114 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <main+0x80>)
 8000668:	1d3c      	adds	r4, r7, #4
 800066a:	461d      	mov	r5, r3
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f00c fcd2 	bl	800d026 <osThreadCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <main+0x84>)
 8000686:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000688:	f00c fcc6 	bl	800d018 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x7c>
 800068e:	bf00      	nop
 8000690:	0800e554 	.word	0x0800e554
 8000694:	24001244 	.word	0x24001244

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b09c      	sub	sp, #112	; 0x70
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a2:	224c      	movs	r2, #76	; 0x4c
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f00d ff08 	bl	800e4bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2220      	movs	r2, #32
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f00d ff02 	bl	800e4bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006b8:	2002      	movs	r0, #2
 80006ba:	f006 f8c7 	bl	800684c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemClock_Config+0xfc>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <SystemClock_Config+0xfc>)
 80006c8:	f023 0301 	bic.w	r3, r3, #1
 80006cc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <SystemClock_Config+0xfc>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <SystemClock_Config+0x100>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e0:	4a2d      	ldr	r2, [pc, #180]	; (8000798 <SystemClock_Config+0x100>)
 80006e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemClock_Config+0x100>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f4:	bf00      	nop
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemClock_Config+0x100>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000702:	d1f8      	bne.n	80006f6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000704:	230b      	movs	r3, #11
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000708:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800070e:	2301      	movs	r3, #1
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000712:	2340      	movs	r3, #64	; 0x40
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	2302      	movs	r3, #2
 8000720:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000722:	2316      	movs	r3, #22
 8000724:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000726:	23a9      	movs	r3, #169	; 0xa9
 8000728:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072e:	2304      	movs	r3, #4
 8000730:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000736:	2300      	movs	r3, #0
 8000738:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800073a:	2300      	movs	r3, #0
 800073c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	4618      	mov	r0, r3
 8000748:	f006 f984 	bl	8006a54 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000752:	f000 ffa9 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	233f      	movs	r3, #63	; 0x3f
 8000758:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2101      	movs	r1, #1
 800077a:	4618      	mov	r0, r3
 800077c:	f006 fdc4 	bl	8007308 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000786:	f000 ff8f 	bl	80016a8 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3770      	adds	r7, #112	; 0x70
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	58000400 	.word	0x58000400
 8000798:	58024800 	.word	0x58024800

0800079c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0b0      	sub	sp, #192	; 0xc0
 80007a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	22c0      	movs	r2, #192	; 0xc0
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f00d fe87 	bl	800e4bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007b2:	f04f 0300 	mov.w	r3, #0
 80007b6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80007be:	230c      	movs	r3, #12
 80007c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80007c2:	2305      	movs	r3, #5
 80007c4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007ce:	23c0      	movs	r3, #192	; 0xc0
 80007d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007d2:	2320      	movs	r3, #32
 80007d4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007da:	2300      	movs	r3, #0
 80007dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4618      	mov	r0, r3
 80007e4:	f007 f91c 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80007ee:	f000 ff5b 	bl	80016a8 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	37c0      	adds	r7, #192	; 0xc0
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
 800081c:	615a      	str	r2, [r3, #20]
 800081e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <MX_ADC1_Init+0xe4>)
 8000822:	4a30      	ldr	r2, [pc, #192]	; (80008e4 <MX_ADC1_Init+0xe8>)
 8000824:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <MX_ADC1_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <MX_ADC1_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_ADC1_Init+0xe4>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000838:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_ADC1_Init+0xe4>)
 800083a:	2204      	movs	r2, #4
 800083c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <MX_ADC1_Init+0xe4>)
 8000840:	2200      	movs	r2, #0
 8000842:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_ADC1_Init+0xe4>)
 8000846:	2200      	movs	r2, #0
 8000848:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <MX_ADC1_Init+0xe4>)
 800084c:	2201      	movs	r2, #1
 800084e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_ADC1_Init+0xe4>)
 8000852:	2200      	movs	r2, #0
 8000854:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000856:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_ADC1_Init+0xe4>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_ADC1_Init+0xe4>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_ADC1_Init+0xe4>)
 8000864:	2200      	movs	r2, #0
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_ADC1_Init+0xe4>)
 800086a:	2200      	movs	r2, #0
 800086c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_ADC1_Init+0xe4>)
 8000870:	2200      	movs	r2, #0
 8000872:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_ADC1_Init+0xe4>)
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087c:	4818      	ldr	r0, [pc, #96]	; (80008e0 <MX_ADC1_Init+0xe4>)
 800087e:	f002 fb93 	bl	8002fa8 <HAL_ADC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000888:	f000 ff0e 	bl	80016a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4812      	ldr	r0, [pc, #72]	; (80008e0 <MX_ADC1_Init+0xe4>)
 8000898:	f003 f9aa 	bl	8003bf0 <HAL_ADCEx_MultiModeConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008a2:	f000 ff01 	bl	80016a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008a6:	2301      	movs	r3, #1
 80008a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008aa:	2306      	movs	r3, #6
 80008ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b8:	2304      	movs	r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_ADC1_Init+0xe4>)
 80008ca:	f002 fd0f 	bl	80032ec <HAL_ADC_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80008d4:	f000 fee8 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2400037c 	.word	0x2400037c
 80008e4:	40022000 	.word	0x40022000

080008e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	615a      	str	r2, [r3, #20]
 80008fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <MX_ADC2_Init+0xc0>)
 8000902:	4a2a      	ldr	r2, [pc, #168]	; (80009ac <MX_ADC2_Init+0xc4>)
 8000904:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <MX_ADC2_Init+0xc0>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <MX_ADC2_Init+0xc0>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <MX_ADC2_Init+0xc0>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <MX_ADC2_Init+0xc0>)
 800091a:	2204      	movs	r2, #4
 800091c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800091e:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <MX_ADC2_Init+0xc0>)
 8000920:	2200      	movs	r2, #0
 8000922:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000924:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <MX_ADC2_Init+0xc0>)
 8000926:	2200      	movs	r2, #0
 8000928:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_ADC2_Init+0xc0>)
 800092c:	2201      	movs	r2, #1
 800092e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_ADC2_Init+0xc0>)
 8000932:	2200      	movs	r2, #0
 8000934:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_ADC2_Init+0xc0>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_ADC2_Init+0xc0>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_ADC2_Init+0xc0>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_ADC2_Init+0xc0>)
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_ADC2_Init+0xc0>)
 8000950:	2200      	movs	r2, #0
 8000952:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_ADC2_Init+0xc0>)
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800095c:	4812      	ldr	r0, [pc, #72]	; (80009a8 <MX_ADC2_Init+0xc0>)
 800095e:	f002 fb23 	bl	8002fa8 <HAL_ADC_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000968:	f000 fe9e 	bl	80016a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800096c:	2301      	movs	r3, #1
 800096e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000970:	2306      	movs	r3, #6
 8000972:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000978:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800097c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800097e:	2304      	movs	r3, #4
 8000980:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <MX_ADC2_Init+0xc0>)
 8000990:	f002 fcac 	bl	80032ec <HAL_ADC_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800099a:	f000 fe85 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3720      	adds	r7, #32
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	240003e0 	.word	0x240003e0
 80009ac:	40022100 	.word	0x40022100

080009b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	615a      	str	r2, [r3, #20]
 80009c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <MX_ADC3_Init+0xb8>)
 80009ca:	4a28      	ldr	r2, [pc, #160]	; (8000a6c <MX_ADC3_Init+0xbc>)
 80009cc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <MX_ADC3_Init+0xb8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009d4:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_ADC3_Init+0xb8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MX_ADC3_Init+0xb8>)
 80009dc:	2204      	movs	r2, #4
 80009de:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_ADC3_Init+0xb8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_ADC3_Init+0xb8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_ADC3_Init+0xb8>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ADC3_Init+0xb8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_ADC3_Init+0xb8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC3_Init+0xb8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_ADC3_Init+0xb8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_ADC3_Init+0xb8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_ADC3_Init+0xb8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_ADC3_Init+0xb8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a1e:	4812      	ldr	r0, [pc, #72]	; (8000a68 <MX_ADC3_Init+0xb8>)
 8000a20:	f002 fac2 	bl	8002fa8 <HAL_ADC_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000a2a:	f000 fe3d 	bl	80016a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_ADC3_Init+0xc0>)
 8000a30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a32:	2306      	movs	r3, #6
 8000a34:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a3a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a3e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a40:	2304      	movs	r3, #4
 8000a42:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_ADC3_Init+0xb8>)
 8000a52:	f002 fc4b 	bl	80032ec <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000a5c:	f000 fe24 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	24000444 	.word	0x24000444
 8000a6c:	58026000 	.word	0x58026000
 8000a70:	1d500080 	.word	0x1d500080

08000a74 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <MX_ETH_Init+0x80>)
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <MX_ETH_Init+0x84>)
 8000a7c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_ETH_Init+0x88>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_ETH_Init+0x88>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_ETH_Init+0x88>)
 8000a8c:	22e1      	movs	r2, #225	; 0xe1
 8000a8e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_ETH_Init+0x88>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_ETH_Init+0x88>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_ETH_Init+0x88>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_ETH_Init+0x80>)
 8000aa4:	4a15      	ldr	r2, [pc, #84]	; (8000afc <MX_ETH_Init+0x88>)
 8000aa6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_ETH_Init+0x80>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_ETH_Init+0x80>)
 8000ab0:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <MX_ETH_Init+0x8c>)
 8000ab2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_ETH_Init+0x80>)
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <MX_ETH_Init+0x90>)
 8000ab8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_ETH_Init+0x80>)
 8000abc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ac0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ac2:	480c      	ldr	r0, [pc, #48]	; (8000af4 <MX_ETH_Init+0x80>)
 8000ac4:	f003 fa56 	bl	8003f74 <HAL_ETH_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ace:	f000 fdeb 	bl	80016a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ad2:	2238      	movs	r2, #56	; 0x38
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <MX_ETH_Init+0x94>)
 8000ad8:	f00d fcf0 	bl	800e4bc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_ETH_Init+0x94>)
 8000ade:	2221      	movs	r2, #33	; 0x21
 8000ae0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_ETH_Init+0x94>)
 8000ae4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ae8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_ETH_Init+0x94>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	240004a8 	.word	0x240004a8
 8000af8:	40028000 	.word	0x40028000
 8000afc:	24001248 	.word	0x24001248
 8000b00:	24000074 	.word	0x24000074
 8000b04:	24000014 	.word	0x24000014
 8000b08:	24000344 	.word	0x24000344

08000b0c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b12:	4a2f      	ldr	r2, [pc, #188]	; (8000bd0 <MX_FDCAN1_Init+0xc4>)
 8000b14:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b36:	2210      	movs	r2, #16
 8000b38:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_FDCAN1_Init+0xc0>)
 8000bba:	f003 fdff 	bl	80047bc <HAL_FDCAN_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000bc4:	f000 fd70 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	24000558 	.word	0x24000558
 8000bd0:	4000a000 	.word	0x4000a000

08000bd4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000bda:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <MX_FDCAN2_Init+0xc4>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000be4:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bf6:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000bfc:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000bfe:	2210      	movs	r2, #16
 8000c00:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c10:	2202      	movs	r2, #2
 8000c12:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c46:	2204      	movs	r2, #4
 8000c48:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c52:	2204      	movs	r2, #4
 8000c54:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c82:	f003 fd9b 	bl	80047bc <HAL_FDCAN_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c8c:	f000 fd0c 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	240005f8 	.word	0x240005f8
 8000c98:	4000a400 	.word	0x4000a400

08000c9c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09a      	sub	sp, #104	; 0x68
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ca2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ca6:	2234      	movs	r2, #52	; 0x34
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f00d fc06 	bl	800e4bc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2234      	movs	r2, #52	; 0x34
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00d fc00 	bl	800e4bc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000cbc:	4b4e      	ldr	r3, [pc, #312]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000cbe:	4a4f      	ldr	r2, [pc, #316]	; (8000dfc <MX_LTDC_Init+0x160>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000cc2:	4b4d      	ldr	r3, [pc, #308]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cc8:	4b4b      	ldr	r3, [pc, #300]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cce:	4b4a      	ldr	r3, [pc, #296]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cd4:	4b48      	ldr	r3, [pc, #288]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000cda:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000ce0:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000ce6:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000ce8:	220e      	movs	r2, #14
 8000cea:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000cec:	4b42      	ldr	r3, [pc, #264]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000cee:	2205      	movs	r2, #5
 8000cf0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000cf2:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000cf4:	f240 228e 	movw	r2, #654	; 0x28e
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000cfa:	4b3f      	ldr	r3, [pc, #252]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000cfc:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000d02:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000d04:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000d0a:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000d0c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000d10:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d12:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d1a:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d22:	4b35      	ldr	r3, [pc, #212]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d2a:	4833      	ldr	r0, [pc, #204]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000d2c:	f004 fa74 	bl	8005218 <HAL_LTDC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000d36:	f000 fcb7 	bl	80016a8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d5c:	2305      	movs	r3, #5
 8000d5e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d82:	2200      	movs	r2, #0
 8000d84:	4619      	mov	r1, r3
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000d88:	f004 fb16 	bl	80053b8 <HAL_LTDC_ConfigLayer>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000d92:	f000 fc89 	bl	80016a8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000db8:	2305      	movs	r3, #5
 8000dba:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_LTDC_Init+0x15c>)
 8000de2:	f004 fae9 	bl	80053b8 <HAL_LTDC_ConfigLayer>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000dec:	f000 fc5c 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3768      	adds	r7, #104	; 0x68
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	24000698 	.word	0x24000698
 8000dfc:	50001000 	.word	0x50001000

08000e00 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_QUADSPI_Init+0x50>)
 8000e06:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <MX_QUADSPI_Init+0x54>)
 8000e08:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_QUADSPI_Init+0x50>)
 8000e0c:	22ff      	movs	r2, #255	; 0xff
 8000e0e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_QUADSPI_Init+0x50>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_QUADSPI_Init+0x50>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_QUADSPI_Init+0x50>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_QUADSPI_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_QUADSPI_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_QUADSPI_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_QUADSPI_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_QUADSPI_Init+0x50>)
 8000e3c:	f005 fd50 	bl	80068e0 <HAL_QSPI_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000e46:	f000 fc2f 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	24000740 	.word	0x24000740
 8000e54:	52005000 	.word	0x52005000

08000e58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_RTC_Init+0x48>)
 8000e5e:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <MX_RTC_Init+0x4c>)
 8000e60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_RTC_Init+0x48>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <MX_RTC_Init+0x48>)
 8000e6a:	227f      	movs	r2, #127	; 0x7f
 8000e6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_RTC_Init+0x48>)
 8000e70:	22ff      	movs	r2, #255	; 0xff
 8000e72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_RTC_Init+0x48>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_RTC_Init+0x48>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <MX_RTC_Init+0x48>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_RTC_Init+0x48>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_RTC_Init+0x48>)
 8000e8e:	f009 fac5 	bl	800a41c <HAL_RTC_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000e98:	f000 fc06 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2400078c 	.word	0x2400078c
 8000ea4:	58004000 	.word	0x58004000

08000ea8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000eac:	4b58      	ldr	r3, [pc, #352]	; (8001010 <MX_SAI2_Init+0x168>)
 8000eae:	4a59      	ldr	r2, [pc, #356]	; (8001014 <MX_SAI2_Init+0x16c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000eb2:	4b57      	ldr	r3, [pc, #348]	; (8001010 <MX_SAI2_Init+0x168>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000eb8:	4b55      	ldr	r3, [pc, #340]	; (8001010 <MX_SAI2_Init+0x168>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000ebe:	4b54      	ldr	r3, [pc, #336]	; (8001010 <MX_SAI2_Init+0x168>)
 8000ec0:	2240      	movs	r2, #64	; 0x40
 8000ec2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ec4:	4b52      	ldr	r3, [pc, #328]	; (8001010 <MX_SAI2_Init+0x168>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000eca:	4b51      	ldr	r3, [pc, #324]	; (8001010 <MX_SAI2_Init+0x168>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ed0:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <MX_SAI2_Init+0x168>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ed6:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <MX_SAI2_Init+0x168>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000edc:	4b4c      	ldr	r3, [pc, #304]	; (8001010 <MX_SAI2_Init+0x168>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ee2:	4b4b      	ldr	r3, [pc, #300]	; (8001010 <MX_SAI2_Init+0x168>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ee8:	4b49      	ldr	r3, [pc, #292]	; (8001010 <MX_SAI2_Init+0x168>)
 8000eea:	4a4b      	ldr	r2, [pc, #300]	; (8001018 <MX_SAI2_Init+0x170>)
 8000eec:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000eee:	4b48      	ldr	r3, [pc, #288]	; (8001010 <MX_SAI2_Init+0x168>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ef4:	4b46      	ldr	r3, [pc, #280]	; (8001010 <MX_SAI2_Init+0x168>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000efa:	4b45      	ldr	r3, [pc, #276]	; (8001010 <MX_SAI2_Init+0x168>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f00:	4b43      	ldr	r3, [pc, #268]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000f06:	4b42      	ldr	r3, [pc, #264]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8000f0e:	4b40      	ldr	r3, [pc, #256]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000f14:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000f1c:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f1e:	2208      	movs	r2, #8
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f28:	4b39      	ldr	r3, [pc, #228]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f34:	4b36      	ldr	r3, [pc, #216]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000f3a:	4b35      	ldr	r3, [pc, #212]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f40:	4b33      	ldr	r3, [pc, #204]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000f4c:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000f52:	482f      	ldr	r0, [pc, #188]	; (8001010 <MX_SAI2_Init+0x168>)
 8000f54:	f009 fb7a 	bl	800a64c <HAL_SAI_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8000f5e:	f000 fba3 	bl	80016a8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_SAI2_Init+0x174>)
 8000f64:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <MX_SAI2_Init+0x178>)
 8000f66:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <MX_SAI2_Init+0x174>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_SAI2_Init+0x174>)
 8000f70:	2203      	movs	r2, #3
 8000f72:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <MX_SAI2_Init+0x174>)
 8000f76:	2240      	movs	r2, #64	; 0x40
 8000f78:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_SAI2_Init+0x174>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_SAI2_Init+0x174>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <MX_SAI2_Init+0x174>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <MX_SAI2_Init+0x174>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_SAI2_Init+0x174>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <MX_SAI2_Init+0x174>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_SAI2_Init+0x174>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_SAI2_Init+0x174>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <MX_SAI2_Init+0x174>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_SAI2_Init+0x174>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <MX_SAI2_Init+0x174>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_SAI2_Init+0x174>)
 8000fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_SAI2_Init+0x174>)
 8000fc8:	2208      	movs	r2, #8
 8000fca:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <MX_SAI2_Init+0x174>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_SAI2_Init+0x174>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_SAI2_Init+0x174>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_SAI2_Init+0x174>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <MX_SAI2_Init+0x174>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_SAI2_Init+0x174>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <MX_SAI2_Init+0x174>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_SAI2_Init+0x174>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <MX_SAI2_Init+0x174>)
 8000ffe:	f009 fb25 	bl	800a64c <HAL_SAI_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001008:	f000 fb4e 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	240007b0 	.word	0x240007b0
 8001014:	40015c04 	.word	0x40015c04
 8001018:	0002ee00 	.word	0x0002ee00
 800101c:	24000848 	.word	0x24000848
 8001020:	40015c24 	.word	0x40015c24

08001024 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_SDMMC1_MMC_Init+0x40>)
 800102a:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <MX_SDMMC1_MMC_Init+0x44>)
 800102c:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <MX_SDMMC1_MMC_Init+0x40>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_SDMMC1_MMC_Init+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_SDMMC1_MMC_Init+0x40>)
 800103c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001040:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_SDMMC1_MMC_Init+0x40>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_SDMMC1_MMC_Init+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_SDMMC1_MMC_Init+0x40>)
 8001050:	f004 fb8a 	bl	8005768 <HAL_MMC_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 800105a:	f000 fb25 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	240008e0 	.word	0x240008e0
 8001068:	52007000 	.word	0x52007000

0800106c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <MX_SPI2_Init+0xa0>)
 8001072:	4a27      	ldr	r2, [pc, #156]	; (8001110 <MX_SPI2_Init+0xa4>)
 8001074:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <MX_SPI2_Init+0xa0>)
 8001078:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800107c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <MX_SPI2_Init+0xa0>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <MX_SPI2_Init+0xa0>)
 8001086:	2203      	movs	r2, #3
 8001088:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <MX_SPI2_Init+0xa0>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_SPI2_Init+0xa0>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_SPI2_Init+0xa0>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_SPI2_Init+0xa0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_SPI2_Init+0xa0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_SPI2_Init+0xa0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_SPI2_Init+0xa0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_SPI2_Init+0xa0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_SPI2_Init+0xa0>)
 80010bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_SPI2_Init+0xa0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_SPI2_Init+0xa0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_SPI2_Init+0xa0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <MX_SPI2_Init+0xa0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_SPI2_Init+0xa0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <MX_SPI2_Init+0xa0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_SPI2_Init+0xa0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <MX_SPI2_Init+0xa0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_SPI2_Init+0xa0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_SPI2_Init+0xa0>)
 80010fa:	f009 fdc7 	bl	800ac8c <HAL_SPI_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001104:	f000 fad0 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	24000b54 	.word	0x24000b54
 8001110:	40003800 	.word	0x40003800

08001114 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 800111a:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <MX_USART2_UART_Init+0x94>)
 800111c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115c:	4811      	ldr	r0, [pc, #68]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 800115e:	f009 fed4 	bl	800af0a <HAL_UART_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001168:	f000 fa9e 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116c:	2100      	movs	r1, #0
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001170:	f00a fed7 	bl	800bf22 <HAL_UARTEx_SetTxFifoThreshold>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800117a:	f000 fa95 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117e:	2100      	movs	r1, #0
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001182:	f00a ff0c 	bl	800bf9e <HAL_UARTEx_SetRxFifoThreshold>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800118c:	f000 fa8c 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001192:	f00a fe8d 	bl	800beb0 <HAL_UARTEx_DisableFifoMode>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800119c:	f000 fa84 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	24000bdc 	.word	0x24000bdc
 80011a8:	40004400 	.word	0x40004400

080011ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MX_USART3_UART_Init+0x94>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011f6:	f009 fe88 	bl	800af0a <HAL_UART_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 fa52 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_USART3_UART_Init+0x90>)
 8001208:	f00a fe8b 	bl	800bf22 <HAL_UARTEx_SetTxFifoThreshold>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001212:	f000 fa49 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <MX_USART3_UART_Init+0x90>)
 800121a:	f00a fec0 	bl	800bf9e <HAL_UARTEx_SetRxFifoThreshold>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001224:	f000 fa40 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_USART3_UART_Init+0x90>)
 800122a:	f00a fe41 	bl	800beb0 <HAL_UARTEx_DisableFifoMode>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001234:	f000 fa38 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	24000c70 	.word	0x24000c70
 8001240:	40004800 	.word	0x40004800

08001244 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800124c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001250:	2209      	movs	r2, #9
 8001252:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001256:	2202      	movs	r2, #2
 8001258:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001262:	2202      	movs	r2, #2
 8001264:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800127a:	2201      	movs	r2, #1
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001280:	2201      	movs	r2, #1
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001286:	2200      	movs	r2, #0
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800128c:	f005 f996 	bl	80065bc <HAL_PCD_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001296:	f000 fa07 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	24000d04 	.word	0x24000d04
 80012a4:	40080000 	.word	0x40080000

080012a8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]
 80012be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_FMC_Init+0x94>)
 80012c2:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <MX_FMC_Init+0x98>)
 80012c4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_FMC_Init+0x94>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_FMC_Init+0x94>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_FMC_Init+0x94>)
 80012d4:	2204      	movs	r2, #4
 80012d6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_FMC_Init+0x94>)
 80012da:	2210      	movs	r2, #16
 80012dc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_FMC_Init+0x94>)
 80012e0:	2240      	movs	r2, #64	; 0x40
 80012e2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_FMC_Init+0x94>)
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_FMC_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_FMC_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_FMC_Init+0x94>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_FMC_Init+0x94>)
 80012fe:	2200      	movs	r2, #0
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001302:	2310      	movs	r3, #16
 8001304:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001306:	2310      	movs	r3, #16
 8001308:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800130a:	2310      	movs	r3, #16
 800130c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800130e:	2310      	movs	r3, #16
 8001310:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001312:	2310      	movs	r3, #16
 8001314:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001316:	2310      	movs	r3, #16
 8001318:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800131a:	2310      	movs	r3, #16
 800131c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <MX_FMC_Init+0x94>)
 8001324:	f009 fc76 	bl	800ac14 <HAL_SDRAM_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800132e:	f000 f9bb 	bl	80016a8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	24001210 	.word	0x24001210
 8001340:	52004140 	.word	0x52004140

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b090      	sub	sp, #64	; 0x40
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800135a:	4bbf      	ldr	r3, [pc, #764]	; (8001658 <MX_GPIO_Init+0x314>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	4abd      	ldr	r2, [pc, #756]	; (8001658 <MX_GPIO_Init+0x314>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136a:	4bbb      	ldr	r3, [pc, #748]	; (8001658 <MX_GPIO_Init+0x314>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	4bb7      	ldr	r3, [pc, #732]	; (8001658 <MX_GPIO_Init+0x314>)
 800137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137e:	4ab6      	ldr	r2, [pc, #728]	; (8001658 <MX_GPIO_Init+0x314>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001388:	4bb3      	ldr	r3, [pc, #716]	; (8001658 <MX_GPIO_Init+0x314>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001396:	4bb0      	ldr	r3, [pc, #704]	; (8001658 <MX_GPIO_Init+0x314>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139c:	4aae      	ldr	r2, [pc, #696]	; (8001658 <MX_GPIO_Init+0x314>)
 800139e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a6:	4bac      	ldr	r3, [pc, #688]	; (8001658 <MX_GPIO_Init+0x314>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b0:	623b      	str	r3, [r7, #32]
 80013b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013b4:	4ba8      	ldr	r3, [pc, #672]	; (8001658 <MX_GPIO_Init+0x314>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	4aa7      	ldr	r2, [pc, #668]	; (8001658 <MX_GPIO_Init+0x314>)
 80013bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c4:	4ba4      	ldr	r3, [pc, #656]	; (8001658 <MX_GPIO_Init+0x314>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d2:	4ba1      	ldr	r3, [pc, #644]	; (8001658 <MX_GPIO_Init+0x314>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	4a9f      	ldr	r2, [pc, #636]	; (8001658 <MX_GPIO_Init+0x314>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e2:	4b9d      	ldr	r3, [pc, #628]	; (8001658 <MX_GPIO_Init+0x314>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f0:	4b99      	ldr	r3, [pc, #612]	; (8001658 <MX_GPIO_Init+0x314>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	4a98      	ldr	r2, [pc, #608]	; (8001658 <MX_GPIO_Init+0x314>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001400:	4b95      	ldr	r3, [pc, #596]	; (8001658 <MX_GPIO_Init+0x314>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b92      	ldr	r3, [pc, #584]	; (8001658 <MX_GPIO_Init+0x314>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	4a90      	ldr	r2, [pc, #576]	; (8001658 <MX_GPIO_Init+0x314>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141e:	4b8e      	ldr	r3, [pc, #568]	; (8001658 <MX_GPIO_Init+0x314>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800142c:	4b8a      	ldr	r3, [pc, #552]	; (8001658 <MX_GPIO_Init+0x314>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	4a89      	ldr	r2, [pc, #548]	; (8001658 <MX_GPIO_Init+0x314>)
 8001434:	f043 0310 	orr.w	r3, r3, #16
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143c:	4b86      	ldr	r3, [pc, #536]	; (8001658 <MX_GPIO_Init+0x314>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800144a:	4b83      	ldr	r3, [pc, #524]	; (8001658 <MX_GPIO_Init+0x314>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	4a81      	ldr	r2, [pc, #516]	; (8001658 <MX_GPIO_Init+0x314>)
 8001452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145a:	4b7f      	ldr	r3, [pc, #508]	; (8001658 <MX_GPIO_Init+0x314>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <MX_GPIO_Init+0x314>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	4a7a      	ldr	r2, [pc, #488]	; (8001658 <MX_GPIO_Init+0x314>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001478:	4b77      	ldr	r3, [pc, #476]	; (8001658 <MX_GPIO_Init+0x314>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001486:	4b74      	ldr	r3, [pc, #464]	; (8001658 <MX_GPIO_Init+0x314>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	4a72      	ldr	r2, [pc, #456]	; (8001658 <MX_GPIO_Init+0x314>)
 800148e:	f043 0320 	orr.w	r3, r3, #32
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001496:	4b70      	ldr	r3, [pc, #448]	; (8001658 <MX_GPIO_Init+0x314>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	486c      	ldr	r0, [pc, #432]	; (800165c <MX_GPIO_Init+0x318>)
 80014ac:	f003 fe9a 	bl	80051e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f241 0104 	movw	r1, #4100	; 0x1004
 80014b6:	486a      	ldr	r0, [pc, #424]	; (8001660 <MX_GPIO_Init+0x31c>)
 80014b8:	f003 fe94 	bl	80051e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2104      	movs	r1, #4
 80014c0:	4868      	ldr	r0, [pc, #416]	; (8001664 <MX_GPIO_Init+0x320>)
 80014c2:	f003 fe8f 	bl	80051e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014d8:	2303      	movs	r3, #3
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e0:	4619      	mov	r1, r3
 80014e2:	4861      	ldr	r0, [pc, #388]	; (8001668 <MX_GPIO_Init+0x324>)
 80014e4:	f003 fcce 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f8:	4619      	mov	r1, r3
 80014fa:	485c      	ldr	r0, [pc, #368]	; (800166c <MX_GPIO_Init+0x328>)
 80014fc:	f003 fcc2 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001500:	2330      	movs	r3, #48	; 0x30
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001510:	230a      	movs	r3, #10
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001518:	4619      	mov	r1, r3
 800151a:	4855      	ldr	r0, [pc, #340]	; (8001670 <MX_GPIO_Init+0x32c>)
 800151c:	f003 fcb2 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001520:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001532:	4619      	mov	r1, r3
 8001534:	484f      	ldr	r0, [pc, #316]	; (8001674 <MX_GPIO_Init+0x330>)
 8001536:	f003 fca5 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800153a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154c:	4619      	mov	r1, r3
 800154e:	484a      	ldr	r0, [pc, #296]	; (8001678 <MX_GPIO_Init+0x334>)
 8001550:	f003 fc98 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001566:	2301      	movs	r3, #1
 8001568:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156e:	4619      	mov	r1, r3
 8001570:	4840      	ldr	r0, [pc, #256]	; (8001674 <MX_GPIO_Init+0x330>)
 8001572:	f003 fc87 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001586:	2306      	movs	r3, #6
 8001588:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800158e:	4619      	mov	r1, r3
 8001590:	483a      	ldr	r0, [pc, #232]	; (800167c <MX_GPIO_Init+0x338>)
 8001592:	f003 fc77 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ac:	4619      	mov	r1, r3
 80015ae:	482b      	ldr	r0, [pc, #172]	; (800165c <MX_GPIO_Init+0x318>)
 80015b0:	f003 fc68 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80015b4:	2304      	movs	r3, #4
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c6:	4619      	mov	r1, r3
 80015c8:	482c      	ldr	r0, [pc, #176]	; (800167c <MX_GPIO_Init+0x338>)
 80015ca:	f003 fc5b 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80015ce:	2301      	movs	r3, #1
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015de:	4619      	mov	r1, r3
 80015e0:	4827      	ldr	r0, [pc, #156]	; (8001680 <MX_GPIO_Init+0x33c>)
 80015e2:	f003 fc4f 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80015e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fa:	4619      	mov	r1, r3
 80015fc:	481a      	ldr	r0, [pc, #104]	; (8001668 <MX_GPIO_Init+0x324>)
 80015fe:	f003 fc41 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001612:	2309      	movs	r3, #9
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161a:	4619      	mov	r1, r3
 800161c:	4815      	ldr	r0, [pc, #84]	; (8001674 <MX_GPIO_Init+0x330>)
 800161e:	f003 fc31 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 8001622:	f241 0304 	movw	r3, #4100	; 0x1004
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001638:	4619      	mov	r1, r3
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <MX_GPIO_Init+0x31c>)
 800163c:	f003 fc22 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001640:	2304      	movs	r3, #4
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001654:	4619      	mov	r1, r3
 8001656:	e015      	b.n	8001684 <MX_GPIO_Init+0x340>
 8001658:	58024400 	.word	0x58024400
 800165c:	58022000 	.word	0x58022000
 8001660:	58020400 	.word	0x58020400
 8001664:	58022400 	.word	0x58022400
 8001668:	58021c00 	.word	0x58021c00
 800166c:	58020c00 	.word	0x58020c00
 8001670:	58021000 	.word	0x58021000
 8001674:	58020000 	.word	0x58020000
 8001678:	58020800 	.word	0x58020800
 800167c:	58021800 	.word	0x58021800
 8001680:	58022800 	.word	0x58022800
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_GPIO_Init+0x350>)
 8001686:	f003 fbfd 	bl	8004e84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800168a:	bf00      	nop
 800168c:	3740      	adds	r7, #64	; 0x40
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	58022400 	.word	0x58022400

08001698 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f00b fd0c 	bl	800d0be <osDelay>
 80016a6:	e7fb      	b.n	80016a0 <StartDefaultTask+0x8>

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <Error_Handler+0x8>
	...

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_MspInit+0x38>)
 80016bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_MspInit+0x38>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_MspInit+0x38>)
 80016cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	210f      	movs	r1, #15
 80016dc:	f06f 0001 	mvn.w	r0, #1
 80016e0:	f002 fc21 	bl	8003f26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	58024400 	.word	0x58024400

080016f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b090      	sub	sp, #64	; 0x40
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a72      	ldr	r2, [pc, #456]	; (80018d8 <HAL_ADC_MspInit+0x1e8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d14e      	bne.n	80017b0 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <HAL_ADC_MspInit+0x1ec>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	4a70      	ldr	r2, [pc, #448]	; (80018dc <HAL_ADC_MspInit+0x1ec>)
 800171a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800171c:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <HAL_ADC_MspInit+0x1ec>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d10e      	bne.n	8001742 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001724:	4b6e      	ldr	r3, [pc, #440]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 8001726:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800172a:	4a6d      	ldr	r2, [pc, #436]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001734:	4b6a      	ldr	r3, [pc, #424]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 8001736:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	4b67      	ldr	r3, [pc, #412]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001748:	4a65      	ldr	r2, [pc, #404]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001760:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001766:	4a5e      	ldr	r2, [pc, #376]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001770:	4b5b      	ldr	r3, [pc, #364]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 8001772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800177e:	2301      	movs	r3, #1
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001782:	2303      	movs	r3, #3
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178e:	4619      	mov	r1, r3
 8001790:	4854      	ldr	r0, [pc, #336]	; (80018e4 <HAL_ADC_MspInit+0x1f4>)
 8001792:	f003 fb77 	bl	8004e84 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001796:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800179a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800179e:	f001 fa61 	bl	8002c64 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80017a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017a6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80017aa:	f001 fa5b 	bl	8002c64 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80017ae:	e08f      	b.n	80018d0 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a4c      	ldr	r2, [pc, #304]	; (80018e8 <HAL_ADC_MspInit+0x1f8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d133      	bne.n	8001822 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017ba:	4b48      	ldr	r3, [pc, #288]	; (80018dc <HAL_ADC_MspInit+0x1ec>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a46      	ldr	r2, [pc, #280]	; (80018dc <HAL_ADC_MspInit+0x1ec>)
 80017c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017c4:	4b45      	ldr	r3, [pc, #276]	; (80018dc <HAL_ADC_MspInit+0x1ec>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d10e      	bne.n	80017ea <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017cc:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 80017ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017d2:	4a43      	ldr	r2, [pc, #268]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 80017d4:	f043 0320 	orr.w	r3, r3, #32
 80017d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017dc:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 80017de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f0:	4a3b      	ldr	r2, [pc, #236]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017fa:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001808:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800180c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001810:	f001 fa28 	bl	8002c64 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001814:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001818:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800181c:	f001 fa22 	bl	8002c64 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001820:	e056      	b.n	80018d0 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a31      	ldr	r2, [pc, #196]	; (80018ec <HAL_ADC_MspInit+0x1fc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d151      	bne.n	80018d0 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 800182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001832:	4a2b      	ldr	r2, [pc, #172]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 8001834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 800183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001850:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 8001852:	f043 0320 	orr.w	r3, r3, #32
 8001856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 800185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001860:	f003 0320 	and.w	r3, r3, #32
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 800186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186e:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_ADC_MspInit+0x1f0>)
 800187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188c:	2303      	movs	r3, #3
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001898:	4619      	mov	r1, r3
 800189a:	4815      	ldr	r0, [pc, #84]	; (80018f0 <HAL_ADC_MspInit+0x200>)
 800189c:	f003 faf2 	bl	8004e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a4:	2303      	movs	r3, #3
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b0:	4619      	mov	r1, r3
 80018b2:	480c      	ldr	r0, [pc, #48]	; (80018e4 <HAL_ADC_MspInit+0x1f4>)
 80018b4:	f003 fae6 	bl	8004e84 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80018b8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80018bc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80018c0:	f001 f9d0 	bl	8002c64 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80018c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80018c8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80018cc:	f001 f9ca 	bl	8002c64 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80018d0:	bf00      	nop
 80018d2:	3740      	adds	r7, #64	; 0x40
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40022000 	.word	0x40022000
 80018dc:	24001250 	.word	0x24001250
 80018e0:	58024400 	.word	0x58024400
 80018e4:	58020800 	.word	0x58020800
 80018e8:	40022100 	.word	0x40022100
 80018ec:	58026000 	.word	0x58026000
 80018f0:	58021400 	.word	0x58021400

080018f4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b092      	sub	sp, #72	; 0x48
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a87      	ldr	r2, [pc, #540]	; (8001b30 <HAL_ETH_MspInit+0x23c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	f040 8108 	bne.w	8001b28 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001918:	4b86      	ldr	r3, [pc, #536]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 800191a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800191e:	4a85      	ldr	r2, [pc, #532]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001924:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001928:	4b82      	ldr	r3, [pc, #520]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 800192a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800192e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
 8001934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001936:	4b7f      	ldr	r3, [pc, #508]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800193c:	4a7d      	ldr	r2, [pc, #500]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001942:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001946:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001948:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001954:	4b77      	ldr	r3, [pc, #476]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800195a:	4a76      	ldr	r2, [pc, #472]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001964:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001970:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001972:	4b70      	ldr	r3, [pc, #448]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001978:	4a6e      	ldr	r2, [pc, #440]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 800197a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001982:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001990:	4b68      	ldr	r3, [pc, #416]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001996:	4a67      	ldr	r2, [pc, #412]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001998:	f043 0310 	orr.w	r3, r3, #16
 800199c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a0:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	623b      	str	r3, [r7, #32]
 80019ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80019ae:	4b61      	ldr	r3, [pc, #388]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b4:	4a5f      	ldr	r2, [pc, #380]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019be:	4b5d      	ldr	r3, [pc, #372]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d2:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019dc:	4b55      	ldr	r3, [pc, #340]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ea:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	4a50      	ldr	r2, [pc, #320]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 80019f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fa:	4b4e      	ldr	r3, [pc, #312]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a08:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	4a49      	ldr	r2, [pc, #292]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2c:	4a41      	ldr	r2, [pc, #260]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_ETH_MspInit+0x240>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001a44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a56:	230b      	movs	r3, #11
 8001a58:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4835      	ldr	r0, [pc, #212]	; (8001b38 <HAL_ETH_MspInit+0x244>)
 8001a62:	f003 fa0f 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001a66:	2304      	movs	r3, #4
 8001a68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a76:	230b      	movs	r3, #11
 8001a78:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a7e:	4619      	mov	r1, r3
 8001a80:	482e      	ldr	r0, [pc, #184]	; (8001b3c <HAL_ETH_MspInit+0x248>)
 8001a82:	f003 f9ff 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a98:	230b      	movs	r3, #11
 8001a9a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4827      	ldr	r0, [pc, #156]	; (8001b40 <HAL_ETH_MspInit+0x24c>)
 8001aa4:	f003 f9ee 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001aa8:	233e      	movs	r3, #62	; 0x3e
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ab8:	230b      	movs	r3, #11
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4820      	ldr	r0, [pc, #128]	; (8001b44 <HAL_ETH_MspInit+0x250>)
 8001ac4:	f003 f9de 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001ac8:	230c      	movs	r3, #12
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad8:	230b      	movs	r3, #11
 8001ada:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001adc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4819      	ldr	r0, [pc, #100]	; (8001b48 <HAL_ETH_MspInit+0x254>)
 8001ae4:	f003 f9ce 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001ae8:	2386      	movs	r3, #134	; 0x86
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001af8:	230b      	movs	r3, #11
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b00:	4619      	mov	r1, r3
 8001b02:	4812      	ldr	r0, [pc, #72]	; (8001b4c <HAL_ETH_MspInit+0x258>)
 8001b04:	f003 f9be 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b18:	230b      	movs	r3, #11
 8001b1a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b20:	4619      	mov	r1, r3
 8001b22:	480b      	ldr	r0, [pc, #44]	; (8001b50 <HAL_ETH_MspInit+0x25c>)
 8001b24:	f003 f9ae 	bl	8004e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	3748      	adds	r7, #72	; 0x48
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40028000 	.word	0x40028000
 8001b34:	58024400 	.word	0x58024400
 8001b38:	58021800 	.word	0x58021800
 8001b3c:	58021000 	.word	0x58021000
 8001b40:	58022000 	.word	0x58022000
 8001b44:	58020800 	.word	0x58020800
 8001b48:	58021c00 	.word	0x58021c00
 8001b4c:	58020000 	.word	0x58020000
 8001b50:	58020400 	.word	0x58020400

08001b54 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b0bc      	sub	sp, #240	; 0xf0
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b6c:	f107 0318 	add.w	r3, r7, #24
 8001b70:	22c0      	movs	r2, #192	; 0xc0
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00c fca1 	bl	800e4bc <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a57      	ldr	r2, [pc, #348]	; (8001cdc <HAL_FDCAN_MspInit+0x188>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d151      	bne.n	8001c28 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001b90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b98:	f107 0318 	add.w	r3, r7, #24
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f005 ff3f 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001ba8:	f7ff fd7e 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001bac:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <HAL_FDCAN_MspInit+0x18c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_FDCAN_MspInit+0x18c>)
 8001bb4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <HAL_FDCAN_MspInit+0x18c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d10e      	bne.n	8001bdc <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001bbe:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001bc0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bc4:	4a47      	ldr	r2, [pc, #284]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bca:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001bce:	4b45      	ldr	r3, [pc, #276]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001bd0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bdc:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	4a40      	ldr	r2, [pc, #256]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bec:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001bfa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c14:	2309      	movs	r3, #9
 8001c16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c1a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4831      	ldr	r0, [pc, #196]	; (8001ce8 <HAL_FDCAN_MspInit+0x194>)
 8001c22:	f003 f92f 	bl	8004e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001c26:	e055      	b.n	8001cd4 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2f      	ldr	r2, [pc, #188]	; (8001cec <HAL_FDCAN_MspInit+0x198>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d150      	bne.n	8001cd4 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001c3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f005 fee8 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001c56:	f7ff fd27 	bl	80016a8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_FDCAN_MspInit+0x18c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <HAL_FDCAN_MspInit+0x18c>)
 8001c62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_FDCAN_MspInit+0x18c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10e      	bne.n	8001c8a <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001c6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001c7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_FDCAN_MspInit+0x190>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001ca8:	f242 0320 	movw	r3, #8224	; 0x2020
 8001cac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001cc2:	2309      	movs	r3, #9
 8001cc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <HAL_FDCAN_MspInit+0x19c>)
 8001cd0:	f003 f8d8 	bl	8004e84 <HAL_GPIO_Init>
}
 8001cd4:	bf00      	nop
 8001cd6:	37f0      	adds	r7, #240	; 0xf0
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	4000a000 	.word	0x4000a000
 8001ce0:	24001254 	.word	0x24001254
 8001ce4:	58024400 	.word	0x58024400
 8001ce8:	58021c00 	.word	0x58021c00
 8001cec:	4000a400 	.word	0x4000a400
 8001cf0:	58020400 	.word	0x58020400

08001cf4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0be      	sub	sp, #248	; 0xf8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d0c:	f107 0320 	add.w	r3, r7, #32
 8001d10:	22c0      	movs	r2, #192	; 0xc0
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f00c fbd1 	bl	800e4bc <memset>
  if(hltdc->Instance==LTDC)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a66      	ldr	r2, [pc, #408]	; (8001eb8 <HAL_LTDC_MspInit+0x1c4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	f040 80c4 	bne.w	8001eae <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d26:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001d32:	2320      	movs	r3, #32
 8001d34:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001d36:	23c0      	movs	r3, #192	; 0xc0
 8001d38:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001d42:	2302      	movs	r3, #2
 8001d44:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001d46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d50:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f005 fe60 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001d66:	f7ff fc9f 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d6a:	4b54      	ldr	r3, [pc, #336]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001d6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001d7a:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001d7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d88:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8e:	4a4b      	ldr	r2, [pc, #300]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001d90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d98:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001da6:	4b45      	ldr	r3, [pc, #276]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	4a43      	ldr	r2, [pc, #268]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001dc4:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dca:	4a3c      	ldr	r2, [pc, #240]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd4:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de2:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de8:	4a34      	ldr	r2, [pc, #208]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df2:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <HAL_LTDC_MspInit+0x1c8>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8001e00:	23fc      	movs	r3, #252	; 0xfc
 8001e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e18:	230e      	movs	r3, #14
 8001e1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4826      	ldr	r0, [pc, #152]	; (8001ec0 <HAL_LTDC_MspInit+0x1cc>)
 8001e26:	f003 f82d 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001e2a:	f24d 2303 	movw	r3, #53763	; 0xd203
 8001e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e44:	230e      	movs	r3, #14
 8001e46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e4a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	481c      	ldr	r0, [pc, #112]	; (8001ec4 <HAL_LTDC_MspInit+0x1d0>)
 8001e52:	f003 f817 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001e56:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e70:	230e      	movs	r3, #14
 8001e72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e76:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4812      	ldr	r0, [pc, #72]	; (8001ec8 <HAL_LTDC_MspInit+0x1d4>)
 8001e7e:	f003 f801 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e9c:	230e      	movs	r3, #14
 8001e9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ea2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4808      	ldr	r0, [pc, #32]	; (8001ecc <HAL_LTDC_MspInit+0x1d8>)
 8001eaa:	f002 ffeb 	bl	8004e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001eae:	bf00      	nop
 8001eb0:	37f8      	adds	r7, #248	; 0xf8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	50001000 	.word	0x50001000
 8001ebc:	58024400 	.word	0x58024400
 8001ec0:	58022800 	.word	0x58022800
 8001ec4:	58022000 	.word	0x58022000
 8001ec8:	58022400 	.word	0x58022400
 8001ecc:	58021c00 	.word	0x58021c00

08001ed0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b0bc      	sub	sp, #240	; 0xf0
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee8:	f107 0318 	add.w	r3, r7, #24
 8001eec:	22c0      	movs	r2, #192	; 0xc0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00c fae3 	bl	800e4bc <memset>
  if(hqspi->Instance==QUADSPI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a56      	ldr	r2, [pc, #344]	; (8002054 <HAL_QSPI_MspInit+0x184>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f040 80a5 	bne.w	800204c <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001f02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f12:	f107 0318 	add.w	r3, r7, #24
 8001f16:	4618      	mov	r0, r3
 8001f18:	f005 fd82 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001f22:	f7ff fbc1 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f26:	4b4c      	ldr	r3, [pc, #304]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f2c:	4a4a      	ldr	r2, [pc, #296]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f32:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001f36:	4b48      	ldr	r3, [pc, #288]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f38:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f44:	4b44      	ldr	r3, [pc, #272]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4a:	4a43      	ldr	r2, [pc, #268]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f54:	4b40      	ldr	r3, [pc, #256]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f68:	4a3b      	ldr	r2, [pc, #236]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f6a:	f043 0320 	orr.w	r3, r3, #32
 8001f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f80:	4b35      	ldr	r3, [pc, #212]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f86:	4a34      	ldr	r2, [pc, #208]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f90:	4b31      	ldr	r3, [pc, #196]	; (8002058 <HAL_QSPI_MspInit+0x188>)
 8001f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f9e:	2340      	movs	r3, #64	; 0x40
 8001fa0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fb6:	230a      	movs	r3, #10
 8001fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4826      	ldr	r0, [pc, #152]	; (800205c <HAL_QSPI_MspInit+0x18c>)
 8001fc4:	f002 ff5e 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001fc8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fe2:	2309      	movs	r3, #9
 8001fe4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fe8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fec:	4619      	mov	r1, r3
 8001fee:	481c      	ldr	r0, [pc, #112]	; (8002060 <HAL_QSPI_MspInit+0x190>)
 8001ff0:	f002 ff48 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800200e:	230a      	movs	r3, #10
 8002010:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002014:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002018:	4619      	mov	r1, r3
 800201a:	4811      	ldr	r0, [pc, #68]	; (8002060 <HAL_QSPI_MspInit+0x190>)
 800201c:	f002 ff32 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002020:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002024:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800203a:	2309      	movs	r3, #9
 800203c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002040:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002044:	4619      	mov	r1, r3
 8002046:	4807      	ldr	r0, [pc, #28]	; (8002064 <HAL_QSPI_MspInit+0x194>)
 8002048:	f002 ff1c 	bl	8004e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800204c:	bf00      	nop
 800204e:	37f0      	adds	r7, #240	; 0xf0
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	52005000 	.word	0x52005000
 8002058:	58024400 	.word	0x58024400
 800205c:	58020400 	.word	0x58020400
 8002060:	58021400 	.word	0x58021400
 8002064:	58020c00 	.word	0x58020c00

08002068 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0b2      	sub	sp, #200	; 0xc8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	22c0      	movs	r2, #192	; 0xc0
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f00c fa1f 	bl	800e4bc <memset>
  if(hrtc->Instance==RTC)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_RTC_MspInit+0x5c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d119      	bne.n	80020bc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002088:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	4618      	mov	r0, r3
 80020a2:	f005 fcbd 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80020ac:	f7ff fafc 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RTC_MspInit+0x60>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <HAL_RTC_MspInit+0x60>)
 80020b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ba:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	37c8      	adds	r7, #200	; 0xc8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	58004000 	.word	0x58004000
 80020c8:	58024400 	.word	0x58024400

080020cc <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b0bc      	sub	sp, #240	; 0xf0
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e4:	f107 0318 	add.w	r3, r7, #24
 80020e8:	22c0      	movs	r2, #192	; 0xc0
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f00c f9e5 	bl	800e4bc <memset>
  if(hmmc->Instance==SDMMC1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a4b      	ldr	r2, [pc, #300]	; (8002224 <HAL_MMC_MspInit+0x158>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	f040 808f 	bne.w	800221c <HAL_MMC_MspInit+0x150>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80020fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800210a:	2300      	movs	r3, #0
 800210c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210e:	f107 0318 	add.w	r3, r7, #24
 8002112:	4618      	mov	r0, r3
 8002114:	f005 fc84 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 800211e:	f7ff fac3 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002122:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 8002124:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002128:	4a3f      	ldr	r2, [pc, #252]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002132:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 8002134:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002140:	4b39      	ldr	r3, [pc, #228]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002146:	4a38      	ldr	r2, [pc, #224]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 8002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 8002160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002164:	4a30      	ldr	r2, [pc, #192]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800216e:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 8002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002182:	4a29      	ldr	r2, [pc, #164]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 8002184:	f043 0308 	orr.w	r3, r3, #8
 8002188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800218c:	4b26      	ldr	r3, [pc, #152]	; (8002228 <HAL_MMC_MspInit+0x15c>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D7
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 800219a:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 800219e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80021b4:	230c      	movs	r3, #12
 80021b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021be:	4619      	mov	r1, r3
 80021c0:	481a      	ldr	r0, [pc, #104]	; (800222c <HAL_MMC_MspInit+0x160>)
 80021c2:	f002 fe5f 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 80021c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80021e0:	230c      	movs	r3, #12
 80021e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021ea:	4619      	mov	r1, r3
 80021ec:	4810      	ldr	r0, [pc, #64]	; (8002230 <HAL_MMC_MspInit+0x164>)
 80021ee:	f002 fe49 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80021f2:	2304      	movs	r3, #4
 80021f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800220a:	230c      	movs	r3, #12
 800220c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002214:	4619      	mov	r1, r3
 8002216:	4807      	ldr	r0, [pc, #28]	; (8002234 <HAL_MMC_MspInit+0x168>)
 8002218:	f002 fe34 	bl	8004e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800221c:	bf00      	nop
 800221e:	37f0      	adds	r7, #240	; 0xf0
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	52007000 	.word	0x52007000
 8002228:	58024400 	.word	0x58024400
 800222c:	58020800 	.word	0x58020800
 8002230:	58020400 	.word	0x58020400
 8002234:	58020c00 	.word	0x58020c00

08002238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b0bc      	sub	sp, #240	; 0xf0
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	22c0      	movs	r2, #192	; 0xc0
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f00c f92f 	bl	800e4bc <memset>
  if(hspi->Instance==SPI2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a55      	ldr	r2, [pc, #340]	; (80023b8 <HAL_SPI_MspInit+0x180>)
 8002264:	4293      	cmp	r3, r2
 8002266:	f040 80a3 	bne.w	80023b0 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800226a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002276:	2300      	movs	r3, #0
 8002278:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800227a:	f107 0318 	add.w	r3, r7, #24
 800227e:	4618      	mov	r0, r3
 8002280:	f005 fbce 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800228a:	f7ff fa0d 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800228e:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <HAL_SPI_MspInit+0x184>)
 8002290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002294:	4a49      	ldr	r2, [pc, #292]	; (80023bc <HAL_SPI_MspInit+0x184>)
 8002296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_SPI_MspInit+0x184>)
 80022a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ac:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_SPI_MspInit+0x184>)
 80022ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b2:	4a42      	ldr	r2, [pc, #264]	; (80023bc <HAL_SPI_MspInit+0x184>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022bc:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <HAL_SPI_MspInit+0x184>)
 80022be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ca:	4b3c      	ldr	r3, [pc, #240]	; (80023bc <HAL_SPI_MspInit+0x184>)
 80022cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d0:	4a3a      	ldr	r2, [pc, #232]	; (80023bc <HAL_SPI_MspInit+0x184>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022da:	4b38      	ldr	r3, [pc, #224]	; (80023bc <HAL_SPI_MspInit+0x184>)
 80022dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022e8:	4b34      	ldr	r3, [pc, #208]	; (80023bc <HAL_SPI_MspInit+0x184>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ee:	4a33      	ldr	r2, [pc, #204]	; (80023bc <HAL_SPI_MspInit+0x184>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <HAL_SPI_MspInit+0x184>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002306:	2310      	movs	r3, #16
 8002308:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800231e:	2307      	movs	r3, #7
 8002320:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002324:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002328:	4619      	mov	r1, r3
 800232a:	4825      	ldr	r0, [pc, #148]	; (80023c0 <HAL_SPI_MspInit+0x188>)
 800232c:	f002 fdaa 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002330:	2308      	movs	r3, #8
 8002332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002348:	2305      	movs	r3, #5
 800234a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002352:	4619      	mov	r1, r3
 8002354:	481b      	ldr	r0, [pc, #108]	; (80023c4 <HAL_SPI_MspInit+0x18c>)
 8002356:	f002 fd95 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800235a:	2304      	movs	r3, #4
 800235c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002372:	2305      	movs	r3, #5
 8002374:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002378:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800237c:	4619      	mov	r1, r3
 800237e:	4812      	ldr	r0, [pc, #72]	; (80023c8 <HAL_SPI_MspInit+0x190>)
 8002380:	f002 fd80 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002388:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800239e:	2305      	movs	r3, #5
 80023a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023a8:	4619      	mov	r1, r3
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <HAL_SPI_MspInit+0x188>)
 80023ac:	f002 fd6a 	bl	8004e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023b0:	bf00      	nop
 80023b2:	37f0      	adds	r7, #240	; 0xf0
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40003800 	.word	0x40003800
 80023bc:	58024400 	.word	0x58024400
 80023c0:	58020400 	.word	0x58020400
 80023c4:	58020c00 	.word	0x58020c00
 80023c8:	58022000 	.word	0x58022000

080023cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b0bc      	sub	sp, #240	; 0xf0
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023e4:	f107 0318 	add.w	r3, r7, #24
 80023e8:	22c0      	movs	r2, #192	; 0xc0
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f00c f865 	bl	800e4bc <memset>
  if(huart->Instance==USART2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a4d      	ldr	r2, [pc, #308]	; (800252c <HAL_UART_MspInit+0x160>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d146      	bne.n	800248a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023fc:	f04f 0202 	mov.w	r2, #2
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800240e:	f107 0318 	add.w	r3, r7, #24
 8002412:	4618      	mov	r0, r3
 8002414:	f005 fb04 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800241e:	f7ff f943 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002422:	4b43      	ldr	r3, [pc, #268]	; (8002530 <HAL_UART_MspInit+0x164>)
 8002424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002428:	4a41      	ldr	r2, [pc, #260]	; (8002530 <HAL_UART_MspInit+0x164>)
 800242a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002432:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_UART_MspInit+0x164>)
 8002434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002440:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_UART_MspInit+0x164>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002446:	4a3a      	ldr	r2, [pc, #232]	; (8002530 <HAL_UART_MspInit+0x164>)
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002450:	4b37      	ldr	r3, [pc, #220]	; (8002530 <HAL_UART_MspInit+0x164>)
 8002452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800245e:	2360      	movs	r3, #96	; 0x60
 8002460:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002476:	2307      	movs	r3, #7
 8002478:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002480:	4619      	mov	r1, r3
 8002482:	482c      	ldr	r0, [pc, #176]	; (8002534 <HAL_UART_MspInit+0x168>)
 8002484:	f002 fcfe 	bl	8004e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002488:	e04b      	b.n	8002522 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <HAL_UART_MspInit+0x16c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d146      	bne.n	8002522 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002494:	f04f 0202 	mov.w	r2, #2
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a6:	f107 0318 	add.w	r3, r7, #24
 80024aa:	4618      	mov	r0, r3
 80024ac:	f005 fab8 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_UART_MspInit+0xee>
      Error_Handler();
 80024b6:	f7ff f8f7 	bl	80016a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_UART_MspInit+0x164>)
 80024bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024c0:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <HAL_UART_MspInit+0x164>)
 80024c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_UART_MspInit+0x164>)
 80024cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_UART_MspInit+0x164>)
 80024da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024de:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_UART_MspInit+0x164>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_UART_MspInit+0x164>)
 80024ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80024f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002510:	2307      	movs	r3, #7
 8002512:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800251a:	4619      	mov	r1, r3
 800251c:	4807      	ldr	r0, [pc, #28]	; (800253c <HAL_UART_MspInit+0x170>)
 800251e:	f002 fcb1 	bl	8004e84 <HAL_GPIO_Init>
}
 8002522:	bf00      	nop
 8002524:	37f0      	adds	r7, #240	; 0xf0
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40004400 	.word	0x40004400
 8002530:	58024400 	.word	0x58024400
 8002534:	58020c00 	.word	0x58020c00
 8002538:	40004800 	.word	0x40004800
 800253c:	58020400 	.word	0x58020400

08002540 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0ba      	sub	sp, #232	; 0xe8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	22c0      	movs	r2, #192	; 0xc0
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f00b ffab 	bl	800e4bc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a30      	ldr	r2, [pc, #192]	; (800262c <HAL_PCD_MspInit+0xec>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d159      	bne.n	8002624 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002570:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800257c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4618      	mov	r0, r3
 800258a:	f005 fa49 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002594:	f7ff f888 	bl	80016a8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002598:	f004 f992 	bl	80068c0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <HAL_PCD_MspInit+0xf0>)
 800259e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a2:	4a23      	ldr	r2, [pc, #140]	; (8002630 <HAL_PCD_MspInit+0xf0>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ac:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_PCD_MspInit+0xf0>)
 80025ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 80025ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 80025ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025d2:	4619      	mov	r1, r3
 80025d4:	4817      	ldr	r0, [pc, #92]	; (8002634 <HAL_PCD_MspInit+0xf4>)
 80025d6:	f002 fc55 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 80025da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80025f4:	230a      	movs	r3, #10
 80025f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025fe:	4619      	mov	r1, r3
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <HAL_PCD_MspInit+0xf4>)
 8002602:	f002 fc3f 	bl	8004e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_PCD_MspInit+0xf0>)
 8002608:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800260c:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_PCD_MspInit+0xf0>)
 800260e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002612:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_PCD_MspInit+0xf0>)
 8002618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800261c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002624:	bf00      	nop
 8002626:	37e8      	adds	r7, #232	; 0xe8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40080000 	.word	0x40080000
 8002630:	58024400 	.word	0x58024400
 8002634:	58020000 	.word	0x58020000

08002638 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002638:	b580      	push	{r7, lr}
 800263a:	b0b8      	sub	sp, #224	; 0xe0
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800263e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800264e:	4b51      	ldr	r3, [pc, #324]	; (8002794 <HAL_FMC_MspInit+0x15c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 8099 	bne.w	800278a <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002658:	4b4e      	ldr	r3, [pc, #312]	; (8002794 <HAL_FMC_MspInit+0x15c>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	22c0      	movs	r2, #192	; 0xc0
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f00b ff28 	bl	800e4bc <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800266c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002678:	2300      	movs	r3, #0
 800267a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800267c:	f107 0308 	add.w	r3, r7, #8
 8002680:	4618      	mov	r0, r3
 8002682:	f005 f9cd 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 800268c:	f7ff f80c 	bl	80016a8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_FMC_MspInit+0x160>)
 8002692:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002696:	4a40      	ldr	r2, [pc, #256]	; (8002798 <HAL_FMC_MspInit+0x160>)
 8002698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800269c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80026a0:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <HAL_FMC_MspInit+0x160>)
 80026a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80026a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80026ae:	f64f 7383 	movw	r3, #65411	; 0xff83
 80026b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026c8:	230c      	movs	r3, #12
 80026ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026d2:	4619      	mov	r1, r3
 80026d4:	4831      	ldr	r0, [pc, #196]	; (800279c <HAL_FMC_MspInit+0x164>)
 80026d6:	f002 fbd5 	bl	8004e84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80026da:	f248 1333 	movw	r3, #33075	; 0x8133
 80026de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026f4:	230c      	movs	r3, #12
 80026f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026fe:	4619      	mov	r1, r3
 8002700:	4827      	ldr	r0, [pc, #156]	; (80027a0 <HAL_FMC_MspInit+0x168>)
 8002702:	f002 fbbf 	bl	8004e84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002706:	f24c 7303 	movw	r3, #50947	; 0xc703
 800270a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002720:	230c      	movs	r3, #12
 8002722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002726:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800272a:	4619      	mov	r1, r3
 800272c:	481d      	ldr	r0, [pc, #116]	; (80027a4 <HAL_FMC_MspInit+0x16c>)
 800272e:	f002 fba9 	bl	8004e84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8002732:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002736:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800274c:	230c      	movs	r3, #12
 800274e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002752:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002756:	4619      	mov	r1, r3
 8002758:	4813      	ldr	r0, [pc, #76]	; (80027a8 <HAL_FMC_MspInit+0x170>)
 800275a:	f002 fb93 	bl	8004e84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800275e:	23e0      	movs	r3, #224	; 0xe0
 8002760:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002776:	230c      	movs	r3, #12
 8002778:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800277c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002780:	4619      	mov	r1, r3
 8002782:	480a      	ldr	r0, [pc, #40]	; (80027ac <HAL_FMC_MspInit+0x174>)
 8002784:	f002 fb7e 	bl	8004e84 <HAL_GPIO_Init>
 8002788:	e000      	b.n	800278c <HAL_FMC_MspInit+0x154>
    return;
 800278a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800278c:	37e0      	adds	r7, #224	; 0xe0
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	24001258 	.word	0x24001258
 8002798:	58024400 	.word	0x58024400
 800279c:	58021000 	.word	0x58021000
 80027a0:	58021800 	.word	0x58021800
 80027a4:	58020c00 	.word	0x58020c00
 80027a8:	58021400 	.word	0x58021400
 80027ac:	58021c00 	.word	0x58021c00

080027b0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80027b8:	f7ff ff3e 	bl	8002638 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b0ba      	sub	sp, #232	; 0xe8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027cc:	f107 0310 	add.w	r3, r7, #16
 80027d0:	22c0      	movs	r2, #192	; 0xc0
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f00b fe71 	bl	800e4bc <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a45      	ldr	r2, [pc, #276]	; (80028f4 <HAL_SAI_MspInit+0x130>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d13e      	bne.n	8002862 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80027e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4618      	mov	r0, r3
 80027fa:	f005 f911 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002804:	f7fe ff50 	bl	80016a8 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002808:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <HAL_SAI_MspInit+0x134>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10e      	bne.n	800282e <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002810:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <HAL_SAI_MspInit+0x138>)
 8002812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002816:	4a39      	ldr	r2, [pc, #228]	; (80028fc <HAL_SAI_MspInit+0x138>)
 8002818:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800281c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_SAI_MspInit+0x138>)
 8002822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800282e:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_SAI_MspInit+0x134>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	4a30      	ldr	r2, [pc, #192]	; (80028f8 <HAL_SAI_MspInit+0x134>)
 8002836:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002838:	23f0      	movs	r3, #240	; 0xf0
 800283a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002850:	230a      	movs	r3, #10
 8002852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002856:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800285a:	4619      	mov	r1, r3
 800285c:	4828      	ldr	r0, [pc, #160]	; (8002900 <HAL_SAI_MspInit+0x13c>)
 800285e:	f002 fb11 	bl	8004e84 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a27      	ldr	r2, [pc, #156]	; (8002904 <HAL_SAI_MspInit+0x140>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d13f      	bne.n	80028ec <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800286c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002878:	2300      	movs	r3, #0
 800287a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	4618      	mov	r0, r3
 8002882:	f005 f8cd 	bl	8007a20 <HAL_RCCEx_PeriphCLKConfig>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 800288c:	f7fe ff0c 	bl	80016a8 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_SAI_MspInit+0x134>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10e      	bne.n	80028b6 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_SAI_MspInit+0x138>)
 800289a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_SAI_MspInit+0x138>)
 80028a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_SAI_MspInit+0x138>)
 80028aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_SAI_MspInit+0x134>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <HAL_SAI_MspInit+0x134>)
 80028be:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80028da:	230a      	movs	r3, #10
 80028dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4808      	ldr	r0, [pc, #32]	; (8002908 <HAL_SAI_MspInit+0x144>)
 80028e8:	f002 facc 	bl	8004e84 <HAL_GPIO_Init>

    }
}
 80028ec:	bf00      	nop
 80028ee:	37e8      	adds	r7, #232	; 0xe8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40015c04 	.word	0x40015c04
 80028f8:	2400125c 	.word	0x2400125c
 80028fc:	58024400 	.word	0x58024400
 8002900:	58022000 	.word	0x58022000
 8002904:	40015c24 	.word	0x40015c24
 8002908:	58021800 	.word	0x58021800

0800290c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002910:	e7fe      	b.n	8002910 <NMI_Handler+0x4>

08002912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <HardFault_Handler+0x4>

08002918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <MemManage_Handler+0x4>

0800291e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002922:	e7fe      	b.n	8002922 <BusFault_Handler+0x4>

08002924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002928:	e7fe      	b.n	8002928 <UsageFault_Handler+0x4>

0800292a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800293c:	f000 f92e 	bl	8002b9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002940:	f00b f940 	bl	800dbc4 <xTaskGetSchedulerState>
 8002944:	4603      	mov	r3, r0
 8002946:	2b01      	cmp	r3, #1
 8002948:	d001      	beq.n	800294e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800294a:	f00b fb7d 	bl	800e048 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002958:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <SystemInit+0xe4>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	4a36      	ldr	r2, [pc, #216]	; (8002a38 <SystemInit+0xe4>)
 8002960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002968:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <SystemInit+0xe8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	2b06      	cmp	r3, #6
 8002972:	d807      	bhi.n	8002984 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002974:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <SystemInit+0xe8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 030f 	bic.w	r3, r3, #15
 800297c:	4a2f      	ldr	r2, [pc, #188]	; (8002a3c <SystemInit+0xe8>)
 800297e:	f043 0307 	orr.w	r3, r3, #7
 8002982:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002984:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <SystemInit+0xec>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2d      	ldr	r2, [pc, #180]	; (8002a40 <SystemInit+0xec>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <SystemInit+0xec>)
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002996:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <SystemInit+0xec>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4929      	ldr	r1, [pc, #164]	; (8002a40 <SystemInit+0xec>)
 800299c:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <SystemInit+0xf0>)
 800299e:	4013      	ands	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <SystemInit+0xe8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029ae:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <SystemInit+0xe8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 030f 	bic.w	r3, r3, #15
 80029b6:	4a21      	ldr	r2, [pc, #132]	; (8002a3c <SystemInit+0xe8>)
 80029b8:	f043 0307 	orr.w	r3, r3, #7
 80029bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <SystemInit+0xec>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <SystemInit+0xec>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <SystemInit+0xec>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <SystemInit+0xec>)
 80029d2:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <SystemInit+0xf4>)
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029d6:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <SystemInit+0xec>)
 80029d8:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <SystemInit+0xf8>)
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <SystemInit+0xec>)
 80029de:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <SystemInit+0xfc>)
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <SystemInit+0xec>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80029e8:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <SystemInit+0xec>)
 80029ea:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <SystemInit+0xfc>)
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <SystemInit+0xec>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <SystemInit+0xec>)
 80029f6:	4a16      	ldr	r2, [pc, #88]	; (8002a50 <SystemInit+0xfc>)
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <SystemInit+0xec>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <SystemInit+0xec>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <SystemInit+0xec>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <SystemInit+0xec>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <SystemInit+0x100>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <SystemInit+0x104>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1e:	d202      	bcs.n	8002a26 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <SystemInit+0x108>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <SystemInit+0x10c>)
 8002a28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002a2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00
 8002a3c:	52002000 	.word	0x52002000
 8002a40:	58024400 	.word	0x58024400
 8002a44:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a48:	02020200 	.word	0x02020200
 8002a4c:	01ff0000 	.word	0x01ff0000
 8002a50:	01010280 	.word	0x01010280
 8002a54:	5c001000 	.word	0x5c001000
 8002a58:	ffff0000 	.word	0xffff0000
 8002a5c:	51008108 	.word	0x51008108
 8002a60:	52004000 	.word	0x52004000

08002a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a68:	f7ff ff74 	bl	8002954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a6c:	480c      	ldr	r0, [pc, #48]	; (8002aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a6e:	490d      	ldr	r1, [pc, #52]	; (8002aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a70:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a74:	e002      	b.n	8002a7c <LoopCopyDataInit>

08002a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a7a:	3304      	adds	r3, #4

08002a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a80:	d3f9      	bcc.n	8002a76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a82:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a84:	4c0a      	ldr	r4, [pc, #40]	; (8002ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a88:	e001      	b.n	8002a8e <LoopFillZerobss>

08002a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a8c:	3204      	adds	r2, #4

08002a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a90:	d3fb      	bcc.n	8002a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a92:	f00b fd1b 	bl	800e4cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a96:	f7fd fdbb 	bl	8000610 <main>
  bx  lr
 8002a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002aa0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002aa4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8002aa8:	0800e60c 	.word	0x0800e60c
  ldr r2, =_sbss
 8002aac:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8002ab0:	24004fb8 	.word	0x24004fb8

08002ab4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab4:	e7fe      	b.n	8002ab4 <ADC3_IRQHandler>
	...

08002ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002abe:	2003      	movs	r0, #3
 8002ac0:	f001 fa26 	bl	8003f10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ac4:	f004 fdd6 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <HAL_Init+0x68>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	4913      	ldr	r1, [pc, #76]	; (8002b24 <HAL_Init+0x6c>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_Init+0x68>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	4a0e      	ldr	r2, [pc, #56]	; (8002b24 <HAL_Init+0x6c>)
 8002aec:	5cd3      	ldrb	r3, [r2, r3]
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
 8002af8:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <HAL_Init+0x70>)
 8002afa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002afc:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <HAL_Init+0x74>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b02:	200f      	movs	r0, #15
 8002b04:	f000 f814 	bl	8002b30 <HAL_InitTick>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e002      	b.n	8002b18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b12:	f7fe fdcf 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	58024400 	.word	0x58024400
 8002b24:	0800e5c4 	.word	0x0800e5c4
 8002b28:	24000004 	.word	0x24000004
 8002b2c:	24000000 	.word	0x24000000

08002b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b38:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <HAL_InitTick+0x60>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e021      	b.n	8002b88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <HAL_InitTick+0x64>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_InitTick+0x60>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 f9fd 	bl	8003f5a <HAL_SYSTICK_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00e      	b.n	8002b88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b0f      	cmp	r3, #15
 8002b6e:	d80a      	bhi.n	8002b86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b70:	2200      	movs	r2, #0
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	f001 f9d5 	bl	8003f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b7c:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <HAL_InitTick+0x68>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	2400000c 	.word	0x2400000c
 8002b94:	24000000 	.word	0x24000000
 8002b98:	24000008 	.word	0x24000008

08002b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_IncTick+0x20>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_IncTick+0x24>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_IncTick+0x24>)
 8002bae:	6013      	str	r3, [r2, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	2400000c 	.word	0x2400000c
 8002bc0:	24001260 	.word	0x24001260

08002bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <HAL_GetTick+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	24001260 	.word	0x24001260

08002bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff ffee 	bl	8002bc4 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d005      	beq.n	8002c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_Delay+0x44>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c02:	bf00      	nop
 8002c04:	f7ff ffde 	bl	8002bc4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d8f7      	bhi.n	8002c04 <HAL_Delay+0x28>
  {
  }
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2400000c 	.word	0x2400000c

08002c24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_GetREVID+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	5c001000 	.word	0x5c001000

08002c3c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c4c:	4904      	ldr	r1, [pc, #16]	; (8002c60 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	58000400 	.word	0x58000400

08002c64 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002c6e:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	401a      	ands	r2, r3
 8002c78:	4904      	ldr	r1, [pc, #16]	; (8002c8c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	58000400 	.word	0x58000400

08002c90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3360      	adds	r3, #96	; 0x60
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	431a      	orrs	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	611a      	str	r2, [r3, #16]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b087      	sub	sp, #28
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3360      	adds	r3, #96	; 0x60
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	601a      	str	r2, [r3, #0]
  }
}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3330      	adds	r3, #48	; 0x30
 8002db0:	461a      	mov	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	4413      	add	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	211f      	movs	r1, #31
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	f003 011f 	and.w	r1, r3, #31
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	431a      	orrs	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3314      	adds	r3, #20
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	0e5b      	lsrs	r3, r3, #25
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	4413      	add	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	0d1b      	lsrs	r3, r3, #20
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	2107      	movs	r1, #7
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	0d1b      	lsrs	r3, r3, #20
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0318 	and.w	r3, r3, #24
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e74:	40d9      	lsrs	r1, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	400b      	ands	r3, r1
 8002e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	000fffff 	.word	0x000fffff

08002e98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6093      	str	r3, [r2, #8]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	5fffffc0 	.word	0x5fffffc0

08002ebc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed0:	d101      	bne.n	8002ed6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <LL_ADC_EnableInternalRegulator+0x24>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	6fffffc0 	.word	0x6fffffc0

08002f0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f20:	d101      	bne.n	8002f26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <LL_ADC_IsEnabled+0x18>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <LL_ADC_IsEnabled+0x1a>
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d101      	bne.n	8002f72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d101      	bne.n	8002f98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e18f      	b.n	80032e2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7fe fb8d 	bl	80016f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff67 	bl	8002ebc <LL_ADC_IsDeepPowerDownEnabled>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff4d 	bl	8002e98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ff82 	bl	8002f0c <LL_ADC_IsInternalRegulatorEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d114      	bne.n	8003038 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff ff66 	bl	8002ee4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003018:	4b87      	ldr	r3, [pc, #540]	; (8003238 <HAL_ADC_Init+0x290>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	4a87      	ldr	r2, [pc, #540]	; (800323c <HAL_ADC_Init+0x294>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	3301      	adds	r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800302a:	e002      	b.n	8003032 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	3b01      	subs	r3, #1
 8003030:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f9      	bne.n	800302c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff65 	bl	8002f0c <LL_ADC_IsInternalRegulatorEnabled>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10d      	bne.n	8003064 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	f043 0210 	orr.w	r2, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff76 	bl	8002f5a <LL_ADC_REG_IsConversionOngoing>
 800306e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 8129 	bne.w	80032d0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 8125 	bne.w	80032d0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800308e:	f043 0202 	orr.w	r2, r3, #2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff4a 	bl	8002f34 <LL_ADC_IsEnabled>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d136      	bne.n	8003114 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a65      	ldr	r2, [pc, #404]	; (8003240 <HAL_ADC_Init+0x298>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d004      	beq.n	80030ba <HAL_ADC_Init+0x112>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a63      	ldr	r2, [pc, #396]	; (8003244 <HAL_ADC_Init+0x29c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d10e      	bne.n	80030d8 <HAL_ADC_Init+0x130>
 80030ba:	4861      	ldr	r0, [pc, #388]	; (8003240 <HAL_ADC_Init+0x298>)
 80030bc:	f7ff ff3a 	bl	8002f34 <LL_ADC_IsEnabled>
 80030c0:	4604      	mov	r4, r0
 80030c2:	4860      	ldr	r0, [pc, #384]	; (8003244 <HAL_ADC_Init+0x29c>)
 80030c4:	f7ff ff36 	bl	8002f34 <LL_ADC_IsEnabled>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4323      	orrs	r3, r4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	e008      	b.n	80030ea <HAL_ADC_Init+0x142>
 80030d8:	485b      	ldr	r0, [pc, #364]	; (8003248 <HAL_ADC_Init+0x2a0>)
 80030da:	f7ff ff2b 	bl	8002f34 <LL_ADC_IsEnabled>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d012      	beq.n	8003114 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a53      	ldr	r2, [pc, #332]	; (8003240 <HAL_ADC_Init+0x298>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d004      	beq.n	8003102 <HAL_ADC_Init+0x15a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a51      	ldr	r2, [pc, #324]	; (8003244 <HAL_ADC_Init+0x29c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_ADC_Init+0x15e>
 8003102:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_ADC_Init+0x2a4>)
 8003104:	e000      	b.n	8003108 <HAL_ADC_Init+0x160>
 8003106:	4a52      	ldr	r2, [pc, #328]	; (8003250 <HAL_ADC_Init+0x2a8>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f7ff fdbe 	bl	8002c90 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003114:	f7ff fd86 	bl	8002c24 <HAL_GetREVID>
 8003118:	4603      	mov	r3, r0
 800311a:	f241 0203 	movw	r2, #4099	; 0x1003
 800311e:	4293      	cmp	r3, r2
 8003120:	d914      	bls.n	800314c <HAL_ADC_Init+0x1a4>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b10      	cmp	r3, #16
 8003128:	d110      	bne.n	800314c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7d5b      	ldrb	r3, [r3, #21]
 800312e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003134:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800313a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	7f1b      	ldrb	r3, [r3, #28]
 8003140:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003142:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003144:	f043 030c 	orr.w	r3, r3, #12
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	e00d      	b.n	8003168 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	7d5b      	ldrb	r3, [r3, #21]
 8003150:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003156:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800315c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7f1b      	ldrb	r3, [r3, #28]
 8003162:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	7f1b      	ldrb	r3, [r3, #28]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	3b01      	subs	r3, #1
 8003176:	045b      	lsls	r3, r3, #17
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <HAL_ADC_Init+0x2ac>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	69b9      	ldr	r1, [r7, #24]
 80031aa:	430b      	orrs	r3, r1
 80031ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fed1 	bl	8002f5a <LL_ADC_REG_IsConversionOngoing>
 80031b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fede 	bl	8002f80 <LL_ADC_INJ_IsConversionOngoing>
 80031c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d15f      	bne.n	800328c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d15c      	bne.n	800328c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7d1b      	ldrb	r3, [r3, #20]
 80031d6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <HAL_ADC_Init+0x2b0>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	69b9      	ldr	r1, [r7, #24]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d130      	bne.n	8003260 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_ADC_Init+0x2b4>)
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003212:	3a01      	subs	r2, #1
 8003214:	0411      	lsls	r1, r2, #16
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800321a:	4311      	orrs	r1, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003220:	4311      	orrs	r1, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003226:	430a      	orrs	r2, r1
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	611a      	str	r2, [r3, #16]
 8003234:	e01c      	b.n	8003270 <HAL_ADC_Init+0x2c8>
 8003236:	bf00      	nop
 8003238:	24000000 	.word	0x24000000
 800323c:	053e2d63 	.word	0x053e2d63
 8003240:	40022000 	.word	0x40022000
 8003244:	40022100 	.word	0x40022100
 8003248:	58026000 	.word	0x58026000
 800324c:	40022300 	.word	0x40022300
 8003250:	58026300 	.word	0x58026300
 8003254:	fff0c003 	.word	0xfff0c003
 8003258:	ffffbffc 	.word	0xffffbffc
 800325c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fb80 	bl	800398c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d10c      	bne.n	80032ae <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f023 010f 	bic.w	r1, r3, #15
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	1e5a      	subs	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
 80032ac:	e007      	b.n	80032be <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 020f 	bic.w	r2, r2, #15
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f023 0303 	bic.w	r3, r3, #3
 80032c6:	f043 0201 	orr.w	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
 80032ce:	e007      	b.n	80032e0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f043 0210 	orr.w	r2, r3, #16
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3724      	adds	r7, #36	; 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}
 80032ea:	bf00      	nop

080032ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b0a1      	sub	sp, #132	; 0x84
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a9d      	ldr	r2, [pc, #628]	; (800357c <HAL_ADC_ConfigChannel+0x290>)
 8003306:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x2a>
 8003312:	2302      	movs	r3, #2
 8003314:	e321      	b.n	800395a <HAL_ADC_ConfigChannel+0x66e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fe19 	bl	8002f5a <LL_ADC_REG_IsConversionOngoing>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 8306 	bne.w	800393c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003338:	2b00      	cmp	r3, #0
 800333a:	d108      	bne.n	800334e <HAL_ADC_ConfigChannel+0x62>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2201      	movs	r2, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	e016      	b.n	800337c <HAL_ADC_ConfigChannel+0x90>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800335c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800335e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003366:	2320      	movs	r3, #32
 8003368:	e003      	b.n	8003372 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800336a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800336c:	fab3 f383 	clz	r3, r3
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	2201      	movs	r2, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	69d1      	ldr	r1, [r2, #28]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	430b      	orrs	r3, r1
 8003388:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6859      	ldr	r1, [r3, #4]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	f7ff fd02 	bl	8002da0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fdda 	bl	8002f5a <LL_ADC_REG_IsConversionOngoing>
 80033a6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fde7 	bl	8002f80 <LL_ADC_INJ_IsConversionOngoing>
 80033b2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 80b3 	bne.w	8003522 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 80af 	bne.w	8003522 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	461a      	mov	r2, r3
 80033d2:	f7ff fd11 	bl	8002df8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033d6:	4b6a      	ldr	r3, [pc, #424]	; (8003580 <HAL_ADC_ConfigChannel+0x294>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033e2:	d10b      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x110>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	e01d      	b.n	8003438 <HAL_ADC_ConfigChannel+0x14c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x136>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	e00a      	b.n	8003438 <HAL_ADC_ConfigChannel+0x14c>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b04      	cmp	r3, #4
 8003440:	d027      	beq.n	8003492 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6919      	ldr	r1, [r3, #16]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003450:	f7ff fc52 	bl	8002cf8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6919      	ldr	r1, [r3, #16]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	7e5b      	ldrb	r3, [r3, #25]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <HAL_ADC_ConfigChannel+0x17e>
 8003464:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003468:	e000      	b.n	800346c <HAL_ADC_ConfigChannel+0x180>
 800346a:	2300      	movs	r3, #0
 800346c:	461a      	mov	r2, r3
 800346e:	f7ff fc7c 	bl	8002d6a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6919      	ldr	r1, [r3, #16]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	7e1b      	ldrb	r3, [r3, #24]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d102      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x19c>
 8003482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003486:	e000      	b.n	800348a <HAL_ADC_ConfigChannel+0x19e>
 8003488:	2300      	movs	r3, #0
 800348a:	461a      	mov	r2, r3
 800348c:	f7ff fc54 	bl	8002d38 <LL_ADC_SetDataRightShift>
 8003490:	e047      	b.n	8003522 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003498:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	069b      	lsls	r3, r3, #26
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d107      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034b4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	069b      	lsls	r3, r3, #26
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d107      	bne.n	80034da <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034d8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	069b      	lsls	r3, r3, #26
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d107      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034fc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003504:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	069b      	lsls	r3, r3, #26
 800350e:	429a      	cmp	r2, r3
 8003510:	d107      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003520:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fd04 	bl	8002f34 <LL_ADC_IsEnabled>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 820d 	bne.w	800394e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6819      	ldr	r1, [r3, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	461a      	mov	r2, r3
 8003542:	f7ff fc85 	bl	8002e50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4a0c      	ldr	r2, [pc, #48]	; (800357c <HAL_ADC_ConfigChannel+0x290>)
 800354c:	4293      	cmp	r3, r2
 800354e:	f040 8133 	bne.w	80037b8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800355e:	2b00      	cmp	r3, #0
 8003560:	d110      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x298>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	0e9b      	lsrs	r3, r3, #26
 8003568:	3301      	adds	r3, #1
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	2b09      	cmp	r3, #9
 8003570:	bf94      	ite	ls
 8003572:	2301      	movls	r3, #1
 8003574:	2300      	movhi	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	e01e      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x2cc>
 800357a:	bf00      	nop
 800357c:	47ff0000 	.word	0x47ff0000
 8003580:	5c001000 	.word	0x5c001000
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003594:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800359c:	2320      	movs	r3, #32
 800359e:	e003      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80035a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	3301      	adds	r3, #1
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	2b09      	cmp	r3, #9
 80035b0:	bf94      	ite	ls
 80035b2:	2301      	movls	r3, #1
 80035b4:	2300      	movhi	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d079      	beq.n	80036b0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x2ec>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0e9b      	lsrs	r3, r3, #26
 80035ce:	3301      	adds	r3, #1
 80035d0:	069b      	lsls	r3, r3, #26
 80035d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d6:	e015      	b.n	8003604 <HAL_ADC_ConfigChannel+0x318>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80035e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80035ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80035f0:	2320      	movs	r3, #32
 80035f2:	e003      	b.n	80035fc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80035f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	069b      	lsls	r3, r3, #26
 8003600:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x338>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0e9b      	lsrs	r3, r3, #26
 8003616:	3301      	adds	r3, #1
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	e017      	b.n	8003654 <HAL_ADC_ConfigChannel+0x368>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003634:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800363c:	2320      	movs	r3, #32
 800363e:	e003      	b.n	8003648 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	3301      	adds	r3, #1
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	ea42 0103 	orr.w	r1, r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <HAL_ADC_ConfigChannel+0x38e>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0e9b      	lsrs	r3, r3, #26
 800366a:	3301      	adds	r3, #1
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	051b      	lsls	r3, r3, #20
 8003678:	e018      	b.n	80036ac <HAL_ADC_ConfigChannel+0x3c0>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003692:	2320      	movs	r3, #32
 8003694:	e003      	b.n	800369e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	f003 021f 	and.w	r2, r3, #31
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ac:	430b      	orrs	r3, r1
 80036ae:	e07e      	b.n	80037ae <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d107      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x3e0>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0e9b      	lsrs	r3, r3, #26
 80036c2:	3301      	adds	r3, #1
 80036c4:	069b      	lsls	r3, r3, #26
 80036c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ca:	e015      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x40c>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80036e4:	2320      	movs	r3, #32
 80036e6:	e003      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	069b      	lsls	r3, r3, #26
 80036f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x42c>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	0e9b      	lsrs	r3, r3, #26
 800370a:	3301      	adds	r3, #1
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	e017      	b.n	8003748 <HAL_ADC_ConfigChannel+0x45c>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	61bb      	str	r3, [r7, #24]
  return result;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003730:	2320      	movs	r3, #32
 8003732:	e003      	b.n	800373c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	3301      	adds	r3, #1
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	ea42 0103 	orr.w	r1, r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10d      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x488>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	0e9b      	lsrs	r3, r3, #26
 800375e:	3301      	adds	r3, #1
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4613      	mov	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4413      	add	r3, r2
 800376a:	3b1e      	subs	r3, #30
 800376c:	051b      	lsls	r3, r3, #20
 800376e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003772:	e01b      	b.n	80037ac <HAL_ADC_ConfigChannel+0x4c0>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	60fb      	str	r3, [r7, #12]
  return result;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800378c:	2320      	movs	r3, #32
 800378e:	e003      	b.n	8003798 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	3301      	adds	r3, #1
 800379a:	f003 021f 	and.w	r2, r3, #31
 800379e:	4613      	mov	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4413      	add	r3, r2
 80037a4:	3b1e      	subs	r3, #30
 80037a6:	051b      	lsls	r3, r3, #20
 80037a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ac:	430b      	orrs	r3, r1
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	6892      	ldr	r2, [r2, #8]
 80037b2:	4619      	mov	r1, r3
 80037b4:	f7ff fb20 	bl	8002df8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f280 80c6 	bge.w	800394e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a67      	ldr	r2, [pc, #412]	; (8003964 <HAL_ADC_ConfigChannel+0x678>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_ADC_ConfigChannel+0x4ea>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a65      	ldr	r2, [pc, #404]	; (8003968 <HAL_ADC_ConfigChannel+0x67c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_ADC_ConfigChannel+0x4ee>
 80037d6:	4b65      	ldr	r3, [pc, #404]	; (800396c <HAL_ADC_ConfigChannel+0x680>)
 80037d8:	e000      	b.n	80037dc <HAL_ADC_ConfigChannel+0x4f0>
 80037da:	4b65      	ldr	r3, [pc, #404]	; (8003970 <HAL_ADC_ConfigChannel+0x684>)
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fa7d 	bl	8002cdc <LL_ADC_GetCommonPathInternalCh>
 80037e2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5e      	ldr	r2, [pc, #376]	; (8003964 <HAL_ADC_ConfigChannel+0x678>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_ADC_ConfigChannel+0x50c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5d      	ldr	r2, [pc, #372]	; (8003968 <HAL_ADC_ConfigChannel+0x67c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10e      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x52a>
 80037f8:	485a      	ldr	r0, [pc, #360]	; (8003964 <HAL_ADC_ConfigChannel+0x678>)
 80037fa:	f7ff fb9b 	bl	8002f34 <LL_ADC_IsEnabled>
 80037fe:	4604      	mov	r4, r0
 8003800:	4859      	ldr	r0, [pc, #356]	; (8003968 <HAL_ADC_ConfigChannel+0x67c>)
 8003802:	f7ff fb97 	bl	8002f34 <LL_ADC_IsEnabled>
 8003806:	4603      	mov	r3, r0
 8003808:	4323      	orrs	r3, r4
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e008      	b.n	8003828 <HAL_ADC_ConfigChannel+0x53c>
 8003816:	4857      	ldr	r0, [pc, #348]	; (8003974 <HAL_ADC_ConfigChannel+0x688>)
 8003818:	f7ff fb8c 	bl	8002f34 <LL_ADC_IsEnabled>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	bf0c      	ite	eq
 8003822:	2301      	moveq	r3, #1
 8003824:	2300      	movne	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d07d      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a51      	ldr	r2, [pc, #324]	; (8003978 <HAL_ADC_ConfigChannel+0x68c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d130      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x5ac>
 8003836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d12b      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4b      	ldr	r2, [pc, #300]	; (8003974 <HAL_ADC_ConfigChannel+0x688>)
 8003846:	4293      	cmp	r3, r2
 8003848:	f040 8081 	bne.w	800394e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a44      	ldr	r2, [pc, #272]	; (8003964 <HAL_ADC_ConfigChannel+0x678>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_ADC_ConfigChannel+0x574>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a43      	ldr	r2, [pc, #268]	; (8003968 <HAL_ADC_ConfigChannel+0x67c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x578>
 8003860:	4a42      	ldr	r2, [pc, #264]	; (800396c <HAL_ADC_ConfigChannel+0x680>)
 8003862:	e000      	b.n	8003866 <HAL_ADC_ConfigChannel+0x57a>
 8003864:	4a42      	ldr	r2, [pc, #264]	; (8003970 <HAL_ADC_ConfigChannel+0x684>)
 8003866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f7ff fa21 	bl	8002cb6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003874:	4b41      	ldr	r3, [pc, #260]	; (800397c <HAL_ADC_ConfigChannel+0x690>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	4a41      	ldr	r2, [pc, #260]	; (8003980 <HAL_ADC_ConfigChannel+0x694>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	099b      	lsrs	r3, r3, #6
 8003882:	3301      	adds	r3, #1
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003888:	e002      	b.n	8003890 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3b01      	subs	r3, #1
 800388e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f9      	bne.n	800388a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003896:	e05a      	b.n	800394e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a39      	ldr	r2, [pc, #228]	; (8003984 <HAL_ADC_ConfigChannel+0x698>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d11e      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x5f4>
 80038a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d119      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a30      	ldr	r2, [pc, #192]	; (8003974 <HAL_ADC_ConfigChannel+0x688>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d14b      	bne.n	800394e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <HAL_ADC_ConfigChannel+0x678>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d004      	beq.n	80038ca <HAL_ADC_ConfigChannel+0x5de>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a28      	ldr	r2, [pc, #160]	; (8003968 <HAL_ADC_ConfigChannel+0x67c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x5e2>
 80038ca:	4a28      	ldr	r2, [pc, #160]	; (800396c <HAL_ADC_ConfigChannel+0x680>)
 80038cc:	e000      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x5e4>
 80038ce:	4a28      	ldr	r2, [pc, #160]	; (8003970 <HAL_ADC_ConfigChannel+0x684>)
 80038d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f7ff f9ec 	bl	8002cb6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038de:	e036      	b.n	800394e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a28      	ldr	r2, [pc, #160]	; (8003988 <HAL_ADC_ConfigChannel+0x69c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d131      	bne.n	800394e <HAL_ADC_ConfigChannel+0x662>
 80038ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d12c      	bne.n	800394e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <HAL_ADC_ConfigChannel+0x688>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d127      	bne.n	800394e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a18      	ldr	r2, [pc, #96]	; (8003964 <HAL_ADC_ConfigChannel+0x678>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_ADC_ConfigChannel+0x626>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a16      	ldr	r2, [pc, #88]	; (8003968 <HAL_ADC_ConfigChannel+0x67c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d101      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x62a>
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <HAL_ADC_ConfigChannel+0x680>)
 8003914:	e000      	b.n	8003918 <HAL_ADC_ConfigChannel+0x62c>
 8003916:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_ADC_ConfigChannel+0x684>)
 8003918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f7ff f9c8 	bl	8002cb6 <LL_ADC_SetCommonPathInternalCh>
 8003926:	e012      	b.n	800394e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800393a:	e008      	b.n	800394e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003940:	f043 0220 	orr.w	r2, r3, #32
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003956:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800395a:	4618      	mov	r0, r3
 800395c:	3784      	adds	r7, #132	; 0x84
 800395e:	46bd      	mov	sp, r7
 8003960:	bd90      	pop	{r4, r7, pc}
 8003962:	bf00      	nop
 8003964:	40022000 	.word	0x40022000
 8003968:	40022100 	.word	0x40022100
 800396c:	40022300 	.word	0x40022300
 8003970:	58026300 	.word	0x58026300
 8003974:	58026000 	.word	0x58026000
 8003978:	cb840000 	.word	0xcb840000
 800397c:	24000000 	.word	0x24000000
 8003980:	053e2d63 	.word	0x053e2d63
 8003984:	c7520000 	.word	0xc7520000
 8003988:	cfb80000 	.word	0xcfb80000

0800398c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a7a      	ldr	r2, [pc, #488]	; (8003b84 <ADC_ConfigureBoostMode+0x1f8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d004      	beq.n	80039a8 <ADC_ConfigureBoostMode+0x1c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a79      	ldr	r2, [pc, #484]	; (8003b88 <ADC_ConfigureBoostMode+0x1fc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d109      	bne.n	80039bc <ADC_ConfigureBoostMode+0x30>
 80039a8:	4b78      	ldr	r3, [pc, #480]	; (8003b8c <ADC_ConfigureBoostMode+0x200>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e008      	b.n	80039ce <ADC_ConfigureBoostMode+0x42>
 80039bc:	4b74      	ldr	r3, [pc, #464]	; (8003b90 <ADC_ConfigureBoostMode+0x204>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf14      	ite	ne
 80039c8:	2301      	movne	r3, #1
 80039ca:	2300      	moveq	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01c      	beq.n	8003a0c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039d2:	f003 ffc9 	bl	8007968 <HAL_RCC_GetHCLKFreq>
 80039d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039e0:	d010      	beq.n	8003a04 <ADC_ConfigureBoostMode+0x78>
 80039e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039e6:	d873      	bhi.n	8003ad0 <ADC_ConfigureBoostMode+0x144>
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ec:	d002      	beq.n	80039f4 <ADC_ConfigureBoostMode+0x68>
 80039ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039f2:	d16d      	bne.n	8003ad0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	60fb      	str	r3, [r7, #12]
        break;
 8003a02:	e068      	b.n	8003ad6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	089b      	lsrs	r3, r3, #2
 8003a08:	60fb      	str	r3, [r7, #12]
        break;
 8003a0a:	e064      	b.n	8003ad6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003a0c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003a10:	f04f 0100 	mov.w	r1, #0
 8003a14:	f005 fa0e 	bl	8008e34 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a18:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a22:	d051      	beq.n	8003ac8 <ADC_ConfigureBoostMode+0x13c>
 8003a24:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a28:	d854      	bhi.n	8003ad4 <ADC_ConfigureBoostMode+0x148>
 8003a2a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a2e:	d047      	beq.n	8003ac0 <ADC_ConfigureBoostMode+0x134>
 8003a30:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a34:	d84e      	bhi.n	8003ad4 <ADC_ConfigureBoostMode+0x148>
 8003a36:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a3a:	d03d      	beq.n	8003ab8 <ADC_ConfigureBoostMode+0x12c>
 8003a3c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a40:	d848      	bhi.n	8003ad4 <ADC_ConfigureBoostMode+0x148>
 8003a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a46:	d033      	beq.n	8003ab0 <ADC_ConfigureBoostMode+0x124>
 8003a48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a4c:	d842      	bhi.n	8003ad4 <ADC_ConfigureBoostMode+0x148>
 8003a4e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a52:	d029      	beq.n	8003aa8 <ADC_ConfigureBoostMode+0x11c>
 8003a54:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a58:	d83c      	bhi.n	8003ad4 <ADC_ConfigureBoostMode+0x148>
 8003a5a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a5e:	d01a      	beq.n	8003a96 <ADC_ConfigureBoostMode+0x10a>
 8003a60:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a64:	d836      	bhi.n	8003ad4 <ADC_ConfigureBoostMode+0x148>
 8003a66:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a6a:	d014      	beq.n	8003a96 <ADC_ConfigureBoostMode+0x10a>
 8003a6c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a70:	d830      	bhi.n	8003ad4 <ADC_ConfigureBoostMode+0x148>
 8003a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a76:	d00e      	beq.n	8003a96 <ADC_ConfigureBoostMode+0x10a>
 8003a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7c:	d82a      	bhi.n	8003ad4 <ADC_ConfigureBoostMode+0x148>
 8003a7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a82:	d008      	beq.n	8003a96 <ADC_ConfigureBoostMode+0x10a>
 8003a84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a88:	d824      	bhi.n	8003ad4 <ADC_ConfigureBoostMode+0x148>
 8003a8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a8e:	d002      	beq.n	8003a96 <ADC_ConfigureBoostMode+0x10a>
 8003a90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a94:	d11e      	bne.n	8003ad4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	0c9b      	lsrs	r3, r3, #18
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	60fb      	str	r3, [r7, #12]
        break;
 8003aa6:	e016      	b.n	8003ad6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	60fb      	str	r3, [r7, #12]
        break;
 8003aae:	e012      	b.n	8003ad6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	60fb      	str	r3, [r7, #12]
        break;
 8003ab6:	e00e      	b.n	8003ad6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	099b      	lsrs	r3, r3, #6
 8003abc:	60fb      	str	r3, [r7, #12]
        break;
 8003abe:	e00a      	b.n	8003ad6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	09db      	lsrs	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]
        break;
 8003ac6:	e006      	b.n	8003ad6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	60fb      	str	r3, [r7, #12]
        break;
 8003ace:	e002      	b.n	8003ad6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ad4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ad6:	f7ff f8a5 	bl	8002c24 <HAL_GetREVID>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d815      	bhi.n	8003b10 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a2b      	ldr	r2, [pc, #172]	; (8003b94 <ADC_ConfigureBoostMode+0x208>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d908      	bls.n	8003afe <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003afa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003afc:	e03e      	b.n	8003b7c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b0c:	609a      	str	r2, [r3, #8]
}
 8003b0e:	e035      	b.n	8003b7c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <ADC_ConfigureBoostMode+0x20c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d808      	bhi.n	8003b30 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b2c:	609a      	str	r2, [r3, #8]
}
 8003b2e:	e025      	b.n	8003b7c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <ADC_ConfigureBoostMode+0x210>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d80a      	bhi.n	8003b4e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	e016      	b.n	8003b7c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <ADC_ConfigureBoostMode+0x214>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d80a      	bhi.n	8003b6c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b68:	609a      	str	r2, [r3, #8]
}
 8003b6a:	e007      	b.n	8003b7c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b7a:	609a      	str	r2, [r3, #8]
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40022000 	.word	0x40022000
 8003b88:	40022100 	.word	0x40022100
 8003b8c:	40022300 	.word	0x40022300
 8003b90:	58026300 	.word	0x58026300
 8003b94:	01312d00 	.word	0x01312d00
 8003b98:	005f5e10 	.word	0x005f5e10
 8003b9c:	00bebc20 	.word	0x00bebc20
 8003ba0:	017d7840 	.word	0x017d7840

08003ba4 <LL_ADC_IsEnabled>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <LL_ADC_IsEnabled+0x18>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <LL_ADC_IsEnabled+0x1a>
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <LL_ADC_REG_IsConversionOngoing>:
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d101      	bne.n	8003be2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b09f      	sub	sp, #124	; 0x7c
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e0be      	b.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003c16:	2300      	movs	r3, #0
 8003c18:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a5c      	ldr	r2, [pc, #368]	; (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d102      	bne.n	8003c2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c28:	4b5b      	ldr	r3, [pc, #364]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	e001      	b.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e09d      	b.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff ffb9 	bl	8003bca <LL_ADC_REG_IsConversionOngoing>
 8003c58:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff ffb3 	bl	8003bca <LL_ADC_REG_IsConversionOngoing>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d17f      	bne.n	8003d6a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d17c      	bne.n	8003d6a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a47      	ldr	r2, [pc, #284]	; (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d004      	beq.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a46      	ldr	r2, [pc, #280]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d101      	bne.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003c84:	4b45      	ldr	r3, [pc, #276]	; (8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c86:	e000      	b.n	8003c8a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003c88:	4b45      	ldr	r3, [pc, #276]	; (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c8a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d039      	beq.n	8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a3a      	ldr	r2, [pc, #232]	; (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a38      	ldr	r2, [pc, #224]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003cba:	4836      	ldr	r0, [pc, #216]	; (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cbc:	f7ff ff72 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	4835      	ldr	r0, [pc, #212]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cc4:	f7ff ff6e 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4323      	orrs	r3, r4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	e008      	b.n	8003cea <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003cd8:	4832      	ldr	r0, [pc, #200]	; (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003cda:	f7ff ff63 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d047      	beq.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	4b2d      	ldr	r3, [pc, #180]	; (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	6811      	ldr	r1, [r2, #0]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	6892      	ldr	r2, [r2, #8]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	431a      	orrs	r2, r3
 8003d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d04:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d06:	e03a      	b.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d12:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10e      	bne.n	8003d46 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003d28:	481a      	ldr	r0, [pc, #104]	; (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d2a:	f7ff ff3b 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003d2e:	4604      	mov	r4, r0
 8003d30:	4819      	ldr	r0, [pc, #100]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d32:	f7ff ff37 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003d36:	4603      	mov	r3, r0
 8003d38:	4323      	orrs	r3, r4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	e008      	b.n	8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003d46:	4817      	ldr	r0, [pc, #92]	; (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d48:	f7ff ff2c 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bf0c      	ite	eq
 8003d52:	2301      	moveq	r3, #1
 8003d54:	2300      	movne	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d010      	beq.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d66:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d68:	e009      	b.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003d7c:	e000      	b.n	8003d80 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d7e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	377c      	adds	r7, #124	; 0x7c
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd90      	pop	{r4, r7, pc}
 8003d94:	40022000 	.word	0x40022000
 8003d98:	40022100 	.word	0x40022100
 8003d9c:	40022300 	.word	0x40022300
 8003da0:	58026300 	.word	0x58026300
 8003da4:	58026000 	.word	0x58026000
 8003da8:	fffff0e0 	.word	0xfffff0e0

08003dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <__NVIC_SetPriorityGrouping+0x40>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dda:	4a04      	ldr	r2, [pc, #16]	; (8003dec <__NVIC_SetPriorityGrouping+0x40>)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	60d3      	str	r3, [r2, #12]
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	e000ed00 	.word	0xe000ed00
 8003df0:	05fa0000 	.word	0x05fa0000

08003df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <__NVIC_GetPriorityGrouping+0x18>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	f003 0307 	and.w	r3, r3, #7
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	6039      	str	r1, [r7, #0]
 8003e1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	db0a      	blt.n	8003e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	490c      	ldr	r1, [pc, #48]	; (8003e5c <__NVIC_SetPriority+0x4c>)
 8003e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e2e:	0112      	lsls	r2, r2, #4
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	440b      	add	r3, r1
 8003e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e38:	e00a      	b.n	8003e50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4908      	ldr	r1, [pc, #32]	; (8003e60 <__NVIC_SetPriority+0x50>)
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	3b04      	subs	r3, #4
 8003e48:	0112      	lsls	r2, r2, #4
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	761a      	strb	r2, [r3, #24]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	e000e100 	.word	0xe000e100
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b089      	sub	sp, #36	; 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f1c3 0307 	rsb	r3, r3, #7
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	bf28      	it	cs
 8003e82:	2304      	movcs	r3, #4
 8003e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	2b06      	cmp	r3, #6
 8003e8c:	d902      	bls.n	8003e94 <NVIC_EncodePriority+0x30>
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3b03      	subs	r3, #3
 8003e92:	e000      	b.n	8003e96 <NVIC_EncodePriority+0x32>
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e98:	f04f 32ff 	mov.w	r2, #4294967295
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43da      	mvns	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eac:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb6:	43d9      	mvns	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ebc:	4313      	orrs	r3, r2
         );
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3724      	adds	r7, #36	; 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003edc:	d301      	bcc.n	8003ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e00f      	b.n	8003f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ee2:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <SysTick_Config+0x40>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eea:	210f      	movs	r1, #15
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	f7ff ff8e 	bl	8003e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <SysTick_Config+0x40>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003efa:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <SysTick_Config+0x40>)
 8003efc:	2207      	movs	r2, #7
 8003efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	e000e010 	.word	0xe000e010

08003f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff47 	bl	8003dac <__NVIC_SetPriorityGrouping>
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f34:	f7ff ff5e 	bl	8003df4 <__NVIC_GetPriorityGrouping>
 8003f38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	6978      	ldr	r0, [r7, #20]
 8003f40:	f7ff ff90 	bl	8003e64 <NVIC_EncodePriority>
 8003f44:	4602      	mov	r2, r0
 8003f46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff5f 	bl	8003e10 <__NVIC_SetPriority>
}
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ffb2 	bl	8003ecc <SysTick_Config>
 8003f68:	4603      	mov	r3, r0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0cf      	b.n	8004126 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2223      	movs	r2, #35	; 0x23
 8003f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7fd fcab 	bl	80018f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9e:	4b64      	ldr	r3, [pc, #400]	; (8004130 <HAL_ETH_Init+0x1bc>)
 8003fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fa4:	4a62      	ldr	r2, [pc, #392]	; (8004130 <HAL_ETH_Init+0x1bc>)
 8003fa6:	f043 0302 	orr.w	r3, r3, #2
 8003faa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003fae:	4b60      	ldr	r3, [pc, #384]	; (8004130 <HAL_ETH_Init+0x1bc>)
 8003fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	7a1b      	ldrb	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d103      	bne.n	8003fcc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f7fe fe39 	bl	8002c3c <HAL_SYSCFG_ETHInterfaceSelect>
 8003fca:	e003      	b.n	8003fd4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003fcc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003fd0:	f7fe fe34 	bl	8002c3c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003fd4:	4b57      	ldr	r3, [pc, #348]	; (8004134 <HAL_ETH_Init+0x1c0>)
 8003fd6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ff0:	f7fe fde8 	bl	8002bc4 <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ff6:	e011      	b.n	800401c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ff8:	f7fe fde4 	bl	8002bc4 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004006:	d909      	bls.n	800401c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2204      	movs	r2, #4
 800400c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	22e0      	movs	r2, #224	; 0xe0
 8004014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e084      	b.n	8004126 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e4      	bne.n	8003ff8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f886 	bl	8004140 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004034:	f003 fc98 	bl	8007968 <HAL_RCC_GetHCLKFreq>
 8004038:	4603      	mov	r3, r0
 800403a:	4a3f      	ldr	r2, [pc, #252]	; (8004138 <HAL_ETH_Init+0x1c4>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	0c9a      	lsrs	r2, r3, #18
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3a01      	subs	r2, #1
 8004048:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fa71 	bl	8004534 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800405a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800405e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800406a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800406e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	22e0      	movs	r2, #224	; 0xe0
 800408a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e049      	b.n	8004126 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800409e:	4b27      	ldr	r3, [pc, #156]	; (800413c <HAL_ETH_Init+0x1c8>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6952      	ldr	r2, [r2, #20]
 80040a6:	0051      	lsls	r1, r2, #1
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040b2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fad9 	bl	800466e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fb1f 	bl	8004700 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	3305      	adds	r3, #5
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	021a      	lsls	r2, r3, #8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	4619      	mov	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	3303      	adds	r3, #3
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	061a      	lsls	r2, r3, #24
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	3302      	adds	r3, #2
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	3301      	adds	r3, #1
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004100:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800410e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004110:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2210      	movs	r2, #16
 8004120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	58024400 	.word	0x58024400
 8004134:	58000400 	.word	0x58000400
 8004138:	431bde83 	.word	0x431bde83
 800413c:	ffff8001 	.word	0xffff8001

08004140 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004150:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004158:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800415a:	f003 fc05 	bl	8007968 <HAL_RCC_GetHCLKFreq>
 800415e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d908      	bls.n	800417a <HAL_ETH_SetMDIOClockRange+0x3a>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d804      	bhi.n	800417a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e027      	b.n	80041ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d908      	bls.n	8004194 <HAL_ETH_SetMDIOClockRange+0x54>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d204      	bcs.n	8004194 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e01a      	b.n	80041ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d303      	bcc.n	80041a4 <HAL_ETH_SetMDIOClockRange+0x64>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d911      	bls.n	80041c8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4a10      	ldr	r2, [pc, #64]	; (80041e8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d908      	bls.n	80041be <HAL_ETH_SetMDIOClockRange+0x7e>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4a0f      	ldr	r2, [pc, #60]	; (80041ec <HAL_ETH_SetMDIOClockRange+0xac>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d804      	bhi.n	80041be <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e005      	b.n	80041ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	e000      	b.n	80041ca <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80041c8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	01312cff 	.word	0x01312cff
 80041e0:	02160ebf 	.word	0x02160ebf
 80041e4:	03938700 	.word	0x03938700
 80041e8:	05f5e0ff 	.word	0x05f5e0ff
 80041ec:	08f0d17f 	.word	0x08f0d17f

080041f0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004202:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	791b      	ldrb	r3, [r3, #4]
 8004208:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800420a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	7b1b      	ldrb	r3, [r3, #12]
 8004210:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004212:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	7b5b      	ldrb	r3, [r3, #13]
 8004218:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800421a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	7b9b      	ldrb	r3, [r3, #14]
 8004220:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	7bdb      	ldrb	r3, [r3, #15]
 8004228:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800422a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	7c12      	ldrb	r2, [r2, #16]
 8004230:	2a00      	cmp	r2, #0
 8004232:	d102      	bne.n	800423a <ETH_SetMACConfig+0x4a>
 8004234:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004238:	e000      	b.n	800423c <ETH_SetMACConfig+0x4c>
 800423a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800423c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	7c52      	ldrb	r2, [r2, #17]
 8004242:	2a00      	cmp	r2, #0
 8004244:	d102      	bne.n	800424c <ETH_SetMACConfig+0x5c>
 8004246:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800424a:	e000      	b.n	800424e <ETH_SetMACConfig+0x5e>
 800424c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800424e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	7c9b      	ldrb	r3, [r3, #18]
 8004254:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004256:	431a      	orrs	r2, r3
               macconf->Speed |
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800425c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004262:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	7f1b      	ldrb	r3, [r3, #28]
 8004268:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800426a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	7f5b      	ldrb	r3, [r3, #29]
 8004270:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004272:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	7f92      	ldrb	r2, [r2, #30]
 8004278:	2a00      	cmp	r2, #0
 800427a:	d102      	bne.n	8004282 <ETH_SetMACConfig+0x92>
 800427c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004280:	e000      	b.n	8004284 <ETH_SetMACConfig+0x94>
 8004282:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004284:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	7fdb      	ldrb	r3, [r3, #31]
 800428a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800428c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004294:	2a00      	cmp	r2, #0
 8004296:	d102      	bne.n	800429e <ETH_SetMACConfig+0xae>
 8004298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800429c:	e000      	b.n	80042a0 <ETH_SetMACConfig+0xb0>
 800429e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80042a0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80042a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ae:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80042b0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b56      	ldr	r3, [pc, #344]	; (800441c <ETH_SetMACConfig+0x22c>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	68f9      	ldr	r1, [r7, #12]
 80042ca:	430b      	orrs	r3, r1
 80042cc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042da:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042e4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042ee:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80042f8:	2a00      	cmp	r2, #0
 80042fa:	d102      	bne.n	8004302 <ETH_SetMACConfig+0x112>
 80042fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004300:	e000      	b.n	8004304 <ETH_SetMACConfig+0x114>
 8004302:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004304:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	4b42      	ldr	r3, [pc, #264]	; (8004420 <ETH_SetMACConfig+0x230>)
 8004316:	4013      	ands	r3, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	68f9      	ldr	r1, [r7, #12]
 800431e:	430b      	orrs	r3, r1
 8004320:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004328:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <ETH_SetMACConfig+0x234>)
 800433a:	4013      	ands	r3, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	68f9      	ldr	r1, [r7, #12]
 8004342:	430b      	orrs	r3, r1
 8004344:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800434c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004352:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800435a:	2a00      	cmp	r2, #0
 800435c:	d101      	bne.n	8004362 <ETH_SetMACConfig+0x172>
 800435e:	2280      	movs	r2, #128	; 0x80
 8004360:	e000      	b.n	8004364 <ETH_SetMACConfig+0x174>
 8004362:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004364:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004376:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800437a:	4013      	ands	r3, r2
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	68f9      	ldr	r1, [r7, #12]
 8004382:	430b      	orrs	r3, r1
 8004384:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800438c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004394:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f023 0103 	bic.w	r1, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80043ba:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80043d6:	2a00      	cmp	r2, #0
 80043d8:	d101      	bne.n	80043de <ETH_SetMACConfig+0x1ee>
 80043da:	2240      	movs	r2, #64	; 0x40
 80043dc:	e000      	b.n	80043e0 <ETH_SetMACConfig+0x1f0>
 80043de:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80043e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80043e8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80043f2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004400:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	430a      	orrs	r2, r1
 800440c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	00048083 	.word	0x00048083
 8004420:	c0f88000 	.word	0xc0f88000
 8004424:	fffffef0 	.word	0xfffffef0

08004428 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b38      	ldr	r3, [pc, #224]	; (8004520 <ETH_SetDMAConfig+0xf8>)
 800443e:	4013      	ands	r3, r2
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	6811      	ldr	r1, [r2, #0]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	430b      	orrs	r3, r1
 800444a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800444e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	791b      	ldrb	r3, [r3, #4]
 8004454:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800445a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	7b1b      	ldrb	r3, [r3, #12]
 8004460:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	4b2c      	ldr	r3, [pc, #176]	; (8004524 <ETH_SetDMAConfig+0xfc>)
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	430b      	orrs	r3, r1
 800447c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004480:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	7b5b      	ldrb	r3, [r3, #13]
 8004486:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004498:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800449c:	4b22      	ldr	r3, [pc, #136]	; (8004528 <ETH_SetDMAConfig+0x100>)
 800449e:	4013      	ands	r3, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	68f9      	ldr	r1, [r7, #12]
 80044a6:	430b      	orrs	r3, r1
 80044a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044ac:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	7d1b      	ldrb	r3, [r3, #20]
 80044b8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80044ba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	7f5b      	ldrb	r3, [r3, #29]
 80044c0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <ETH_SetDMAConfig+0x104>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	68f9      	ldr	r1, [r7, #12]
 80044dc:	430b      	orrs	r3, r1
 80044de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044e2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	7f1b      	ldrb	r3, [r3, #28]
 80044ea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <ETH_SetDMAConfig+0x108>)
 8004502:	4013      	ands	r3, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	430b      	orrs	r3, r1
 800450c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004510:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	ffff87fd 	.word	0xffff87fd
 8004524:	ffff2ffe 	.word	0xffff2ffe
 8004528:	fffec000 	.word	0xfffec000
 800452c:	ffc0efef 	.word	0xffc0efef
 8004530:	7fc0ffff 	.word	0x7fc0ffff

08004534 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b0a4      	sub	sp, #144	; 0x90
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004542:	2300      	movs	r3, #0
 8004544:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004546:	2300      	movs	r3, #0
 8004548:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800454c:	2300      	movs	r3, #0
 800454e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004564:	2300      	movs	r3, #0
 8004566:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004574:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004576:	2300      	movs	r3, #0
 8004578:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800457c:	2300      	movs	r3, #0
 800457e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004580:	2300      	movs	r3, #0
 8004582:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004586:	2300      	movs	r3, #0
 8004588:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800458c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004590:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004592:	2300      	movs	r3, #0
 8004594:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004598:	2300      	movs	r3, #0
 800459a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80045ae:	2300      	movs	r3, #0
 80045b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80045b6:	2300      	movs	r3, #0
 80045b8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80045c0:	2300      	movs	r3, #0
 80045c2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80045cc:	2320      	movs	r3, #32
 80045ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80045d8:	2300      	movs	r3, #0
 80045da:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80045de:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80045e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045e8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80045f0:	2302      	movs	r3, #2
 80045f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004602:	2300      	movs	r3, #0
 8004604:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800460e:	2300      	movs	r3, #0
 8004610:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800461c:	4619      	mov	r1, r3
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fde6 	bl	80041f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004624:	2301      	movs	r3, #1
 8004626:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004628:	2301      	movs	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800462c:	2300      	movs	r3, #0
 800462e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004630:	2300      	movs	r3, #0
 8004632:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004636:	2300      	movs	r3, #0
 8004638:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800463a:	2300      	movs	r3, #0
 800463c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800463e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004642:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004644:	2300      	movs	r3, #0
 8004646:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004648:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800464c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800464e:	2300      	movs	r3, #0
 8004650:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004654:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fee1 	bl	8004428 <ETH_SetDMAConfig>
}
 8004666:	bf00      	nop
 8004668:	3790      	adds	r7, #144	; 0x90
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e01d      	b.n	80046b8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68d9      	ldr	r1, [r3, #12]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4613      	mov	r3, r2
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4413      	add	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	440b      	add	r3, r1
 800468c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2200      	movs	r2, #0
 8004698:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2200      	movs	r2, #0
 800469e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2200      	movs	r2, #0
 80046a4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	3206      	adds	r2, #6
 80046ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d9de      	bls.n	800467c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046cc:	461a      	mov	r2, r3
 80046ce:	2303      	movs	r3, #3
 80046d0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e023      	b.n	8004756 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6919      	ldr	r1, [r3, #16]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4613      	mov	r3, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4413      	add	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	440b      	add	r3, r1
 800471e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2200      	movs	r2, #0
 800472a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2200      	movs	r2, #0
 8004736:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2200      	movs	r2, #0
 8004742:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	3212      	adds	r2, #18
 800474c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d9d8      	bls.n	800470e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004782:	461a      	mov	r2, r3
 8004784:	2303      	movs	r3, #3
 8004786:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004796:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047aa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b098      	sub	sp, #96	; 0x60
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80047c4:	4a84      	ldr	r2, [pc, #528]	; (80049d8 <HAL_FDCAN_Init+0x21c>)
 80047c6:	f107 030c 	add.w	r3, r7, #12
 80047ca:	4611      	mov	r1, r2
 80047cc:	224c      	movs	r2, #76	; 0x4c
 80047ce:	4618      	mov	r0, r3
 80047d0:	f009 fea0 	bl	800e514 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e1c6      	b.n	8004b6c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a7e      	ldr	r2, [pc, #504]	; (80049dc <HAL_FDCAN_Init+0x220>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d106      	bne.n	80047f6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fd f9a2 	bl	8001b54 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0210 	bic.w	r2, r2, #16
 800481e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004820:	f7fe f9d0 	bl	8002bc4 <HAL_GetTick>
 8004824:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004826:	e014      	b.n	8004852 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004828:	f7fe f9cc 	bl	8002bc4 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b0a      	cmp	r3, #10
 8004834:	d90d      	bls.n	8004852 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800483c:	f043 0201 	orr.w	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2203      	movs	r2, #3
 800484a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e18c      	b.n	8004b6c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b08      	cmp	r3, #8
 800485e:	d0e3      	beq.n	8004828 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004870:	f7fe f9a8 	bl	8002bc4 <HAL_GetTick>
 8004874:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004876:	e014      	b.n	80048a2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004878:	f7fe f9a4 	bl	8002bc4 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b0a      	cmp	r3, #10
 8004884:	d90d      	bls.n	80048a2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800488c:	f043 0201 	orr.w	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2203      	movs	r2, #3
 800489a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e164      	b.n	8004b6c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0e3      	beq.n	8004878 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0202 	orr.w	r2, r2, #2
 80048be:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	7c1b      	ldrb	r3, [r3, #16]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d108      	bne.n	80048da <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d6:	619a      	str	r2, [r3, #24]
 80048d8:	e007      	b.n	80048ea <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699a      	ldr	r2, [r3, #24]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7c5b      	ldrb	r3, [r3, #17]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d108      	bne.n	8004904 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699a      	ldr	r2, [r3, #24]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004900:	619a      	str	r2, [r3, #24]
 8004902:	e007      	b.n	8004914 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004912:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	7c9b      	ldrb	r3, [r3, #18]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d108      	bne.n	800492e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800492a:	619a      	str	r2, [r3, #24]
 800492c:	e007      	b.n	800493e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800493c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004962:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0210 	bic.w	r2, r2, #16
 8004972:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d108      	bne.n	800498e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0204 	orr.w	r2, r2, #4
 800498a:	619a      	str	r2, [r3, #24]
 800498c:	e030      	b.n	80049f0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d02c      	beq.n	80049f0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d020      	beq.n	80049e0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049ac:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0210 	orr.w	r2, r2, #16
 80049bc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d114      	bne.n	80049f0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699a      	ldr	r2, [r3, #24]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0220 	orr.w	r2, r2, #32
 80049d4:	619a      	str	r2, [r3, #24]
 80049d6:	e00b      	b.n	80049f0 <HAL_FDCAN_Init+0x234>
 80049d8:	0800e570 	.word	0x0800e570
 80049dc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0220 	orr.w	r2, r2, #32
 80049ee:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a00:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a08:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a18:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a1a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a24:	d115      	bne.n	8004a52 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	3b01      	subs	r3, #1
 8004a32:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a34:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004a3e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	3b01      	subs	r3, #1
 8004a48:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004a4e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a50:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a78:	4413      	add	r3, r2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d011      	beq.n	8004aa2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004a86:	f023 0107 	bic.w	r1, r3, #7
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	3360      	adds	r3, #96	; 0x60
 8004a92:	443b      	add	r3, r7
 8004a94:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d011      	beq.n	8004ace <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ab2:	f023 0107 	bic.w	r1, r3, #7
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	3360      	adds	r3, #96	; 0x60
 8004abe:	443b      	add	r3, r7
 8004ac0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d012      	beq.n	8004afc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ade:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	3360      	adds	r3, #96	; 0x60
 8004aea:	443b      	add	r3, r7
 8004aec:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004af0:	011a      	lsls	r2, r3, #4
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d012      	beq.n	8004b2a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b0c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	3360      	adds	r3, #96	; 0x60
 8004b18:	443b      	add	r3, r7
 8004b1a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004b1e:	021a      	lsls	r2, r3, #8
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a11      	ldr	r2, [pc, #68]	; (8004b74 <HAL_FDCAN_Init+0x3b8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d107      	bne.n	8004b44 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f022 0203 	bic.w	r2, r2, #3
 8004b42:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f80b 	bl	8004b78 <FDCAN_CalcultateRamBlockAddresses>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004b68:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3760      	adds	r7, #96	; 0x60
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	4000a000 	.word	0x4000a000

08004b78 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b84:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004b8e:	4ba7      	ldr	r3, [pc, #668]	; (8004e2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	0091      	lsls	r1, r2, #2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	041a      	lsls	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bce:	4b97      	ldr	r3, [pc, #604]	; (8004e2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	0091      	lsls	r1, r2, #2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	041a      	lsls	r2, r3, #16
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	4413      	add	r3, r2
 8004c06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004c10:	4b86      	ldr	r3, [pc, #536]	; (8004e2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	0091      	lsls	r1, r2, #2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c2a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	041a      	lsls	r2, r3, #16
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004c58:	4b74      	ldr	r3, [pc, #464]	; (8004e2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	0091      	lsls	r1, r2, #2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	430b      	orrs	r3, r1
 8004c66:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c72:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7a:	041a      	lsls	r2, r3, #16
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4413      	add	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004ca0:	4b62      	ldr	r3, [pc, #392]	; (8004e2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	0091      	lsls	r1, r2, #2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004ccc:	4b57      	ldr	r3, [pc, #348]	; (8004e2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	0091      	lsls	r1, r2, #2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ce6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cee:	041a      	lsls	r2, r3, #16
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	4413      	add	r3, r2
 8004d04:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004d0e:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	0091      	lsls	r1, r2, #2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d28:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	041a      	lsls	r2, r3, #16
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d44:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4c:	061a      	lsls	r2, r3, #24
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d5c:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004d5e:	4413      	add	r3, r2
 8004d60:	009a      	lsls	r2, r3, #2
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	441a      	add	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	441a      	add	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004df2:	fb01 f303 	mul.w	r3, r1, r3
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	441a      	add	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004e0e:	fb01 f303 	mul.w	r3, r1, r3
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	441a      	add	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	4a04      	ldr	r2, [pc, #16]	; (8004e34 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d915      	bls.n	8004e54 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004e28:	e006      	b.n	8004e38 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004e2a:	bf00      	nop
 8004e2c:	ffff0003 	.word	0xffff0003
 8004e30:	10002b00 	.word	0x10002b00
 8004e34:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e010      	b.n	8004e76 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e005      	b.n	8004e68 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3304      	adds	r3, #4
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d3f3      	bcc.n	8004e5c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop

08004e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	; 0x24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e92:	4b89      	ldr	r3, [pc, #548]	; (80050b8 <HAL_GPIO_Init+0x234>)
 8004e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e96:	e194      	b.n	80051c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8186 	beq.w	80051bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d005      	beq.n	8004ec8 <HAL_GPIO_Init+0x44>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d130      	bne.n	8004f2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4013      	ands	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004efe:	2201      	movs	r2, #1
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	091b      	lsrs	r3, r3, #4
 8004f14:	f003 0201 	and.w	r2, r3, #1
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d017      	beq.n	8004f66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	2203      	movs	r2, #3
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d123      	bne.n	8004fba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	08da      	lsrs	r2, r3, #3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3208      	adds	r2, #8
 8004f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	220f      	movs	r2, #15
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4013      	ands	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	08da      	lsrs	r2, r3, #3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3208      	adds	r2, #8
 8004fb4:	69b9      	ldr	r1, [r7, #24]
 8004fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0203 	and.w	r2, r3, #3
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 80e0 	beq.w	80051bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ffc:	4b2f      	ldr	r3, [pc, #188]	; (80050bc <HAL_GPIO_Init+0x238>)
 8004ffe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005002:	4a2e      	ldr	r2, [pc, #184]	; (80050bc <HAL_GPIO_Init+0x238>)
 8005004:	f043 0302 	orr.w	r3, r3, #2
 8005008:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800500c:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <HAL_GPIO_Init+0x238>)
 800500e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800501a:	4a29      	ldr	r2, [pc, #164]	; (80050c0 <HAL_GPIO_Init+0x23c>)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	3302      	adds	r3, #2
 8005022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	220f      	movs	r2, #15
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <HAL_GPIO_Init+0x240>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d052      	beq.n	80050ec <HAL_GPIO_Init+0x268>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <HAL_GPIO_Init+0x244>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d031      	beq.n	80050b2 <HAL_GPIO_Init+0x22e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1e      	ldr	r2, [pc, #120]	; (80050cc <HAL_GPIO_Init+0x248>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d02b      	beq.n	80050ae <HAL_GPIO_Init+0x22a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <HAL_GPIO_Init+0x24c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d025      	beq.n	80050aa <HAL_GPIO_Init+0x226>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <HAL_GPIO_Init+0x250>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01f      	beq.n	80050a6 <HAL_GPIO_Init+0x222>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <HAL_GPIO_Init+0x254>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d019      	beq.n	80050a2 <HAL_GPIO_Init+0x21e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1a      	ldr	r2, [pc, #104]	; (80050dc <HAL_GPIO_Init+0x258>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_GPIO_Init+0x21a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <HAL_GPIO_Init+0x25c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00d      	beq.n	800509a <HAL_GPIO_Init+0x216>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <HAL_GPIO_Init+0x260>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <HAL_GPIO_Init+0x212>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a17      	ldr	r2, [pc, #92]	; (80050e8 <HAL_GPIO_Init+0x264>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d101      	bne.n	8005092 <HAL_GPIO_Init+0x20e>
 800508e:	2309      	movs	r3, #9
 8005090:	e02d      	b.n	80050ee <HAL_GPIO_Init+0x26a>
 8005092:	230a      	movs	r3, #10
 8005094:	e02b      	b.n	80050ee <HAL_GPIO_Init+0x26a>
 8005096:	2308      	movs	r3, #8
 8005098:	e029      	b.n	80050ee <HAL_GPIO_Init+0x26a>
 800509a:	2307      	movs	r3, #7
 800509c:	e027      	b.n	80050ee <HAL_GPIO_Init+0x26a>
 800509e:	2306      	movs	r3, #6
 80050a0:	e025      	b.n	80050ee <HAL_GPIO_Init+0x26a>
 80050a2:	2305      	movs	r3, #5
 80050a4:	e023      	b.n	80050ee <HAL_GPIO_Init+0x26a>
 80050a6:	2304      	movs	r3, #4
 80050a8:	e021      	b.n	80050ee <HAL_GPIO_Init+0x26a>
 80050aa:	2303      	movs	r3, #3
 80050ac:	e01f      	b.n	80050ee <HAL_GPIO_Init+0x26a>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e01d      	b.n	80050ee <HAL_GPIO_Init+0x26a>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e01b      	b.n	80050ee <HAL_GPIO_Init+0x26a>
 80050b6:	bf00      	nop
 80050b8:	58000080 	.word	0x58000080
 80050bc:	58024400 	.word	0x58024400
 80050c0:	58000400 	.word	0x58000400
 80050c4:	58020000 	.word	0x58020000
 80050c8:	58020400 	.word	0x58020400
 80050cc:	58020800 	.word	0x58020800
 80050d0:	58020c00 	.word	0x58020c00
 80050d4:	58021000 	.word	0x58021000
 80050d8:	58021400 	.word	0x58021400
 80050dc:	58021800 	.word	0x58021800
 80050e0:	58021c00 	.word	0x58021c00
 80050e4:	58022000 	.word	0x58022000
 80050e8:	58022400 	.word	0x58022400
 80050ec:	2300      	movs	r3, #0
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	f002 0203 	and.w	r2, r2, #3
 80050f4:	0092      	lsls	r2, r2, #2
 80050f6:	4093      	lsls	r3, r2
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050fe:	4938      	ldr	r1, [pc, #224]	; (80051e0 <HAL_GPIO_Init+0x35c>)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	089b      	lsrs	r3, r3, #2
 8005104:	3302      	adds	r3, #2
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800510c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	43db      	mvns	r3, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800513a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	43db      	mvns	r3, r3
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	4013      	ands	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	43db      	mvns	r3, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4013      	ands	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	43db      	mvns	r3, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4013      	ands	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	3301      	adds	r3, #1
 80051c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f47f ae63 	bne.w	8004e98 <HAL_GPIO_Init+0x14>
  }
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	3724      	adds	r7, #36	; 0x24
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	58000400 	.word	0x58000400

080051e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	807b      	strh	r3, [r7, #2]
 80051f0:	4613      	mov	r3, r2
 80051f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051f4:	787b      	ldrb	r3, [r7, #1]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051fa:	887a      	ldrh	r2, [r7, #2]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005200:	e003      	b.n	800520a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	041a      	lsls	r2, r3, #16
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	619a      	str	r2, [r3, #24]
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e0bf      	b.n	80053aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fc fd58 	bl	8001cf4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800525a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6999      	ldr	r1, [r3, #24]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005270:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6899      	ldr	r1, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b4a      	ldr	r3, [pc, #296]	; (80053b4 <HAL_LTDC_Init+0x19c>)
 800528c:	400b      	ands	r3, r1
 800528e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6899      	ldr	r1, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68d9      	ldr	r1, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b3e      	ldr	r3, [pc, #248]	; (80053b4 <HAL_LTDC_Init+0x19c>)
 80052ba:	400b      	ands	r3, r1
 80052bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	041b      	lsls	r3, r3, #16
 80052c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68d9      	ldr	r1, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1a      	ldr	r2, [r3, #32]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6919      	ldr	r1, [r3, #16]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4b33      	ldr	r3, [pc, #204]	; (80053b4 <HAL_LTDC_Init+0x19c>)
 80052e8:	400b      	ands	r3, r1
 80052ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6919      	ldr	r1, [r3, #16]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6959      	ldr	r1, [r3, #20]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <HAL_LTDC_Init+0x19c>)
 8005316:	400b      	ands	r3, r1
 8005318:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	041b      	lsls	r3, r3, #16
 8005320:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6959      	ldr	r1, [r3, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0206 	orr.w	r2, r2, #6
 8005386:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	f000f800 	.word	0xf000f800

080053b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80053b8:	b5b0      	push	{r4, r5, r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_LTDC_ConfigLayer+0x1a>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e02c      	b.n	800542c <HAL_LTDC_ConfigLayer+0x74>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2134      	movs	r1, #52	; 0x34
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	4413      	add	r3, r2
 80053ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4614      	mov	r4, r2
 80053f6:	461d      	mov	r5, r3
 80053f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f811 	bl	8005434 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2201      	movs	r2, #1
 8005418:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bdb0      	pop	{r4, r5, r7, pc}

08005434 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005434:	b480      	push	{r7}
 8005436:	b089      	sub	sp, #36	; 0x24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	0c1b      	lsrs	r3, r3, #16
 800544c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005450:	4413      	add	r3, r2
 8005452:	041b      	lsls	r3, r3, #16
 8005454:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	01db      	lsls	r3, r3, #7
 8005460:	4413      	add	r3, r2
 8005462:	3384      	adds	r3, #132	; 0x84
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	6812      	ldr	r2, [r2, #0]
 800546a:	4611      	mov	r1, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	01d2      	lsls	r2, r2, #7
 8005470:	440a      	add	r2, r1
 8005472:	3284      	adds	r2, #132	; 0x84
 8005474:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005478:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800548a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800548c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4619      	mov	r1, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	01db      	lsls	r3, r3, #7
 8005498:	440b      	add	r3, r1
 800549a:	3384      	adds	r3, #132	; 0x84
 800549c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80054a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054b2:	4413      	add	r3, r2
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	01db      	lsls	r3, r3, #7
 80054c2:	4413      	add	r3, r2
 80054c4:	3384      	adds	r3, #132	; 0x84
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	4611      	mov	r1, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	01d2      	lsls	r2, r2, #7
 80054d2:	440a      	add	r2, r1
 80054d4:	3284      	adds	r2, #132	; 0x84
 80054d6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80054da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ea:	4413      	add	r3, r2
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4619      	mov	r1, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	01db      	lsls	r3, r3, #7
 80054f8:	440b      	add	r3, r1
 80054fa:	3384      	adds	r3, #132	; 0x84
 80054fc:	4619      	mov	r1, r3
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4313      	orrs	r3, r2
 8005502:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	01db      	lsls	r3, r3, #7
 800550e:	4413      	add	r3, r2
 8005510:	3384      	adds	r3, #132	; 0x84
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	4611      	mov	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	01d2      	lsls	r2, r2, #7
 800551e:	440a      	add	r2, r1
 8005520:	3284      	adds	r2, #132	; 0x84
 8005522:	f023 0307 	bic.w	r3, r3, #7
 8005526:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	01db      	lsls	r3, r3, #7
 8005532:	4413      	add	r3, r2
 8005534:	3384      	adds	r3, #132	; 0x84
 8005536:	461a      	mov	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	061b      	lsls	r3, r3, #24
 8005558:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	01db      	lsls	r3, r3, #7
 8005564:	4413      	add	r3, r2
 8005566:	3384      	adds	r3, #132	; 0x84
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	01db      	lsls	r3, r3, #7
 8005574:	4413      	add	r3, r2
 8005576:	3384      	adds	r3, #132	; 0x84
 8005578:	461a      	mov	r2, r3
 800557a:	2300      	movs	r3, #0
 800557c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005584:	461a      	mov	r2, r3
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	431a      	orrs	r2, r3
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	431a      	orrs	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	01db      	lsls	r3, r3, #7
 8005598:	440b      	add	r3, r1
 800559a:	3384      	adds	r3, #132	; 0x84
 800559c:	4619      	mov	r1, r3
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	01db      	lsls	r3, r3, #7
 80055ae:	4413      	add	r3, r2
 80055b0:	3384      	adds	r3, #132	; 0x84
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	4611      	mov	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	01d2      	lsls	r2, r2, #7
 80055be:	440a      	add	r2, r1
 80055c0:	3284      	adds	r2, #132	; 0x84
 80055c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	01db      	lsls	r3, r3, #7
 80055d2:	4413      	add	r3, r2
 80055d4:	3384      	adds	r3, #132	; 0x84
 80055d6:	461a      	mov	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	01db      	lsls	r3, r3, #7
 80055e8:	4413      	add	r3, r2
 80055ea:	3384      	adds	r3, #132	; 0x84
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4619      	mov	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	01db      	lsls	r3, r3, #7
 80055f8:	440b      	add	r3, r1
 80055fa:	3384      	adds	r3, #132	; 0x84
 80055fc:	4619      	mov	r1, r3
 80055fe:	4b58      	ldr	r3, [pc, #352]	; (8005760 <LTDC_SetConfig+0x32c>)
 8005600:	4013      	ands	r3, r2
 8005602:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	68f9      	ldr	r1, [r7, #12]
 800560e:	6809      	ldr	r1, [r1, #0]
 8005610:	4608      	mov	r0, r1
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	01c9      	lsls	r1, r1, #7
 8005616:	4401      	add	r1, r0
 8005618:	3184      	adds	r1, #132	; 0x84
 800561a:	4313      	orrs	r3, r2
 800561c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	01db      	lsls	r3, r3, #7
 8005628:	4413      	add	r3, r2
 800562a:	3384      	adds	r3, #132	; 0x84
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	01db      	lsls	r3, r3, #7
 8005638:	4413      	add	r3, r2
 800563a:	3384      	adds	r3, #132	; 0x84
 800563c:	461a      	mov	r2, r3
 800563e:	2300      	movs	r3, #0
 8005640:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	01db      	lsls	r3, r3, #7
 800564c:	4413      	add	r3, r2
 800564e:	3384      	adds	r3, #132	; 0x84
 8005650:	461a      	mov	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005660:	2304      	movs	r3, #4
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	e01b      	b.n	800569e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d102      	bne.n	8005674 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800566e:	2303      	movs	r3, #3
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	e014      	b.n	800569e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2b04      	cmp	r3, #4
 800567a:	d00b      	beq.n	8005694 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005680:	2b02      	cmp	r3, #2
 8005682:	d007      	beq.n	8005694 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005688:	2b03      	cmp	r3, #3
 800568a:	d003      	beq.n	8005694 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005690:	2b07      	cmp	r3, #7
 8005692:	d102      	bne.n	800569a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005694:	2302      	movs	r3, #2
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	e001      	b.n	800569e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800569a:	2301      	movs	r3, #1
 800569c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	01db      	lsls	r3, r3, #7
 80056a8:	4413      	add	r3, r2
 80056aa:	3384      	adds	r3, #132	; 0x84
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	4611      	mov	r1, r2
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	01d2      	lsls	r2, r2, #7
 80056b8:	440a      	add	r2, r1
 80056ba:	3284      	adds	r2, #132	; 0x84
 80056bc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80056c0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	041a      	lsls	r2, r3, #16
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6859      	ldr	r1, [r3, #4]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	1acb      	subs	r3, r1, r3
 80056d8:	69f9      	ldr	r1, [r7, #28]
 80056da:	fb01 f303 	mul.w	r3, r1, r3
 80056de:	3307      	adds	r3, #7
 80056e0:	68f9      	ldr	r1, [r7, #12]
 80056e2:	6809      	ldr	r1, [r1, #0]
 80056e4:	4608      	mov	r0, r1
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	01c9      	lsls	r1, r1, #7
 80056ea:	4401      	add	r1, r0
 80056ec:	3184      	adds	r1, #132	; 0x84
 80056ee:	4313      	orrs	r3, r2
 80056f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	01db      	lsls	r3, r3, #7
 80056fc:	4413      	add	r3, r2
 80056fe:	3384      	adds	r3, #132	; 0x84
 8005700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4619      	mov	r1, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	01db      	lsls	r3, r3, #7
 800570c:	440b      	add	r3, r1
 800570e:	3384      	adds	r3, #132	; 0x84
 8005710:	4619      	mov	r1, r3
 8005712:	4b14      	ldr	r3, [pc, #80]	; (8005764 <LTDC_SetConfig+0x330>)
 8005714:	4013      	ands	r3, r2
 8005716:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	01db      	lsls	r3, r3, #7
 8005722:	4413      	add	r3, r2
 8005724:	3384      	adds	r3, #132	; 0x84
 8005726:	461a      	mov	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	01db      	lsls	r3, r3, #7
 8005738:	4413      	add	r3, r2
 800573a:	3384      	adds	r3, #132	; 0x84
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	4611      	mov	r1, r2
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	01d2      	lsls	r2, r2, #7
 8005748:	440a      	add	r2, r1
 800574a:	3284      	adds	r2, #132	; 0x84
 800574c:	f043 0301 	orr.w	r3, r3, #1
 8005750:	6013      	str	r3, [r2, #0]
}
 8005752:	bf00      	nop
 8005754:	3724      	adds	r7, #36	; 0x24
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	fffff8f8 	.word	0xfffff8f8
 8005764:	fffff800 	.word	0xfffff800

08005768 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e031      	b.n	80057de <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d105      	bne.n	8005792 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7fc fc9d 	bl	80020cc <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2203      	movs	r2, #3
 8005796:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f824 	bl	80057e8 <HAL_MMC_InitCard>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e019      	b.n	80057de <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fb47 	bl	8005e60 <HAL_MMC_ConfigWideBusOperation>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b08d      	sub	sp, #52	; 0x34
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005800:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005804:	f04f 0100 	mov.w	r1, #0
 8005808:	f003 fb14 	bl	8008e34 <HAL_RCCEx_GetPeriphCLKFreq>
 800580c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005822:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e070      	b.n	800590a <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	0a1b      	lsrs	r3, r3, #8
 800582c:	4a39      	ldr	r2, [pc, #228]	; (8005914 <HAL_MMC_InitCard+0x12c>)
 800582e:	fba2 2303 	umull	r2, r3, r2, r3
 8005832:	091b      	lsrs	r3, r3, #4
 8005834:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681c      	ldr	r4, [r3, #0]
 800583a:	466a      	mov	r2, sp
 800583c:	f107 0318 	add.w	r3, r7, #24
 8005840:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005844:	e882 0003 	stmia.w	r2, {r0, r1}
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800584e:	4620      	mov	r0, r4
 8005850:	f006 fcf8 	bl	800c244 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f006 fd2a 	bl	800c2b2 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586a:	fbb2 f3f3 	udiv	r3, r2, r3
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005876:	4a28      	ldr	r2, [pc, #160]	; (8005918 <HAL_MMC_InitCard+0x130>)
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	fbb2 f3f3 	udiv	r3, r2, r3
 800587e:	3301      	adds	r3, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f7fd f9ab 	bl	8002bdc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fcb4 	bl	80061f4 <MMC_PowerON>
 800588c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00b      	beq.n	80058ac <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e02e      	b.n	800590a <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fba3 	bl	8005ff8 <MMC_InitCard>
 80058b2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e01b      	b.n	800590a <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058da:	4618      	mov	r0, r3
 80058dc:	f006 fd7e 	bl	800c3dc <SDMMC_CmdBlockLength>
 80058e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00f      	beq.n	8005908 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a0b      	ldr	r2, [pc, #44]	; (800591c <HAL_MMC_InitCard+0x134>)
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	372c      	adds	r7, #44	; 0x2c
 800590e:	46bd      	mov	sp, r7
 8005910:	bd90      	pop	{r4, r7, pc}
 8005912:	bf00      	nop
 8005914:	014f8b59 	.word	0x014f8b59
 8005918:	00012110 	.word	0x00012110
 800591c:	1fe00fff 	.word	0x1fe00fff

08005920 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	0f9b      	lsrs	r3, r3, #30
 8005934:	b2da      	uxtb	r2, r3
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593e:	0e9b      	lsrs	r3, r3, #26
 8005940:	b2db      	uxtb	r3, r3
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	b2da      	uxtb	r2, r3
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005950:	0e1b      	lsrs	r3, r3, #24
 8005952:	b2db      	uxtb	r3, r3
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	b2da      	uxtb	r2, r3
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	0c1b      	lsrs	r3, r3, #16
 8005964:	b2da      	uxtb	r2, r3
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	b2da      	uxtb	r2, r3
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597a:	b2da      	uxtb	r2, r3
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	0d1b      	lsrs	r3, r3, #20
 8005986:	b29a      	uxth	r2, r3
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005990:	0c1b      	lsrs	r3, r3, #16
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	b2da      	uxtb	r2, r3
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a2:	0bdb      	lsrs	r3, r3, #15
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b4:	0b9b      	lsrs	r3, r3, #14
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	0b5b      	lsrs	r3, r3, #13
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d8:	0b1b      	lsrs	r3, r3, #12
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2200      	movs	r2, #0
 80059ea:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 80059ec:	f107 010c 	add.w	r1, r7, #12
 80059f0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80059f4:	22d4      	movs	r2, #212	; 0xd4
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fc4c 	bl	8006294 <MMC_ReadExtCSD>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e129      	b.n	8005c5a <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d163      	bne.n	8005ad6 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a12:	009a      	lsls	r2, r3, #2
 8005a14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a1e:	0f92      	lsrs	r2, r2, #30
 8005a20:	431a      	orrs	r2, r3
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2a:	0edb      	lsrs	r3, r3, #27
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3c:	0e1b      	lsrs	r3, r3, #24
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4e:	0d5b      	lsrs	r3, r3, #21
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a60:	0c9b      	lsrs	r3, r3, #18
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a72:	0bdb      	lsrs	r3, r3, #15
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	7e1b      	ldrb	r3, [r3, #24]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	3302      	adds	r3, #2
 8005a96:	2201      	movs	r2, #1
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005aa0:	fb03 f202 	mul.w	r2, r3, r2
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	7a1b      	ldrb	r3, [r3, #8]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	649a      	str	r2, [r3, #72]	; 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ac2:	0a52      	lsrs	r2, r2, #9
 8005ac4:	fb03 f202 	mul.w	r2, r3, r2
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad2:	651a      	str	r2, [r3, #80]	; 0x50
 8005ad4:	e023      	b.n	8005b1e <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d10f      	bne.n	8005afe <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af2:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	651a      	str	r2, [r3, #80]	; 0x50
 8005afc:	e00f      	b.n	8005b1e <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a58      	ldr	r2, [pc, #352]	; (8005c64 <HAL_MMC_GetCardCSD+0x344>)
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e09d      	b.n	8005c5a <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b22:	0b9b      	lsrs	r3, r3, #14
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b34:	09db      	lsrs	r3, r3, #7
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b56:	0fdb      	lsrs	r3, r3, #31
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b62:	0f5b      	lsrs	r3, r3, #29
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b74:	0e9b      	lsrs	r3, r3, #26
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b86:	0d9b      	lsrs	r3, r3, #22
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b98:	0d5b      	lsrs	r3, r3, #21
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc8:	0bdb      	lsrs	r3, r3, #15
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bdc:	0b9b      	lsrs	r3, r3, #14
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf0:	0b5b      	lsrs	r3, r3, #13
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c04:	0b1b      	lsrs	r3, r3, #12
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c18:	0a9b      	lsrs	r3, r3, #10
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	1fe00fff 	.word	0x1fe00fff

08005c68 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08e      	sub	sp, #56	; 0x38
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c74:	f7fc ffa6 	bl	8002bc4 <HAL_GetTick>
 8005c78:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d107      	bne.n	8005c90 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0de      	b.n	8005e4e <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	f040 80d7 	bne.w	8005e4c <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	635a      	str	r2, [r3, #52]	; 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cbc:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 8005cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cc2:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005cc4:	2390      	movs	r3, #144	; 0x90
 8005cc6:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f107 0210 	add.w	r2, r7, #16
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f006 fb50 	bl	800c384 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cf2:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f006 fc9c 	bl	800c638 <SDMMC_CmdSendEXTCSD>
 8005d00:	62b8      	str	r0, [r7, #40]	; 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d045      	beq.n	8005d94 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a52      	ldr	r2, [pc, #328]	; (8005e58 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	431a      	orrs	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e092      	b.n	8005e4e <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d013      	beq.n	8005d5e <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
 8005d3a:	e00d      	b.n	8005d58 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f006 faa9 	bl	800c298 <SDMMC_ReadFIFO>
 8005d46:	4602      	mov	r2, r0
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	3304      	adds	r3, #4
 8005d50:	633b      	str	r3, [r7, #48]	; 0x30
        for (count = 0U; count < 8U; count++)
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	3301      	adds	r3, #1
 8005d56:	637b      	str	r3, [r7, #52]	; 0x34
 8005d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5a:	2b07      	cmp	r3, #7
 8005d5c:	d9ee      	bls.n	8005d3c <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005d5e:	f7fc ff31 	bl	8002bc4 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d902      	bls.n	8005d74 <HAL_MMC_GetCardExtCSD+0x10c>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10f      	bne.n	8005d94 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a37      	ldr	r2, [pc, #220]	; (8005e58 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	635a      	str	r2, [r3, #52]	; 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e05c      	b.n	8005e4e <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0c2      	beq.n	8005d28 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db0:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00f      	beq.n	8005de0 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a24      	ldr	r2, [pc, #144]	; (8005e58 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	f043 0208 	orr.w	r2, r3, #8
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e036      	b.n	8005e4e <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00f      	beq.n	8005e0e <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a19      	ldr	r2, [pc, #100]	; (8005e58 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005df4:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfa:	f043 0202 	orr.w	r2, r3, #2
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e01f      	b.n	8005e4e <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00f      	beq.n	8005e3c <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a0d      	ldr	r2, [pc, #52]	; (8005e58 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e28:	f043 0220 	orr.w	r2, r3, #32
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e008      	b.n	8005e4e <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a06      	ldr	r2, [pc, #24]	; (8005e5c <HAL_MMC_GetCardExtCSD+0x1f4>)
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3738      	adds	r7, #56	; 0x38
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	1fe00fff 	.word	0x1fe00fff
 8005e5c:	18000f3a 	.word	0x18000f3a

08005e60 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8005e60:	b5b0      	push	{r4, r5, r7, lr}
 8005e62:	b08c      	sub	sp, #48	; 0x30
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2203      	movs	r2, #3
 8005e72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d014      	beq.n	8005eae <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d006      	beq.n	8005ea0 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 8005e92:	2204      	movs	r2, #4
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 faf0 	bl	800647c <MMC_PwrClassUpdate>
 8005e9c:	6238      	str	r0, [r7, #32]
 8005e9e:	e00c      	b.n	8005eba <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fae9 	bl	800647c <MMC_PwrClassUpdate>
 8005eaa:	6238      	str	r0, [r7, #32]
 8005eac:	e005      	b.n	8005eba <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8005eae:	2201      	movs	r2, #1
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fae2 	bl	800647c <MMC_PwrClassUpdate>
 8005eb8:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d17b      	bne.n	8005fb8 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec6:	d107      	bne.n	8005ed8 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4946      	ldr	r1, [pc, #280]	; (8005fe8 <HAL_MMC_ConfigWideBusOperation+0x188>)
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f006 fb8f 	bl	800c5f2 <SDMMC_CmdSwitch>
 8005ed4:	6238      	str	r0, [r7, #32]
 8005ed6:	e019      	b.n	8005f0c <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ede:	d107      	bne.n	8005ef0 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4941      	ldr	r1, [pc, #260]	; (8005fec <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f006 fb83 	bl	800c5f2 <SDMMC_CmdSwitch>
 8005eec:	6238      	str	r0, [r7, #32]
 8005eee:	e00d      	b.n	8005f0c <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	493d      	ldr	r1, [pc, #244]	; (8005ff0 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8005efc:	4618      	mov	r0, r3
 8005efe:	f006 fb78 	bl	800c5f2 <SDMMC_CmdSwitch>
 8005f02:	6238      	str	r0, [r7, #32]
 8005f04:	e002      	b.n	8005f0c <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8005f06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f0a:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d152      	bne.n	8005fb8 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8005f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	041b      	lsls	r3, r3, #16
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f006 fb21 	bl	800c56c <SDMMC_CmdSendStatus>
 8005f2a:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d112      	bne.n	8005f58 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2100      	movs	r1, #0
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f006 fa10 	bl	800c35e <SDMMC_GetResponse>
 8005f3e:	61f8      	str	r0, [r7, #28]
        count--;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	3b01      	subs	r3, #1
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <HAL_MMC_ConfigWideBusOperation+0xfa>
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e0      	bne.n	8005f18 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8005f56:	e000      	b.n	8005f5a <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8005f58:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d025      	beq.n	8005fac <HAL_MMC_ConfigWideBusOperation+0x14c>
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d122      	bne.n	8005fac <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f74:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8005f76:	e01f      	b.n	8005fb8 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f107 0408 	add.w	r4, r7, #8
 8005f7e:	1d1d      	adds	r5, r3, #4
 8005f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681c      	ldr	r4, [r3, #0]
 8005f90:	466a      	mov	r2, sp
 8005f92:	f107 0314 	add.w	r3, r7, #20
 8005f96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f9a:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f9e:	f107 0308 	add.w	r3, r7, #8
 8005fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f006 f94d 	bl	800c244 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8005faa:	e005      	b.n	8005fb8 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d102      	bne.n	8005fb8 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8005fb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fb6:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00b      	beq.n	8005fde <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a0a      	ldr	r2, [pc, #40]	; (8005ff4 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8005fcc:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3728      	adds	r7, #40	; 0x28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8005fe8:	03b70200 	.word	0x03b70200
 8005fec:	03b70100 	.word	0x03b70100
 8005ff0:	03b70000 	.word	0x03b70000
 8005ff4:	1fe00fff 	.word	0x1fe00fff

08005ff8 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8005ff8:	b5b0      	push	{r4, r5, r7, lr}
 8005ffa:	b096      	sub	sp, #88	; 0x58
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8006000:	2302      	movs	r3, #2
 8006002:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f006 f962 	bl	800c2d4 <SDMMC_GetPowerState>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8006016:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800601a:	e0e6      	b.n	80061ea <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f006 fa3f 	bl	800c4a4 <SDMMC_CmdSendCID>
 8006026:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <MMC_InitCard+0x3a>
  {
    return errorstate;
 800602e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006030:	e0db      	b.n	80061ea <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2100      	movs	r1, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f006 f990 	bl	800c35e <SDMMC_GetResponse>
 800603e:	4602      	mov	r2, r0
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2104      	movs	r1, #4
 800604a:	4618      	mov	r0, r3
 800604c:	f006 f987 	bl	800c35e <SDMMC_GetResponse>
 8006050:	4602      	mov	r2, r0
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2108      	movs	r1, #8
 800605c:	4618      	mov	r0, r3
 800605e:	f006 f97e 	bl	800c35e <SDMMC_GetResponse>
 8006062:	4602      	mov	r2, r0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	66da      	str	r2, [r3, #108]	; 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	210c      	movs	r1, #12
 800606e:	4618      	mov	r0, r3
 8006070:	f006 f975 	bl	800c35e <SDMMC_GetResponse>
 8006074:	4602      	mov	r2, r0
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006082:	4611      	mov	r1, r2
 8006084:	4618      	mov	r0, r3
 8006086:	f006 fa4c 	bl	800c522 <SDMMC_CmdSetRelAddMmc>
 800608a:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 800608c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <MMC_InitCard+0x9e>
  {
    return errorstate;
 8006092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006094:	e0a9      	b.n	80061ea <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8006096:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	4619      	mov	r1, r3
 80060aa:	4610      	mov	r0, r2
 80060ac:	f006 fa19 	bl	800c4e2 <SDMMC_CmdSendCSD>
 80060b0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80060b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <MMC_InitCard+0xc4>
  {
    return errorstate;
 80060b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ba:	e096      	b.n	80061ea <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2100      	movs	r1, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	f006 f94b 	bl	800c35e <SDMMC_GetResponse>
 80060c8:	4602      	mov	r2, r0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2104      	movs	r1, #4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f006 f942 	bl	800c35e <SDMMC_GetResponse>
 80060da:	4602      	mov	r2, r0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2108      	movs	r1, #8
 80060e6:	4618      	mov	r0, r3
 80060e8:	f006 f939 	bl	800c35e <SDMMC_GetResponse>
 80060ec:	4602      	mov	r2, r0
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	210c      	movs	r1, #12
 80060f8:	4618      	mov	r0, r3
 80060fa:	f006 f930 	bl	800c35e <SDMMC_GetResponse>
 80060fe:	4602      	mov	r2, r0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2104      	movs	r1, #4
 800610a:	4618      	mov	r0, r3
 800610c:	f006 f927 	bl	800c35e <SDMMC_GetResponse>
 8006110:	4603      	mov	r3, r0
 8006112:	0d1a      	lsrs	r2, r3, #20
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	041b      	lsls	r3, r3, #16
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f006 f97c 	bl	800c422 <SDMMC_CmdSelDesel>
 800612a:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 800612c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <MMC_InitCard+0x13e>
  {
    return errorstate;
 8006132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006134:	e059      	b.n	80061ea <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8006136:	f107 031c 	add.w	r3, r7, #28
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff fbef 	bl	8005920 <HAL_MMC_GetCardCSD>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614c:	e04d      	b.n	80061ea <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	041b      	lsls	r3, r3, #16
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f006 fa06 	bl	800c56c <SDMMC_CmdSendStatus>
 8006160:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800616c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	635a      	str	r2, [r3, #52]	; 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3374      	adds	r3, #116	; 0x74
 8006178:	f04f 32ff 	mov.w	r2, #4294967295
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fd72 	bl	8005c68 <HAL_MMC_GetCardExtCSD>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618e:	e02c      	b.n	80061ea <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f006 f9e5 	bl	800c56c <SDMMC_CmdSendStatus>
 80061a2:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80061a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f107 0408 	add.w	r4, r7, #8
 80061bc:	1d1d      	adds	r5, r3, #4
 80061be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c2:	682b      	ldr	r3, [r5, #0]
 80061c4:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681c      	ldr	r4, [r3, #0]
 80061ce:	466a      	mov	r2, sp
 80061d0:	f107 0314 	add.w	r3, r7, #20
 80061d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061d8:	e882 0003 	stmia.w	r2, {r0, r1}
 80061dc:	f107 0308 	add.w	r3, r7, #8
 80061e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061e2:	4620      	mov	r0, r4
 80061e4:	f006 f82e 	bl	800c244 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3750      	adds	r7, #80	; 0x50
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080061f4 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f006 f92b 	bl	800c468 <SDMMC_CmdGoIdleState>
 8006212:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d027      	beq.n	800626a <MMC_PowerON+0x76>
  {
    return errorstate;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	e034      	b.n	8006288 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	60ba      	str	r2, [r7, #8]
 8006224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006228:	4293      	cmp	r3, r2
 800622a:	d102      	bne.n	8006232 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 800622c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006230:	e02a      	b.n	8006288 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4916      	ldr	r1, [pc, #88]	; (8006290 <MMC_PowerON+0x9c>)
 8006238:	4618      	mov	r0, r3
 800623a:	f006 f9ba 	bl	800c5b2 <SDMMC_CmdOpCondition>
 800623e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8006246:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800624a:	e01d      	b.n	8006288 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2100      	movs	r1, #0
 8006252:	4618      	mov	r0, r3
 8006254:	f006 f883 	bl	800c35e <SDMMC_GetResponse>
 8006258:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	0fdb      	lsrs	r3, r3, #31
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <MMC_PowerON+0x72>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <MMC_PowerON+0x74>
 8006266:	2300      	movs	r3, #0
 8006268:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0d6      	beq.n	800621e <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	0e1b      	lsrs	r3, r3, #24
 8006274:	2bc0      	cmp	r3, #192	; 0xc0
 8006276:	d103      	bne.n	8006280 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	639a      	str	r2, [r3, #56]	; 0x38
 800627e:	e002      	b.n	8006286 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_MMC_ERROR_NONE;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	c0ff8000 	.word	0xc0ff8000

08006294 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b090      	sub	sp, #64	; 0x40
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	4613      	mov	r3, r2
 80062a2:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80062a4:	f7fc fc8e 	bl	8002bc4 <HAL_GetTick>
 80062a8:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2200      	movs	r2, #0
 80062ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062bc:	f04f 33ff 	mov.w	r3, #4294967295
 80062c0:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 80062c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062c6:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80062c8:	2390      	movs	r3, #144	; 0x90
 80062ca:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80062cc:	2302      	movs	r3, #2
 80062ce:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80062d4:	2301      	movs	r3, #1
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f107 0214 	add.w	r2, r7, #20
 80062e0:	4611      	mov	r1, r2
 80062e2:	4618      	mov	r0, r3
 80062e4:	f006 f84e 	bl	800c384 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2100      	movs	r1, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f006 f9a2 	bl	800c638 <SDMMC_CmdSendEXTCSD>
 80062f4:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d04e      	beq.n	800639a <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a5c      	ldr	r2, [pc, #368]	; (8006474 <MMC_ReadExtCSD+0x1e0>)
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	431a      	orrs	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0a6      	b.n	800646a <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01c      	beq.n	8006364 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 800632a:	2300      	movs	r3, #0
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800632e:	e013      	b.n	8006358 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f005 ffaf 	bl	800c298 <SDMMC_ReadFIFO>
 800633a:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 800633c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006340:	4413      	add	r3, r2
 8006342:	88fa      	ldrh	r2, [r7, #6]
 8006344:	0892      	lsrs	r2, r2, #2
 8006346:	b292      	uxth	r2, r2
 8006348:	4293      	cmp	r3, r2
 800634a:	d102      	bne.n	8006352 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006350:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 8006352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006354:	3301      	adds	r3, #1
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635a:	2b07      	cmp	r3, #7
 800635c:	d9e8      	bls.n	8006330 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	3308      	adds	r3, #8
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006364:	f7fc fc2e 	bl	8002bc4 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d902      	bls.n	800637a <MMC_ReadExtCSD+0xe6>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10f      	bne.n	800639a <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a3d      	ldr	r2, [pc, #244]	; (8006474 <MMC_ReadExtCSD+0x1e0>)
 8006380:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e067      	b.n	800646a <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0b9      	beq.n	800631c <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00f      	beq.n	80063d6 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a2e      	ldr	r2, [pc, #184]	; (8006474 <MMC_ReadExtCSD+0x1e0>)
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c2:	f043 0208 	orr.w	r2, r3, #8
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e049      	b.n	800646a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00f      	beq.n	8006404 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a22      	ldr	r2, [pc, #136]	; (8006474 <MMC_ReadExtCSD+0x1e0>)
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f0:	f043 0202 	orr.w	r2, r3, #2
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e032      	b.n	800646a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00f      	beq.n	8006432 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a17      	ldr	r2, [pc, #92]	; (8006474 <MMC_ReadExtCSD+0x1e0>)
 8006418:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641e:	f043 0220 	orr.w	r2, r3, #32
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e01b      	b.n	800646a <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	041b      	lsls	r3, r3, #16
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f006 f894 	bl	800c56c <SDMMC_CmdSendStatus>
 8006444:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	431a      	orrs	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a06      	ldr	r2, [pc, #24]	; (8006478 <MMC_ReadExtCSD+0x1e4>)
 800645e:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3740      	adds	r7, #64	; 0x40
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	1fe00fff 	.word	0x1fe00fff
 8006478:	18000f3a 	.word	0x18000f3a

0800647c <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	; 0x28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 800648c:	2300      	movs	r3, #0
 800648e:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006496:	d004      	beq.n	80064a2 <MMC_PwrClassUpdate+0x26>
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800649e:	f040 8085 	bne.w	80065ac <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 80064a6:	f107 0114 	add.w	r1, r7, #20
 80064aa:	f04f 33ff 	mov.w	r3, #4294967295
 80064ae:	22bb      	movs	r2, #187	; 0xbb
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff feef 	bl	8006294 <MMC_ReadExtCSD>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80064bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	e002      	b.n	80064ca <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	0e1b      	lsrs	r3, r3, #24
 80064c8:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d105      	bne.n	80064dc <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80064d6:	0e1b      	lsrs	r3, r3, #24
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	e00e      	b.n	80064fa <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d106      	bne.n	80064f0 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80064e8:	0c1b      	lsrs	r3, r3, #16
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	e004      	b.n	80064fa <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80064f6:	0e1b      	lsrs	r3, r3, #24
 80064f8:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d155      	bne.n	80065ac <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006506:	d102      	bne.n	800650e <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	091b      	lsrs	r3, r3, #4
 800650c:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	4053      	eors	r3, r2
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	2b00      	cmp	r3, #0
 800651a:	d047      	beq.n	80065ac <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6818      	ldr	r0, [r3, #0]
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006528:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <MMC_PwrClassUpdate+0x13c>)
 800652a:	4313      	orrs	r3, r2
 800652c:	4619      	mov	r1, r3
 800652e:	f006 f860 	bl	800c5f2 <SDMMC_CmdSwitch>
 8006532:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d138      	bne.n	80065ac <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 800653a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	041b      	lsls	r3, r3, #16
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f006 f80d 	bl	800c56c <SDMMC_CmdSendStatus>
 8006552:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d112      	bne.n	8006580 <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2100      	movs	r1, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f005 fefc 	bl	800c35e <SDMMC_GetResponse>
 8006566:	6238      	str	r0, [r7, #32]
            count--;
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	3b01      	subs	r3, #1
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006574:	2b00      	cmp	r3, #0
 8006576:	d104      	bne.n	8006582 <MMC_PwrClassUpdate+0x106>
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e0      	bne.n	8006540 <MMC_PwrClassUpdate+0xc4>
 800657e:	e000      	b.n	8006582 <MMC_PwrClassUpdate+0x106>
              break;
 8006580:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <MMC_PwrClassUpdate+0x124>
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d108      	bne.n	80065a0 <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006594:	2b00      	cmp	r3, #0
 8006596:	d009      	beq.n	80065ac <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800659c:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 800659e:	e005      	b.n	80065ac <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 80065a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 80065ac:	69fb      	ldr	r3, [r7, #28]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3728      	adds	r7, #40	; 0x28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	03bb0000 	.word	0x03bb0000

080065bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80065bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065be:	b08f      	sub	sp, #60	; 0x3c
 80065c0:	af0a      	add	r7, sp, #40	; 0x28
 80065c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e116      	b.n	80067fc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d106      	bne.n	80065ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7fb ffa9 	bl	8002540 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2203      	movs	r2, #3
 80065f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4618      	mov	r0, r3
 800660e:	f006 fa4f 	bl	800cab0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	687e      	ldr	r6, [r7, #4]
 800661a:	466d      	mov	r5, sp
 800661c:	f106 0410 	add.w	r4, r6, #16
 8006620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006628:	e894 0003 	ldmia.w	r4, {r0, r1}
 800662c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006630:	1d33      	adds	r3, r6, #4
 8006632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006634:	6838      	ldr	r0, [r7, #0]
 8006636:	f006 f9cd 	bl	800c9d4 <USB_CoreInit>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e0d7      	b.n	80067fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2100      	movs	r1, #0
 8006652:	4618      	mov	r0, r3
 8006654:	f006 fa3d 	bl	800cad2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]
 800665c:	e04a      	b.n	80066f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800665e:	7bfa      	ldrb	r2, [r7, #15]
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	333d      	adds	r3, #61	; 0x3d
 800666e:	2201      	movs	r2, #1
 8006670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006672:	7bfa      	ldrb	r2, [r7, #15]
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	333c      	adds	r3, #60	; 0x3c
 8006682:	7bfa      	ldrb	r2, [r7, #15]
 8006684:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006686:	7bfa      	ldrb	r2, [r7, #15]
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	b298      	uxth	r0, r3
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	3356      	adds	r3, #86	; 0x56
 800669a:	4602      	mov	r2, r0
 800669c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800669e:	7bfa      	ldrb	r2, [r7, #15]
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	4613      	mov	r3, r2
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	440b      	add	r3, r1
 80066ac:	3340      	adds	r3, #64	; 0x40
 80066ae:	2200      	movs	r2, #0
 80066b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80066b2:	7bfa      	ldrb	r2, [r7, #15]
 80066b4:	6879      	ldr	r1, [r7, #4]
 80066b6:	4613      	mov	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	440b      	add	r3, r1
 80066c0:	3344      	adds	r3, #68	; 0x44
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80066c6:	7bfa      	ldrb	r2, [r7, #15]
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	3348      	adds	r3, #72	; 0x48
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80066da:	7bfa      	ldrb	r2, [r7, #15]
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	334c      	adds	r3, #76	; 0x4c
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	3301      	adds	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
 80066f4:	7bfa      	ldrb	r2, [r7, #15]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d3af      	bcc.n	800665e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]
 8006702:	e044      	b.n	800678e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006704:	7bfa      	ldrb	r2, [r7, #15]
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006716:	2200      	movs	r2, #0
 8006718:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800671a:	7bfa      	ldrb	r2, [r7, #15]
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800672c:	7bfa      	ldrb	r2, [r7, #15]
 800672e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006730:	7bfa      	ldrb	r2, [r7, #15]
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	4613      	mov	r3, r2
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006746:	7bfa      	ldrb	r2, [r7, #15]
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800675c:	7bfa      	ldrb	r2, [r7, #15]
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	4613      	mov	r3, r2
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	440b      	add	r3, r1
 800676a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006772:	7bfa      	ldrb	r2, [r7, #15]
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	3301      	adds	r3, #1
 800678c:	73fb      	strb	r3, [r7, #15]
 800678e:	7bfa      	ldrb	r2, [r7, #15]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d3b5      	bcc.n	8006704 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	687e      	ldr	r6, [r7, #4]
 80067a0:	466d      	mov	r5, sp
 80067a2:	f106 0410 	add.w	r4, r6, #16
 80067a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80067b6:	1d33      	adds	r3, r6, #4
 80067b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067ba:	6838      	ldr	r0, [r7, #0]
 80067bc:	f006 f9d6 	bl	800cb6c <USB_DevInit>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e014      	b.n	80067fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d102      	bne.n	80067f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f80a 	bl	8006804 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f006 fb94 	bl	800cf22 <USB_DevDisconnect>

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006804 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <HAL_PCDEx_ActivateLPM+0x44>)
 8006834:	4313      	orrs	r3, r2
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	10000003 	.word	0x10000003

0800684c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006854:	4b19      	ldr	r3, [pc, #100]	; (80068bc <HAL_PWREx_ConfigSupply+0x70>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b04      	cmp	r3, #4
 800685e:	d00a      	beq.n	8006876 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006860:	4b16      	ldr	r3, [pc, #88]	; (80068bc <HAL_PWREx_ConfigSupply+0x70>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0307 	and.w	r3, r3, #7
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d001      	beq.n	8006872 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e01f      	b.n	80068b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	e01d      	b.n	80068b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006876:	4b11      	ldr	r3, [pc, #68]	; (80068bc <HAL_PWREx_ConfigSupply+0x70>)
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f023 0207 	bic.w	r2, r3, #7
 800687e:	490f      	ldr	r1, [pc, #60]	; (80068bc <HAL_PWREx_ConfigSupply+0x70>)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4313      	orrs	r3, r2
 8006884:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006886:	f7fc f99d 	bl	8002bc4 <HAL_GetTick>
 800688a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800688c:	e009      	b.n	80068a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800688e:	f7fc f999 	bl	8002bc4 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800689c:	d901      	bls.n	80068a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e007      	b.n	80068b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068a2:	4b06      	ldr	r3, [pc, #24]	; (80068bc <HAL_PWREx_ConfigSupply+0x70>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ae:	d1ee      	bne.n	800688e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	58024800 	.word	0x58024800

080068c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4a04      	ldr	r2, [pc, #16]	; (80068dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80068ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068ce:	60d3      	str	r3, [r2, #12]
}
 80068d0:	bf00      	nop
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	58024800 	.word	0x58024800

080068e0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80068e8:	f7fc f96c 	bl	8002bc4 <HAL_GetTick>
 80068ec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e05f      	b.n	80069b8 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d107      	bne.n	8006914 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7fb fae3 	bl	8001ed0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800690a:	f241 3188 	movw	r1, #5000	; 0x1388
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f85a 	bl	80069c8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	3b01      	subs	r3, #1
 8006924:	021a      	lsls	r2, r3, #8
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	2120      	movs	r1, #32
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f852 	bl	80069e4 <QSPI_WaitFlagStateUntilTimeout>
 8006940:	4603      	mov	r3, r0
 8006942:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006944:	7afb      	ldrb	r3, [r7, #11]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d135      	bne.n	80069b6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	4b1b      	ldr	r3, [pc, #108]	; (80069c0 <HAL_QSPI_Init+0xe0>)
 8006952:	4013      	ands	r3, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6852      	ldr	r2, [r2, #4]
 8006958:	0611      	lsls	r1, r2, #24
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	68d2      	ldr	r2, [r2, #12]
 800695e:	4311      	orrs	r1, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	69d2      	ldr	r2, [r2, #28]
 8006964:	4311      	orrs	r1, r2
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6a12      	ldr	r2, [r2, #32]
 800696a:	4311      	orrs	r1, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	430b      	orrs	r3, r1
 8006972:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	4b12      	ldr	r3, [pc, #72]	; (80069c4 <HAL_QSPI_Init+0xe4>)
 800697c:	4013      	ands	r3, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6912      	ldr	r2, [r2, #16]
 8006982:	0411      	lsls	r1, r2, #16
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6952      	ldr	r2, [r2, #20]
 8006988:	4311      	orrs	r1, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6992      	ldr	r2, [r2, #24]
 800698e:	4311      	orrs	r1, r2
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	430b      	orrs	r3, r1
 8006996:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80069b6:	7afb      	ldrb	r3, [r7, #11]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	00ffff2f 	.word	0x00ffff2f
 80069c4:	ffe0f8fe 	.word	0xffe0f8fe

080069c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	4613      	mov	r3, r2
 80069f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80069f4:	e01a      	b.n	8006a2c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fc:	d016      	beq.n	8006a2c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fe:	f7fc f8e1 	bl	8002bc4 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d302      	bcc.n	8006a14 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2204      	movs	r2, #4
 8006a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a20:	f043 0201 	orr.w	r2, r3, #1
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e00e      	b.n	8006a4a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	bf14      	ite	ne
 8006a3a:	2301      	movne	r3, #1
 8006a3c:	2300      	moveq	r3, #0
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d1d6      	bne.n	80069f6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08c      	sub	sp, #48	; 0x30
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d102      	bne.n	8006a68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f000 bc48 	b.w	80072f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8088 	beq.w	8006b86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a76:	4b99      	ldr	r3, [pc, #612]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a80:	4b96      	ldr	r3, [pc, #600]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d007      	beq.n	8006a9c <HAL_RCC_OscConfig+0x48>
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	2b18      	cmp	r3, #24
 8006a90:	d111      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x62>
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d10c      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a9c:	4b8f      	ldr	r3, [pc, #572]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d06d      	beq.n	8006b84 <HAL_RCC_OscConfig+0x130>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d169      	bne.n	8006b84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	f000 bc21 	b.w	80072f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006abe:	d106      	bne.n	8006ace <HAL_RCC_OscConfig+0x7a>
 8006ac0:	4b86      	ldr	r3, [pc, #536]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a85      	ldr	r2, [pc, #532]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e02e      	b.n	8006b2c <HAL_RCC_OscConfig+0xd8>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10c      	bne.n	8006af0 <HAL_RCC_OscConfig+0x9c>
 8006ad6:	4b81      	ldr	r3, [pc, #516]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a80      	ldr	r2, [pc, #512]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	4b7e      	ldr	r3, [pc, #504]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a7d      	ldr	r2, [pc, #500]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	e01d      	b.n	8006b2c <HAL_RCC_OscConfig+0xd8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006af8:	d10c      	bne.n	8006b14 <HAL_RCC_OscConfig+0xc0>
 8006afa:	4b78      	ldr	r3, [pc, #480]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a77      	ldr	r2, [pc, #476]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	4b75      	ldr	r3, [pc, #468]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a74      	ldr	r2, [pc, #464]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e00b      	b.n	8006b2c <HAL_RCC_OscConfig+0xd8>
 8006b14:	4b71      	ldr	r3, [pc, #452]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a70      	ldr	r2, [pc, #448]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	4b6e      	ldr	r3, [pc, #440]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a6d      	ldr	r2, [pc, #436]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d013      	beq.n	8006b5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fc f846 	bl	8002bc4 <HAL_GetTick>
 8006b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b3c:	f7fc f842 	bl	8002bc4 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b64      	cmp	r3, #100	; 0x64
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e3d4      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b4e:	4b63      	ldr	r3, [pc, #396]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0xe8>
 8006b5a:	e014      	b.n	8006b86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fc f832 	bl	8002bc4 <HAL_GetTick>
 8006b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b64:	f7fc f82e 	bl	8002bc4 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b64      	cmp	r3, #100	; 0x64
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e3c0      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b76:	4b59      	ldr	r3, [pc, #356]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0x110>
 8006b82:	e000      	b.n	8006b86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80ca 	beq.w	8006d28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b94:	4b51      	ldr	r3, [pc, #324]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b9e:	4b4f      	ldr	r3, [pc, #316]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <HAL_RCC_OscConfig+0x166>
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	2b18      	cmp	r3, #24
 8006bae:	d156      	bne.n	8006c5e <HAL_RCC_OscConfig+0x20a>
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d151      	bne.n	8006c5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bba:	4b48      	ldr	r3, [pc, #288]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x17e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e392      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bd2:	4b42      	ldr	r3, [pc, #264]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f023 0219 	bic.w	r2, r3, #25
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	493f      	ldr	r1, [pc, #252]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fb ffee 	bl	8002bc4 <HAL_GetTick>
 8006be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bec:	f7fb ffea 	bl	8002bc4 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e37c      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bfe:	4b37      	ldr	r3, [pc, #220]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c0a:	f7fc f80b 	bl	8002c24 <HAL_GetREVID>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d817      	bhi.n	8006c48 <HAL_RCC_OscConfig+0x1f4>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2b40      	cmp	r3, #64	; 0x40
 8006c1e:	d108      	bne.n	8006c32 <HAL_RCC_OscConfig+0x1de>
 8006c20:	4b2e      	ldr	r3, [pc, #184]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c28:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c30:	e07a      	b.n	8006d28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c32:	4b2a      	ldr	r3, [pc, #168]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	031b      	lsls	r3, r3, #12
 8006c40:	4926      	ldr	r1, [pc, #152]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c46:	e06f      	b.n	8006d28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c48:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	4921      	ldr	r1, [pc, #132]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c5c:	e064      	b.n	8006d28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d047      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c66:	4b1d      	ldr	r3, [pc, #116]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f023 0219 	bic.w	r2, r3, #25
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	491a      	ldr	r1, [pc, #104]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c78:	f7fb ffa4 	bl	8002bc4 <HAL_GetTick>
 8006c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c80:	f7fb ffa0 	bl	8002bc4 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e332      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c92:	4b12      	ldr	r3, [pc, #72]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0304 	and.w	r3, r3, #4
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0f0      	beq.n	8006c80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c9e:	f7fb ffc1 	bl	8002c24 <HAL_GetREVID>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d819      	bhi.n	8006ce0 <HAL_RCC_OscConfig+0x28c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b40      	cmp	r3, #64	; 0x40
 8006cb2:	d108      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x272>
 8006cb4:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006cbc:	4a07      	ldr	r2, [pc, #28]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc2:	6053      	str	r3, [r2, #4]
 8006cc4:	e030      	b.n	8006d28 <HAL_RCC_OscConfig+0x2d4>
 8006cc6:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	031b      	lsls	r3, r3, #12
 8006cd4:	4901      	ldr	r1, [pc, #4]	; (8006cdc <HAL_RCC_OscConfig+0x288>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	604b      	str	r3, [r1, #4]
 8006cda:	e025      	b.n	8006d28 <HAL_RCC_OscConfig+0x2d4>
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	4b9a      	ldr	r3, [pc, #616]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	061b      	lsls	r3, r3, #24
 8006cee:	4997      	ldr	r1, [pc, #604]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	604b      	str	r3, [r1, #4]
 8006cf4:	e018      	b.n	8006d28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cf6:	4b95      	ldr	r3, [pc, #596]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a94      	ldr	r2, [pc, #592]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006cfc:	f023 0301 	bic.w	r3, r3, #1
 8006d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d02:	f7fb ff5f 	bl	8002bc4 <HAL_GetTick>
 8006d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d0a:	f7fb ff5b 	bl	8002bc4 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e2ed      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d1c:	4b8b      	ldr	r3, [pc, #556]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1f0      	bne.n	8006d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 80a9 	beq.w	8006e88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d36:	4b85      	ldr	r3, [pc, #532]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d40:	4b82      	ldr	r3, [pc, #520]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d007      	beq.n	8006d5c <HAL_RCC_OscConfig+0x308>
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	2b18      	cmp	r3, #24
 8006d50:	d13a      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x374>
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d135      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d5c:	4b7b      	ldr	r3, [pc, #492]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <HAL_RCC_OscConfig+0x320>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	2b80      	cmp	r3, #128	; 0x80
 8006d6e:	d001      	beq.n	8006d74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e2c1      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d74:	f7fb ff56 	bl	8002c24 <HAL_GetREVID>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d817      	bhi.n	8006db2 <HAL_RCC_OscConfig+0x35e>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d108      	bne.n	8006d9c <HAL_RCC_OscConfig+0x348>
 8006d8a:	4b70      	ldr	r3, [pc, #448]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d92:	4a6e      	ldr	r2, [pc, #440]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006d94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d98:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d9a:	e075      	b.n	8006e88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d9c:	4b6b      	ldr	r3, [pc, #428]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	069b      	lsls	r3, r3, #26
 8006daa:	4968      	ldr	r1, [pc, #416]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006db0:	e06a      	b.n	8006e88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006db2:	4b66      	ldr	r3, [pc, #408]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	061b      	lsls	r3, r3, #24
 8006dc0:	4962      	ldr	r1, [pc, #392]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006dc6:	e05f      	b.n	8006e88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d042      	beq.n	8006e56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006dd0:	4b5e      	ldr	r3, [pc, #376]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a5d      	ldr	r2, [pc, #372]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ddc:	f7fb fef2 	bl	8002bc4 <HAL_GetTick>
 8006de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006de2:	e008      	b.n	8006df6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006de4:	f7fb feee 	bl	8002bc4 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e280      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006df6:	4b55      	ldr	r3, [pc, #340]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0f0      	beq.n	8006de4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e02:	f7fb ff0f 	bl	8002c24 <HAL_GetREVID>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d817      	bhi.n	8006e40 <HAL_RCC_OscConfig+0x3ec>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d108      	bne.n	8006e2a <HAL_RCC_OscConfig+0x3d6>
 8006e18:	4b4c      	ldr	r3, [pc, #304]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e20:	4a4a      	ldr	r2, [pc, #296]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e26:	6053      	str	r3, [r2, #4]
 8006e28:	e02e      	b.n	8006e88 <HAL_RCC_OscConfig+0x434>
 8006e2a:	4b48      	ldr	r3, [pc, #288]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	069b      	lsls	r3, r3, #26
 8006e38:	4944      	ldr	r1, [pc, #272]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	604b      	str	r3, [r1, #4]
 8006e3e:	e023      	b.n	8006e88 <HAL_RCC_OscConfig+0x434>
 8006e40:	4b42      	ldr	r3, [pc, #264]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	061b      	lsls	r3, r3, #24
 8006e4e:	493f      	ldr	r1, [pc, #252]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60cb      	str	r3, [r1, #12]
 8006e54:	e018      	b.n	8006e88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e56:	4b3d      	ldr	r3, [pc, #244]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a3c      	ldr	r2, [pc, #240]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e62:	f7fb feaf 	bl	8002bc4 <HAL_GetTick>
 8006e66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e68:	e008      	b.n	8006e7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e6a:	f7fb feab 	bl	8002bc4 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e23d      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e7c:	4b33      	ldr	r3, [pc, #204]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1f0      	bne.n	8006e6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0308 	and.w	r3, r3, #8
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d036      	beq.n	8006f02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d019      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e9c:	4b2b      	ldr	r3, [pc, #172]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea0:	4a2a      	ldr	r2, [pc, #168]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006ea2:	f043 0301 	orr.w	r3, r3, #1
 8006ea6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea8:	f7fb fe8c 	bl	8002bc4 <HAL_GetTick>
 8006eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eb0:	f7fb fe88 	bl	8002bc4 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e21a      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ec2:	4b22      	ldr	r3, [pc, #136]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f0      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x45c>
 8006ece:	e018      	b.n	8006f02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ed0:	4b1e      	ldr	r3, [pc, #120]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed4:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006edc:	f7fb fe72 	bl	8002bc4 <HAL_GetTick>
 8006ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ee4:	f7fb fe6e 	bl	8002bc4 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e200      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ef6:	4b15      	ldr	r3, [pc, #84]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f0      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d039      	beq.n	8006f82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d01c      	beq.n	8006f50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f16:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a0c      	ldr	r2, [pc, #48]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f22:	f7fb fe4f 	bl	8002bc4 <HAL_GetTick>
 8006f26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f2a:	f7fb fe4b 	bl	8002bc4 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e1dd      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f3c:	4b03      	ldr	r3, [pc, #12]	; (8006f4c <HAL_RCC_OscConfig+0x4f8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0f0      	beq.n	8006f2a <HAL_RCC_OscConfig+0x4d6>
 8006f48:	e01b      	b.n	8006f82 <HAL_RCC_OscConfig+0x52e>
 8006f4a:	bf00      	nop
 8006f4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f50:	4b9b      	ldr	r3, [pc, #620]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a9a      	ldr	r2, [pc, #616]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8006f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f5c:	f7fb fe32 	bl	8002bc4 <HAL_GetTick>
 8006f60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f64:	f7fb fe2e 	bl	8002bc4 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e1c0      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f76:	4b92      	ldr	r3, [pc, #584]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f0      	bne.n	8006f64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0304 	and.w	r3, r3, #4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 8081 	beq.w	8007092 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f90:	4b8c      	ldr	r3, [pc, #560]	; (80071c4 <HAL_RCC_OscConfig+0x770>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a8b      	ldr	r2, [pc, #556]	; (80071c4 <HAL_RCC_OscConfig+0x770>)
 8006f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f9c:	f7fb fe12 	bl	8002bc4 <HAL_GetTick>
 8006fa0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa4:	f7fb fe0e 	bl	8002bc4 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b64      	cmp	r3, #100	; 0x64
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e1a0      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fb6:	4b83      	ldr	r3, [pc, #524]	; (80071c4 <HAL_RCC_OscConfig+0x770>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0f0      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d106      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x584>
 8006fca:	4b7d      	ldr	r3, [pc, #500]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8006fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fce:	4a7c      	ldr	r2, [pc, #496]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8006fd0:	f043 0301 	orr.w	r3, r3, #1
 8006fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd6:	e02d      	b.n	8007034 <HAL_RCC_OscConfig+0x5e0>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10c      	bne.n	8006ffa <HAL_RCC_OscConfig+0x5a6>
 8006fe0:	4b77      	ldr	r3, [pc, #476]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8006fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe4:	4a76      	ldr	r2, [pc, #472]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8006fe6:	f023 0301 	bic.w	r3, r3, #1
 8006fea:	6713      	str	r3, [r2, #112]	; 0x70
 8006fec:	4b74      	ldr	r3, [pc, #464]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8006fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff0:	4a73      	ldr	r2, [pc, #460]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8006ff2:	f023 0304 	bic.w	r3, r3, #4
 8006ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff8:	e01c      	b.n	8007034 <HAL_RCC_OscConfig+0x5e0>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	2b05      	cmp	r3, #5
 8007000:	d10c      	bne.n	800701c <HAL_RCC_OscConfig+0x5c8>
 8007002:	4b6f      	ldr	r3, [pc, #444]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007006:	4a6e      	ldr	r2, [pc, #440]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007008:	f043 0304 	orr.w	r3, r3, #4
 800700c:	6713      	str	r3, [r2, #112]	; 0x70
 800700e:	4b6c      	ldr	r3, [pc, #432]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007012:	4a6b      	ldr	r2, [pc, #428]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007014:	f043 0301 	orr.w	r3, r3, #1
 8007018:	6713      	str	r3, [r2, #112]	; 0x70
 800701a:	e00b      	b.n	8007034 <HAL_RCC_OscConfig+0x5e0>
 800701c:	4b68      	ldr	r3, [pc, #416]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	4a67      	ldr	r2, [pc, #412]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007022:	f023 0301 	bic.w	r3, r3, #1
 8007026:	6713      	str	r3, [r2, #112]	; 0x70
 8007028:	4b65      	ldr	r3, [pc, #404]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 800702a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702c:	4a64      	ldr	r2, [pc, #400]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 800702e:	f023 0304 	bic.w	r3, r3, #4
 8007032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d015      	beq.n	8007068 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703c:	f7fb fdc2 	bl	8002bc4 <HAL_GetTick>
 8007040:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007042:	e00a      	b.n	800705a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007044:	f7fb fdbe 	bl	8002bc4 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e14e      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800705a:	4b59      	ldr	r3, [pc, #356]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0ee      	beq.n	8007044 <HAL_RCC_OscConfig+0x5f0>
 8007066:	e014      	b.n	8007092 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007068:	f7fb fdac 	bl	8002bc4 <HAL_GetTick>
 800706c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800706e:	e00a      	b.n	8007086 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007070:	f7fb fda8 	bl	8002bc4 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	f241 3288 	movw	r2, #5000	; 0x1388
 800707e:	4293      	cmp	r3, r2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e138      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007086:	4b4e      	ldr	r3, [pc, #312]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1ee      	bne.n	8007070 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 812d 	beq.w	80072f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800709c:	4b48      	ldr	r3, [pc, #288]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070a4:	2b18      	cmp	r3, #24
 80070a6:	f000 80bd 	beq.w	8007224 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	f040 809e 	bne.w	80071f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b4:	4b42      	ldr	r3, [pc, #264]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a41      	ldr	r2, [pc, #260]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 80070ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7fb fd80 	bl	8002bc4 <HAL_GetTick>
 80070c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c8:	f7fb fd7c 	bl	8002bc4 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e10e      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070da:	4b39      	ldr	r3, [pc, #228]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f0      	bne.n	80070c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070e6:	4b36      	ldr	r3, [pc, #216]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 80070e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ea:	4b37      	ldr	r3, [pc, #220]	; (80071c8 <HAL_RCC_OscConfig+0x774>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80070f6:	0112      	lsls	r2, r2, #4
 80070f8:	430a      	orrs	r2, r1
 80070fa:	4931      	ldr	r1, [pc, #196]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	628b      	str	r3, [r1, #40]	; 0x28
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	3b01      	subs	r3, #1
 8007106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710e:	3b01      	subs	r3, #1
 8007110:	025b      	lsls	r3, r3, #9
 8007112:	b29b      	uxth	r3, r3
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	3b01      	subs	r3, #1
 800711c:	041b      	lsls	r3, r3, #16
 800711e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007128:	3b01      	subs	r3, #1
 800712a:	061b      	lsls	r3, r3, #24
 800712c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007130:	4923      	ldr	r1, [pc, #140]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007132:	4313      	orrs	r3, r2
 8007134:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007136:	4b22      	ldr	r3, [pc, #136]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	4a21      	ldr	r2, [pc, #132]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007142:	4b1f      	ldr	r3, [pc, #124]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007146:	4b21      	ldr	r3, [pc, #132]	; (80071cc <HAL_RCC_OscConfig+0x778>)
 8007148:	4013      	ands	r3, r2
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800714e:	00d2      	lsls	r2, r2, #3
 8007150:	491b      	ldr	r1, [pc, #108]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007152:	4313      	orrs	r3, r2
 8007154:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007156:	4b1a      	ldr	r3, [pc, #104]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	f023 020c 	bic.w	r2, r3, #12
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	4917      	ldr	r1, [pc, #92]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007164:	4313      	orrs	r3, r2
 8007166:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007168:	4b15      	ldr	r3, [pc, #84]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	f023 0202 	bic.w	r2, r3, #2
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007174:	4912      	ldr	r1, [pc, #72]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007176:	4313      	orrs	r3, r2
 8007178:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800717a:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	4a10      	ldr	r2, [pc, #64]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007186:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	4a0d      	ldr	r2, [pc, #52]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 800718c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007192:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007196:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 8007198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800719c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800719e:	4b08      	ldr	r3, [pc, #32]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	4a07      	ldr	r2, [pc, #28]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 80071a4:	f043 0301 	orr.w	r3, r3, #1
 80071a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071aa:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <HAL_RCC_OscConfig+0x76c>)
 80071b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b6:	f7fb fd05 	bl	8002bc4 <HAL_GetTick>
 80071ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071bc:	e011      	b.n	80071e2 <HAL_RCC_OscConfig+0x78e>
 80071be:	bf00      	nop
 80071c0:	58024400 	.word	0x58024400
 80071c4:	58024800 	.word	0x58024800
 80071c8:	fffffc0c 	.word	0xfffffc0c
 80071cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d0:	f7fb fcf8 	bl	8002bc4 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e08a      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071e2:	4b47      	ldr	r3, [pc, #284]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0f0      	beq.n	80071d0 <HAL_RCC_OscConfig+0x77c>
 80071ee:	e082      	b.n	80072f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f0:	4b43      	ldr	r3, [pc, #268]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a42      	ldr	r2, [pc, #264]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 80071f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fc:	f7fb fce2 	bl	8002bc4 <HAL_GetTick>
 8007200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007204:	f7fb fcde 	bl	8002bc4 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e070      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007216:	4b3a      	ldr	r3, [pc, #232]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1f0      	bne.n	8007204 <HAL_RCC_OscConfig+0x7b0>
 8007222:	e068      	b.n	80072f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007224:	4b36      	ldr	r3, [pc, #216]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 8007226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007228:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800722a:	4b35      	ldr	r3, [pc, #212]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	2b01      	cmp	r3, #1
 8007236:	d031      	beq.n	800729c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f003 0203 	and.w	r2, r3, #3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007242:	429a      	cmp	r2, r3
 8007244:	d12a      	bne.n	800729c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	091b      	lsrs	r3, r3, #4
 800724a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007252:	429a      	cmp	r2, r3
 8007254:	d122      	bne.n	800729c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007262:	429a      	cmp	r2, r3
 8007264:	d11a      	bne.n	800729c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	0a5b      	lsrs	r3, r3, #9
 800726a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007272:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007274:	429a      	cmp	r2, r3
 8007276:	d111      	bne.n	800729c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	0c1b      	lsrs	r3, r3, #16
 800727c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007286:	429a      	cmp	r2, r3
 8007288:	d108      	bne.n	800729c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	0e1b      	lsrs	r3, r3, #24
 800728e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007298:	429a      	cmp	r2, r3
 800729a:	d001      	beq.n	80072a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e02b      	b.n	80072f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80072a0:	4b17      	ldr	r3, [pc, #92]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 80072a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a4:	08db      	lsrs	r3, r3, #3
 80072a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d01f      	beq.n	80072f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	4a11      	ldr	r2, [pc, #68]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 80072bc:	f023 0301 	bic.w	r3, r3, #1
 80072c0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072c2:	f7fb fc7f 	bl	8002bc4 <HAL_GetTick>
 80072c6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80072c8:	bf00      	nop
 80072ca:	f7fb fc7b 	bl	8002bc4 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d0f9      	beq.n	80072ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072d6:	4b0a      	ldr	r3, [pc, #40]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 80072d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072da:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <HAL_RCC_OscConfig+0x8b0>)
 80072dc:	4013      	ands	r3, r2
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80072e2:	00d2      	lsls	r2, r2, #3
 80072e4:	4906      	ldr	r1, [pc, #24]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80072ea:	4b05      	ldr	r3, [pc, #20]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	4a04      	ldr	r2, [pc, #16]	; (8007300 <HAL_RCC_OscConfig+0x8ac>)
 80072f0:	f043 0301 	orr.w	r3, r3, #1
 80072f4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3730      	adds	r7, #48	; 0x30
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	58024400 	.word	0x58024400
 8007304:	ffff0007 	.word	0xffff0007

08007308 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e19c      	b.n	8007656 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800731c:	4b8a      	ldr	r3, [pc, #552]	; (8007548 <HAL_RCC_ClockConfig+0x240>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d910      	bls.n	800734c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800732a:	4b87      	ldr	r3, [pc, #540]	; (8007548 <HAL_RCC_ClockConfig+0x240>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f023 020f 	bic.w	r2, r3, #15
 8007332:	4985      	ldr	r1, [pc, #532]	; (8007548 <HAL_RCC_ClockConfig+0x240>)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	4313      	orrs	r3, r2
 8007338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800733a:	4b83      	ldr	r3, [pc, #524]	; (8007548 <HAL_RCC_ClockConfig+0x240>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	429a      	cmp	r2, r3
 8007346:	d001      	beq.n	800734c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e184      	b.n	8007656 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b00      	cmp	r3, #0
 8007356:	d010      	beq.n	800737a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	4b7b      	ldr	r3, [pc, #492]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007364:	429a      	cmp	r2, r3
 8007366:	d908      	bls.n	800737a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007368:	4b78      	ldr	r3, [pc, #480]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	4975      	ldr	r1, [pc, #468]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 8007376:	4313      	orrs	r3, r2
 8007378:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0308 	and.w	r3, r3, #8
 8007382:	2b00      	cmp	r3, #0
 8007384:	d010      	beq.n	80073a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695a      	ldr	r2, [r3, #20]
 800738a:	4b70      	ldr	r3, [pc, #448]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007392:	429a      	cmp	r2, r3
 8007394:	d908      	bls.n	80073a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007396:	4b6d      	ldr	r3, [pc, #436]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	496a      	ldr	r1, [pc, #424]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0310 	and.w	r3, r3, #16
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d010      	beq.n	80073d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699a      	ldr	r2, [r3, #24]
 80073b8:	4b64      	ldr	r3, [pc, #400]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d908      	bls.n	80073d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073c4:	4b61      	ldr	r3, [pc, #388]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	495e      	ldr	r1, [pc, #376]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d010      	beq.n	8007404 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69da      	ldr	r2, [r3, #28]
 80073e6:	4b59      	ldr	r3, [pc, #356]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d908      	bls.n	8007404 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80073f2:	4b56      	ldr	r3, [pc, #344]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	4953      	ldr	r1, [pc, #332]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 8007400:	4313      	orrs	r3, r2
 8007402:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d010      	beq.n	8007432 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	4b4d      	ldr	r3, [pc, #308]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	429a      	cmp	r2, r3
 800741e:	d908      	bls.n	8007432 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007420:	4b4a      	ldr	r3, [pc, #296]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	f023 020f 	bic.w	r2, r3, #15
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	4947      	ldr	r1, [pc, #284]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 800742e:	4313      	orrs	r3, r2
 8007430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d055      	beq.n	80074ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800743e:	4b43      	ldr	r3, [pc, #268]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	4940      	ldr	r1, [pc, #256]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 800744c:	4313      	orrs	r3, r2
 800744e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2b02      	cmp	r3, #2
 8007456:	d107      	bne.n	8007468 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007458:	4b3c      	ldr	r3, [pc, #240]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d121      	bne.n	80074a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e0f6      	b.n	8007656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	2b03      	cmp	r3, #3
 800746e:	d107      	bne.n	8007480 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007470:	4b36      	ldr	r3, [pc, #216]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d115      	bne.n	80074a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e0ea      	b.n	8007656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d107      	bne.n	8007498 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007488:	4b30      	ldr	r3, [pc, #192]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d109      	bne.n	80074a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e0de      	b.n	8007656 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007498:	4b2c      	ldr	r3, [pc, #176]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e0d6      	b.n	8007656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074a8:	4b28      	ldr	r3, [pc, #160]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f023 0207 	bic.w	r2, r3, #7
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	4925      	ldr	r1, [pc, #148]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ba:	f7fb fb83 	bl	8002bc4 <HAL_GetTick>
 80074be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074c0:	e00a      	b.n	80074d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074c2:	f7fb fb7f 	bl	8002bc4 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e0be      	b.n	8007656 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074d8:	4b1c      	ldr	r3, [pc, #112]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d1eb      	bne.n	80074c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d010      	beq.n	8007518 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	4b14      	ldr	r3, [pc, #80]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f003 030f 	and.w	r3, r3, #15
 8007502:	429a      	cmp	r2, r3
 8007504:	d208      	bcs.n	8007518 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007506:	4b11      	ldr	r3, [pc, #68]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	f023 020f 	bic.w	r2, r3, #15
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	490e      	ldr	r1, [pc, #56]	; (800754c <HAL_RCC_ClockConfig+0x244>)
 8007514:	4313      	orrs	r3, r2
 8007516:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007518:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <HAL_RCC_ClockConfig+0x240>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 030f 	and.w	r3, r3, #15
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	429a      	cmp	r2, r3
 8007524:	d214      	bcs.n	8007550 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007526:	4b08      	ldr	r3, [pc, #32]	; (8007548 <HAL_RCC_ClockConfig+0x240>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f023 020f 	bic.w	r2, r3, #15
 800752e:	4906      	ldr	r1, [pc, #24]	; (8007548 <HAL_RCC_ClockConfig+0x240>)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	4313      	orrs	r3, r2
 8007534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007536:	4b04      	ldr	r3, [pc, #16]	; (8007548 <HAL_RCC_ClockConfig+0x240>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d005      	beq.n	8007550 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e086      	b.n	8007656 <HAL_RCC_ClockConfig+0x34e>
 8007548:	52002000 	.word	0x52002000
 800754c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b00      	cmp	r3, #0
 800755a:	d010      	beq.n	800757e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	4b3f      	ldr	r3, [pc, #252]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007568:	429a      	cmp	r2, r3
 800756a:	d208      	bcs.n	800757e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800756c:	4b3c      	ldr	r3, [pc, #240]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	4939      	ldr	r1, [pc, #228]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 800757a:	4313      	orrs	r3, r2
 800757c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0308 	and.w	r3, r3, #8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d010      	beq.n	80075ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695a      	ldr	r2, [r3, #20]
 800758e:	4b34      	ldr	r3, [pc, #208]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007596:	429a      	cmp	r2, r3
 8007598:	d208      	bcs.n	80075ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800759a:	4b31      	ldr	r3, [pc, #196]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	492e      	ldr	r1, [pc, #184]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d010      	beq.n	80075da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	4b28      	ldr	r3, [pc, #160]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d208      	bcs.n	80075da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075c8:	4b25      	ldr	r3, [pc, #148]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	4922      	ldr	r1, [pc, #136]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d010      	beq.n	8007608 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69da      	ldr	r2, [r3, #28]
 80075ea:	4b1d      	ldr	r3, [pc, #116]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d208      	bcs.n	8007608 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80075f6:	4b1a      	ldr	r3, [pc, #104]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	4917      	ldr	r1, [pc, #92]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 8007604:	4313      	orrs	r3, r2
 8007606:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007608:	f000 f834 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 800760c:	4602      	mov	r2, r0
 800760e:	4b14      	ldr	r3, [pc, #80]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	4912      	ldr	r1, [pc, #72]	; (8007664 <HAL_RCC_ClockConfig+0x35c>)
 800761a:	5ccb      	ldrb	r3, [r1, r3]
 800761c:	f003 031f 	and.w	r3, r3, #31
 8007620:	fa22 f303 	lsr.w	r3, r2, r3
 8007624:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007626:	4b0e      	ldr	r3, [pc, #56]	; (8007660 <HAL_RCC_ClockConfig+0x358>)
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	4a0d      	ldr	r2, [pc, #52]	; (8007664 <HAL_RCC_ClockConfig+0x35c>)
 8007630:	5cd3      	ldrb	r3, [r2, r3]
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
 800763c:	4a0a      	ldr	r2, [pc, #40]	; (8007668 <HAL_RCC_ClockConfig+0x360>)
 800763e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <HAL_RCC_ClockConfig+0x364>)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007646:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <HAL_RCC_ClockConfig+0x368>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4618      	mov	r0, r3
 800764c:	f7fb fa70 	bl	8002b30 <HAL_InitTick>
 8007650:	4603      	mov	r3, r0
 8007652:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	58024400 	.word	0x58024400
 8007664:	0800e5c4 	.word	0x0800e5c4
 8007668:	24000004 	.word	0x24000004
 800766c:	24000000 	.word	0x24000000
 8007670:	24000008 	.word	0x24000008

08007674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007674:	b480      	push	{r7}
 8007676:	b089      	sub	sp, #36	; 0x24
 8007678:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800767a:	4bb3      	ldr	r3, [pc, #716]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007682:	2b18      	cmp	r3, #24
 8007684:	f200 8155 	bhi.w	8007932 <HAL_RCC_GetSysClockFreq+0x2be>
 8007688:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <HAL_RCC_GetSysClockFreq+0x1c>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076f5 	.word	0x080076f5
 8007694:	08007933 	.word	0x08007933
 8007698:	08007933 	.word	0x08007933
 800769c:	08007933 	.word	0x08007933
 80076a0:	08007933 	.word	0x08007933
 80076a4:	08007933 	.word	0x08007933
 80076a8:	08007933 	.word	0x08007933
 80076ac:	08007933 	.word	0x08007933
 80076b0:	0800771b 	.word	0x0800771b
 80076b4:	08007933 	.word	0x08007933
 80076b8:	08007933 	.word	0x08007933
 80076bc:	08007933 	.word	0x08007933
 80076c0:	08007933 	.word	0x08007933
 80076c4:	08007933 	.word	0x08007933
 80076c8:	08007933 	.word	0x08007933
 80076cc:	08007933 	.word	0x08007933
 80076d0:	08007721 	.word	0x08007721
 80076d4:	08007933 	.word	0x08007933
 80076d8:	08007933 	.word	0x08007933
 80076dc:	08007933 	.word	0x08007933
 80076e0:	08007933 	.word	0x08007933
 80076e4:	08007933 	.word	0x08007933
 80076e8:	08007933 	.word	0x08007933
 80076ec:	08007933 	.word	0x08007933
 80076f0:	08007727 	.word	0x08007727
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f4:	4b94      	ldr	r3, [pc, #592]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d009      	beq.n	8007714 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007700:	4b91      	ldr	r3, [pc, #580]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	08db      	lsrs	r3, r3, #3
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	4a90      	ldr	r2, [pc, #576]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800770c:	fa22 f303 	lsr.w	r3, r2, r3
 8007710:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007712:	e111      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007714:	4b8d      	ldr	r3, [pc, #564]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007716:	61bb      	str	r3, [r7, #24]
      break;
 8007718:	e10e      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800771a:	4b8d      	ldr	r3, [pc, #564]	; (8007950 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800771c:	61bb      	str	r3, [r7, #24]
      break;
 800771e:	e10b      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007720:	4b8c      	ldr	r3, [pc, #560]	; (8007954 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007722:	61bb      	str	r3, [r7, #24]
      break;
 8007724:	e108      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007726:	4b88      	ldr	r3, [pc, #544]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007730:	4b85      	ldr	r3, [pc, #532]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007734:	091b      	lsrs	r3, r3, #4
 8007736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800773a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800773c:	4b82      	ldr	r3, [pc, #520]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007746:	4b80      	ldr	r3, [pc, #512]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774a:	08db      	lsrs	r3, r3, #3
 800774c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	fb02 f303 	mul.w	r3, r2, r3
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 80e1 	beq.w	800792c <HAL_RCC_GetSysClockFreq+0x2b8>
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b02      	cmp	r3, #2
 800776e:	f000 8083 	beq.w	8007878 <HAL_RCC_GetSysClockFreq+0x204>
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2b02      	cmp	r3, #2
 8007776:	f200 80a1 	bhi.w	80078bc <HAL_RCC_GetSysClockFreq+0x248>
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <HAL_RCC_GetSysClockFreq+0x114>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d056      	beq.n	8007834 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007786:	e099      	b.n	80078bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007788:	4b6f      	ldr	r3, [pc, #444]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0320 	and.w	r3, r3, #32
 8007790:	2b00      	cmp	r3, #0
 8007792:	d02d      	beq.n	80077f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007794:	4b6c      	ldr	r3, [pc, #432]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	08db      	lsrs	r3, r3, #3
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	4a6b      	ldr	r2, [pc, #428]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077a0:	fa22 f303 	lsr.w	r3, r2, r3
 80077a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	ee07 3a90 	vmov	s15, r3
 80077ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077be:	4b62      	ldr	r3, [pc, #392]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80077d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80077ee:	e087      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800795c <HAL_RCC_GetSysClockFreq+0x2e8>
 80077fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007802:	4b51      	ldr	r3, [pc, #324]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007812:	ed97 6a02 	vldr	s12, [r7, #8]
 8007816:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800781a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007832:	e065      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007960 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007846:	4b40      	ldr	r3, [pc, #256]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007856:	ed97 6a02 	vldr	s12, [r7, #8]
 800785a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800785e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007876:	e043      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007882:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007964 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788a:	4b2f      	ldr	r3, [pc, #188]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800788c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789a:	ed97 6a02 	vldr	s12, [r7, #8]
 800789e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078ba:	e021      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	ee07 3a90 	vmov	s15, r3
 80078c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007960 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ce:	4b1e      	ldr	r3, [pc, #120]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078de:	ed97 6a02 	vldr	s12, [r7, #8]
 80078e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007900:	4b11      	ldr	r3, [pc, #68]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007904:	0a5b      	lsrs	r3, r3, #9
 8007906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790a:	3301      	adds	r3, #1
 800790c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	ee07 3a90 	vmov	s15, r3
 8007914:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007918:	edd7 6a07 	vldr	s13, [r7, #28]
 800791c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007924:	ee17 3a90 	vmov	r3, s15
 8007928:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800792a:	e005      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	61bb      	str	r3, [r7, #24]
      break;
 8007930:	e002      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007932:	4b07      	ldr	r3, [pc, #28]	; (8007950 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007934:	61bb      	str	r3, [r7, #24]
      break;
 8007936:	bf00      	nop
  }

  return sysclockfreq;
 8007938:	69bb      	ldr	r3, [r7, #24]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3724      	adds	r7, #36	; 0x24
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	58024400 	.word	0x58024400
 800794c:	03d09000 	.word	0x03d09000
 8007950:	003d0900 	.word	0x003d0900
 8007954:	017d7840 	.word	0x017d7840
 8007958:	46000000 	.word	0x46000000
 800795c:	4c742400 	.word	0x4c742400
 8007960:	4a742400 	.word	0x4a742400
 8007964:	4bbebc20 	.word	0x4bbebc20

08007968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800796e:	f7ff fe81 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 8007972:	4602      	mov	r2, r0
 8007974:	4b10      	ldr	r3, [pc, #64]	; (80079b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	0a1b      	lsrs	r3, r3, #8
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	490f      	ldr	r1, [pc, #60]	; (80079bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007980:	5ccb      	ldrb	r3, [r1, r3]
 8007982:	f003 031f 	and.w	r3, r3, #31
 8007986:	fa22 f303 	lsr.w	r3, r2, r3
 800798a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f003 030f 	and.w	r3, r3, #15
 8007994:	4a09      	ldr	r2, [pc, #36]	; (80079bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007996:	5cd3      	ldrb	r3, [r2, r3]
 8007998:	f003 031f 	and.w	r3, r3, #31
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	fa22 f303 	lsr.w	r3, r2, r3
 80079a2:	4a07      	ldr	r2, [pc, #28]	; (80079c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80079a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079a6:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079ac:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80079ae:	681b      	ldr	r3, [r3, #0]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	58024400 	.word	0x58024400
 80079bc:	0800e5c4 	.word	0x0800e5c4
 80079c0:	24000004 	.word	0x24000004
 80079c4:	24000000 	.word	0x24000000

080079c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80079cc:	f7ff ffcc 	bl	8007968 <HAL_RCC_GetHCLKFreq>
 80079d0:	4602      	mov	r2, r0
 80079d2:	4b06      	ldr	r3, [pc, #24]	; (80079ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	091b      	lsrs	r3, r3, #4
 80079d8:	f003 0307 	and.w	r3, r3, #7
 80079dc:	4904      	ldr	r1, [pc, #16]	; (80079f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079de:	5ccb      	ldrb	r3, [r1, r3]
 80079e0:	f003 031f 	and.w	r3, r3, #31
 80079e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	58024400 	.word	0x58024400
 80079f0:	0800e5c4 	.word	0x0800e5c4

080079f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80079f8:	f7ff ffb6 	bl	8007968 <HAL_RCC_GetHCLKFreq>
 80079fc:	4602      	mov	r2, r0
 80079fe:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	0a1b      	lsrs	r3, r3, #8
 8007a04:	f003 0307 	and.w	r3, r3, #7
 8007a08:	4904      	ldr	r1, [pc, #16]	; (8007a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a0a:	5ccb      	ldrb	r3, [r1, r3]
 8007a0c:	f003 031f 	and.w	r3, r3, #31
 8007a10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	0800e5c4 	.word	0x0800e5c4

08007a20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a24:	b0ca      	sub	sp, #296	; 0x128
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a32:	2300      	movs	r3, #0
 8007a34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007a44:	2500      	movs	r5, #0
 8007a46:	ea54 0305 	orrs.w	r3, r4, r5
 8007a4a:	d049      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a56:	d02f      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007a58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a5c:	d828      	bhi.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a62:	d01a      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007a64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a68:	d822      	bhi.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a72:	d007      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a74:	e01c      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a76:	4bb8      	ldr	r3, [pc, #736]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	4ab7      	ldr	r2, [pc, #732]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a82:	e01a      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a88:	3308      	adds	r3, #8
 8007a8a:	2102      	movs	r1, #2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f002 fb61 	bl	800a154 <RCCEx_PLL2_Config>
 8007a92:	4603      	mov	r3, r0
 8007a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a98:	e00f      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9e:	3328      	adds	r3, #40	; 0x28
 8007aa0:	2102      	movs	r1, #2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f002 fc08 	bl	800a2b8 <RCCEx_PLL3_Config>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007aae:	e004      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ab6:	e000      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ac2:	4ba5      	ldr	r3, [pc, #660]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ad0:	4aa1      	ldr	r2, [pc, #644]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	6513      	str	r3, [r2, #80]	; 0x50
 8007ad6:	e003      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007adc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007aec:	f04f 0900 	mov.w	r9, #0
 8007af0:	ea58 0309 	orrs.w	r3, r8, r9
 8007af4:	d047      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	d82a      	bhi.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007b00:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b1d 	.word	0x08007b1d
 8007b0c:	08007b2b 	.word	0x08007b2b
 8007b10:	08007b41 	.word	0x08007b41
 8007b14:	08007b5f 	.word	0x08007b5f
 8007b18:	08007b5f 	.word	0x08007b5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b1c:	4b8e      	ldr	r3, [pc, #568]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	4a8d      	ldr	r2, [pc, #564]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b28:	e01a      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2e:	3308      	adds	r3, #8
 8007b30:	2100      	movs	r1, #0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f002 fb0e 	bl	800a154 <RCCEx_PLL2_Config>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b3e:	e00f      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b44:	3328      	adds	r3, #40	; 0x28
 8007b46:	2100      	movs	r1, #0
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f002 fbb5 	bl	800a2b8 <RCCEx_PLL3_Config>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b54:	e004      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b5c:	e000      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b68:	4b7b      	ldr	r3, [pc, #492]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6c:	f023 0107 	bic.w	r1, r3, #7
 8007b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b76:	4a78      	ldr	r2, [pc, #480]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	6513      	str	r3, [r2, #80]	; 0x50
 8007b7c:	e003      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007b92:	f04f 0b00 	mov.w	fp, #0
 8007b96:	ea5a 030b 	orrs.w	r3, sl, fp
 8007b9a:	d04c      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba6:	d030      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bac:	d829      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bae:	2bc0      	cmp	r3, #192	; 0xc0
 8007bb0:	d02d      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007bb2:	2bc0      	cmp	r3, #192	; 0xc0
 8007bb4:	d825      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bb6:	2b80      	cmp	r3, #128	; 0x80
 8007bb8:	d018      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007bba:	2b80      	cmp	r3, #128	; 0x80
 8007bbc:	d821      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007bc2:	2b40      	cmp	r3, #64	; 0x40
 8007bc4:	d007      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007bc6:	e01c      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc8:	4b63      	ldr	r3, [pc, #396]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bcc:	4a62      	ldr	r2, [pc, #392]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007bd4:	e01c      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bda:	3308      	adds	r3, #8
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	f002 fab8 	bl	800a154 <RCCEx_PLL2_Config>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007bea:	e011      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf0:	3328      	adds	r3, #40	; 0x28
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f002 fb5f 	bl	800a2b8 <RCCEx_PLL3_Config>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c00:	e006      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c08:	e002      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c0a:	bf00      	nop
 8007c0c:	e000      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c18:	4b4f      	ldr	r3, [pc, #316]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c26:	4a4c      	ldr	r2, [pc, #304]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	6513      	str	r3, [r2, #80]	; 0x50
 8007c2c:	e003      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007c42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007c46:	2300      	movs	r3, #0
 8007c48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007c4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007c50:	460b      	mov	r3, r1
 8007c52:	4313      	orrs	r3, r2
 8007c54:	d053      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c62:	d035      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007c64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c68:	d82e      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c6e:	d031      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007c70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c74:	d828      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c7a:	d01a      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007c7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c80:	d822      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c8a:	d007      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007c8c:	e01c      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c8e:	4b32      	ldr	r3, [pc, #200]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	4a31      	ldr	r2, [pc, #196]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c9a:	e01c      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f002 fa55 	bl	800a154 <RCCEx_PLL2_Config>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007cb0:	e011      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb6:	3328      	adds	r3, #40	; 0x28
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f002 fafc 	bl	800a2b8 <RCCEx_PLL3_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cc6:	e006      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cce:	e002      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007cd0:	bf00      	nop
 8007cd2:	e000      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10b      	bne.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007cde:	4b1e      	ldr	r3, [pc, #120]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007cee:	4a1a      	ldr	r2, [pc, #104]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8007cf4:	e003      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007d0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d14:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	d056      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d2a:	d038      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007d2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d30:	d831      	bhi.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d36:	d034      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007d38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d3c:	d82b      	bhi.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d42:	d01d      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007d44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d48:	d825      	bhi.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d006      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007d4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d52:	d00a      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007d54:	e01f      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d56:	bf00      	nop
 8007d58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d5c:	4ba2      	ldr	r3, [pc, #648]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d60:	4aa1      	ldr	r2, [pc, #644]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d68:	e01c      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d6e:	3308      	adds	r3, #8
 8007d70:	2100      	movs	r1, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f002 f9ee 	bl	800a154 <RCCEx_PLL2_Config>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d7e:	e011      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d84:	3328      	adds	r3, #40	; 0x28
 8007d86:	2100      	movs	r1, #0
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f002 fa95 	bl	800a2b8 <RCCEx_PLL3_Config>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d94:	e006      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d9c:	e002      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007d9e:	bf00      	nop
 8007da0:	e000      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10b      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007dac:	4b8e      	ldr	r3, [pc, #568]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007dbc:	4a8a      	ldr	r2, [pc, #552]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8007dc2:	e003      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007de2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007de6:	460b      	mov	r3, r1
 8007de8:	4313      	orrs	r3, r2
 8007dea:	d03a      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df2:	2b30      	cmp	r3, #48	; 0x30
 8007df4:	d01f      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007df6:	2b30      	cmp	r3, #48	; 0x30
 8007df8:	d819      	bhi.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	d00c      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d815      	bhi.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d019      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	d111      	bne.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e0a:	4b77      	ldr	r3, [pc, #476]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	4a76      	ldr	r2, [pc, #472]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e16:	e011      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	2102      	movs	r1, #2
 8007e20:	4618      	mov	r0, r3
 8007e22:	f002 f997 	bl	800a154 <RCCEx_PLL2_Config>
 8007e26:	4603      	mov	r3, r0
 8007e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e2c:	e006      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e34:	e002      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e36:	bf00      	nop
 8007e38:	e000      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10a      	bne.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e44:	4b68      	ldr	r3, [pc, #416]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e48:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e52:	4a65      	ldr	r2, [pc, #404]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e54:	430b      	orrs	r3, r1
 8007e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e58:	e003      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007e6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e72:	2300      	movs	r3, #0
 8007e74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	d051      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e8c:	d035      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007e8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e92:	d82e      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e98:	d031      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007e9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e9e:	d828      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea4:	d01a      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eaa:	d822      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb4:	d007      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007eb6:	e01c      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eb8:	4b4b      	ldr	r3, [pc, #300]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	4a4a      	ldr	r2, [pc, #296]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ec4:	e01c      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eca:	3308      	adds	r3, #8
 8007ecc:	2100      	movs	r1, #0
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f002 f940 	bl	800a154 <RCCEx_PLL2_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007eda:	e011      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee0:	3328      	adds	r3, #40	; 0x28
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f002 f9e7 	bl	800a2b8 <RCCEx_PLL3_Config>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ef0:	e006      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ef8:	e002      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007efa:	bf00      	nop
 8007efc:	e000      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007f08:	4b37      	ldr	r3, [pc, #220]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f16:	4a34      	ldr	r2, [pc, #208]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	6513      	str	r3, [r2, #80]	; 0x50
 8007f1c:	e003      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007f32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f36:	2300      	movs	r3, #0
 8007f38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007f40:	460b      	mov	r3, r1
 8007f42:	4313      	orrs	r3, r2
 8007f44:	d056      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f50:	d033      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007f52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f56:	d82c      	bhi.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f5c:	d02f      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007f5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f62:	d826      	bhi.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f68:	d02b      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007f6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f6e:	d820      	bhi.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f74:	d012      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007f76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f7a:	d81a      	bhi.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d022      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f84:	d115      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f002 f8e0 	bl	800a154 <RCCEx_PLL2_Config>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f9a:	e015      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa0:	3328      	adds	r3, #40	; 0x28
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f002 f987 	bl	800a2b8 <RCCEx_PLL3_Config>
 8007faa:	4603      	mov	r3, r0
 8007fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007fb0:	e00a      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fb8:	e006      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fba:	bf00      	nop
 8007fbc:	e004      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fbe:	bf00      	nop
 8007fc0:	e002      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fc2:	bf00      	nop
 8007fc4:	e000      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10d      	bne.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007fd0:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fde:	4a02      	ldr	r2, [pc, #8]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	6513      	str	r3, [r2, #80]	; 0x50
 8007fe4:	e006      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007fe6:	bf00      	nop
 8007fe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ff0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008004:	2300      	movs	r3, #0
 8008006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800800a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800800e:	460b      	mov	r3, r1
 8008010:	4313      	orrs	r3, r2
 8008012:	d055      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008018:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800801c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008020:	d033      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008026:	d82c      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802c:	d02f      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800802e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008032:	d826      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008034:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008038:	d02b      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800803a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800803e:	d820      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008044:	d012      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800804a:	d81a      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d022      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008050:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008054:	d115      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800805a:	3308      	adds	r3, #8
 800805c:	2101      	movs	r1, #1
 800805e:	4618      	mov	r0, r3
 8008060:	f002 f878 	bl	800a154 <RCCEx_PLL2_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800806a:	e015      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800806c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008070:	3328      	adds	r3, #40	; 0x28
 8008072:	2101      	movs	r1, #1
 8008074:	4618      	mov	r0, r3
 8008076:	f002 f91f 	bl	800a2b8 <RCCEx_PLL3_Config>
 800807a:	4603      	mov	r3, r0
 800807c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008080:	e00a      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008088:	e006      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800808a:	bf00      	nop
 800808c:	e004      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800808e:	bf00      	nop
 8008090:	e002      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008092:	bf00      	nop
 8008094:	e000      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10b      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80080a0:	4ba3      	ldr	r3, [pc, #652]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80080a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080b0:	4a9f      	ldr	r2, [pc, #636]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b2:	430b      	orrs	r3, r1
 80080b4:	6593      	str	r3, [r2, #88]	; 0x58
 80080b6:	e003      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80080cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080d0:	2300      	movs	r3, #0
 80080d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80080da:	460b      	mov	r3, r1
 80080dc:	4313      	orrs	r3, r2
 80080de:	d037      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ea:	d00e      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80080ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080f0:	d816      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d018      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80080f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080fa:	d111      	bne.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080fc:	4b8c      	ldr	r3, [pc, #560]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	4a8b      	ldr	r2, [pc, #556]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008106:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008108:	e00f      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800810a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800810e:	3308      	adds	r3, #8
 8008110:	2101      	movs	r1, #1
 8008112:	4618      	mov	r0, r3
 8008114:	f002 f81e 	bl	800a154 <RCCEx_PLL2_Config>
 8008118:	4603      	mov	r3, r0
 800811a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800811e:	e004      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008126:	e000      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800812a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10a      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008132:	4b7f      	ldr	r3, [pc, #508]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008136:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008140:	4a7b      	ldr	r2, [pc, #492]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008142:	430b      	orrs	r3, r1
 8008144:	6513      	str	r3, [r2, #80]	; 0x50
 8008146:	e003      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800814c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800815c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008160:	2300      	movs	r3, #0
 8008162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008166:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800816a:	460b      	mov	r3, r1
 800816c:	4313      	orrs	r3, r2
 800816e:	d039      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008176:	2b03      	cmp	r3, #3
 8008178:	d81c      	bhi.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800817a:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	080081bd 	.word	0x080081bd
 8008184:	08008191 	.word	0x08008191
 8008188:	0800819f 	.word	0x0800819f
 800818c:	080081bd 	.word	0x080081bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008190:	4b67      	ldr	r3, [pc, #412]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008194:	4a66      	ldr	r2, [pc, #408]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800819a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800819c:	e00f      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800819e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a2:	3308      	adds	r3, #8
 80081a4:	2102      	movs	r1, #2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 ffd4 	bl	800a154 <RCCEx_PLL2_Config>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80081b2:	e004      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081ba:	e000      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80081bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80081c6:	4b5a      	ldr	r3, [pc, #360]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ca:	f023 0103 	bic.w	r1, r3, #3
 80081ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081d4:	4a56      	ldr	r2, [pc, #344]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081d6:	430b      	orrs	r3, r1
 80081d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081da:	e003      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80081f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081f4:	2300      	movs	r3, #0
 80081f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80081fe:	460b      	mov	r3, r1
 8008200:	4313      	orrs	r3, r2
 8008202:	f000 809f 	beq.w	8008344 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008206:	4b4b      	ldr	r3, [pc, #300]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a4a      	ldr	r2, [pc, #296]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800820c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008212:	f7fa fcd7 	bl	8002bc4 <HAL_GetTick>
 8008216:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800821a:	e00b      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800821c:	f7fa fcd2 	bl	8002bc4 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b64      	cmp	r3, #100	; 0x64
 800822a:	d903      	bls.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008232:	e005      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008234:	4b3f      	ldr	r3, [pc, #252]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0ed      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008240:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008244:	2b00      	cmp	r3, #0
 8008246:	d179      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008248:	4b39      	ldr	r3, [pc, #228]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800824a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800824c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008250:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008254:	4053      	eors	r3, r2
 8008256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800825a:	2b00      	cmp	r3, #0
 800825c:	d015      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800825e:	4b34      	ldr	r3, [pc, #208]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008266:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800826a:	4b31      	ldr	r3, [pc, #196]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	4a30      	ldr	r2, [pc, #192]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008274:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008276:	4b2e      	ldr	r3, [pc, #184]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827a:	4a2d      	ldr	r2, [pc, #180]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800827c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008280:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008282:	4a2b      	ldr	r2, [pc, #172]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008284:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008288:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008296:	d118      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008298:	f7fa fc94 	bl	8002bc4 <HAL_GetTick>
 800829c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082a0:	e00d      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082a2:	f7fa fc8f 	bl	8002bc4 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80082ac:	1ad2      	subs	r2, r2, r3
 80082ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d903      	bls.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80082bc:	e005      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082be:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c2:	f003 0302 	and.w	r3, r3, #2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0eb      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80082ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d129      	bne.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e2:	d10e      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80082e4:	4b12      	ldr	r3, [pc, #72]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80082ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082f4:	091a      	lsrs	r2, r3, #4
 80082f6:	4b10      	ldr	r3, [pc, #64]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	4a0d      	ldr	r2, [pc, #52]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082fc:	430b      	orrs	r3, r1
 80082fe:	6113      	str	r3, [r2, #16]
 8008300:	e005      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008302:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	4a0a      	ldr	r2, [pc, #40]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008308:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800830c:	6113      	str	r3, [r2, #16]
 800830e:	4b08      	ldr	r3, [pc, #32]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008310:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800831a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800831e:	4a04      	ldr	r2, [pc, #16]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008320:	430b      	orrs	r3, r1
 8008322:	6713      	str	r3, [r2, #112]	; 0x70
 8008324:	e00e      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800832a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800832e:	e009      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008330:	58024400 	.word	0x58024400
 8008334:	58024800 	.word	0x58024800
 8008338:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800833c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008340:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f002 0301 	and.w	r3, r2, #1
 8008350:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008354:	2300      	movs	r3, #0
 8008356:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800835a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800835e:	460b      	mov	r3, r1
 8008360:	4313      	orrs	r3, r2
 8008362:	f000 8089 	beq.w	8008478 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800836c:	2b28      	cmp	r3, #40	; 0x28
 800836e:	d86b      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008370:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008376:	bf00      	nop
 8008378:	08008451 	.word	0x08008451
 800837c:	08008449 	.word	0x08008449
 8008380:	08008449 	.word	0x08008449
 8008384:	08008449 	.word	0x08008449
 8008388:	08008449 	.word	0x08008449
 800838c:	08008449 	.word	0x08008449
 8008390:	08008449 	.word	0x08008449
 8008394:	08008449 	.word	0x08008449
 8008398:	0800841d 	.word	0x0800841d
 800839c:	08008449 	.word	0x08008449
 80083a0:	08008449 	.word	0x08008449
 80083a4:	08008449 	.word	0x08008449
 80083a8:	08008449 	.word	0x08008449
 80083ac:	08008449 	.word	0x08008449
 80083b0:	08008449 	.word	0x08008449
 80083b4:	08008449 	.word	0x08008449
 80083b8:	08008433 	.word	0x08008433
 80083bc:	08008449 	.word	0x08008449
 80083c0:	08008449 	.word	0x08008449
 80083c4:	08008449 	.word	0x08008449
 80083c8:	08008449 	.word	0x08008449
 80083cc:	08008449 	.word	0x08008449
 80083d0:	08008449 	.word	0x08008449
 80083d4:	08008449 	.word	0x08008449
 80083d8:	08008451 	.word	0x08008451
 80083dc:	08008449 	.word	0x08008449
 80083e0:	08008449 	.word	0x08008449
 80083e4:	08008449 	.word	0x08008449
 80083e8:	08008449 	.word	0x08008449
 80083ec:	08008449 	.word	0x08008449
 80083f0:	08008449 	.word	0x08008449
 80083f4:	08008449 	.word	0x08008449
 80083f8:	08008451 	.word	0x08008451
 80083fc:	08008449 	.word	0x08008449
 8008400:	08008449 	.word	0x08008449
 8008404:	08008449 	.word	0x08008449
 8008408:	08008449 	.word	0x08008449
 800840c:	08008449 	.word	0x08008449
 8008410:	08008449 	.word	0x08008449
 8008414:	08008449 	.word	0x08008449
 8008418:	08008451 	.word	0x08008451
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008420:	3308      	adds	r3, #8
 8008422:	2101      	movs	r1, #1
 8008424:	4618      	mov	r0, r3
 8008426:	f001 fe95 	bl	800a154 <RCCEx_PLL2_Config>
 800842a:	4603      	mov	r3, r0
 800842c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008430:	e00f      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008436:	3328      	adds	r3, #40	; 0x28
 8008438:	2101      	movs	r1, #1
 800843a:	4618      	mov	r0, r3
 800843c:	f001 ff3c 	bl	800a2b8 <RCCEx_PLL3_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008446:	e004      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800844e:	e000      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800845a:	4bbf      	ldr	r3, [pc, #764]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800845c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008468:	4abb      	ldr	r2, [pc, #748]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800846a:	430b      	orrs	r3, r1
 800846c:	6553      	str	r3, [r2, #84]	; 0x54
 800846e:	e003      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008474:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f002 0302 	and.w	r3, r2, #2
 8008484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008488:	2300      	movs	r3, #0
 800848a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800848e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008492:	460b      	mov	r3, r1
 8008494:	4313      	orrs	r3, r2
 8008496:	d041      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800849c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800849e:	2b05      	cmp	r3, #5
 80084a0:	d824      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80084a2:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084f5 	.word	0x080084f5
 80084ac:	080084c1 	.word	0x080084c1
 80084b0:	080084d7 	.word	0x080084d7
 80084b4:	080084f5 	.word	0x080084f5
 80084b8:	080084f5 	.word	0x080084f5
 80084bc:	080084f5 	.word	0x080084f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c4:	3308      	adds	r3, #8
 80084c6:	2101      	movs	r1, #1
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 fe43 	bl	800a154 <RCCEx_PLL2_Config>
 80084ce:	4603      	mov	r3, r0
 80084d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084d4:	e00f      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084da:	3328      	adds	r3, #40	; 0x28
 80084dc:	2101      	movs	r1, #1
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 feea 	bl	800a2b8 <RCCEx_PLL3_Config>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084ea:	e004      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084f2:	e000      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80084f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80084fe:	4b96      	ldr	r3, [pc, #600]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	f023 0107 	bic.w	r1, r3, #7
 8008506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800850a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800850c:	4a92      	ldr	r2, [pc, #584]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800850e:	430b      	orrs	r3, r1
 8008510:	6553      	str	r3, [r2, #84]	; 0x54
 8008512:	e003      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008514:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008518:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800851c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f002 0304 	and.w	r3, r2, #4
 8008528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800852c:	2300      	movs	r3, #0
 800852e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008532:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008536:	460b      	mov	r3, r1
 8008538:	4313      	orrs	r3, r2
 800853a:	d044      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800853c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008544:	2b05      	cmp	r3, #5
 8008546:	d825      	bhi.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008548:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800854a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854e:	bf00      	nop
 8008550:	0800859d 	.word	0x0800859d
 8008554:	08008569 	.word	0x08008569
 8008558:	0800857f 	.word	0x0800857f
 800855c:	0800859d 	.word	0x0800859d
 8008560:	0800859d 	.word	0x0800859d
 8008564:	0800859d 	.word	0x0800859d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800856c:	3308      	adds	r3, #8
 800856e:	2101      	movs	r1, #1
 8008570:	4618      	mov	r0, r3
 8008572:	f001 fdef 	bl	800a154 <RCCEx_PLL2_Config>
 8008576:	4603      	mov	r3, r0
 8008578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800857c:	e00f      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800857e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008582:	3328      	adds	r3, #40	; 0x28
 8008584:	2101      	movs	r1, #1
 8008586:	4618      	mov	r0, r3
 8008588:	f001 fe96 	bl	800a2b8 <RCCEx_PLL3_Config>
 800858c:	4603      	mov	r3, r0
 800858e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008592:	e004      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800859a:	e000      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800859c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800859e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10b      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085a6:	4b6c      	ldr	r3, [pc, #432]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085aa:	f023 0107 	bic.w	r1, r3, #7
 80085ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085b6:	4a68      	ldr	r2, [pc, #416]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085b8:	430b      	orrs	r3, r1
 80085ba:	6593      	str	r3, [r2, #88]	; 0x58
 80085bc:	e003      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f002 0320 	and.w	r3, r2, #32
 80085d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80085d6:	2300      	movs	r3, #0
 80085d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80085e0:	460b      	mov	r3, r1
 80085e2:	4313      	orrs	r3, r2
 80085e4:	d055      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80085e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085f2:	d033      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80085f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085f8:	d82c      	bhi.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085fe:	d02f      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008604:	d826      	bhi.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008606:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800860a:	d02b      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800860c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008610:	d820      	bhi.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008616:	d012      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800861c:	d81a      	bhi.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d022      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008626:	d115      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800862c:	3308      	adds	r3, #8
 800862e:	2100      	movs	r1, #0
 8008630:	4618      	mov	r0, r3
 8008632:	f001 fd8f 	bl	800a154 <RCCEx_PLL2_Config>
 8008636:	4603      	mov	r3, r0
 8008638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800863c:	e015      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800863e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008642:	3328      	adds	r3, #40	; 0x28
 8008644:	2102      	movs	r1, #2
 8008646:	4618      	mov	r0, r3
 8008648:	f001 fe36 	bl	800a2b8 <RCCEx_PLL3_Config>
 800864c:	4603      	mov	r3, r0
 800864e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008652:	e00a      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800865a:	e006      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800865c:	bf00      	nop
 800865e:	e004      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008660:	bf00      	nop
 8008662:	e002      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008664:	bf00      	nop
 8008666:	e000      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800866a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10b      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008672:	4b39      	ldr	r3, [pc, #228]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008676:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800867a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008682:	4a35      	ldr	r2, [pc, #212]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008684:	430b      	orrs	r3, r1
 8008686:	6553      	str	r3, [r2, #84]	; 0x54
 8008688:	e003      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800868e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800869e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086a2:	2300      	movs	r3, #0
 80086a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80086a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4313      	orrs	r3, r2
 80086b0:	d058      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80086be:	d033      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80086c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80086c4:	d82c      	bhi.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ca:	d02f      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80086cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d0:	d826      	bhi.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086d6:	d02b      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80086d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086dc:	d820      	bhi.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e2:	d012      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80086e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e8:	d81a      	bhi.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d022      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80086ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f2:	d115      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f8:	3308      	adds	r3, #8
 80086fa:	2100      	movs	r1, #0
 80086fc:	4618      	mov	r0, r3
 80086fe:	f001 fd29 	bl	800a154 <RCCEx_PLL2_Config>
 8008702:	4603      	mov	r3, r0
 8008704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008708:	e015      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800870e:	3328      	adds	r3, #40	; 0x28
 8008710:	2102      	movs	r1, #2
 8008712:	4618      	mov	r0, r3
 8008714:	f001 fdd0 	bl	800a2b8 <RCCEx_PLL3_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800871e:	e00a      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008726:	e006      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008728:	bf00      	nop
 800872a:	e004      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800872c:	bf00      	nop
 800872e:	e002      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008730:	bf00      	nop
 8008732:	e000      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10e      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800873e:	4b06      	ldr	r3, [pc, #24]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008742:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800874e:	4a02      	ldr	r2, [pc, #8]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008750:	430b      	orrs	r3, r1
 8008752:	6593      	str	r3, [r2, #88]	; 0x58
 8008754:	e006      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008756:	bf00      	nop
 8008758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800875c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008760:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008774:	2300      	movs	r3, #0
 8008776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800877a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800877e:	460b      	mov	r3, r1
 8008780:	4313      	orrs	r3, r2
 8008782:	d055      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008788:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800878c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008790:	d033      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008792:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008796:	d82c      	bhi.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800879c:	d02f      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800879e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087a2:	d826      	bhi.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087a8:	d02b      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80087aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087ae:	d820      	bhi.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087b4:	d012      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80087b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087ba:	d81a      	bhi.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d022      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80087c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087c4:	d115      	bne.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ca:	3308      	adds	r3, #8
 80087cc:	2100      	movs	r1, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 fcc0 	bl	800a154 <RCCEx_PLL2_Config>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087da:	e015      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e0:	3328      	adds	r3, #40	; 0x28
 80087e2:	2102      	movs	r1, #2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f001 fd67 	bl	800a2b8 <RCCEx_PLL3_Config>
 80087ea:	4603      	mov	r3, r0
 80087ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087f0:	e00a      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087f8:	e006      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087fa:	bf00      	nop
 80087fc:	e004      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087fe:	bf00      	nop
 8008800:	e002      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008802:	bf00      	nop
 8008804:	e000      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10b      	bne.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008810:	4ba1      	ldr	r3, [pc, #644]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008814:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008820:	4a9d      	ldr	r2, [pc, #628]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008822:	430b      	orrs	r3, r1
 8008824:	6593      	str	r3, [r2, #88]	; 0x58
 8008826:	e003      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800882c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008838:	f002 0308 	and.w	r3, r2, #8
 800883c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008840:	2300      	movs	r3, #0
 8008842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008846:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800884a:	460b      	mov	r3, r1
 800884c:	4313      	orrs	r3, r2
 800884e:	d01e      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800885c:	d10c      	bne.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800885e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008862:	3328      	adds	r3, #40	; 0x28
 8008864:	2102      	movs	r1, #2
 8008866:	4618      	mov	r0, r3
 8008868:	f001 fd26 	bl	800a2b8 <RCCEx_PLL3_Config>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d002      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008878:	4b87      	ldr	r3, [pc, #540]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800887a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008888:	4a83      	ldr	r2, [pc, #524]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800888a:	430b      	orrs	r3, r1
 800888c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800888e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	f002 0310 	and.w	r3, r2, #16
 800889a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800889e:	2300      	movs	r3, #0
 80088a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80088a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80088a8:	460b      	mov	r3, r1
 80088aa:	4313      	orrs	r3, r2
 80088ac:	d01e      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80088ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ba:	d10c      	bne.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c0:	3328      	adds	r3, #40	; 0x28
 80088c2:	2102      	movs	r1, #2
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 fcf7 	bl	800a2b8 <RCCEx_PLL3_Config>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088d6:	4b70      	ldr	r3, [pc, #448]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088e6:	4a6c      	ldr	r2, [pc, #432]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088e8:	430b      	orrs	r3, r1
 80088ea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80088f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088fc:	2300      	movs	r3, #0
 80088fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008902:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008906:	460b      	mov	r3, r1
 8008908:	4313      	orrs	r3, r2
 800890a:	d03e      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800890c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008910:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008918:	d022      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800891a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800891e:	d81b      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008920:	2b00      	cmp	r3, #0
 8008922:	d003      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008928:	d00b      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800892a:	e015      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800892c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008930:	3308      	adds	r3, #8
 8008932:	2100      	movs	r1, #0
 8008934:	4618      	mov	r0, r3
 8008936:	f001 fc0d 	bl	800a154 <RCCEx_PLL2_Config>
 800893a:	4603      	mov	r3, r0
 800893c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008940:	e00f      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008946:	3328      	adds	r3, #40	; 0x28
 8008948:	2102      	movs	r1, #2
 800894a:	4618      	mov	r0, r3
 800894c:	f001 fcb4 	bl	800a2b8 <RCCEx_PLL3_Config>
 8008950:	4603      	mov	r3, r0
 8008952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008956:	e004      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800895e:	e000      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10b      	bne.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800896a:	4b4b      	ldr	r3, [pc, #300]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800896c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008976:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800897a:	4a47      	ldr	r2, [pc, #284]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800897c:	430b      	orrs	r3, r1
 800897e:	6593      	str	r3, [r2, #88]	; 0x58
 8008980:	e003      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800898a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008996:	67bb      	str	r3, [r7, #120]	; 0x78
 8008998:	2300      	movs	r3, #0
 800899a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800899c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80089a0:	460b      	mov	r3, r1
 80089a2:	4313      	orrs	r3, r2
 80089a4:	d03b      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80089a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089b2:	d01f      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80089b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089b8:	d818      	bhi.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80089ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089be:	d003      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80089c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089c4:	d007      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80089c6:	e011      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089c8:	4b33      	ldr	r3, [pc, #204]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	4a32      	ldr	r2, [pc, #200]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80089d4:	e00f      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089da:	3328      	adds	r3, #40	; 0x28
 80089dc:	2101      	movs	r1, #1
 80089de:	4618      	mov	r0, r3
 80089e0:	f001 fc6a 	bl	800a2b8 <RCCEx_PLL3_Config>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80089ea:	e004      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089f2:	e000      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80089f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10b      	bne.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089fe:	4b26      	ldr	r3, [pc, #152]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a0e:	4a22      	ldr	r2, [pc, #136]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a10:	430b      	orrs	r3, r1
 8008a12:	6553      	str	r3, [r2, #84]	; 0x54
 8008a14:	e003      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	677b      	str	r3, [r7, #116]	; 0x74
 8008a30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008a34:	460b      	mov	r3, r1
 8008a36:	4313      	orrs	r3, r2
 8008a38:	d034      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a48:	d007      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008a4a:	e011      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a4c:	4b12      	ldr	r3, [pc, #72]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	4a11      	ldr	r2, [pc, #68]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a58:	e00e      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a5e:	3308      	adds	r3, #8
 8008a60:	2102      	movs	r1, #2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 fb76 	bl	800a154 <RCCEx_PLL2_Config>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a6e:	e003      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10d      	bne.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a80:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a8e:	4a02      	ldr	r2, [pc, #8]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a90:	430b      	orrs	r3, r1
 8008a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a94:	e006      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008a96:	bf00      	nop
 8008a98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008ab0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ab6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008aba:	460b      	mov	r3, r1
 8008abc:	4313      	orrs	r3, r2
 8008abe:	d00c      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac4:	3328      	adds	r3, #40	; 0x28
 8008ac6:	2102      	movs	r1, #2
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f001 fbf5 	bl	800a2b8 <RCCEx_PLL3_Config>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8008ae8:	2300      	movs	r3, #0
 8008aea:	667b      	str	r3, [r7, #100]	; 0x64
 8008aec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008af0:	460b      	mov	r3, r1
 8008af2:	4313      	orrs	r3, r2
 8008af4:	d038      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b02:	d018      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b08:	d811      	bhi.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b0e:	d014      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b14:	d80b      	bhi.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d011      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b1e:	d106      	bne.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b20:	4bc3      	ldr	r3, [pc, #780]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	4ac2      	ldr	r2, [pc, #776]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008b2c:	e008      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b34:	e004      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b36:	bf00      	nop
 8008b38:	e002      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b3a:	bf00      	nop
 8008b3c:	e000      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10b      	bne.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b48:	4bb9      	ldr	r3, [pc, #740]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b58:	4ab5      	ldr	r2, [pc, #724]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b5a:	430b      	orrs	r3, r1
 8008b5c:	6553      	str	r3, [r2, #84]	; 0x54
 8008b5e:	e003      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008b74:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b76:	2300      	movs	r3, #0
 8008b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4313      	orrs	r3, r2
 8008b82:	d009      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b84:	4baa      	ldr	r3, [pc, #680]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b92:	4aa7      	ldr	r2, [pc, #668]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b94:	430b      	orrs	r3, r1
 8008b96:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8008baa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	d00a      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008bb4:	4b9e      	ldr	r3, [pc, #632]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008bc4:	4a9a      	ldr	r2, [pc, #616]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bc6:	430b      	orrs	r3, r1
 8008bc8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bd8:	2300      	movs	r3, #0
 8008bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bdc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008be0:	460b      	mov	r3, r1
 8008be2:	4313      	orrs	r3, r2
 8008be4:	d009      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008be6:	4b92      	ldr	r3, [pc, #584]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bea:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf4:	4a8e      	ldr	r2, [pc, #568]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008c06:	643b      	str	r3, [r7, #64]	; 0x40
 8008c08:	2300      	movs	r3, #0
 8008c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008c10:	460b      	mov	r3, r1
 8008c12:	4313      	orrs	r3, r2
 8008c14:	d00e      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c16:	4b86      	ldr	r3, [pc, #536]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	4a85      	ldr	r2, [pc, #532]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c20:	6113      	str	r3, [r2, #16]
 8008c22:	4b83      	ldr	r3, [pc, #524]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c24:	6919      	ldr	r1, [r3, #16]
 8008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008c2e:	4a80      	ldr	r2, [pc, #512]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c30:	430b      	orrs	r3, r1
 8008c32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008c40:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c42:	2300      	movs	r3, #0
 8008c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	d009      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c50:	4b77      	ldr	r3, [pc, #476]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c54:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5e:	4a74      	ldr	r2, [pc, #464]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c60:	430b      	orrs	r3, r1
 8008c62:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008c70:	633b      	str	r3, [r7, #48]	; 0x30
 8008c72:	2300      	movs	r3, #0
 8008c74:	637b      	str	r3, [r7, #52]	; 0x34
 8008c76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	d00a      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c80:	4b6b      	ldr	r3, [pc, #428]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c84:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c90:	4a67      	ldr	r2, [pc, #412]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c92:	430b      	orrs	r3, r1
 8008c94:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	62b9      	str	r1, [r7, #40]	; 0x28
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ca8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008cac:	460b      	mov	r3, r1
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	d011      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cb6:	3308      	adds	r3, #8
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 fa4a 	bl	800a154 <RCCEx_PLL2_Config>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	2100      	movs	r1, #0
 8008ce0:	6239      	str	r1, [r7, #32]
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ce8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008cec:	460b      	mov	r3, r1
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	d011      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f001 fa2a 	bl	800a154 <RCCEx_PLL2_Config>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	2100      	movs	r1, #0
 8008d20:	61b9      	str	r1, [r7, #24]
 8008d22:	f003 0304 	and.w	r3, r3, #4
 8008d26:	61fb      	str	r3, [r7, #28]
 8008d28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	d011      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d36:	3308      	adds	r3, #8
 8008d38:	2102      	movs	r1, #2
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f001 fa0a 	bl	800a154 <RCCEx_PLL2_Config>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	2100      	movs	r1, #0
 8008d60:	6139      	str	r1, [r7, #16]
 8008d62:	f003 0308 	and.w	r3, r3, #8
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	d011      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d76:	3328      	adds	r3, #40	; 0x28
 8008d78:	2100      	movs	r1, #0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f001 fa9c 	bl	800a2b8 <RCCEx_PLL3_Config>
 8008d80:	4603      	mov	r3, r0
 8008d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	2100      	movs	r1, #0
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	f003 0310 	and.w	r3, r3, #16
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008dac:	460b      	mov	r3, r1
 8008dae:	4313      	orrs	r3, r2
 8008db0:	d011      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db6:	3328      	adds	r3, #40	; 0x28
 8008db8:	2101      	movs	r1, #1
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f001 fa7c 	bl	800a2b8 <RCCEx_PLL3_Config>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	2100      	movs	r1, #0
 8008de0:	6039      	str	r1, [r7, #0]
 8008de2:	f003 0320 	and.w	r3, r3, #32
 8008de6:	607b      	str	r3, [r7, #4]
 8008de8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008dec:	460b      	mov	r3, r1
 8008dee:	4313      	orrs	r3, r2
 8008df0:	d011      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df6:	3328      	adds	r3, #40	; 0x28
 8008df8:	2102      	movs	r1, #2
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 fa5c 	bl	800a2b8 <RCCEx_PLL3_Config>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008e06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008e16:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e000      	b.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e30:	58024400 	.word	0x58024400

08008e34 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b090      	sub	sp, #64	; 0x40
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e42:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008e46:	430b      	orrs	r3, r1
 8008e48:	f040 8094 	bne.w	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008e4c:	4b9e      	ldr	r3, [pc, #632]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e50:	f003 0307 	and.w	r3, r3, #7
 8008e54:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	f200 8087 	bhi.w	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008e5e:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e64:	08008e79 	.word	0x08008e79
 8008e68:	08008ea1 	.word	0x08008ea1
 8008e6c:	08008ec9 	.word	0x08008ec9
 8008e70:	08008f65 	.word	0x08008f65
 8008e74:	08008ef1 	.word	0x08008ef1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e78:	4b93      	ldr	r3, [pc, #588]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e84:	d108      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 f810 	bl	8009eb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e94:	f000 bd45 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e9c:	f000 bd41 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ea0:	4b89      	ldr	r3, [pc, #548]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008eac:	d108      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eae:	f107 0318 	add.w	r3, r7, #24
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 fd54 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ebc:	f000 bd31 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ec4:	f000 bd2d 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ec8:	4b7f      	ldr	r3, [pc, #508]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed4:	d108      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed6:	f107 030c 	add.w	r3, r7, #12
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 fe94 	bl	8009c08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee4:	f000 bd1d 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eec:	f000 bd19 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ef0:	4b75      	ldr	r3, [pc, #468]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ef8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008efa:	4b73      	ldr	r3, [pc, #460]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0304 	and.w	r3, r3, #4
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d10c      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d109      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f0c:	4b6e      	ldr	r3, [pc, #440]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	08db      	lsrs	r3, r3, #3
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	4a6d      	ldr	r2, [pc, #436]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f1e:	e01f      	b.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f20:	4b69      	ldr	r3, [pc, #420]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f2c:	d106      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f34:	d102      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f36:	4b66      	ldr	r3, [pc, #408]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f3a:	e011      	b.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f3c:	4b62      	ldr	r3, [pc, #392]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f48:	d106      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f50:	d102      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f52:	4b60      	ldr	r3, [pc, #384]	; (80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f56:	e003      	b.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f5c:	f000 bce1 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f60:	f000 bcdf 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f64:	4b5c      	ldr	r3, [pc, #368]	; (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f68:	f000 bcdb 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f70:	f000 bcd7 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f78:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	f040 80ad 	bne.w	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008f82:	4b51      	ldr	r3, [pc, #324]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f86:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008f8a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f92:	d056      	beq.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f9a:	f200 8090 	bhi.w	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	2bc0      	cmp	r3, #192	; 0xc0
 8008fa2:	f000 8088 	beq.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	2bc0      	cmp	r3, #192	; 0xc0
 8008faa:	f200 8088 	bhi.w	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	2b80      	cmp	r3, #128	; 0x80
 8008fb2:	d032      	beq.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	2b80      	cmp	r3, #128	; 0x80
 8008fb8:	f200 8081 	bhi.w	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	2b40      	cmp	r3, #64	; 0x40
 8008fc6:	d014      	beq.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008fc8:	e079      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fca:	4b3f      	ldr	r3, [pc, #252]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fd6:	d108      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 ff67 	bl	8009eb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe6:	f000 bc9c 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fee:	f000 bc98 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ff2:	4b35      	ldr	r3, [pc, #212]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ffe:	d108      	bne.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009000:	f107 0318 	add.w	r3, r7, #24
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fcab 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800900e:	f000 bc88 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009016:	f000 bc84 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800901a:	4b2b      	ldr	r3, [pc, #172]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009026:	d108      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009028:	f107 030c 	add.w	r3, r7, #12
 800902c:	4618      	mov	r0, r3
 800902e:	f000 fdeb 	bl	8009c08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009036:	f000 bc74 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800903e:	f000 bc70 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009042:	4b21      	ldr	r3, [pc, #132]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009046:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800904a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800904c:	4b1e      	ldr	r3, [pc, #120]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0304 	and.w	r3, r3, #4
 8009054:	2b04      	cmp	r3, #4
 8009056:	d10c      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905a:	2b00      	cmp	r3, #0
 800905c:	d109      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800905e:	4b1a      	ldr	r3, [pc, #104]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	08db      	lsrs	r3, r3, #3
 8009064:	f003 0303 	and.w	r3, r3, #3
 8009068:	4a18      	ldr	r2, [pc, #96]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800906a:	fa22 f303 	lsr.w	r3, r2, r3
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009070:	e01f      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009072:	4b15      	ldr	r3, [pc, #84]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800907e:	d106      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009086:	d102      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009088:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800908c:	e011      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800908e:	4b0e      	ldr	r3, [pc, #56]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800909a:	d106      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800909c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090a2:	d102      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090a4:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a8:	e003      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80090ae:	f000 bc38 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090b2:	f000 bc36 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090b6:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80090b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ba:	f000 bc32 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c2:	f000 bc2e 	b.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090c6:	bf00      	nop
 80090c8:	58024400 	.word	0x58024400
 80090cc:	03d09000 	.word	0x03d09000
 80090d0:	003d0900 	.word	0x003d0900
 80090d4:	017d7840 	.word	0x017d7840
 80090d8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80090dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090e0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80090e4:	430b      	orrs	r3, r1
 80090e6:	f040 809c 	bne.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80090ea:	4b9e      	ldr	r3, [pc, #632]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80090f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090fa:	d054      	beq.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80090fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009102:	f200 808b 	bhi.w	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800910c:	f000 8083 	beq.w	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009116:	f200 8081 	bhi.w	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800911a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009120:	d02f      	beq.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009128:	d878      	bhi.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009136:	d012      	beq.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009138:	e070      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800913a:	4b8a      	ldr	r3, [pc, #552]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009146:	d107      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800914c:	4618      	mov	r0, r3
 800914e:	f000 feaf 	bl	8009eb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009156:	e3e4      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800915c:	e3e1      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800915e:	4b81      	ldr	r3, [pc, #516]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800916a:	d107      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800916c:	f107 0318 	add.w	r3, r7, #24
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fbf5 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800917a:	e3d2      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009180:	e3cf      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009182:	4b78      	ldr	r3, [pc, #480]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800918a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800918e:	d107      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009190:	f107 030c 	add.w	r3, r7, #12
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fd37 	bl	8009c08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800919e:	e3c0      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091a4:	e3bd      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091a6:	4b6f      	ldr	r3, [pc, #444]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091b0:	4b6c      	ldr	r3, [pc, #432]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d10c      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80091bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d109      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091c2:	4b68      	ldr	r3, [pc, #416]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	08db      	lsrs	r3, r3, #3
 80091c8:	f003 0303 	and.w	r3, r3, #3
 80091cc:	4a66      	ldr	r2, [pc, #408]	; (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80091ce:	fa22 f303 	lsr.w	r3, r2, r3
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091d4:	e01e      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091d6:	4b63      	ldr	r3, [pc, #396]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091e2:	d106      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80091e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091ea:	d102      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091ec:	4b5f      	ldr	r3, [pc, #380]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091f0:	e010      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091f2:	4b5c      	ldr	r3, [pc, #368]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091fe:	d106      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009206:	d102      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009208:	4b59      	ldr	r3, [pc, #356]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800920a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800920c:	e002      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009212:	e386      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009214:	e385      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009216:	4b57      	ldr	r3, [pc, #348]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800921a:	e382      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009220:	e37f      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009226:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800922a:	430b      	orrs	r3, r1
 800922c:	f040 80a7 	bne.w	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009230:	4b4c      	ldr	r3, [pc, #304]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009234:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009238:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009240:	d055      	beq.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009248:	f200 8096 	bhi.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009252:	f000 8084 	beq.w	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800925c:	f200 808c 	bhi.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009266:	d030      	beq.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800926e:	f200 8083 	bhi.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	2b00      	cmp	r3, #0
 8009276:	d004      	beq.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800927e:	d012      	beq.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009280:	e07a      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009282:	4b38      	ldr	r3, [pc, #224]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800928a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800928e:	d107      	bne.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fe0b 	bl	8009eb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800929e:	e340      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092a4:	e33d      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092a6:	4b2f      	ldr	r3, [pc, #188]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092b2:	d107      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092b4:	f107 0318 	add.w	r3, r7, #24
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 fb51 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092c2:	e32e      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092c8:	e32b      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092ca:	4b26      	ldr	r3, [pc, #152]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092d6:	d107      	bne.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092d8:	f107 030c 	add.w	r3, r7, #12
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 fc93 	bl	8009c08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092e6:	e31c      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092ec:	e319      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092ee:	4b1d      	ldr	r3, [pc, #116]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092f8:	4b1a      	ldr	r3, [pc, #104]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0304 	and.w	r3, r3, #4
 8009300:	2b04      	cmp	r3, #4
 8009302:	d10c      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009306:	2b00      	cmp	r3, #0
 8009308:	d109      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800930a:	4b16      	ldr	r3, [pc, #88]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	08db      	lsrs	r3, r3, #3
 8009310:	f003 0303 	and.w	r3, r3, #3
 8009314:	4a14      	ldr	r2, [pc, #80]	; (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009316:	fa22 f303 	lsr.w	r3, r2, r3
 800931a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800931c:	e01e      	b.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800931e:	4b11      	ldr	r3, [pc, #68]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800932a:	d106      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009332:	d102      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009334:	4b0d      	ldr	r3, [pc, #52]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009338:	e010      	b.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009346:	d106      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800934e:	d102      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009350:	4b07      	ldr	r3, [pc, #28]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009354:	e002      	b.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800935a:	e2e2      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800935c:	e2e1      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800935e:	4b05      	ldr	r3, [pc, #20]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009362:	e2de      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009364:	58024400 	.word	0x58024400
 8009368:	03d09000 	.word	0x03d09000
 800936c:	003d0900 	.word	0x003d0900
 8009370:	017d7840 	.word	0x017d7840
 8009374:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800937c:	e2d1      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800937e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009382:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009386:	430b      	orrs	r3, r1
 8009388:	f040 809c 	bne.w	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800938c:	4b93      	ldr	r3, [pc, #588]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800938e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009390:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009394:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800939c:	d054      	beq.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800939e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093a4:	f200 808b 	bhi.w	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093ae:	f000 8083 	beq.w	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093b8:	f200 8081 	bhi.w	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093c2:	d02f      	beq.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ca:	d878      	bhi.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d004      	beq.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d8:	d012      	beq.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80093da:	e070      	b.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093dc:	4b7f      	ldr	r3, [pc, #508]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093e8:	d107      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fd5e 	bl	8009eb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f8:	e293      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093fe:	e290      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009400:	4b76      	ldr	r3, [pc, #472]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800940c:	d107      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800940e:	f107 0318 	add.w	r3, r7, #24
 8009412:	4618      	mov	r0, r3
 8009414:	f000 faa4 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800941c:	e281      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009422:	e27e      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009424:	4b6d      	ldr	r3, [pc, #436]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800942c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009430:	d107      	bne.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009432:	f107 030c 	add.w	r3, r7, #12
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fbe6 	bl	8009c08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009440:	e26f      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009446:	e26c      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009448:	4b64      	ldr	r3, [pc, #400]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800944a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009450:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009452:	4b62      	ldr	r3, [pc, #392]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0304 	and.w	r3, r3, #4
 800945a:	2b04      	cmp	r3, #4
 800945c:	d10c      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800945e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009460:	2b00      	cmp	r3, #0
 8009462:	d109      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009464:	4b5d      	ldr	r3, [pc, #372]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	08db      	lsrs	r3, r3, #3
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	4a5c      	ldr	r2, [pc, #368]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009470:	fa22 f303 	lsr.w	r3, r2, r3
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009476:	e01e      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009478:	4b58      	ldr	r3, [pc, #352]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009484:	d106      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800948c:	d102      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800948e:	4b55      	ldr	r3, [pc, #340]	; (80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009492:	e010      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009494:	4b51      	ldr	r3, [pc, #324]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800949c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094a0:	d106      	bne.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80094a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094a8:	d102      	bne.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094aa:	4b4f      	ldr	r3, [pc, #316]	; (80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80094ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ae:	e002      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80094b4:	e235      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094b6:	e234      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094b8:	4b4c      	ldr	r3, [pc, #304]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80094ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094bc:	e231      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094c2:	e22e      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80094c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80094cc:	430b      	orrs	r3, r1
 80094ce:	f040 808f 	bne.w	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80094d2:	4b42      	ldr	r3, [pc, #264]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80094da:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80094dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094e2:	d06b      	beq.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094ea:	d874      	bhi.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094f2:	d056      	beq.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094fa:	d86c      	bhi.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009502:	d03b      	beq.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009506:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800950a:	d864      	bhi.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009512:	d021      	beq.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800951a:	d85c      	bhi.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	2b00      	cmp	r3, #0
 8009520:	d004      	beq.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009528:	d004      	beq.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800952a:	e054      	b.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800952c:	f7fe fa4c 	bl	80079c8 <HAL_RCC_GetPCLK1Freq>
 8009530:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009532:	e1f6      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009534:	4b29      	ldr	r3, [pc, #164]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800953c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009540:	d107      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009542:	f107 0318 	add.w	r3, r7, #24
 8009546:	4618      	mov	r0, r3
 8009548:	f000 fa0a 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009550:	e1e7      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009556:	e1e4      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009558:	4b20      	ldr	r3, [pc, #128]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009564:	d107      	bne.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009566:	f107 030c 	add.w	r3, r7, #12
 800956a:	4618      	mov	r0, r3
 800956c:	f000 fb4c 	bl	8009c08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009574:	e1d5      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800957a:	e1d2      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800957c:	4b17      	ldr	r3, [pc, #92]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b04      	cmp	r3, #4
 8009586:	d109      	bne.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009588:	4b14      	ldr	r3, [pc, #80]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	08db      	lsrs	r3, r3, #3
 800958e:	f003 0303 	and.w	r3, r3, #3
 8009592:	4a13      	ldr	r2, [pc, #76]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009594:	fa22 f303 	lsr.w	r3, r2, r3
 8009598:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800959a:	e1c2      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a0:	e1bf      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80095a2:	4b0e      	ldr	r3, [pc, #56]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ae:	d102      	bne.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80095b0:	4b0c      	ldr	r3, [pc, #48]	; (80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095b4:	e1b5      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ba:	e1b2      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095bc:	4b07      	ldr	r3, [pc, #28]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095c8:	d102      	bne.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80095ca:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80095cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ce:	e1a8      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095d0:	2300      	movs	r3, #0
 80095d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d4:	e1a5      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095da:	e1a2      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095dc:	58024400 	.word	0x58024400
 80095e0:	03d09000 	.word	0x03d09000
 80095e4:	003d0900 	.word	0x003d0900
 80095e8:	017d7840 	.word	0x017d7840
 80095ec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80095f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80095f8:	430b      	orrs	r3, r1
 80095fa:	d173      	bne.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80095fc:	4b9c      	ldr	r3, [pc, #624]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009604:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800960c:	d02f      	beq.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009614:	d863      	bhi.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	2b00      	cmp	r3, #0
 800961a:	d004      	beq.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009622:	d012      	beq.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009624:	e05b      	b.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009626:	4b92      	ldr	r3, [pc, #584]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800962e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009632:	d107      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009634:	f107 0318 	add.w	r3, r7, #24
 8009638:	4618      	mov	r0, r3
 800963a:	f000 f991 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009642:	e16e      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009648:	e16b      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800964a:	4b89      	ldr	r3, [pc, #548]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009656:	d107      	bne.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009658:	f107 030c 	add.w	r3, r7, #12
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fad3 	bl	8009c08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009666:	e15c      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800966c:	e159      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800966e:	4b80      	ldr	r3, [pc, #512]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009672:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009676:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009678:	4b7d      	ldr	r3, [pc, #500]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b04      	cmp	r3, #4
 8009682:	d10c      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009686:	2b00      	cmp	r3, #0
 8009688:	d109      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800968a:	4b79      	ldr	r3, [pc, #484]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	08db      	lsrs	r3, r3, #3
 8009690:	f003 0303 	and.w	r3, r3, #3
 8009694:	4a77      	ldr	r2, [pc, #476]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009696:	fa22 f303 	lsr.w	r3, r2, r3
 800969a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800969c:	e01e      	b.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800969e:	4b74      	ldr	r3, [pc, #464]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096aa:	d106      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80096ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096b2:	d102      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096b4:	4b70      	ldr	r3, [pc, #448]	; (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096b8:	e010      	b.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096ba:	4b6d      	ldr	r3, [pc, #436]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096c6:	d106      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80096c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ce:	d102      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096d0:	4b6a      	ldr	r3, [pc, #424]	; (800987c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80096d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d4:	e002      	b.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80096da:	e122      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096dc:	e121      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096e2:	e11e      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80096e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096e8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80096ec:	430b      	orrs	r3, r1
 80096ee:	d133      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80096f0:	4b5f      	ldr	r3, [pc, #380]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d004      	beq.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009706:	d012      	beq.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009708:	e023      	b.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800970a:	4b59      	ldr	r3, [pc, #356]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009712:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009716:	d107      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800971c:	4618      	mov	r0, r3
 800971e:	f000 fbc7 	bl	8009eb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009726:	e0fc      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800972c:	e0f9      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800972e:	4b50      	ldr	r3, [pc, #320]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800973a:	d107      	bne.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800973c:	f107 0318 	add.w	r3, r7, #24
 8009740:	4618      	mov	r0, r3
 8009742:	f000 f90d 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974a:	e0ea      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009750:	e0e7      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009756:	e0e4      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800975c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009760:	430b      	orrs	r3, r1
 8009762:	f040 808d 	bne.w	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009766:	4b42      	ldr	r3, [pc, #264]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800976a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800976e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009776:	d06b      	beq.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800977e:	d874      	bhi.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009786:	d056      	beq.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800978e:	d86c      	bhi.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009796:	d03b      	beq.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800979e:	d864      	bhi.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a6:	d021      	beq.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80097a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ae:	d85c      	bhi.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097bc:	d004      	beq.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80097be:	e054      	b.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80097c0:	f000 f8b8 	bl	8009934 <HAL_RCCEx_GetD3PCLK1Freq>
 80097c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80097c6:	e0ac      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097c8:	4b29      	ldr	r3, [pc, #164]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097d4:	d107      	bne.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097d6:	f107 0318 	add.w	r3, r7, #24
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f8c0 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097e4:	e09d      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097ea:	e09a      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097ec:	4b20      	ldr	r3, [pc, #128]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f8:	d107      	bne.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097fa:	f107 030c 	add.w	r3, r7, #12
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 fa02 	bl	8009c08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009808:	e08b      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800980e:	e088      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009810:	4b17      	ldr	r3, [pc, #92]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0304 	and.w	r3, r3, #4
 8009818:	2b04      	cmp	r3, #4
 800981a:	d109      	bne.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800981c:	4b14      	ldr	r3, [pc, #80]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	08db      	lsrs	r3, r3, #3
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	4a13      	ldr	r2, [pc, #76]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009828:	fa22 f303 	lsr.w	r3, r2, r3
 800982c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800982e:	e078      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009834:	e075      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009836:	4b0e      	ldr	r3, [pc, #56]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800983e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009842:	d102      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009844:	4b0c      	ldr	r3, [pc, #48]	; (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009848:	e06b      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800984e:	e068      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009850:	4b07      	ldr	r3, [pc, #28]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800985c:	d102      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800985e:	4b07      	ldr	r3, [pc, #28]	; (800987c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009862:	e05e      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009868:	e05b      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800986e:	e058      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009870:	58024400 	.word	0x58024400
 8009874:	03d09000 	.word	0x03d09000
 8009878:	003d0900 	.word	0x003d0900
 800987c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009884:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009888:	430b      	orrs	r3, r1
 800988a:	d148      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800988c:	4b27      	ldr	r3, [pc, #156]	; (800992c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800988e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009890:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009894:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800989c:	d02a      	beq.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098a4:	d838      	bhi.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80098a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d004      	beq.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80098ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098b2:	d00d      	beq.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80098b4:	e030      	b.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098b6:	4b1d      	ldr	r3, [pc, #116]	; (800992c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098c2:	d102      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80098c4:	4b1a      	ldr	r3, [pc, #104]	; (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80098c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098c8:	e02b      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ce:	e028      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098d0:	4b16      	ldr	r3, [pc, #88]	; (800992c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098dc:	d107      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fae4 	bl	8009eb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ec:	e019      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098f2:	e016      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098f4:	4b0d      	ldr	r3, [pc, #52]	; (800992c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009900:	d107      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009902:	f107 0318 	add.w	r3, r7, #24
 8009906:	4618      	mov	r0, r3
 8009908:	f000 f82a 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009910:	e007      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009916:	e004      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800991c:	e001      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009924:	4618      	mov	r0, r3
 8009926:	3740      	adds	r7, #64	; 0x40
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	58024400 	.word	0x58024400
 8009930:	017d7840 	.word	0x017d7840

08009934 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009938:	f7fe f816 	bl	8007968 <HAL_RCC_GetHCLKFreq>
 800993c:	4602      	mov	r2, r0
 800993e:	4b06      	ldr	r3, [pc, #24]	; (8009958 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	091b      	lsrs	r3, r3, #4
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	4904      	ldr	r1, [pc, #16]	; (800995c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800994a:	5ccb      	ldrb	r3, [r1, r3]
 800994c:	f003 031f 	and.w	r3, r3, #31
 8009950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009954:	4618      	mov	r0, r3
 8009956:	bd80      	pop	{r7, pc}
 8009958:	58024400 	.word	0x58024400
 800995c:	0800e5c4 	.word	0x0800e5c4

08009960 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009960:	b480      	push	{r7}
 8009962:	b089      	sub	sp, #36	; 0x24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009968:	4ba1      	ldr	r3, [pc, #644]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800996a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800996c:	f003 0303 	and.w	r3, r3, #3
 8009970:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009972:	4b9f      	ldr	r3, [pc, #636]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009976:	0b1b      	lsrs	r3, r3, #12
 8009978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800997c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800997e:	4b9c      	ldr	r3, [pc, #624]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009982:	091b      	lsrs	r3, r3, #4
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800998a:	4b99      	ldr	r3, [pc, #612]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800998c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800998e:	08db      	lsrs	r3, r3, #3
 8009990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	fb02 f303 	mul.w	r3, r2, r3
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 8111 	beq.w	8009bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	f000 8083 	beq.w	8009abc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	f200 80a1 	bhi.w	8009b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d056      	beq.n	8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80099ca:	e099      	b.n	8009b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099cc:	4b88      	ldr	r3, [pc, #544]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0320 	and.w	r3, r3, #32
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d02d      	beq.n	8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099d8:	4b85      	ldr	r3, [pc, #532]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	08db      	lsrs	r3, r3, #3
 80099de:	f003 0303 	and.w	r3, r3, #3
 80099e2:	4a84      	ldr	r2, [pc, #528]	; (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80099e4:	fa22 f303 	lsr.w	r3, r2, r3
 80099e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	ee07 3a90 	vmov	s15, r3
 80099f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	ee07 3a90 	vmov	s15, r3
 80099fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a02:	4b7b      	ldr	r3, [pc, #492]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a32:	e087      	b.n	8009b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a46:	4b6a      	ldr	r3, [pc, #424]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a76:	e065      	b.n	8009b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	ee07 3a90 	vmov	s15, r3
 8009a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a8a:	4b59      	ldr	r3, [pc, #356]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aba:	e043      	b.n	8009b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	ee07 3a90 	vmov	s15, r3
 8009ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ace:	4b48      	ldr	r3, [pc, #288]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ae2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009afe:	e021      	b.n	8009b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b12:	4b37      	ldr	r3, [pc, #220]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009b44:	4b2a      	ldr	r3, [pc, #168]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b48:	0a5b      	lsrs	r3, r3, #9
 8009b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b6a:	ee17 2a90 	vmov	r2, s15
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009b72:	4b1f      	ldr	r3, [pc, #124]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b76:	0c1b      	lsrs	r3, r3, #16
 8009b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b7c:	ee07 3a90 	vmov	s15, r3
 8009b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b98:	ee17 2a90 	vmov	r2, s15
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009ba0:	4b13      	ldr	r3, [pc, #76]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba4:	0e1b      	lsrs	r3, r3, #24
 8009ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bc6:	ee17 2a90 	vmov	r2, s15
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009bce:	e008      	b.n	8009be2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	609a      	str	r2, [r3, #8]
}
 8009be2:	bf00      	nop
 8009be4:	3724      	adds	r7, #36	; 0x24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	58024400 	.word	0x58024400
 8009bf4:	03d09000 	.word	0x03d09000
 8009bf8:	46000000 	.word	0x46000000
 8009bfc:	4c742400 	.word	0x4c742400
 8009c00:	4a742400 	.word	0x4a742400
 8009c04:	4bbebc20 	.word	0x4bbebc20

08009c08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b089      	sub	sp, #36	; 0x24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c10:	4ba1      	ldr	r3, [pc, #644]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c14:	f003 0303 	and.w	r3, r3, #3
 8009c18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009c1a:	4b9f      	ldr	r3, [pc, #636]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1e:	0d1b      	lsrs	r3, r3, #20
 8009c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c26:	4b9c      	ldr	r3, [pc, #624]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2a:	0a1b      	lsrs	r3, r3, #8
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009c32:	4b99      	ldr	r3, [pc, #612]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c36:	08db      	lsrs	r3, r3, #3
 8009c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	fb02 f303 	mul.w	r3, r2, r3
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 8111 	beq.w	8009e78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	f000 8083 	beq.w	8009d64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	f200 80a1 	bhi.w	8009da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d056      	beq.n	8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009c72:	e099      	b.n	8009da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c74:	4b88      	ldr	r3, [pc, #544]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d02d      	beq.n	8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c80:	4b85      	ldr	r3, [pc, #532]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	08db      	lsrs	r3, r3, #3
 8009c86:	f003 0303 	and.w	r3, r3, #3
 8009c8a:	4a84      	ldr	r2, [pc, #528]	; (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	ee07 3a90 	vmov	s15, r3
 8009c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009caa:	4b7b      	ldr	r3, [pc, #492]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009cda:	e087      	b.n	8009dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cee:	4b6a      	ldr	r3, [pc, #424]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d1e:	e065      	b.n	8009dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d32:	4b59      	ldr	r3, [pc, #356]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3a:	ee07 3a90 	vmov	s15, r3
 8009d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d62:	e043      	b.n	8009dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	ee07 3a90 	vmov	s15, r3
 8009d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009eac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d76:	4b48      	ldr	r3, [pc, #288]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009da6:	e021      	b.n	8009dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	ee07 3a90 	vmov	s15, r3
 8009dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dba:	4b37      	ldr	r3, [pc, #220]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009dec:	4b2a      	ldr	r3, [pc, #168]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df0:	0a5b      	lsrs	r3, r3, #9
 8009df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df6:	ee07 3a90 	vmov	s15, r3
 8009dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e12:	ee17 2a90 	vmov	r2, s15
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009e1a:	4b1f      	ldr	r3, [pc, #124]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	0c1b      	lsrs	r3, r3, #16
 8009e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e24:	ee07 3a90 	vmov	s15, r3
 8009e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e40:	ee17 2a90 	vmov	r2, s15
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009e48:	4b13      	ldr	r3, [pc, #76]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4c:	0e1b      	lsrs	r3, r3, #24
 8009e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e62:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e6e:	ee17 2a90 	vmov	r2, s15
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009e76:	e008      	b.n	8009e8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	609a      	str	r2, [r3, #8]
}
 8009e8a:	bf00      	nop
 8009e8c:	3724      	adds	r7, #36	; 0x24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	58024400 	.word	0x58024400
 8009e9c:	03d09000 	.word	0x03d09000
 8009ea0:	46000000 	.word	0x46000000
 8009ea4:	4c742400 	.word	0x4c742400
 8009ea8:	4a742400 	.word	0x4a742400
 8009eac:	4bbebc20 	.word	0x4bbebc20

08009eb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b089      	sub	sp, #36	; 0x24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009eb8:	4ba0      	ldr	r3, [pc, #640]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebc:	f003 0303 	and.w	r3, r3, #3
 8009ec0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009ec2:	4b9e      	ldr	r3, [pc, #632]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec6:	091b      	lsrs	r3, r3, #4
 8009ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ecc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ece:	4b9b      	ldr	r3, [pc, #620]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009ed8:	4b98      	ldr	r3, [pc, #608]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009edc:	08db      	lsrs	r3, r3, #3
 8009ede:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	fb02 f303 	mul.w	r3, r2, r3
 8009ee8:	ee07 3a90 	vmov	s15, r3
 8009eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 8111 	beq.w	800a11e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	f000 8083 	beq.w	800a00a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	f200 80a1 	bhi.w	800a04e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d056      	beq.n	8009fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f18:	e099      	b.n	800a04e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f1a:	4b88      	ldr	r3, [pc, #544]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d02d      	beq.n	8009f82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f26:	4b85      	ldr	r3, [pc, #532]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	08db      	lsrs	r3, r3, #3
 8009f2c:	f003 0303 	and.w	r3, r3, #3
 8009f30:	4a83      	ldr	r2, [pc, #524]	; (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f32:	fa22 f303 	lsr.w	r3, r2, r3
 8009f36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	ee07 3a90 	vmov	s15, r3
 8009f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f50:	4b7a      	ldr	r3, [pc, #488]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f58:	ee07 3a90 	vmov	s15, r3
 8009f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f60:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f64:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f80:	e087      	b.n	800a092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	ee07 3a90 	vmov	s15, r3
 8009f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a148 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f94:	4b69      	ldr	r3, [pc, #420]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f9c:	ee07 3a90 	vmov	s15, r3
 8009fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fa8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fc4:	e065      	b.n	800a092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	ee07 3a90 	vmov	s15, r3
 8009fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fd8:	4b58      	ldr	r3, [pc, #352]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe0:	ee07 3a90 	vmov	s15, r3
 8009fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fec:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a000:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a004:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a008:	e043      	b.n	800a092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	ee07 3a90 	vmov	s15, r3
 800a010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a014:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a01c:	4b47      	ldr	r3, [pc, #284]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a024:	ee07 3a90 	vmov	s15, r3
 800a028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a02c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a030:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a03c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a044:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a048:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a04c:	e021      	b.n	800a092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	ee07 3a90 	vmov	s15, r3
 800a054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a058:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a148 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a05c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a060:	4b36      	ldr	r3, [pc, #216]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a068:	ee07 3a90 	vmov	s15, r3
 800a06c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a070:	ed97 6a03 	vldr	s12, [r7, #12]
 800a074:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a07c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a08c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a090:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a092:	4b2a      	ldr	r3, [pc, #168]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a096:	0a5b      	lsrs	r3, r3, #9
 800a098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a09c:	ee07 3a90 	vmov	s15, r3
 800a0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0b8:	ee17 2a90 	vmov	r2, s15
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a0c0:	4b1e      	ldr	r3, [pc, #120]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c4:	0c1b      	lsrs	r3, r3, #16
 800a0c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ca:	ee07 3a90 	vmov	s15, r3
 800a0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0da:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0e6:	ee17 2a90 	vmov	r2, s15
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a0ee:	4b13      	ldr	r3, [pc, #76]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f2:	0e1b      	lsrs	r3, r3, #24
 800a0f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0f8:	ee07 3a90 	vmov	s15, r3
 800a0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a104:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a108:	edd7 6a07 	vldr	s13, [r7, #28]
 800a10c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a114:	ee17 2a90 	vmov	r2, s15
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a11c:	e008      	b.n	800a130 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	609a      	str	r2, [r3, #8]
}
 800a130:	bf00      	nop
 800a132:	3724      	adds	r7, #36	; 0x24
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	58024400 	.word	0x58024400
 800a140:	03d09000 	.word	0x03d09000
 800a144:	46000000 	.word	0x46000000
 800a148:	4c742400 	.word	0x4c742400
 800a14c:	4a742400 	.word	0x4a742400
 800a150:	4bbebc20 	.word	0x4bbebc20

0800a154 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a162:	4b53      	ldr	r3, [pc, #332]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a166:	f003 0303 	and.w	r3, r3, #3
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d101      	bne.n	800a172 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e099      	b.n	800a2a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a172:	4b4f      	ldr	r3, [pc, #316]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a4e      	ldr	r2, [pc, #312]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a178:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a17c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a17e:	f7f8 fd21 	bl	8002bc4 <HAL_GetTick>
 800a182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a184:	e008      	b.n	800a198 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a186:	f7f8 fd1d 	bl	8002bc4 <HAL_GetTick>
 800a18a:	4602      	mov	r2, r0
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	2b02      	cmp	r3, #2
 800a192:	d901      	bls.n	800a198 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a194:	2303      	movs	r3, #3
 800a196:	e086      	b.n	800a2a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a198:	4b45      	ldr	r3, [pc, #276]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1f0      	bne.n	800a186 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1a4:	4b42      	ldr	r3, [pc, #264]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	031b      	lsls	r3, r3, #12
 800a1b2:	493f      	ldr	r1, [pc, #252]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	628b      	str	r3, [r1, #40]	; 0x28
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	025b      	lsls	r3, r3, #9
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	431a      	orrs	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	041b      	lsls	r3, r3, #16
 800a1d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	061b      	lsls	r3, r3, #24
 800a1e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1e8:	4931      	ldr	r1, [pc, #196]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a1ee:	4b30      	ldr	r3, [pc, #192]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	492d      	ldr	r1, [pc, #180]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a200:	4b2b      	ldr	r3, [pc, #172]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	f023 0220 	bic.w	r2, r3, #32
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	4928      	ldr	r1, [pc, #160]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a20e:	4313      	orrs	r3, r2
 800a210:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a212:	4b27      	ldr	r3, [pc, #156]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a216:	4a26      	ldr	r2, [pc, #152]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a218:	f023 0310 	bic.w	r3, r3, #16
 800a21c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a21e:	4b24      	ldr	r3, [pc, #144]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a222:	4b24      	ldr	r3, [pc, #144]	; (800a2b4 <RCCEx_PLL2_Config+0x160>)
 800a224:	4013      	ands	r3, r2
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	69d2      	ldr	r2, [r2, #28]
 800a22a:	00d2      	lsls	r2, r2, #3
 800a22c:	4920      	ldr	r1, [pc, #128]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a232:	4b1f      	ldr	r3, [pc, #124]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a236:	4a1e      	ldr	r2, [pc, #120]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a238:	f043 0310 	orr.w	r3, r3, #16
 800a23c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d106      	bne.n	800a252 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a244:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	4a19      	ldr	r2, [pc, #100]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a24a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a24e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a250:	e00f      	b.n	800a272 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d106      	bne.n	800a266 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a258:	4b15      	ldr	r3, [pc, #84]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25c:	4a14      	ldr	r2, [pc, #80]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a25e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a262:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a264:	e005      	b.n	800a272 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a266:	4b12      	ldr	r3, [pc, #72]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26a:	4a11      	ldr	r2, [pc, #68]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a26c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a270:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a272:	4b0f      	ldr	r3, [pc, #60]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a0e      	ldr	r2, [pc, #56]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a27c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a27e:	f7f8 fca1 	bl	8002bc4 <HAL_GetTick>
 800a282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a284:	e008      	b.n	800a298 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a286:	f7f8 fc9d 	bl	8002bc4 <HAL_GetTick>
 800a28a:	4602      	mov	r2, r0
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	2b02      	cmp	r3, #2
 800a292:	d901      	bls.n	800a298 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a294:	2303      	movs	r3, #3
 800a296:	e006      	b.n	800a2a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a298:	4b05      	ldr	r3, [pc, #20]	; (800a2b0 <RCCEx_PLL2_Config+0x15c>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0f0      	beq.n	800a286 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	58024400 	.word	0x58024400
 800a2b4:	ffff0007 	.word	0xffff0007

0800a2b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2c6:	4b53      	ldr	r3, [pc, #332]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ca:	f003 0303 	and.w	r3, r3, #3
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d101      	bne.n	800a2d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e099      	b.n	800a40a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a2d6:	4b4f      	ldr	r3, [pc, #316]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a4e      	ldr	r2, [pc, #312]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a2dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2e2:	f7f8 fc6f 	bl	8002bc4 <HAL_GetTick>
 800a2e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2e8:	e008      	b.n	800a2fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2ea:	f7f8 fc6b 	bl	8002bc4 <HAL_GetTick>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d901      	bls.n	800a2fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e086      	b.n	800a40a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2fc:	4b45      	ldr	r3, [pc, #276]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1f0      	bne.n	800a2ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a308:	4b42      	ldr	r3, [pc, #264]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	051b      	lsls	r3, r3, #20
 800a316:	493f      	ldr	r1, [pc, #252]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	628b      	str	r3, [r1, #40]	; 0x28
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	3b01      	subs	r3, #1
 800a322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	025b      	lsls	r3, r3, #9
 800a32e:	b29b      	uxth	r3, r3
 800a330:	431a      	orrs	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	3b01      	subs	r3, #1
 800a338:	041b      	lsls	r3, r3, #16
 800a33a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	3b01      	subs	r3, #1
 800a346:	061b      	lsls	r3, r3, #24
 800a348:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a34c:	4931      	ldr	r1, [pc, #196]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a352:	4b30      	ldr	r3, [pc, #192]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a356:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	492d      	ldr	r1, [pc, #180]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a360:	4313      	orrs	r3, r2
 800a362:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a364:	4b2b      	ldr	r3, [pc, #172]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a368:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	4928      	ldr	r1, [pc, #160]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a372:	4313      	orrs	r3, r2
 800a374:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a376:	4b27      	ldr	r3, [pc, #156]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	4a26      	ldr	r2, [pc, #152]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a37c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a382:	4b24      	ldr	r3, [pc, #144]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a386:	4b24      	ldr	r3, [pc, #144]	; (800a418 <RCCEx_PLL3_Config+0x160>)
 800a388:	4013      	ands	r3, r2
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	69d2      	ldr	r2, [r2, #28]
 800a38e:	00d2      	lsls	r2, r2, #3
 800a390:	4920      	ldr	r1, [pc, #128]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a392:	4313      	orrs	r3, r2
 800a394:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a396:	4b1f      	ldr	r3, [pc, #124]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39a:	4a1e      	ldr	r2, [pc, #120]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a39c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d106      	bne.n	800a3b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a3a8:	4b1a      	ldr	r3, [pc, #104]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ac:	4a19      	ldr	r2, [pc, #100]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a3ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a3b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3b4:	e00f      	b.n	800a3d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d106      	bne.n	800a3ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a3bc:	4b15      	ldr	r3, [pc, #84]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	4a14      	ldr	r2, [pc, #80]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a3c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a3c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3c8:	e005      	b.n	800a3d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a3ca:	4b12      	ldr	r3, [pc, #72]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	4a11      	ldr	r2, [pc, #68]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a3d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a3d6:	4b0f      	ldr	r3, [pc, #60]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a0e      	ldr	r2, [pc, #56]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3e2:	f7f8 fbef 	bl	8002bc4 <HAL_GetTick>
 800a3e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3e8:	e008      	b.n	800a3fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3ea:	f7f8 fbeb 	bl	8002bc4 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d901      	bls.n	800a3fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e006      	b.n	800a40a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3fc:	4b05      	ldr	r3, [pc, #20]	; (800a414 <RCCEx_PLL3_Config+0x15c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0f0      	beq.n	800a3ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	58024400 	.word	0x58024400
 800a418:	ffff0007 	.word	0xffff0007

0800a41c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d071      	beq.n	800a512 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d106      	bne.n	800a448 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7f7 fe10 	bl	8002068 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f003 0310 	and.w	r3, r3, #16
 800a45a:	2b10      	cmp	r3, #16
 800a45c:	d050      	beq.n	800a500 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	22ca      	movs	r2, #202	; 0xca
 800a464:	625a      	str	r2, [r3, #36]	; 0x24
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2253      	movs	r2, #83	; 0x53
 800a46c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f87a 	bl	800a568 <RTC_EnterInitMode>
 800a474:	4603      	mov	r3, r0
 800a476:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a478:	7bfb      	ldrb	r3, [r7, #15]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d124      	bne.n	800a4c8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6899      	ldr	r1, [r3, #8]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	4b24      	ldr	r3, [pc, #144]	; (800a51c <HAL_RTC_Init+0x100>)
 800a48a:	400b      	ands	r3, r1
 800a48c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6899      	ldr	r1, [r3, #8]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685a      	ldr	r2, [r3, #4]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	431a      	orrs	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	430a      	orrs	r2, r1
 800a4aa:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	0419      	lsls	r1, r3, #16
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68da      	ldr	r2, [r3, #12]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f886 	bl	800a5d0 <RTC_ExitInitMode>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d113      	bne.n	800a4f6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 0203 	bic.w	r2, r2, #3
 800a4dc:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	69da      	ldr	r2, [r3, #28]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	695b      	ldr	r3, [r3, #20]
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	22ff      	movs	r2, #255	; 0xff
 800a4fc:	625a      	str	r2, [r3, #36]	; 0x24
 800a4fe:	e001      	b.n	800a504 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d103      	bne.n	800a512 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a512:	7bfb      	ldrb	r3, [r7, #15]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	ff8fffbf 	.word	0xff8fffbf

0800a520 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a0d      	ldr	r2, [pc, #52]	; (800a564 <HAL_RTC_WaitForSynchro+0x44>)
 800a52e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a530:	f7f8 fb48 	bl	8002bc4 <HAL_GetTick>
 800a534:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a536:	e009      	b.n	800a54c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a538:	f7f8 fb44 	bl	8002bc4 <HAL_GetTick>
 800a53c:	4602      	mov	r2, r0
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a546:	d901      	bls.n	800a54c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e007      	b.n	800a55c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0ee      	beq.n	800a538 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	0003ff5f 	.word	0x0003ff5f

0800a568 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d120      	bne.n	800a5c4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f04f 32ff 	mov.w	r2, #4294967295
 800a58a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a58c:	f7f8 fb1a 	bl	8002bc4 <HAL_GetTick>
 800a590:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a592:	e00d      	b.n	800a5b0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a594:	f7f8 fb16 	bl	8002bc4 <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5a2:	d905      	bls.n	800a5b0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2203      	movs	r2, #3
 800a5ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d102      	bne.n	800a5c4 <RTC_EnterInitMode+0x5c>
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d1e7      	bne.n	800a594 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a5dc:	4b1a      	ldr	r3, [pc, #104]	; (800a648 <RTC_ExitInitMode+0x78>)
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	4a19      	ldr	r2, [pc, #100]	; (800a648 <RTC_ExitInitMode+0x78>)
 800a5e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5e6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a5e8:	4b17      	ldr	r3, [pc, #92]	; (800a648 <RTC_ExitInitMode+0x78>)
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10c      	bne.n	800a60e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff ff93 	bl	800a520 <HAL_RTC_WaitForSynchro>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d01e      	beq.n	800a63e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2203      	movs	r2, #3
 800a604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	73fb      	strb	r3, [r7, #15]
 800a60c:	e017      	b.n	800a63e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a60e:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <RTC_ExitInitMode+0x78>)
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	4a0d      	ldr	r2, [pc, #52]	; (800a648 <RTC_ExitInitMode+0x78>)
 800a614:	f023 0320 	bic.w	r3, r3, #32
 800a618:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f7ff ff80 	bl	800a520 <HAL_RTC_WaitForSynchro>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d005      	beq.n	800a632 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2203      	movs	r2, #3
 800a62a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a632:	4b05      	ldr	r3, [pc, #20]	; (800a648 <RTC_ExitInitMode+0x78>)
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	4a04      	ldr	r2, [pc, #16]	; (800a648 <RTC_ExitInitMode+0x78>)
 800a638:	f043 0320 	orr.w	r3, r3, #32
 800a63c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	58004000 	.word	0x58004000

0800a64c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08a      	sub	sp, #40	; 0x28
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e28e      	b.n	800ab7c <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a65e:	f7f8 fae1 	bl	8002c24 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d113      	bne.n	800a694 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a96      	ldr	r2, [pc, #600]	; (800a8cc <HAL_SAI_Init+0x280>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d004      	beq.n	800a680 <HAL_SAI_Init+0x34>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a95      	ldr	r2, [pc, #596]	; (800a8d0 <HAL_SAI_Init+0x284>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d107      	bne.n	800a690 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a684:	2b01      	cmp	r3, #1
 800a686:	d103      	bne.n	800a690 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e273      	b.n	800ab7c <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a8c      	ldr	r2, [pc, #560]	; (800a8cc <HAL_SAI_Init+0x280>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d004      	beq.n	800a6a8 <HAL_SAI_Init+0x5c>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a8c      	ldr	r2, [pc, #560]	; (800a8d4 <HAL_SAI_Init+0x288>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d102      	bne.n	800a6ae <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a6a8:	4b8b      	ldr	r3, [pc, #556]	; (800a8d8 <HAL_SAI_Init+0x28c>)
 800a6aa:	61bb      	str	r3, [r7, #24]
 800a6ac:	e028      	b.n	800a700 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a8a      	ldr	r2, [pc, #552]	; (800a8dc <HAL_SAI_Init+0x290>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d004      	beq.n	800a6c2 <HAL_SAI_Init+0x76>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a88      	ldr	r2, [pc, #544]	; (800a8e0 <HAL_SAI_Init+0x294>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d102      	bne.n	800a6c8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a6c2:	4b88      	ldr	r3, [pc, #544]	; (800a8e4 <HAL_SAI_Init+0x298>)
 800a6c4:	61bb      	str	r3, [r7, #24]
 800a6c6:	e01b      	b.n	800a700 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a86      	ldr	r2, [pc, #536]	; (800a8e8 <HAL_SAI_Init+0x29c>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d004      	beq.n	800a6dc <HAL_SAI_Init+0x90>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a85      	ldr	r2, [pc, #532]	; (800a8ec <HAL_SAI_Init+0x2a0>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d102      	bne.n	800a6e2 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a6dc:	4b84      	ldr	r3, [pc, #528]	; (800a8f0 <HAL_SAI_Init+0x2a4>)
 800a6de:	61bb      	str	r3, [r7, #24]
 800a6e0:	e00e      	b.n	800a700 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a7a      	ldr	r2, [pc, #488]	; (800a8d0 <HAL_SAI_Init+0x284>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d004      	beq.n	800a6f6 <HAL_SAI_Init+0xaa>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a80      	ldr	r2, [pc, #512]	; (800a8f4 <HAL_SAI_Init+0x2a8>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d102      	bne.n	800a6fc <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a6f6:	4b80      	ldr	r3, [pc, #512]	; (800a8f8 <HAL_SAI_Init+0x2ac>)
 800a6f8:	61bb      	str	r3, [r7, #24]
 800a6fa:	e001      	b.n	800a700 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e23d      	b.n	800ab7c <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d106      	bne.n	800a71a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7f8 f855 	bl	80027c4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fa40 	bl	800aba0 <SAI_Disable>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e228      	b.n	800ab7c <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2202      	movs	r2, #2
 800a72e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	2b02      	cmp	r3, #2
 800a738:	d00c      	beq.n	800a754 <HAL_SAI_Init+0x108>
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d80d      	bhi.n	800a75a <HAL_SAI_Init+0x10e>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d002      	beq.n	800a748 <HAL_SAI_Init+0xfc>
 800a742:	2b01      	cmp	r3, #1
 800a744:	d003      	beq.n	800a74e <HAL_SAI_Init+0x102>
 800a746:	e008      	b.n	800a75a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a74c:	e008      	b.n	800a760 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a74e:	2310      	movs	r3, #16
 800a750:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a752:	e005      	b.n	800a760 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a754:	2320      	movs	r3, #32
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a758:	e002      	b.n	800a760 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a75e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	2b05      	cmp	r3, #5
 800a766:	d832      	bhi.n	800a7ce <HAL_SAI_Init+0x182>
 800a768:	a201      	add	r2, pc, #4	; (adr r2, 800a770 <HAL_SAI_Init+0x124>)
 800a76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76e:	bf00      	nop
 800a770:	0800a789 	.word	0x0800a789
 800a774:	0800a78f 	.word	0x0800a78f
 800a778:	0800a797 	.word	0x0800a797
 800a77c:	0800a79f 	.word	0x0800a79f
 800a780:	0800a7af 	.word	0x0800a7af
 800a784:	0800a7bf 	.word	0x0800a7bf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	61fb      	str	r3, [r7, #28]
      break;
 800a78c:	e022      	b.n	800a7d4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a78e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a792:	61fb      	str	r3, [r7, #28]
      break;
 800a794:	e01e      	b.n	800a7d4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a79a:	61fb      	str	r3, [r7, #28]
      break;
 800a79c:	e01a      	b.n	800a7d4 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a79e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7a2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	f043 0301 	orr.w	r3, r3, #1
 800a7aa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a7ac:	e012      	b.n	800a7d4 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a7ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7b2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b6:	f043 0302 	orr.w	r3, r3, #2
 800a7ba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a7bc:	e00a      	b.n	800a7d4 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a7be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7c2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c6:	f043 0303 	orr.w	r3, r3, #3
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a7cc:	e002      	b.n	800a7d4 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	61fb      	str	r3, [r7, #28]
      break;
 800a7d2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7d8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f000 80c5 	beq.w	800a96e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a37      	ldr	r2, [pc, #220]	; (800a8cc <HAL_SAI_Init+0x280>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d004      	beq.n	800a7fc <HAL_SAI_Init+0x1b0>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a37      	ldr	r2, [pc, #220]	; (800a8d4 <HAL_SAI_Init+0x288>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d106      	bne.n	800a80a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a7fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a800:	f04f 0100 	mov.w	r1, #0
 800a804:	f7fe fb16 	bl	8008e34 <HAL_RCCEx_GetPeriphCLKFreq>
 800a808:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a33      	ldr	r2, [pc, #204]	; (800a8dc <HAL_SAI_Init+0x290>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d004      	beq.n	800a81e <HAL_SAI_Init+0x1d2>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a31      	ldr	r2, [pc, #196]	; (800a8e0 <HAL_SAI_Init+0x294>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d106      	bne.n	800a82c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a81e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a822:	f04f 0100 	mov.w	r1, #0
 800a826:	f7fe fb05 	bl	8008e34 <HAL_RCCEx_GetPeriphCLKFreq>
 800a82a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a2d      	ldr	r2, [pc, #180]	; (800a8e8 <HAL_SAI_Init+0x29c>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d004      	beq.n	800a840 <HAL_SAI_Init+0x1f4>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a2c      	ldr	r2, [pc, #176]	; (800a8ec <HAL_SAI_Init+0x2a0>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d106      	bne.n	800a84e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a840:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a844:	f04f 0100 	mov.w	r1, #0
 800a848:	f7fe faf4 	bl	8008e34 <HAL_RCCEx_GetPeriphCLKFreq>
 800a84c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a1f      	ldr	r2, [pc, #124]	; (800a8d0 <HAL_SAI_Init+0x284>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d106      	bne.n	800a866 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a858:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a85c:	f04f 0100 	mov.w	r1, #0
 800a860:	f7fe fae8 	bl	8008e34 <HAL_RCCEx_GetPeriphCLKFreq>
 800a864:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a22      	ldr	r2, [pc, #136]	; (800a8f4 <HAL_SAI_Init+0x2a8>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d106      	bne.n	800a87e <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a870:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a874:	f04f 0100 	mov.w	r1, #0
 800a878:	f7fe fadc 	bl	8008e34 <HAL_RCCEx_GetPeriphCLKFreq>
 800a87c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a886:	d139      	bne.n	800a8fc <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a88c:	2b04      	cmp	r3, #4
 800a88e:	d102      	bne.n	800a896 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a890:	2340      	movs	r3, #64	; 0x40
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e00a      	b.n	800a8ac <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a89a:	2b08      	cmp	r3, #8
 800a89c:	d103      	bne.n	800a8a6 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a89e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	e002      	b.n	800a8ac <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8aa:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	005b      	lsls	r3, r3, #1
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a1b      	ldr	r3, [r3, #32]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	fb02 f303 	mul.w	r3, r2, r3
 800a8c2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a8c6:	613b      	str	r3, [r7, #16]
 800a8c8:	e030      	b.n	800a92c <HAL_SAI_Init+0x2e0>
 800a8ca:	bf00      	nop
 800a8cc:	40015804 	.word	0x40015804
 800a8d0:	58005404 	.word	0x58005404
 800a8d4:	40015824 	.word	0x40015824
 800a8d8:	40015800 	.word	0x40015800
 800a8dc:	40015c04 	.word	0x40015c04
 800a8e0:	40015c24 	.word	0x40015c24
 800a8e4:	40015c00 	.word	0x40015c00
 800a8e8:	40016004 	.word	0x40016004
 800a8ec:	40016024 	.word	0x40016024
 800a8f0:	40016000 	.word	0x40016000
 800a8f4:	58005424 	.word	0x58005424
 800a8f8:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a904:	d101      	bne.n	800a90a <HAL_SAI_Init+0x2be>
 800a906:	2302      	movs	r3, #2
 800a908:	e000      	b.n	800a90c <HAL_SAI_Init+0x2c0>
 800a90a:	2301      	movs	r3, #1
 800a90c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	005b      	lsls	r3, r3, #1
 800a918:	4619      	mov	r1, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	fb02 f303 	mul.w	r3, r2, r3
 800a924:	021b      	lsls	r3, r3, #8
 800a926:	fbb1 f3f3 	udiv	r3, r1, r3
 800a92a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	4a95      	ldr	r2, [pc, #596]	; (800ab84 <HAL_SAI_Init+0x538>)
 800a930:	fba2 2303 	umull	r2, r3, r2, r3
 800a934:	08da      	lsrs	r2, r3, #3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a93a:	6939      	ldr	r1, [r7, #16]
 800a93c:	4b91      	ldr	r3, [pc, #580]	; (800ab84 <HAL_SAI_Init+0x538>)
 800a93e:	fba3 2301 	umull	r2, r3, r3, r1
 800a942:	08da      	lsrs	r2, r3, #3
 800a944:	4613      	mov	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	005b      	lsls	r3, r3, #1
 800a94c:	1aca      	subs	r2, r1, r3
 800a94e:	2a08      	cmp	r2, #8
 800a950:	d904      	bls.n	800a95c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	1c5a      	adds	r2, r3, #1
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a960:	2b04      	cmp	r3, #4
 800a962:	d104      	bne.n	800a96e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	085a      	lsrs	r2, r3, #1
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <HAL_SAI_Init+0x332>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d109      	bne.n	800a992 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a982:	2b01      	cmp	r3, #1
 800a984:	d101      	bne.n	800a98a <HAL_SAI_Init+0x33e>
 800a986:	2300      	movs	r3, #0
 800a988:	e001      	b.n	800a98e <HAL_SAI_Init+0x342>
 800a98a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a98e:	623b      	str	r3, [r7, #32]
 800a990:	e008      	b.n	800a9a4 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a996:	2b01      	cmp	r3, #1
 800a998:	d102      	bne.n	800a9a0 <HAL_SAI_Init+0x354>
 800a99a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a99e:	e000      	b.n	800a9a2 <HAL_SAI_Init+0x356>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a9a4:	f7f8 f93e 	bl	8002c24 <HAL_GetREVID>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9ae:	d331      	bcc.n	800aa14 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6819      	ldr	r1, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	4b73      	ldr	r3, [pc, #460]	; (800ab88 <HAL_SAI_Init+0x53c>)
 800a9bc:	400b      	ands	r3, r1
 800a9be:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6819      	ldr	r1, [r3, #0]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685a      	ldr	r2, [r3, #4]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ce:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a9d4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9da:	431a      	orrs	r2, r3
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a9e8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a9f4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fa:	051b      	lsls	r3, r3, #20
 800a9fc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa02:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	601a      	str	r2, [r3, #0]
 800aa12:	e02d      	b.n	800aa70 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6819      	ldr	r1, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	4b5b      	ldr	r3, [pc, #364]	; (800ab8c <HAL_SAI_Init+0x540>)
 800aa20:	400b      	ands	r3, r1
 800aa22:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6819      	ldr	r1, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa32:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa38:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa3e:	431a      	orrs	r2, r3
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800aa4c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa58:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	051b      	lsls	r3, r3, #20
 800aa60:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa66:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	430a      	orrs	r2, r1
 800aa6e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	6859      	ldr	r1, [r3, #4]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	4b45      	ldr	r3, [pc, #276]	; (800ab90 <HAL_SAI_Init+0x544>)
 800aa7c:	400b      	ands	r3, r1
 800aa7e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6859      	ldr	r1, [r3, #4]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	69da      	ldr	r2, [r3, #28]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8e:	431a      	orrs	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa94:	431a      	orrs	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	430a      	orrs	r2, r1
 800aa9c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	6899      	ldr	r1, [r3, #8]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	4b3a      	ldr	r3, [pc, #232]	; (800ab94 <HAL_SAI_Init+0x548>)
 800aaaa:	400b      	ands	r3, r1
 800aaac:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	6899      	ldr	r1, [r3, #8]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aabe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800aac4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800aaca:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad0:	3b01      	subs	r3, #1
 800aad2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800aad4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	430a      	orrs	r2, r1
 800aadc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68d9      	ldr	r1, [r3, #12]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	f24f 0320 	movw	r3, #61472	; 0xf020
 800aaec:	400b      	ands	r3, r1
 800aaee:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68d9      	ldr	r1, [r3, #12]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aafe:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab04:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ab06:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a1e      	ldr	r2, [pc, #120]	; (800ab98 <HAL_SAI_Init+0x54c>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d004      	beq.n	800ab2e <HAL_SAI_Init+0x4e2>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a1c      	ldr	r2, [pc, #112]	; (800ab9c <HAL_SAI_Init+0x550>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d119      	bne.n	800ab62 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab32:	f023 0201 	bic.w	r2, r3, #1
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d10e      	bne.n	800ab62 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ab50:	431a      	orrs	r2, r3
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab5a:	f043 0201 	orr.w	r2, r3, #1
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3728      	adds	r7, #40	; 0x28
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	cccccccd 	.word	0xcccccccd
 800ab88:	f005c010 	.word	0xf005c010
 800ab8c:	f805c010 	.word	0xf805c010
 800ab90:	ffff1ff0 	.word	0xffff1ff0
 800ab94:	fff88000 	.word	0xfff88000
 800ab98:	40015804 	.word	0x40015804
 800ab9c:	58005404 	.word	0x58005404

0800aba0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800aba8:	4b18      	ldr	r3, [pc, #96]	; (800ac0c <SAI_Disable+0x6c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a18      	ldr	r2, [pc, #96]	; (800ac10 <SAI_Disable+0x70>)
 800abae:	fba2 2303 	umull	r2, r3, r2, r3
 800abb2:	0b1b      	lsrs	r3, r3, #12
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800abca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10a      	bne.n	800abe8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800abe2:	2303      	movs	r3, #3
 800abe4:	72fb      	strb	r3, [r7, #11]
      break;
 800abe6:	e009      	b.n	800abfc <SAI_Disable+0x5c>
    }
    count--;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3b01      	subs	r3, #1
 800abec:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e7      	bne.n	800abcc <SAI_Disable+0x2c>

  return status;
 800abfc:	7afb      	ldrb	r3, [r7, #11]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3714      	adds	r7, #20
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	24000000 	.word	0x24000000
 800ac10:	95cbec1b 	.word	0x95cbec1b

0800ac14 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e02b      	b.n	800ac80 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d106      	bne.n	800ac42 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7f7 fdb7 	bl	80027b0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2202      	movs	r2, #2
 800ac46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	3304      	adds	r3, #4
 800ac52:	4619      	mov	r1, r3
 800ac54:	4610      	mov	r0, r2
 800ac56:	f001 fa2f 	bl	800c0b8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6818      	ldr	r0, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	461a      	mov	r2, r3
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	f001 fa83 	bl	800c170 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ac6a:	4b07      	ldr	r3, [pc, #28]	; (800ac88 <HAL_SDRAM_Init+0x74>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a06      	ldr	r2, [pc, #24]	; (800ac88 <HAL_SDRAM_Init+0x74>)
 800ac70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac74:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	52004000 	.word	0x52004000

0800ac8c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e10f      	b.n	800aebe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a87      	ldr	r2, [pc, #540]	; (800aec8 <HAL_SPI_Init+0x23c>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d00f      	beq.n	800acce <HAL_SPI_Init+0x42>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a86      	ldr	r2, [pc, #536]	; (800aecc <HAL_SPI_Init+0x240>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d00a      	beq.n	800acce <HAL_SPI_Init+0x42>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a84      	ldr	r2, [pc, #528]	; (800aed0 <HAL_SPI_Init+0x244>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d005      	beq.n	800acce <HAL_SPI_Init+0x42>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	2b0f      	cmp	r3, #15
 800acc8:	d901      	bls.n	800acce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e0f7      	b.n	800aebe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f900 	bl	800aed4 <SPI_GetPacketSize>
 800acd4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a7b      	ldr	r2, [pc, #492]	; (800aec8 <HAL_SPI_Init+0x23c>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d00c      	beq.n	800acfa <HAL_SPI_Init+0x6e>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a79      	ldr	r2, [pc, #484]	; (800aecc <HAL_SPI_Init+0x240>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d007      	beq.n	800acfa <HAL_SPI_Init+0x6e>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a78      	ldr	r2, [pc, #480]	; (800aed0 <HAL_SPI_Init+0x244>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d002      	beq.n	800acfa <HAL_SPI_Init+0x6e>
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2b08      	cmp	r3, #8
 800acf8:	d811      	bhi.n	800ad1e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800acfe:	4a72      	ldr	r2, [pc, #456]	; (800aec8 <HAL_SPI_Init+0x23c>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d009      	beq.n	800ad18 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a70      	ldr	r2, [pc, #448]	; (800aecc <HAL_SPI_Init+0x240>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d004      	beq.n	800ad18 <HAL_SPI_Init+0x8c>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a6f      	ldr	r2, [pc, #444]	; (800aed0 <HAL_SPI_Init+0x244>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d104      	bne.n	800ad22 <HAL_SPI_Init+0x96>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2b10      	cmp	r3, #16
 800ad1c:	d901      	bls.n	800ad22 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e0cd      	b.n	800aebe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d106      	bne.n	800ad3c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7f7 fa7e 	bl	8002238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2202      	movs	r2, #2
 800ad40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f022 0201 	bic.w	r2, r2, #1
 800ad52:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ad5e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad68:	d119      	bne.n	800ad9e <HAL_SPI_Init+0x112>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad72:	d103      	bne.n	800ad7c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d008      	beq.n	800ad8e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10c      	bne.n	800ad9e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad8c:	d107      	bne.n	800ad9e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00f      	beq.n	800adca <HAL_SPI_Init+0x13e>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	2b06      	cmp	r3, #6
 800adb0:	d90b      	bls.n	800adca <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	430a      	orrs	r2, r1
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	e007      	b.n	800adda <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800add8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	69da      	ldr	r2, [r3, #28]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade2:	431a      	orrs	r2, r3
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	431a      	orrs	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adec:	ea42 0103 	orr.w	r1, r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68da      	ldr	r2, [r3, #12]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	431a      	orrs	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	431a      	orrs	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	431a      	orrs	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	695b      	ldr	r3, [r3, #20]
 800ae1c:	431a      	orrs	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	431a      	orrs	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	431a      	orrs	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	431a      	orrs	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae3a:	ea42 0103 	orr.w	r1, r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d113      	bne.n	800ae7a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae64:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ae78:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f022 0201 	bic.w	r2, r2, #1
 800ae88:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00a      	beq.n	800aeac <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	40013000 	.word	0x40013000
 800aecc:	40003800 	.word	0x40003800
 800aed0:	40003c00 	.word	0x40003c00

0800aed4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aee0:	095b      	lsrs	r3, r3, #5
 800aee2:	3301      	adds	r3, #1
 800aee4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	3301      	adds	r3, #1
 800aeec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	3307      	adds	r3, #7
 800aef2:	08db      	lsrs	r3, r3, #3
 800aef4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	fb02 f303 	mul.w	r3, r2, r3
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b082      	sub	sp, #8
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e042      	b.n	800afa2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af22:	2b00      	cmp	r3, #0
 800af24:	d106      	bne.n	800af34 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7f7 fa4c 	bl	80023cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2224      	movs	r2, #36	; 0x24
 800af38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f022 0201 	bic.w	r2, r2, #1
 800af4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f82d 	bl	800afac <UART_SetConfig>
 800af52:	4603      	mov	r3, r0
 800af54:	2b01      	cmp	r3, #1
 800af56:	d101      	bne.n	800af5c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	e022      	b.n	800afa2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af60:	2b00      	cmp	r3, #0
 800af62:	d002      	beq.n	800af6a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fd89 	bl	800ba7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	685a      	ldr	r2, [r3, #4]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	689a      	ldr	r2, [r3, #8]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f042 0201 	orr.w	r2, r2, #1
 800af98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fe10 	bl	800bbc0 <UART_CheckIdleState>
 800afa0:	4603      	mov	r3, r0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
	...

0800afac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afb0:	b092      	sub	sp, #72	; 0x48
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	689a      	ldr	r2, [r3, #8]
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	431a      	orrs	r2, r3
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	431a      	orrs	r2, r3
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	69db      	ldr	r3, [r3, #28]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	4bbe      	ldr	r3, [pc, #760]	; (800b2d4 <UART_SetConfig+0x328>)
 800afdc:	4013      	ands	r3, r2
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	6812      	ldr	r2, [r2, #0]
 800afe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800afe4:	430b      	orrs	r3, r1
 800afe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	68da      	ldr	r2, [r3, #12]
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	430a      	orrs	r2, r1
 800affc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4ab3      	ldr	r2, [pc, #716]	; (800b2d8 <UART_SetConfig+0x32c>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d004      	beq.n	800b018 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b014:	4313      	orrs	r3, r2
 800b016:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	689a      	ldr	r2, [r3, #8]
 800b01e:	4baf      	ldr	r3, [pc, #700]	; (800b2dc <UART_SetConfig+0x330>)
 800b020:	4013      	ands	r3, r2
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	6812      	ldr	r2, [r2, #0]
 800b026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b028:	430b      	orrs	r3, r1
 800b02a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b032:	f023 010f 	bic.w	r1, r3, #15
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	430a      	orrs	r2, r1
 800b040:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4aa6      	ldr	r2, [pc, #664]	; (800b2e0 <UART_SetConfig+0x334>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d177      	bne.n	800b13c <UART_SetConfig+0x190>
 800b04c:	4ba5      	ldr	r3, [pc, #660]	; (800b2e4 <UART_SetConfig+0x338>)
 800b04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b054:	2b28      	cmp	r3, #40	; 0x28
 800b056:	d86d      	bhi.n	800b134 <UART_SetConfig+0x188>
 800b058:	a201      	add	r2, pc, #4	; (adr r2, 800b060 <UART_SetConfig+0xb4>)
 800b05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05e:	bf00      	nop
 800b060:	0800b105 	.word	0x0800b105
 800b064:	0800b135 	.word	0x0800b135
 800b068:	0800b135 	.word	0x0800b135
 800b06c:	0800b135 	.word	0x0800b135
 800b070:	0800b135 	.word	0x0800b135
 800b074:	0800b135 	.word	0x0800b135
 800b078:	0800b135 	.word	0x0800b135
 800b07c:	0800b135 	.word	0x0800b135
 800b080:	0800b10d 	.word	0x0800b10d
 800b084:	0800b135 	.word	0x0800b135
 800b088:	0800b135 	.word	0x0800b135
 800b08c:	0800b135 	.word	0x0800b135
 800b090:	0800b135 	.word	0x0800b135
 800b094:	0800b135 	.word	0x0800b135
 800b098:	0800b135 	.word	0x0800b135
 800b09c:	0800b135 	.word	0x0800b135
 800b0a0:	0800b115 	.word	0x0800b115
 800b0a4:	0800b135 	.word	0x0800b135
 800b0a8:	0800b135 	.word	0x0800b135
 800b0ac:	0800b135 	.word	0x0800b135
 800b0b0:	0800b135 	.word	0x0800b135
 800b0b4:	0800b135 	.word	0x0800b135
 800b0b8:	0800b135 	.word	0x0800b135
 800b0bc:	0800b135 	.word	0x0800b135
 800b0c0:	0800b11d 	.word	0x0800b11d
 800b0c4:	0800b135 	.word	0x0800b135
 800b0c8:	0800b135 	.word	0x0800b135
 800b0cc:	0800b135 	.word	0x0800b135
 800b0d0:	0800b135 	.word	0x0800b135
 800b0d4:	0800b135 	.word	0x0800b135
 800b0d8:	0800b135 	.word	0x0800b135
 800b0dc:	0800b135 	.word	0x0800b135
 800b0e0:	0800b125 	.word	0x0800b125
 800b0e4:	0800b135 	.word	0x0800b135
 800b0e8:	0800b135 	.word	0x0800b135
 800b0ec:	0800b135 	.word	0x0800b135
 800b0f0:	0800b135 	.word	0x0800b135
 800b0f4:	0800b135 	.word	0x0800b135
 800b0f8:	0800b135 	.word	0x0800b135
 800b0fc:	0800b135 	.word	0x0800b135
 800b100:	0800b12d 	.word	0x0800b12d
 800b104:	2301      	movs	r3, #1
 800b106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b10a:	e222      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b10c:	2304      	movs	r3, #4
 800b10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b112:	e21e      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b114:	2308      	movs	r3, #8
 800b116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b11a:	e21a      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b11c:	2310      	movs	r3, #16
 800b11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b122:	e216      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b124:	2320      	movs	r3, #32
 800b126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b12a:	e212      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b12c:	2340      	movs	r3, #64	; 0x40
 800b12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b132:	e20e      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b134:	2380      	movs	r3, #128	; 0x80
 800b136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b13a:	e20a      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a69      	ldr	r2, [pc, #420]	; (800b2e8 <UART_SetConfig+0x33c>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d130      	bne.n	800b1a8 <UART_SetConfig+0x1fc>
 800b146:	4b67      	ldr	r3, [pc, #412]	; (800b2e4 <UART_SetConfig+0x338>)
 800b148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b14a:	f003 0307 	and.w	r3, r3, #7
 800b14e:	2b05      	cmp	r3, #5
 800b150:	d826      	bhi.n	800b1a0 <UART_SetConfig+0x1f4>
 800b152:	a201      	add	r2, pc, #4	; (adr r2, 800b158 <UART_SetConfig+0x1ac>)
 800b154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b158:	0800b171 	.word	0x0800b171
 800b15c:	0800b179 	.word	0x0800b179
 800b160:	0800b181 	.word	0x0800b181
 800b164:	0800b189 	.word	0x0800b189
 800b168:	0800b191 	.word	0x0800b191
 800b16c:	0800b199 	.word	0x0800b199
 800b170:	2300      	movs	r3, #0
 800b172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b176:	e1ec      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b178:	2304      	movs	r3, #4
 800b17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b17e:	e1e8      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b180:	2308      	movs	r3, #8
 800b182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b186:	e1e4      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b188:	2310      	movs	r3, #16
 800b18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b18e:	e1e0      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b190:	2320      	movs	r3, #32
 800b192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b196:	e1dc      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b198:	2340      	movs	r3, #64	; 0x40
 800b19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b19e:	e1d8      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b1a0:	2380      	movs	r3, #128	; 0x80
 800b1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1a6:	e1d4      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a4f      	ldr	r2, [pc, #316]	; (800b2ec <UART_SetConfig+0x340>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d130      	bne.n	800b214 <UART_SetConfig+0x268>
 800b1b2:	4b4c      	ldr	r3, [pc, #304]	; (800b2e4 <UART_SetConfig+0x338>)
 800b1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b6:	f003 0307 	and.w	r3, r3, #7
 800b1ba:	2b05      	cmp	r3, #5
 800b1bc:	d826      	bhi.n	800b20c <UART_SetConfig+0x260>
 800b1be:	a201      	add	r2, pc, #4	; (adr r2, 800b1c4 <UART_SetConfig+0x218>)
 800b1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c4:	0800b1dd 	.word	0x0800b1dd
 800b1c8:	0800b1e5 	.word	0x0800b1e5
 800b1cc:	0800b1ed 	.word	0x0800b1ed
 800b1d0:	0800b1f5 	.word	0x0800b1f5
 800b1d4:	0800b1fd 	.word	0x0800b1fd
 800b1d8:	0800b205 	.word	0x0800b205
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1e2:	e1b6      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b1e4:	2304      	movs	r3, #4
 800b1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ea:	e1b2      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b1ec:	2308      	movs	r3, #8
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1f2:	e1ae      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b1f4:	2310      	movs	r3, #16
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1fa:	e1aa      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b1fc:	2320      	movs	r3, #32
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b202:	e1a6      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b204:	2340      	movs	r3, #64	; 0x40
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b20a:	e1a2      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b20c:	2380      	movs	r3, #128	; 0x80
 800b20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b212:	e19e      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a35      	ldr	r2, [pc, #212]	; (800b2f0 <UART_SetConfig+0x344>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d130      	bne.n	800b280 <UART_SetConfig+0x2d4>
 800b21e:	4b31      	ldr	r3, [pc, #196]	; (800b2e4 <UART_SetConfig+0x338>)
 800b220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b222:	f003 0307 	and.w	r3, r3, #7
 800b226:	2b05      	cmp	r3, #5
 800b228:	d826      	bhi.n	800b278 <UART_SetConfig+0x2cc>
 800b22a:	a201      	add	r2, pc, #4	; (adr r2, 800b230 <UART_SetConfig+0x284>)
 800b22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b230:	0800b249 	.word	0x0800b249
 800b234:	0800b251 	.word	0x0800b251
 800b238:	0800b259 	.word	0x0800b259
 800b23c:	0800b261 	.word	0x0800b261
 800b240:	0800b269 	.word	0x0800b269
 800b244:	0800b271 	.word	0x0800b271
 800b248:	2300      	movs	r3, #0
 800b24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b24e:	e180      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b250:	2304      	movs	r3, #4
 800b252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b256:	e17c      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b258:	2308      	movs	r3, #8
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b25e:	e178      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b260:	2310      	movs	r3, #16
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b266:	e174      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b268:	2320      	movs	r3, #32
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b26e:	e170      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b270:	2340      	movs	r3, #64	; 0x40
 800b272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b276:	e16c      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b278:	2380      	movs	r3, #128	; 0x80
 800b27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b27e:	e168      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a1b      	ldr	r2, [pc, #108]	; (800b2f4 <UART_SetConfig+0x348>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d142      	bne.n	800b310 <UART_SetConfig+0x364>
 800b28a:	4b16      	ldr	r3, [pc, #88]	; (800b2e4 <UART_SetConfig+0x338>)
 800b28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	2b05      	cmp	r3, #5
 800b294:	d838      	bhi.n	800b308 <UART_SetConfig+0x35c>
 800b296:	a201      	add	r2, pc, #4	; (adr r2, 800b29c <UART_SetConfig+0x2f0>)
 800b298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29c:	0800b2b5 	.word	0x0800b2b5
 800b2a0:	0800b2bd 	.word	0x0800b2bd
 800b2a4:	0800b2c5 	.word	0x0800b2c5
 800b2a8:	0800b2cd 	.word	0x0800b2cd
 800b2ac:	0800b2f9 	.word	0x0800b2f9
 800b2b0:	0800b301 	.word	0x0800b301
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ba:	e14a      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b2bc:	2304      	movs	r3, #4
 800b2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2c2:	e146      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b2c4:	2308      	movs	r3, #8
 800b2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ca:	e142      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b2cc:	2310      	movs	r3, #16
 800b2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d2:	e13e      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b2d4:	cfff69f3 	.word	0xcfff69f3
 800b2d8:	58000c00 	.word	0x58000c00
 800b2dc:	11fff4ff 	.word	0x11fff4ff
 800b2e0:	40011000 	.word	0x40011000
 800b2e4:	58024400 	.word	0x58024400
 800b2e8:	40004400 	.word	0x40004400
 800b2ec:	40004800 	.word	0x40004800
 800b2f0:	40004c00 	.word	0x40004c00
 800b2f4:	40005000 	.word	0x40005000
 800b2f8:	2320      	movs	r3, #32
 800b2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2fe:	e128      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b300:	2340      	movs	r3, #64	; 0x40
 800b302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b306:	e124      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b308:	2380      	movs	r3, #128	; 0x80
 800b30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b30e:	e120      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4acb      	ldr	r2, [pc, #812]	; (800b644 <UART_SetConfig+0x698>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d176      	bne.n	800b408 <UART_SetConfig+0x45c>
 800b31a:	4bcb      	ldr	r3, [pc, #812]	; (800b648 <UART_SetConfig+0x69c>)
 800b31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b322:	2b28      	cmp	r3, #40	; 0x28
 800b324:	d86c      	bhi.n	800b400 <UART_SetConfig+0x454>
 800b326:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <UART_SetConfig+0x380>)
 800b328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32c:	0800b3d1 	.word	0x0800b3d1
 800b330:	0800b401 	.word	0x0800b401
 800b334:	0800b401 	.word	0x0800b401
 800b338:	0800b401 	.word	0x0800b401
 800b33c:	0800b401 	.word	0x0800b401
 800b340:	0800b401 	.word	0x0800b401
 800b344:	0800b401 	.word	0x0800b401
 800b348:	0800b401 	.word	0x0800b401
 800b34c:	0800b3d9 	.word	0x0800b3d9
 800b350:	0800b401 	.word	0x0800b401
 800b354:	0800b401 	.word	0x0800b401
 800b358:	0800b401 	.word	0x0800b401
 800b35c:	0800b401 	.word	0x0800b401
 800b360:	0800b401 	.word	0x0800b401
 800b364:	0800b401 	.word	0x0800b401
 800b368:	0800b401 	.word	0x0800b401
 800b36c:	0800b3e1 	.word	0x0800b3e1
 800b370:	0800b401 	.word	0x0800b401
 800b374:	0800b401 	.word	0x0800b401
 800b378:	0800b401 	.word	0x0800b401
 800b37c:	0800b401 	.word	0x0800b401
 800b380:	0800b401 	.word	0x0800b401
 800b384:	0800b401 	.word	0x0800b401
 800b388:	0800b401 	.word	0x0800b401
 800b38c:	0800b3e9 	.word	0x0800b3e9
 800b390:	0800b401 	.word	0x0800b401
 800b394:	0800b401 	.word	0x0800b401
 800b398:	0800b401 	.word	0x0800b401
 800b39c:	0800b401 	.word	0x0800b401
 800b3a0:	0800b401 	.word	0x0800b401
 800b3a4:	0800b401 	.word	0x0800b401
 800b3a8:	0800b401 	.word	0x0800b401
 800b3ac:	0800b3f1 	.word	0x0800b3f1
 800b3b0:	0800b401 	.word	0x0800b401
 800b3b4:	0800b401 	.word	0x0800b401
 800b3b8:	0800b401 	.word	0x0800b401
 800b3bc:	0800b401 	.word	0x0800b401
 800b3c0:	0800b401 	.word	0x0800b401
 800b3c4:	0800b401 	.word	0x0800b401
 800b3c8:	0800b401 	.word	0x0800b401
 800b3cc:	0800b3f9 	.word	0x0800b3f9
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d6:	e0bc      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b3d8:	2304      	movs	r3, #4
 800b3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3de:	e0b8      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b3e0:	2308      	movs	r3, #8
 800b3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3e6:	e0b4      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b3e8:	2310      	movs	r3, #16
 800b3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ee:	e0b0      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b3f0:	2320      	movs	r3, #32
 800b3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3f6:	e0ac      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b3f8:	2340      	movs	r3, #64	; 0x40
 800b3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3fe:	e0a8      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b400:	2380      	movs	r3, #128	; 0x80
 800b402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b406:	e0a4      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a8f      	ldr	r2, [pc, #572]	; (800b64c <UART_SetConfig+0x6a0>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d130      	bne.n	800b474 <UART_SetConfig+0x4c8>
 800b412:	4b8d      	ldr	r3, [pc, #564]	; (800b648 <UART_SetConfig+0x69c>)
 800b414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b416:	f003 0307 	and.w	r3, r3, #7
 800b41a:	2b05      	cmp	r3, #5
 800b41c:	d826      	bhi.n	800b46c <UART_SetConfig+0x4c0>
 800b41e:	a201      	add	r2, pc, #4	; (adr r2, 800b424 <UART_SetConfig+0x478>)
 800b420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b424:	0800b43d 	.word	0x0800b43d
 800b428:	0800b445 	.word	0x0800b445
 800b42c:	0800b44d 	.word	0x0800b44d
 800b430:	0800b455 	.word	0x0800b455
 800b434:	0800b45d 	.word	0x0800b45d
 800b438:	0800b465 	.word	0x0800b465
 800b43c:	2300      	movs	r3, #0
 800b43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b442:	e086      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b444:	2304      	movs	r3, #4
 800b446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b44a:	e082      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b44c:	2308      	movs	r3, #8
 800b44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b452:	e07e      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b454:	2310      	movs	r3, #16
 800b456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b45a:	e07a      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b45c:	2320      	movs	r3, #32
 800b45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b462:	e076      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b464:	2340      	movs	r3, #64	; 0x40
 800b466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b46a:	e072      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b46c:	2380      	movs	r3, #128	; 0x80
 800b46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b472:	e06e      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a75      	ldr	r2, [pc, #468]	; (800b650 <UART_SetConfig+0x6a4>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d130      	bne.n	800b4e0 <UART_SetConfig+0x534>
 800b47e:	4b72      	ldr	r3, [pc, #456]	; (800b648 <UART_SetConfig+0x69c>)
 800b480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b482:	f003 0307 	and.w	r3, r3, #7
 800b486:	2b05      	cmp	r3, #5
 800b488:	d826      	bhi.n	800b4d8 <UART_SetConfig+0x52c>
 800b48a:	a201      	add	r2, pc, #4	; (adr r2, 800b490 <UART_SetConfig+0x4e4>)
 800b48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b490:	0800b4a9 	.word	0x0800b4a9
 800b494:	0800b4b1 	.word	0x0800b4b1
 800b498:	0800b4b9 	.word	0x0800b4b9
 800b49c:	0800b4c1 	.word	0x0800b4c1
 800b4a0:	0800b4c9 	.word	0x0800b4c9
 800b4a4:	0800b4d1 	.word	0x0800b4d1
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ae:	e050      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b4b0:	2304      	movs	r3, #4
 800b4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4b6:	e04c      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b4b8:	2308      	movs	r3, #8
 800b4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4be:	e048      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b4c0:	2310      	movs	r3, #16
 800b4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c6:	e044      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b4c8:	2320      	movs	r3, #32
 800b4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ce:	e040      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b4d0:	2340      	movs	r3, #64	; 0x40
 800b4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4d6:	e03c      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b4d8:	2380      	movs	r3, #128	; 0x80
 800b4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4de:	e038      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a5b      	ldr	r2, [pc, #364]	; (800b654 <UART_SetConfig+0x6a8>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d130      	bne.n	800b54c <UART_SetConfig+0x5a0>
 800b4ea:	4b57      	ldr	r3, [pc, #348]	; (800b648 <UART_SetConfig+0x69c>)
 800b4ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ee:	f003 0307 	and.w	r3, r3, #7
 800b4f2:	2b05      	cmp	r3, #5
 800b4f4:	d826      	bhi.n	800b544 <UART_SetConfig+0x598>
 800b4f6:	a201      	add	r2, pc, #4	; (adr r2, 800b4fc <UART_SetConfig+0x550>)
 800b4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fc:	0800b515 	.word	0x0800b515
 800b500:	0800b51d 	.word	0x0800b51d
 800b504:	0800b525 	.word	0x0800b525
 800b508:	0800b52d 	.word	0x0800b52d
 800b50c:	0800b535 	.word	0x0800b535
 800b510:	0800b53d 	.word	0x0800b53d
 800b514:	2302      	movs	r3, #2
 800b516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b51a:	e01a      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b51c:	2304      	movs	r3, #4
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b522:	e016      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b524:	2308      	movs	r3, #8
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b52a:	e012      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b52c:	2310      	movs	r3, #16
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b532:	e00e      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b534:	2320      	movs	r3, #32
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53a:	e00a      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b53c:	2340      	movs	r3, #64	; 0x40
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b542:	e006      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b544:	2380      	movs	r3, #128	; 0x80
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b54a:	e002      	b.n	800b552 <UART_SetConfig+0x5a6>
 800b54c:	2380      	movs	r3, #128	; 0x80
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a3f      	ldr	r2, [pc, #252]	; (800b654 <UART_SetConfig+0x6a8>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	f040 80f8 	bne.w	800b74e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b55e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b562:	2b20      	cmp	r3, #32
 800b564:	dc46      	bgt.n	800b5f4 <UART_SetConfig+0x648>
 800b566:	2b02      	cmp	r3, #2
 800b568:	f2c0 8082 	blt.w	800b670 <UART_SetConfig+0x6c4>
 800b56c:	3b02      	subs	r3, #2
 800b56e:	2b1e      	cmp	r3, #30
 800b570:	d87e      	bhi.n	800b670 <UART_SetConfig+0x6c4>
 800b572:	a201      	add	r2, pc, #4	; (adr r2, 800b578 <UART_SetConfig+0x5cc>)
 800b574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b578:	0800b5fb 	.word	0x0800b5fb
 800b57c:	0800b671 	.word	0x0800b671
 800b580:	0800b603 	.word	0x0800b603
 800b584:	0800b671 	.word	0x0800b671
 800b588:	0800b671 	.word	0x0800b671
 800b58c:	0800b671 	.word	0x0800b671
 800b590:	0800b613 	.word	0x0800b613
 800b594:	0800b671 	.word	0x0800b671
 800b598:	0800b671 	.word	0x0800b671
 800b59c:	0800b671 	.word	0x0800b671
 800b5a0:	0800b671 	.word	0x0800b671
 800b5a4:	0800b671 	.word	0x0800b671
 800b5a8:	0800b671 	.word	0x0800b671
 800b5ac:	0800b671 	.word	0x0800b671
 800b5b0:	0800b623 	.word	0x0800b623
 800b5b4:	0800b671 	.word	0x0800b671
 800b5b8:	0800b671 	.word	0x0800b671
 800b5bc:	0800b671 	.word	0x0800b671
 800b5c0:	0800b671 	.word	0x0800b671
 800b5c4:	0800b671 	.word	0x0800b671
 800b5c8:	0800b671 	.word	0x0800b671
 800b5cc:	0800b671 	.word	0x0800b671
 800b5d0:	0800b671 	.word	0x0800b671
 800b5d4:	0800b671 	.word	0x0800b671
 800b5d8:	0800b671 	.word	0x0800b671
 800b5dc:	0800b671 	.word	0x0800b671
 800b5e0:	0800b671 	.word	0x0800b671
 800b5e4:	0800b671 	.word	0x0800b671
 800b5e8:	0800b671 	.word	0x0800b671
 800b5ec:	0800b671 	.word	0x0800b671
 800b5f0:	0800b663 	.word	0x0800b663
 800b5f4:	2b40      	cmp	r3, #64	; 0x40
 800b5f6:	d037      	beq.n	800b668 <UART_SetConfig+0x6bc>
 800b5f8:	e03a      	b.n	800b670 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b5fa:	f7fe f99b 	bl	8009934 <HAL_RCCEx_GetD3PCLK1Freq>
 800b5fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b600:	e03c      	b.n	800b67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe f9aa 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b610:	e034      	b.n	800b67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b612:	f107 0318 	add.w	r3, r7, #24
 800b616:	4618      	mov	r0, r3
 800b618:	f7fe faf6 	bl	8009c08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b620:	e02c      	b.n	800b67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b622:	4b09      	ldr	r3, [pc, #36]	; (800b648 <UART_SetConfig+0x69c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 0320 	and.w	r3, r3, #32
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d016      	beq.n	800b65c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b62e:	4b06      	ldr	r3, [pc, #24]	; (800b648 <UART_SetConfig+0x69c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	08db      	lsrs	r3, r3, #3
 800b634:	f003 0303 	and.w	r3, r3, #3
 800b638:	4a07      	ldr	r2, [pc, #28]	; (800b658 <UART_SetConfig+0x6ac>)
 800b63a:	fa22 f303 	lsr.w	r3, r2, r3
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b640:	e01c      	b.n	800b67c <UART_SetConfig+0x6d0>
 800b642:	bf00      	nop
 800b644:	40011400 	.word	0x40011400
 800b648:	58024400 	.word	0x58024400
 800b64c:	40007800 	.word	0x40007800
 800b650:	40007c00 	.word	0x40007c00
 800b654:	58000c00 	.word	0x58000c00
 800b658:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b65c:	4b9d      	ldr	r3, [pc, #628]	; (800b8d4 <UART_SetConfig+0x928>)
 800b65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b660:	e00c      	b.n	800b67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b662:	4b9d      	ldr	r3, [pc, #628]	; (800b8d8 <UART_SetConfig+0x92c>)
 800b664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b666:	e009      	b.n	800b67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b66c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b66e:	e005      	b.n	800b67c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b670:	2300      	movs	r3, #0
 800b672:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b67a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b67e:	2b00      	cmp	r3, #0
 800b680:	f000 81de 	beq.w	800ba40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	4a94      	ldr	r2, [pc, #592]	; (800b8dc <UART_SetConfig+0x930>)
 800b68a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b68e:	461a      	mov	r2, r3
 800b690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b692:	fbb3 f3f2 	udiv	r3, r3, r2
 800b696:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	4613      	mov	r3, r2
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	4413      	add	r3, r2
 800b6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d305      	bcc.n	800b6b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d903      	bls.n	800b6bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b6ba:	e1c1      	b.n	800ba40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6be:	2200      	movs	r2, #0
 800b6c0:	60bb      	str	r3, [r7, #8]
 800b6c2:	60fa      	str	r2, [r7, #12]
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	4a84      	ldr	r2, [pc, #528]	; (800b8dc <UART_SetConfig+0x930>)
 800b6ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	603b      	str	r3, [r7, #0]
 800b6d4:	607a      	str	r2, [r7, #4]
 800b6d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6de:	f7f4 fdff 	bl	80002e0 <__aeabi_uldivmod>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	f04f 0200 	mov.w	r2, #0
 800b6ee:	f04f 0300 	mov.w	r3, #0
 800b6f2:	020b      	lsls	r3, r1, #8
 800b6f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6f8:	0202      	lsls	r2, r0, #8
 800b6fa:	6979      	ldr	r1, [r7, #20]
 800b6fc:	6849      	ldr	r1, [r1, #4]
 800b6fe:	0849      	lsrs	r1, r1, #1
 800b700:	2000      	movs	r0, #0
 800b702:	460c      	mov	r4, r1
 800b704:	4605      	mov	r5, r0
 800b706:	eb12 0804 	adds.w	r8, r2, r4
 800b70a:	eb43 0905 	adc.w	r9, r3, r5
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	469a      	mov	sl, r3
 800b716:	4693      	mov	fp, r2
 800b718:	4652      	mov	r2, sl
 800b71a:	465b      	mov	r3, fp
 800b71c:	4640      	mov	r0, r8
 800b71e:	4649      	mov	r1, r9
 800b720:	f7f4 fdde 	bl	80002e0 <__aeabi_uldivmod>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	4613      	mov	r3, r2
 800b72a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b732:	d308      	bcc.n	800b746 <UART_SetConfig+0x79a>
 800b734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b73a:	d204      	bcs.n	800b746 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b742:	60da      	str	r2, [r3, #12]
 800b744:	e17c      	b.n	800ba40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b74c:	e178      	b.n	800ba40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	69db      	ldr	r3, [r3, #28]
 800b752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b756:	f040 80c5 	bne.w	800b8e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b75a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b75e:	2b20      	cmp	r3, #32
 800b760:	dc48      	bgt.n	800b7f4 <UART_SetConfig+0x848>
 800b762:	2b00      	cmp	r3, #0
 800b764:	db7b      	blt.n	800b85e <UART_SetConfig+0x8b2>
 800b766:	2b20      	cmp	r3, #32
 800b768:	d879      	bhi.n	800b85e <UART_SetConfig+0x8b2>
 800b76a:	a201      	add	r2, pc, #4	; (adr r2, 800b770 <UART_SetConfig+0x7c4>)
 800b76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b770:	0800b7fb 	.word	0x0800b7fb
 800b774:	0800b803 	.word	0x0800b803
 800b778:	0800b85f 	.word	0x0800b85f
 800b77c:	0800b85f 	.word	0x0800b85f
 800b780:	0800b80b 	.word	0x0800b80b
 800b784:	0800b85f 	.word	0x0800b85f
 800b788:	0800b85f 	.word	0x0800b85f
 800b78c:	0800b85f 	.word	0x0800b85f
 800b790:	0800b81b 	.word	0x0800b81b
 800b794:	0800b85f 	.word	0x0800b85f
 800b798:	0800b85f 	.word	0x0800b85f
 800b79c:	0800b85f 	.word	0x0800b85f
 800b7a0:	0800b85f 	.word	0x0800b85f
 800b7a4:	0800b85f 	.word	0x0800b85f
 800b7a8:	0800b85f 	.word	0x0800b85f
 800b7ac:	0800b85f 	.word	0x0800b85f
 800b7b0:	0800b82b 	.word	0x0800b82b
 800b7b4:	0800b85f 	.word	0x0800b85f
 800b7b8:	0800b85f 	.word	0x0800b85f
 800b7bc:	0800b85f 	.word	0x0800b85f
 800b7c0:	0800b85f 	.word	0x0800b85f
 800b7c4:	0800b85f 	.word	0x0800b85f
 800b7c8:	0800b85f 	.word	0x0800b85f
 800b7cc:	0800b85f 	.word	0x0800b85f
 800b7d0:	0800b85f 	.word	0x0800b85f
 800b7d4:	0800b85f 	.word	0x0800b85f
 800b7d8:	0800b85f 	.word	0x0800b85f
 800b7dc:	0800b85f 	.word	0x0800b85f
 800b7e0:	0800b85f 	.word	0x0800b85f
 800b7e4:	0800b85f 	.word	0x0800b85f
 800b7e8:	0800b85f 	.word	0x0800b85f
 800b7ec:	0800b85f 	.word	0x0800b85f
 800b7f0:	0800b851 	.word	0x0800b851
 800b7f4:	2b40      	cmp	r3, #64	; 0x40
 800b7f6:	d02e      	beq.n	800b856 <UART_SetConfig+0x8aa>
 800b7f8:	e031      	b.n	800b85e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7fa:	f7fc f8e5 	bl	80079c8 <HAL_RCC_GetPCLK1Freq>
 800b7fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b800:	e033      	b.n	800b86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b802:	f7fc f8f7 	bl	80079f4 <HAL_RCC_GetPCLK2Freq>
 800b806:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b808:	e02f      	b.n	800b86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b80a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe f8a6 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b818:	e027      	b.n	800b86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b81a:	f107 0318 	add.w	r3, r7, #24
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fe f9f2 	bl	8009c08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b828:	e01f      	b.n	800b86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b82a:	4b2d      	ldr	r3, [pc, #180]	; (800b8e0 <UART_SetConfig+0x934>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0320 	and.w	r3, r3, #32
 800b832:	2b00      	cmp	r3, #0
 800b834:	d009      	beq.n	800b84a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b836:	4b2a      	ldr	r3, [pc, #168]	; (800b8e0 <UART_SetConfig+0x934>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	08db      	lsrs	r3, r3, #3
 800b83c:	f003 0303 	and.w	r3, r3, #3
 800b840:	4a24      	ldr	r2, [pc, #144]	; (800b8d4 <UART_SetConfig+0x928>)
 800b842:	fa22 f303 	lsr.w	r3, r2, r3
 800b846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b848:	e00f      	b.n	800b86a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b84a:	4b22      	ldr	r3, [pc, #136]	; (800b8d4 <UART_SetConfig+0x928>)
 800b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b84e:	e00c      	b.n	800b86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b850:	4b21      	ldr	r3, [pc, #132]	; (800b8d8 <UART_SetConfig+0x92c>)
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b854:	e009      	b.n	800b86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b85c:	e005      	b.n	800b86a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b85e:	2300      	movs	r3, #0
 800b860:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 80e7 	beq.w	800ba40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b876:	4a19      	ldr	r2, [pc, #100]	; (800b8dc <UART_SetConfig+0x930>)
 800b878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b87c:	461a      	mov	r2, r3
 800b87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b880:	fbb3 f3f2 	udiv	r3, r3, r2
 800b884:	005a      	lsls	r2, r3, #1
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	085b      	lsrs	r3, r3, #1
 800b88c:	441a      	add	r2, r3
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	fbb2 f3f3 	udiv	r3, r2, r3
 800b896:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89a:	2b0f      	cmp	r3, #15
 800b89c:	d916      	bls.n	800b8cc <UART_SetConfig+0x920>
 800b89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8a4:	d212      	bcs.n	800b8cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	f023 030f 	bic.w	r3, r3, #15
 800b8ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b2:	085b      	lsrs	r3, r3, #1
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	f003 0307 	and.w	r3, r3, #7
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b8c8:	60da      	str	r2, [r3, #12]
 800b8ca:	e0b9      	b.n	800ba40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b8d2:	e0b5      	b.n	800ba40 <UART_SetConfig+0xa94>
 800b8d4:	03d09000 	.word	0x03d09000
 800b8d8:	003d0900 	.word	0x003d0900
 800b8dc:	0800e5d4 	.word	0x0800e5d4
 800b8e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b8e8:	2b20      	cmp	r3, #32
 800b8ea:	dc49      	bgt.n	800b980 <UART_SetConfig+0x9d4>
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	db7c      	blt.n	800b9ea <UART_SetConfig+0xa3e>
 800b8f0:	2b20      	cmp	r3, #32
 800b8f2:	d87a      	bhi.n	800b9ea <UART_SetConfig+0xa3e>
 800b8f4:	a201      	add	r2, pc, #4	; (adr r2, 800b8fc <UART_SetConfig+0x950>)
 800b8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fa:	bf00      	nop
 800b8fc:	0800b987 	.word	0x0800b987
 800b900:	0800b98f 	.word	0x0800b98f
 800b904:	0800b9eb 	.word	0x0800b9eb
 800b908:	0800b9eb 	.word	0x0800b9eb
 800b90c:	0800b997 	.word	0x0800b997
 800b910:	0800b9eb 	.word	0x0800b9eb
 800b914:	0800b9eb 	.word	0x0800b9eb
 800b918:	0800b9eb 	.word	0x0800b9eb
 800b91c:	0800b9a7 	.word	0x0800b9a7
 800b920:	0800b9eb 	.word	0x0800b9eb
 800b924:	0800b9eb 	.word	0x0800b9eb
 800b928:	0800b9eb 	.word	0x0800b9eb
 800b92c:	0800b9eb 	.word	0x0800b9eb
 800b930:	0800b9eb 	.word	0x0800b9eb
 800b934:	0800b9eb 	.word	0x0800b9eb
 800b938:	0800b9eb 	.word	0x0800b9eb
 800b93c:	0800b9b7 	.word	0x0800b9b7
 800b940:	0800b9eb 	.word	0x0800b9eb
 800b944:	0800b9eb 	.word	0x0800b9eb
 800b948:	0800b9eb 	.word	0x0800b9eb
 800b94c:	0800b9eb 	.word	0x0800b9eb
 800b950:	0800b9eb 	.word	0x0800b9eb
 800b954:	0800b9eb 	.word	0x0800b9eb
 800b958:	0800b9eb 	.word	0x0800b9eb
 800b95c:	0800b9eb 	.word	0x0800b9eb
 800b960:	0800b9eb 	.word	0x0800b9eb
 800b964:	0800b9eb 	.word	0x0800b9eb
 800b968:	0800b9eb 	.word	0x0800b9eb
 800b96c:	0800b9eb 	.word	0x0800b9eb
 800b970:	0800b9eb 	.word	0x0800b9eb
 800b974:	0800b9eb 	.word	0x0800b9eb
 800b978:	0800b9eb 	.word	0x0800b9eb
 800b97c:	0800b9dd 	.word	0x0800b9dd
 800b980:	2b40      	cmp	r3, #64	; 0x40
 800b982:	d02e      	beq.n	800b9e2 <UART_SetConfig+0xa36>
 800b984:	e031      	b.n	800b9ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b986:	f7fc f81f 	bl	80079c8 <HAL_RCC_GetPCLK1Freq>
 800b98a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b98c:	e033      	b.n	800b9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b98e:	f7fc f831 	bl	80079f4 <HAL_RCC_GetPCLK2Freq>
 800b992:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b994:	e02f      	b.n	800b9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fd ffe0 	bl	8009960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9a4:	e027      	b.n	800b9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9a6:	f107 0318 	add.w	r3, r7, #24
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe f92c 	bl	8009c08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9b4:	e01f      	b.n	800b9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9b6:	4b2d      	ldr	r3, [pc, #180]	; (800ba6c <UART_SetConfig+0xac0>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 0320 	and.w	r3, r3, #32
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d009      	beq.n	800b9d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b9c2:	4b2a      	ldr	r3, [pc, #168]	; (800ba6c <UART_SetConfig+0xac0>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	08db      	lsrs	r3, r3, #3
 800b9c8:	f003 0303 	and.w	r3, r3, #3
 800b9cc:	4a28      	ldr	r2, [pc, #160]	; (800ba70 <UART_SetConfig+0xac4>)
 800b9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b9d4:	e00f      	b.n	800b9f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b9d6:	4b26      	ldr	r3, [pc, #152]	; (800ba70 <UART_SetConfig+0xac4>)
 800b9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9da:	e00c      	b.n	800b9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b9dc:	4b25      	ldr	r3, [pc, #148]	; (800ba74 <UART_SetConfig+0xac8>)
 800b9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9e0:	e009      	b.n	800b9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9e8:	e005      	b.n	800b9f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b9f4:	bf00      	nop
    }

    if (pclk != 0U)
 800b9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d021      	beq.n	800ba40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba00:	4a1d      	ldr	r2, [pc, #116]	; (800ba78 <UART_SetConfig+0xacc>)
 800ba02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba06:	461a      	mov	r2, r3
 800ba08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	085b      	lsrs	r3, r3, #1
 800ba14:	441a      	add	r2, r3
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	2b0f      	cmp	r3, #15
 800ba24:	d909      	bls.n	800ba3a <UART_SetConfig+0xa8e>
 800ba26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba2c:	d205      	bcs.n	800ba3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	60da      	str	r2, [r3, #12]
 800ba38:	e002      	b.n	800ba40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	2200      	movs	r2, #0
 800ba54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ba5c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3748      	adds	r7, #72	; 0x48
 800ba64:	46bd      	mov	sp, r7
 800ba66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba6a:	bf00      	nop
 800ba6c:	58024400 	.word	0x58024400
 800ba70:	03d09000 	.word	0x03d09000
 800ba74:	003d0900 	.word	0x003d0900
 800ba78:	0800e5d4 	.word	0x0800e5d4

0800ba7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba88:	f003 0301 	and.w	r3, r3, #1
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00a      	beq.n	800baa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	430a      	orrs	r2, r1
 800baa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baaa:	f003 0302 	and.w	r3, r3, #2
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00a      	beq.n	800bac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	430a      	orrs	r2, r1
 800bac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bacc:	f003 0304 	and.w	r3, r3, #4
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00a      	beq.n	800baea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	430a      	orrs	r2, r1
 800bae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baee:	f003 0308 	and.w	r3, r3, #8
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00a      	beq.n	800bb0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	430a      	orrs	r2, r1
 800bb0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb10:	f003 0310 	and.w	r3, r3, #16
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00a      	beq.n	800bb2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	430a      	orrs	r2, r1
 800bb2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb32:	f003 0320 	and.w	r3, r3, #32
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00a      	beq.n	800bb50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	430a      	orrs	r2, r1
 800bb4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d01a      	beq.n	800bb92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	430a      	orrs	r2, r1
 800bb70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb7a:	d10a      	bne.n	800bb92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	430a      	orrs	r2, r1
 800bb90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00a      	beq.n	800bbb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	605a      	str	r2, [r3, #4]
  }
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b098      	sub	sp, #96	; 0x60
 800bbc4:	af02      	add	r7, sp, #8
 800bbc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbd0:	f7f6 fff8 	bl	8002bc4 <HAL_GetTick>
 800bbd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 0308 	and.w	r3, r3, #8
 800bbe0:	2b08      	cmp	r3, #8
 800bbe2:	d12f      	bne.n	800bc44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbec:	2200      	movs	r2, #0
 800bbee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 f88e 	bl	800bd14 <UART_WaitOnFlagUntilTimeout>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d022      	beq.n	800bc44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc06:	e853 3f00 	ldrex	r3, [r3]
 800bc0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc12:	653b      	str	r3, [r7, #80]	; 0x50
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	461a      	mov	r2, r3
 800bc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc1c:	647b      	str	r3, [r7, #68]	; 0x44
 800bc1e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc24:	e841 2300 	strex	r3, r2, [r1]
 800bc28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1e6      	bne.n	800bbfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2220      	movs	r2, #32
 800bc34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc40:	2303      	movs	r3, #3
 800bc42:	e063      	b.n	800bd0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 0304 	and.w	r3, r3, #4
 800bc4e:	2b04      	cmp	r3, #4
 800bc50:	d149      	bne.n	800bce6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 f857 	bl	800bd14 <UART_WaitOnFlagUntilTimeout>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d03c      	beq.n	800bce6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	e853 3f00 	ldrex	r3, [r3]
 800bc78:	623b      	str	r3, [r7, #32]
   return(result);
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	461a      	mov	r2, r3
 800bc88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc8a:	633b      	str	r3, [r7, #48]	; 0x30
 800bc8c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc92:	e841 2300 	strex	r3, r2, [r1]
 800bc96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1e6      	bne.n	800bc6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3308      	adds	r3, #8
 800bca4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	e853 3f00 	ldrex	r3, [r3]
 800bcac:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f023 0301 	bic.w	r3, r3, #1
 800bcb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	3308      	adds	r3, #8
 800bcbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcbe:	61fa      	str	r2, [r7, #28]
 800bcc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc2:	69b9      	ldr	r1, [r7, #24]
 800bcc4:	69fa      	ldr	r2, [r7, #28]
 800bcc6:	e841 2300 	strex	r3, r2, [r1]
 800bcca:	617b      	str	r3, [r7, #20]
   return(result);
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1e5      	bne.n	800bc9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2220      	movs	r2, #32
 800bcd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bce2:	2303      	movs	r3, #3
 800bce4:	e012      	b.n	800bd0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2220      	movs	r2, #32
 800bcea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2220      	movs	r2, #32
 800bcf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3758      	adds	r7, #88	; 0x58
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	603b      	str	r3, [r7, #0]
 800bd20:	4613      	mov	r3, r2
 800bd22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd24:	e049      	b.n	800bdba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2c:	d045      	beq.n	800bdba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd2e:	f7f6 ff49 	bl	8002bc4 <HAL_GetTick>
 800bd32:	4602      	mov	r2, r0
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	69ba      	ldr	r2, [r7, #24]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d302      	bcc.n	800bd44 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d101      	bne.n	800bd48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd44:	2303      	movs	r3, #3
 800bd46:	e048      	b.n	800bdda <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f003 0304 	and.w	r3, r3, #4
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d031      	beq.n	800bdba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	69db      	ldr	r3, [r3, #28]
 800bd5c:	f003 0308 	and.w	r3, r3, #8
 800bd60:	2b08      	cmp	r3, #8
 800bd62:	d110      	bne.n	800bd86 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2208      	movs	r2, #8
 800bd6a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f000 f839 	bl	800bde4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2208      	movs	r2, #8
 800bd76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e029      	b.n	800bdda <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	69db      	ldr	r3, [r3, #28]
 800bd8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd94:	d111      	bne.n	800bdba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f000 f81f 	bl	800bde4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2220      	movs	r2, #32
 800bdaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bdb6:	2303      	movs	r3, #3
 800bdb8:	e00f      	b.n	800bdda <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	69da      	ldr	r2, [r3, #28]
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	4013      	ands	r3, r2
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	bf0c      	ite	eq
 800bdca:	2301      	moveq	r3, #1
 800bdcc:	2300      	movne	r3, #0
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	79fb      	ldrb	r3, [r7, #7]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d0a6      	beq.n	800bd26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b095      	sub	sp, #84	; 0x54
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf4:	e853 3f00 	ldrex	r3, [r3]
 800bdf8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	461a      	mov	r2, r3
 800be08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be0a:	643b      	str	r3, [r7, #64]	; 0x40
 800be0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be12:	e841 2300 	strex	r3, r2, [r1]
 800be16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1e6      	bne.n	800bdec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3308      	adds	r3, #8
 800be24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be26:	6a3b      	ldr	r3, [r7, #32]
 800be28:	e853 3f00 	ldrex	r3, [r3]
 800be2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800be2e:	69fa      	ldr	r2, [r7, #28]
 800be30:	4b1e      	ldr	r3, [pc, #120]	; (800beac <UART_EndRxTransfer+0xc8>)
 800be32:	4013      	ands	r3, r2
 800be34:	64bb      	str	r3, [r7, #72]	; 0x48
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	3308      	adds	r3, #8
 800be3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be46:	e841 2300 	strex	r3, r2, [r1]
 800be4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1e5      	bne.n	800be1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be56:	2b01      	cmp	r3, #1
 800be58:	d118      	bne.n	800be8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	e853 3f00 	ldrex	r3, [r3]
 800be66:	60bb      	str	r3, [r7, #8]
   return(result);
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	f023 0310 	bic.w	r3, r3, #16
 800be6e:	647b      	str	r3, [r7, #68]	; 0x44
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	461a      	mov	r2, r3
 800be76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be78:	61bb      	str	r3, [r7, #24]
 800be7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7c:	6979      	ldr	r1, [r7, #20]
 800be7e:	69ba      	ldr	r2, [r7, #24]
 800be80:	e841 2300 	strex	r3, r2, [r1]
 800be84:	613b      	str	r3, [r7, #16]
   return(result);
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1e6      	bne.n	800be5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2220      	movs	r2, #32
 800be90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bea0:	bf00      	nop
 800bea2:	3754      	adds	r7, #84	; 0x54
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	effffffe 	.word	0xeffffffe

0800beb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d101      	bne.n	800bec6 <HAL_UARTEx_DisableFifoMode+0x16>
 800bec2:	2302      	movs	r3, #2
 800bec4:	e027      	b.n	800bf16 <HAL_UARTEx_DisableFifoMode+0x66>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2224      	movs	r2, #36	; 0x24
 800bed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f022 0201 	bic.w	r2, r2, #1
 800beec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bef4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2220      	movs	r2, #32
 800bf08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3714      	adds	r7, #20
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b084      	sub	sp, #16
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
 800bf2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d101      	bne.n	800bf3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf36:	2302      	movs	r3, #2
 800bf38:	e02d      	b.n	800bf96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2224      	movs	r2, #36	; 0x24
 800bf46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f022 0201 	bic.w	r2, r2, #1
 800bf60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	430a      	orrs	r2, r1
 800bf74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f850 	bl	800c01c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2220      	movs	r2, #32
 800bf88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b084      	sub	sp, #16
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d101      	bne.n	800bfb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfb2:	2302      	movs	r3, #2
 800bfb4:	e02d      	b.n	800c012 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2224      	movs	r2, #36	; 0x24
 800bfc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f022 0201 	bic.w	r2, r2, #1
 800bfdc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	430a      	orrs	r2, r1
 800bff0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f812 	bl	800c01c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2220      	movs	r2, #32
 800c004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
	...

0800c01c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d108      	bne.n	800c03e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2201      	movs	r2, #1
 800c038:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c03c:	e031      	b.n	800c0a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c03e:	2310      	movs	r3, #16
 800c040:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c042:	2310      	movs	r3, #16
 800c044:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	0e5b      	lsrs	r3, r3, #25
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	f003 0307 	and.w	r3, r3, #7
 800c054:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	0f5b      	lsrs	r3, r3, #29
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	f003 0307 	and.w	r3, r3, #7
 800c064:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c066:	7bbb      	ldrb	r3, [r7, #14]
 800c068:	7b3a      	ldrb	r2, [r7, #12]
 800c06a:	4911      	ldr	r1, [pc, #68]	; (800c0b0 <UARTEx_SetNbDataToProcess+0x94>)
 800c06c:	5c8a      	ldrb	r2, [r1, r2]
 800c06e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c072:	7b3a      	ldrb	r2, [r7, #12]
 800c074:	490f      	ldr	r1, [pc, #60]	; (800c0b4 <UARTEx_SetNbDataToProcess+0x98>)
 800c076:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c078:	fb93 f3f2 	sdiv	r3, r3, r2
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c084:	7bfb      	ldrb	r3, [r7, #15]
 800c086:	7b7a      	ldrb	r2, [r7, #13]
 800c088:	4909      	ldr	r1, [pc, #36]	; (800c0b0 <UARTEx_SetNbDataToProcess+0x94>)
 800c08a:	5c8a      	ldrb	r2, [r1, r2]
 800c08c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c090:	7b7a      	ldrb	r2, [r7, #13]
 800c092:	4908      	ldr	r1, [pc, #32]	; (800c0b4 <UARTEx_SetNbDataToProcess+0x98>)
 800c094:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c096:	fb93 f3f2 	sdiv	r3, r3, r2
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c0a2:	bf00      	nop
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	0800e5ec 	.word	0x0800e5ec
 800c0b4:	0800e5f4 	.word	0x0800e5f4

0800c0b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d121      	bne.n	800c10e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	4b27      	ldr	r3, [pc, #156]	; (800c16c <FMC_SDRAM_Init+0xb4>)
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	6851      	ldr	r1, [r2, #4]
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	6892      	ldr	r2, [r2, #8]
 800c0da:	4311      	orrs	r1, r2
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	68d2      	ldr	r2, [r2, #12]
 800c0e0:	4311      	orrs	r1, r2
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	6912      	ldr	r2, [r2, #16]
 800c0e6:	4311      	orrs	r1, r2
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	6952      	ldr	r2, [r2, #20]
 800c0ec:	4311      	orrs	r1, r2
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	6992      	ldr	r2, [r2, #24]
 800c0f2:	4311      	orrs	r1, r2
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	69d2      	ldr	r2, [r2, #28]
 800c0f8:	4311      	orrs	r1, r2
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	6a12      	ldr	r2, [r2, #32]
 800c0fe:	4311      	orrs	r1, r2
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c104:	430a      	orrs	r2, r1
 800c106:	431a      	orrs	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	e026      	b.n	800c15c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	69d9      	ldr	r1, [r3, #28]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	6a1b      	ldr	r3, [r3, #32]
 800c11e:	4319      	orrs	r1, r3
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c124:	430b      	orrs	r3, r1
 800c126:	431a      	orrs	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	4b0e      	ldr	r3, [pc, #56]	; (800c16c <FMC_SDRAM_Init+0xb4>)
 800c132:	4013      	ands	r3, r2
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	6851      	ldr	r1, [r2, #4]
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	6892      	ldr	r2, [r2, #8]
 800c13c:	4311      	orrs	r1, r2
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	68d2      	ldr	r2, [r2, #12]
 800c142:	4311      	orrs	r1, r2
 800c144:	683a      	ldr	r2, [r7, #0]
 800c146:	6912      	ldr	r2, [r2, #16]
 800c148:	4311      	orrs	r1, r2
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	6952      	ldr	r2, [r2, #20]
 800c14e:	4311      	orrs	r1, r2
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	6992      	ldr	r2, [r2, #24]
 800c154:	430a      	orrs	r2, r1
 800c156:	431a      	orrs	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	370c      	adds	r7, #12
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	ffff8000 	.word	0xffff8000

0800c170 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d128      	bne.n	800c1d4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	1e59      	subs	r1, r3, #1
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	3b01      	subs	r3, #1
 800c196:	011b      	lsls	r3, r3, #4
 800c198:	4319      	orrs	r1, r3
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	021b      	lsls	r3, r3, #8
 800c1a2:	4319      	orrs	r1, r3
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	031b      	lsls	r3, r3, #12
 800c1ac:	4319      	orrs	r1, r3
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	041b      	lsls	r3, r3, #16
 800c1b6:	4319      	orrs	r1, r3
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	695b      	ldr	r3, [r3, #20]
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	051b      	lsls	r3, r3, #20
 800c1c0:	4319      	orrs	r1, r3
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	699b      	ldr	r3, [r3, #24]
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	061b      	lsls	r3, r3, #24
 800c1ca:	430b      	orrs	r3, r1
 800c1cc:	431a      	orrs	r2, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	609a      	str	r2, [r3, #8]
 800c1d2:	e02d      	b.n	800c230 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	689a      	ldr	r2, [r3, #8]
 800c1d8:	4b19      	ldr	r3, [pc, #100]	; (800c240 <FMC_SDRAM_Timing_Init+0xd0>)
 800c1da:	4013      	ands	r3, r2
 800c1dc:	68ba      	ldr	r2, [r7, #8]
 800c1de:	68d2      	ldr	r2, [r2, #12]
 800c1e0:	3a01      	subs	r2, #1
 800c1e2:	0311      	lsls	r1, r2, #12
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	6952      	ldr	r2, [r2, #20]
 800c1e8:	3a01      	subs	r2, #1
 800c1ea:	0512      	lsls	r2, r2, #20
 800c1ec:	430a      	orrs	r2, r1
 800c1ee:	431a      	orrs	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	1e59      	subs	r1, r3, #1
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	3b01      	subs	r3, #1
 800c208:	011b      	lsls	r3, r3, #4
 800c20a:	4319      	orrs	r1, r3
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	3b01      	subs	r3, #1
 800c212:	021b      	lsls	r3, r3, #8
 800c214:	4319      	orrs	r1, r3
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	3b01      	subs	r3, #1
 800c21c:	041b      	lsls	r3, r3, #16
 800c21e:	4319      	orrs	r1, r3
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	699b      	ldr	r3, [r3, #24]
 800c224:	3b01      	subs	r3, #1
 800c226:	061b      	lsls	r3, r3, #24
 800c228:	430b      	orrs	r3, r1
 800c22a:	431a      	orrs	r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	ff0f0fff 	.word	0xff0f0fff

0800c244 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c244:	b084      	sub	sp, #16
 800c246:	b480      	push	{r7}
 800c248:	b085      	sub	sp, #20
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
 800c24e:	f107 001c 	add.w	r0, r7, #28
 800c252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c25a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c25c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c25e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800c262:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c264:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800c266:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800c26a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	4313      	orrs	r3, r2
 800c270:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	685a      	ldr	r2, [r3, #4]
 800c276:	4b07      	ldr	r3, [pc, #28]	; (800c294 <SDMMC_Init+0x50>)
 800c278:	4013      	ands	r3, r2
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	431a      	orrs	r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	b004      	add	sp, #16
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	ffc02c00 	.word	0xffc02c00

0800c298 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	370c      	adds	r7, #12
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr

0800c2b2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c2b2:	b480      	push	{r7}
 800c2b4:	b083      	sub	sp, #12
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f043 0203 	orr.w	r2, r3, #3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f003 0303 	and.w	r3, r3, #3
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c30e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c314:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c31a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	4313      	orrs	r3, r2
 800c320:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	68da      	ldr	r2, [r3, #12]
 800c326:	4b06      	ldr	r3, [pc, #24]	; (800c340 <SDMMC_SendCommand+0x50>)
 800c328:	4013      	ands	r3, r2
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	431a      	orrs	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	fffee0c0 	.word	0xfffee0c0

0800c344 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	b2db      	uxtb	r3, r3
}
 800c352:	4618      	mov	r0, r3
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c35e:	b480      	push	{r7}
 800c360:	b085      	sub	sp, #20
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	3314      	adds	r3, #20
 800c36c:	461a      	mov	r2, r3
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	4413      	add	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3714      	adds	r7, #20
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c3aa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800c3b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800c3b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	431a      	orrs	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0

}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c3ea:	2310      	movs	r3, #16
 800c3ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3fe:	f107 0308 	add.w	r3, r7, #8
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f7ff ff73 	bl	800c2f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c40a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c40e:	2110      	movs	r1, #16
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f935 	bl	800c680 <SDMMC_GetCmdResp1>
 800c416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c418:	69fb      	ldr	r3, [r7, #28]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3720      	adds	r7, #32
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b088      	sub	sp, #32
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c430:	2307      	movs	r3, #7
 800c432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c434:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c43a:	2300      	movs	r3, #0
 800c43c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c43e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c444:	f107 0308 	add.w	r3, r7, #8
 800c448:	4619      	mov	r1, r3
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f7ff ff50 	bl	800c2f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c450:	f241 3288 	movw	r2, #5000	; 0x1388
 800c454:	2107      	movs	r1, #7
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f912 	bl	800c680 <SDMMC_GetCmdResp1>
 800c45c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c45e:	69fb      	ldr	r3, [r7, #28]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3720      	adds	r7, #32
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b088      	sub	sp, #32
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c470:	2300      	movs	r3, #0
 800c472:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c474:	2300      	movs	r3, #0
 800c476:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c478:	2300      	movs	r3, #0
 800c47a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c47c:	2300      	movs	r3, #0
 800c47e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c484:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c486:	f107 0308 	add.w	r3, r7, #8
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7ff ff2f 	bl	800c2f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 fa70 	bl	800c978 <SDMMC_GetCmdError>
 800c498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c49a:	69fb      	ldr	r3, [r7, #28]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3720      	adds	r7, #32
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b088      	sub	sp, #32
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c4b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c4b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4c4:	f107 0308 	add.w	r3, r7, #8
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7ff ff10 	bl	800c2f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 f9c7 	bl	800c864 <SDMMC_GetCmdResp2>
 800c4d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4d8:	69fb      	ldr	r3, [r7, #28]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3720      	adds	r7, #32
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b088      	sub	sp, #32
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c4f0:	2309      	movs	r3, #9
 800c4f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c4f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c4f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c502:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c504:	f107 0308 	add.w	r3, r7, #8
 800c508:	4619      	mov	r1, r3
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff fef0 	bl	800c2f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f9a7 	bl	800c864 <SDMMC_GetCmdResp2>
 800c516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c518:	69fb      	ldr	r3, [r7, #28]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3720      	adds	r7, #32
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b088      	sub	sp, #32
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	460b      	mov	r3, r1
 800c52c:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800c52e:	887b      	ldrh	r3, [r7, #2]
 800c530:	041b      	lsls	r3, r3, #16
 800c532:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c534:	2303      	movs	r3, #3
 800c536:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c53c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c53e:	2300      	movs	r3, #0
 800c540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c546:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c548:	f107 0308 	add.w	r3, r7, #8
 800c54c:	4619      	mov	r1, r3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff fece 	bl	800c2f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800c554:	f241 3288 	movw	r2, #5000	; 0x1388
 800c558:	2103      	movs	r1, #3
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f890 	bl	800c680 <SDMMC_GetCmdResp1>
 800c560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c562:	69fb      	ldr	r3, [r7, #28]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3720      	adds	r7, #32
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b088      	sub	sp, #32
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c57a:	230d      	movs	r3, #13
 800c57c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c57e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c584:	2300      	movs	r3, #0
 800c586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c58c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c58e:	f107 0308 	add.w	r3, r7, #8
 800c592:	4619      	mov	r1, r3
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff feab 	bl	800c2f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c59a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c59e:	210d      	movs	r1, #13
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f86d 	bl	800c680 <SDMMC_GetCmdResp1>
 800c5a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5a8:	69fb      	ldr	r3, [r7, #28]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3720      	adds	r7, #32
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b088      	sub	sp, #32
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5d4:	f107 0308 	add.w	r3, r7, #8
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7ff fe88 	bl	800c2f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f989 	bl	800c8f8 <SDMMC_GetCmdResp3>
 800c5e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5e8:	69fb      	ldr	r3, [r7, #28]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3720      	adds	r7, #32
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b088      	sub	sp, #32
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800c600:	2306      	movs	r3, #6
 800c602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c604:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c60a:	2300      	movs	r3, #0
 800c60c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c60e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c612:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c614:	f107 0308 	add.w	r3, r7, #8
 800c618:	4619      	mov	r1, r3
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7ff fe68 	bl	800c2f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800c620:	f241 3288 	movw	r2, #5000	; 0x1388
 800c624:	2106      	movs	r1, #6
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 f82a 	bl	800c680 <SDMMC_GetCmdResp1>
 800c62c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c62e:	69fb      	ldr	r3, [r7, #28]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3720      	adds	r7, #32
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b088      	sub	sp, #32
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c646:	2308      	movs	r3, #8
 800c648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c64a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c64e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c650:	2300      	movs	r3, #0
 800c652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c658:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c65a:	f107 0308 	add.w	r3, r7, #8
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7ff fe45 	bl	800c2f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 800c666:	f241 3288 	movw	r2, #5000	; 0x1388
 800c66a:	2108      	movs	r1, #8
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f807 	bl	800c680 <SDMMC_GetCmdResp1>
 800c672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c674:	69fb      	ldr	r3, [r7, #28]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3720      	adds	r7, #32
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
	...

0800c680 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b088      	sub	sp, #32
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	460b      	mov	r3, r1
 800c68a:	607a      	str	r2, [r7, #4]
 800c68c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c68e:	4b70      	ldr	r3, [pc, #448]	; (800c850 <SDMMC_GetCmdResp1+0x1d0>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a70      	ldr	r2, [pc, #448]	; (800c854 <SDMMC_GetCmdResp1+0x1d4>)
 800c694:	fba2 2303 	umull	r2, r3, r2, r3
 800c698:	0a5a      	lsrs	r2, r3, #9
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	fb02 f303 	mul.w	r3, r2, r3
 800c6a0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	1e5a      	subs	r2, r3, #1
 800c6a6:	61fa      	str	r2, [r7, #28]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d102      	bne.n	800c6b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6b0:	e0c9      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c6b8:	69ba      	ldr	r2, [r7, #24]
 800c6ba:	4b67      	ldr	r3, [pc, #412]	; (800c858 <SDMMC_GetCmdResp1+0x1d8>)
 800c6bc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0ef      	beq.n	800c6a2 <SDMMC_GetCmdResp1+0x22>
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1ea      	bne.n	800c6a2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d0:	f003 0304 	and.w	r3, r3, #4
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d004      	beq.n	800c6e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2204      	movs	r2, #4
 800c6dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6de:	2304      	movs	r3, #4
 800c6e0:	e0b1      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d004      	beq.n	800c6f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e0a6      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	4a58      	ldr	r2, [pc, #352]	; (800c85c <SDMMC_GetCmdResp1+0x1dc>)
 800c6fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f7ff fe20 	bl	800c344 <SDMMC_GetCommandResponse>
 800c704:	4603      	mov	r3, r0
 800c706:	461a      	mov	r2, r3
 800c708:	7afb      	ldrb	r3, [r7, #11]
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d001      	beq.n	800c712 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c70e:	2301      	movs	r3, #1
 800c710:	e099      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c712:	2100      	movs	r1, #0
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f7ff fe22 	bl	800c35e <SDMMC_GetResponse>
 800c71a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	4b50      	ldr	r3, [pc, #320]	; (800c860 <SDMMC_GetCmdResp1+0x1e0>)
 800c720:	4013      	ands	r3, r2
 800c722:	2b00      	cmp	r3, #0
 800c724:	d101      	bne.n	800c72a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c726:	2300      	movs	r3, #0
 800c728:	e08d      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	da02      	bge.n	800c736 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c734:	e087      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c740:	2340      	movs	r3, #64	; 0x40
 800c742:	e080      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d001      	beq.n	800c752 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c74e:	2380      	movs	r3, #128	; 0x80
 800c750:	e079      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c75c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c760:	e071      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d002      	beq.n	800c772 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c76c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c770:	e069      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d002      	beq.n	800c782 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c77c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c780:	e061      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c78c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c790:	e059      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d002      	beq.n	800c7a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7a0:	e051      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c7ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c7b0:	e049      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d002      	beq.n	800c7c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c7bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c7c0:	e041      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c7cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7d0:	e039      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c7dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c7e0:	e031      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c7ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c7f0:	e029      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c7fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c800:	e021      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c80c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c810:	e019      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c81c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c820:	e011      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c82c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c830:	e009      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	f003 0308 	and.w	r3, r3, #8
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d002      	beq.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c83c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c840:	e001      	b.n	800c846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c846:	4618      	mov	r0, r3
 800c848:	3720      	adds	r7, #32
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	24000000 	.word	0x24000000
 800c854:	10624dd3 	.word	0x10624dd3
 800c858:	00200045 	.word	0x00200045
 800c85c:	002000c5 	.word	0x002000c5
 800c860:	fdffe008 	.word	0xfdffe008

0800c864 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c86c:	4b1f      	ldr	r3, [pc, #124]	; (800c8ec <SDMMC_GetCmdResp2+0x88>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a1f      	ldr	r2, [pc, #124]	; (800c8f0 <SDMMC_GetCmdResp2+0x8c>)
 800c872:	fba2 2303 	umull	r2, r3, r2, r3
 800c876:	0a5b      	lsrs	r3, r3, #9
 800c878:	f241 3288 	movw	r2, #5000	; 0x1388
 800c87c:	fb02 f303 	mul.w	r3, r2, r3
 800c880:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	1e5a      	subs	r2, r3, #1
 800c886:	60fa      	str	r2, [r7, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d102      	bne.n	800c892 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c88c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c890:	e026      	b.n	800c8e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c896:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d0ef      	beq.n	800c882 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1ea      	bne.n	800c882 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b0:	f003 0304 	and.w	r3, r3, #4
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d004      	beq.n	800c8c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2204      	movs	r2, #4
 800c8bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8be:	2304      	movs	r3, #4
 800c8c0:	e00e      	b.n	800c8e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c6:	f003 0301 	and.w	r3, r3, #1
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d004      	beq.n	800c8d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e003      	b.n	800c8e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a06      	ldr	r2, [pc, #24]	; (800c8f4 <SDMMC_GetCmdResp2+0x90>)
 800c8dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3714      	adds	r7, #20
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	24000000 	.word	0x24000000
 800c8f0:	10624dd3 	.word	0x10624dd3
 800c8f4:	002000c5 	.word	0x002000c5

0800c8f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c900:	4b1a      	ldr	r3, [pc, #104]	; (800c96c <SDMMC_GetCmdResp3+0x74>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a1a      	ldr	r2, [pc, #104]	; (800c970 <SDMMC_GetCmdResp3+0x78>)
 800c906:	fba2 2303 	umull	r2, r3, r2, r3
 800c90a:	0a5b      	lsrs	r3, r3, #9
 800c90c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c910:	fb02 f303 	mul.w	r3, r2, r3
 800c914:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	1e5a      	subs	r2, r3, #1
 800c91a:	60fa      	str	r2, [r7, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d102      	bne.n	800c926 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c924:	e01b      	b.n	800c95e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c92a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c932:	2b00      	cmp	r3, #0
 800c934:	d0ef      	beq.n	800c916 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1ea      	bne.n	800c916 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c944:	f003 0304 	and.w	r3, r3, #4
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d004      	beq.n	800c956 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2204      	movs	r2, #4
 800c950:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c952:	2304      	movs	r3, #4
 800c954:	e003      	b.n	800c95e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a06      	ldr	r2, [pc, #24]	; (800c974 <SDMMC_GetCmdResp3+0x7c>)
 800c95a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	24000000 	.word	0x24000000
 800c970:	10624dd3 	.word	0x10624dd3
 800c974:	002000c5 	.word	0x002000c5

0800c978 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c980:	4b11      	ldr	r3, [pc, #68]	; (800c9c8 <SDMMC_GetCmdError+0x50>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a11      	ldr	r2, [pc, #68]	; (800c9cc <SDMMC_GetCmdError+0x54>)
 800c986:	fba2 2303 	umull	r2, r3, r2, r3
 800c98a:	0a5b      	lsrs	r3, r3, #9
 800c98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c990:	fb02 f303 	mul.w	r3, r2, r3
 800c994:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	1e5a      	subs	r2, r3, #1
 800c99a:	60fa      	str	r2, [r7, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d102      	bne.n	800c9a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9a4:	e009      	b.n	800c9ba <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0f1      	beq.n	800c996 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a06      	ldr	r2, [pc, #24]	; (800c9d0 <SDMMC_GetCmdError+0x58>)
 800c9b6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3714      	adds	r7, #20
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	24000000 	.word	0x24000000
 800c9cc:	10624dd3 	.word	0x10624dd3
 800c9d0:	002000c5 	.word	0x002000c5

0800c9d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c9d4:	b084      	sub	sp, #16
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b084      	sub	sp, #16
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	f107 001c 	add.w	r0, r7, #28
 800c9e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d120      	bne.n	800ca2e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	68da      	ldr	r2, [r3, #12]
 800c9fc:	4b2a      	ldr	r3, [pc, #168]	; (800caa8 <USB_CoreInit+0xd4>)
 800c9fe:	4013      	ands	r3, r2
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ca10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d105      	bne.n	800ca22 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 faac 	bl	800cf80 <USB_CoreReset>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	73fb      	strb	r3, [r7, #15]
 800ca2c:	e01a      	b.n	800ca64 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 faa0 	bl	800cf80 <USB_CoreReset>
 800ca40:	4603      	mov	r3, r0
 800ca42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ca44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d106      	bne.n	800ca58 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	639a      	str	r2, [r3, #56]	; 0x38
 800ca56:	e005      	b.n	800ca64 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d116      	bne.n	800ca98 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ca78:	4b0c      	ldr	r3, [pc, #48]	; (800caac <USB_CoreInit+0xd8>)
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	f043 0206 	orr.w	r2, r3, #6
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	f043 0220 	orr.w	r2, r3, #32
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ca98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800caa4:	b004      	add	sp, #16
 800caa6:	4770      	bx	lr
 800caa8:	ffbdffbf 	.word	0xffbdffbf
 800caac:	03ee0000 	.word	0x03ee0000

0800cab0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	f023 0201 	bic.w	r2, r3, #1
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	370c      	adds	r7, #12
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr

0800cad2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b084      	sub	sp, #16
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
 800cada:	460b      	mov	r3, r1
 800cadc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cade:	2300      	movs	r3, #0
 800cae0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800caee:	78fb      	ldrb	r3, [r7, #3]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d115      	bne.n	800cb20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cb00:	2001      	movs	r0, #1
 800cb02:	f7f6 f86b 	bl	8002bdc <HAL_Delay>
      ms++;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 fa29 	bl	800cf64 <USB_GetMode>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d01e      	beq.n	800cb56 <USB_SetCurrentMode+0x84>
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b31      	cmp	r3, #49	; 0x31
 800cb1c:	d9f0      	bls.n	800cb00 <USB_SetCurrentMode+0x2e>
 800cb1e:	e01a      	b.n	800cb56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cb20:	78fb      	ldrb	r3, [r7, #3]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d115      	bne.n	800cb52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cb32:	2001      	movs	r0, #1
 800cb34:	f7f6 f852 	bl	8002bdc <HAL_Delay>
      ms++;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fa10 	bl	800cf64 <USB_GetMode>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d005      	beq.n	800cb56 <USB_SetCurrentMode+0x84>
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b31      	cmp	r3, #49	; 0x31
 800cb4e:	d9f0      	bls.n	800cb32 <USB_SetCurrentMode+0x60>
 800cb50:	e001      	b.n	800cb56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	e005      	b.n	800cb62 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2b32      	cmp	r3, #50	; 0x32
 800cb5a:	d101      	bne.n	800cb60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e000      	b.n	800cb62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
	...

0800cb6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb6c:	b084      	sub	sp, #16
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b086      	sub	sp, #24
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cb86:	2300      	movs	r3, #0
 800cb88:	613b      	str	r3, [r7, #16]
 800cb8a:	e009      	b.n	800cba0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	3340      	adds	r3, #64	; 0x40
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	2200      	movs	r2, #0
 800cb98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	613b      	str	r3, [r7, #16]
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	2b0e      	cmp	r3, #14
 800cba4:	d9f2      	bls.n	800cb8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d11c      	bne.n	800cbe6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbba:	f043 0302 	orr.w	r3, r3, #2
 800cbbe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	601a      	str	r2, [r3, #0]
 800cbe4:	e005      	b.n	800cbf2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc04:	4619      	mov	r1, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	680b      	ldr	r3, [r1, #0]
 800cc10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d10c      	bne.n	800cc32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d104      	bne.n	800cc28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cc1e:	2100      	movs	r1, #0
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 f965 	bl	800cef0 <USB_SetDevSpeed>
 800cc26:	e008      	b.n	800cc3a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cc28:	2101      	movs	r1, #1
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 f960 	bl	800cef0 <USB_SetDevSpeed>
 800cc30:	e003      	b.n	800cc3a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cc32:	2103      	movs	r1, #3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f95b 	bl	800cef0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cc3a:	2110      	movs	r1, #16
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f8f3 	bl	800ce28 <USB_FlushTxFifo>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d001      	beq.n	800cc4c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 f91f 	bl	800ce90 <USB_FlushRxFifo>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d001      	beq.n	800cc5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc62:	461a      	mov	r2, r3
 800cc64:	2300      	movs	r3, #0
 800cc66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc6e:	461a      	mov	r2, r3
 800cc70:	2300      	movs	r3, #0
 800cc72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc80:	2300      	movs	r3, #0
 800cc82:	613b      	str	r3, [r7, #16]
 800cc84:	e043      	b.n	800cd0e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	015a      	lsls	r2, r3, #5
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc9c:	d118      	bne.n	800ccd0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10a      	bne.n	800ccba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	015a      	lsls	r2, r3, #5
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	4413      	add	r3, r2
 800ccac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	e013      	b.n	800cce2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	015a      	lsls	r2, r3, #5
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cccc:	6013      	str	r3, [r2, #0]
 800ccce:	e008      	b.n	800cce2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	015a      	lsls	r2, r3, #5
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccdc:	461a      	mov	r2, r3
 800ccde:	2300      	movs	r3, #0
 800cce0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	015a      	lsls	r2, r3, #5
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	4413      	add	r3, r2
 800ccea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccee:	461a      	mov	r2, r3
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	015a      	lsls	r2, r3, #5
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd00:	461a      	mov	r2, r3
 800cd02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cd06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	613b      	str	r3, [r7, #16]
 800cd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd10:	693a      	ldr	r2, [r7, #16]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d3b7      	bcc.n	800cc86 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd16:	2300      	movs	r3, #0
 800cd18:	613b      	str	r3, [r7, #16]
 800cd1a:	e043      	b.n	800cda4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	015a      	lsls	r2, r3, #5
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	4413      	add	r3, r2
 800cd24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd32:	d118      	bne.n	800cd66 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10a      	bne.n	800cd50 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	015a      	lsls	r2, r3, #5
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	4413      	add	r3, r2
 800cd42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd46:	461a      	mov	r2, r3
 800cd48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cd4c:	6013      	str	r3, [r2, #0]
 800cd4e:	e013      	b.n	800cd78 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	015a      	lsls	r2, r3, #5
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	4413      	add	r3, r2
 800cd58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cd62:	6013      	str	r3, [r2, #0]
 800cd64:	e008      	b.n	800cd78 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	015a      	lsls	r2, r3, #5
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd72:	461a      	mov	r2, r3
 800cd74:	2300      	movs	r3, #0
 800cd76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	015a      	lsls	r2, r3, #5
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	4413      	add	r3, r2
 800cd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd84:	461a      	mov	r2, r3
 800cd86:	2300      	movs	r3, #0
 800cd88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	015a      	lsls	r2, r3, #5
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	4413      	add	r3, r2
 800cd92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd96:	461a      	mov	r2, r3
 800cd98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cd9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	3301      	adds	r3, #1
 800cda2:	613b      	str	r3, [r7, #16]
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d3b7      	bcc.n	800cd1c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cdcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d105      	bne.n	800cde0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	f043 0210 	orr.w	r2, r3, #16
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	699a      	ldr	r2, [r3, #24]
 800cde4:	4b0e      	ldr	r3, [pc, #56]	; (800ce20 <USB_DevInit+0x2b4>)
 800cde6:	4313      	orrs	r3, r2
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cdec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d005      	beq.n	800cdfe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	699b      	ldr	r3, [r3, #24]
 800cdf6:	f043 0208 	orr.w	r2, r3, #8
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cdfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d105      	bne.n	800ce10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	699a      	ldr	r2, [r3, #24]
 800ce08:	4b06      	ldr	r3, [pc, #24]	; (800ce24 <USB_DevInit+0x2b8>)
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ce10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3718      	adds	r7, #24
 800ce16:	46bd      	mov	sp, r7
 800ce18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce1c:	b004      	add	sp, #16
 800ce1e:	4770      	bx	lr
 800ce20:	803c3800 	.word	0x803c3800
 800ce24:	40000004 	.word	0x40000004

0800ce28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ce32:	2300      	movs	r3, #0
 800ce34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	4a13      	ldr	r2, [pc, #76]	; (800ce8c <USB_FlushTxFifo+0x64>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d901      	bls.n	800ce48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ce44:	2303      	movs	r3, #3
 800ce46:	e01b      	b.n	800ce80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	daf2      	bge.n	800ce36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ce50:	2300      	movs	r3, #0
 800ce52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	019b      	lsls	r3, r3, #6
 800ce58:	f043 0220 	orr.w	r2, r3, #32
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	3301      	adds	r3, #1
 800ce64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	4a08      	ldr	r2, [pc, #32]	; (800ce8c <USB_FlushTxFifo+0x64>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d901      	bls.n	800ce72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	e006      	b.n	800ce80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	691b      	ldr	r3, [r3, #16]
 800ce76:	f003 0320 	and.w	r3, r3, #32
 800ce7a:	2b20      	cmp	r3, #32
 800ce7c:	d0f0      	beq.n	800ce60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr
 800ce8c:	00030d40 	.word	0x00030d40

0800ce90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	4a11      	ldr	r2, [pc, #68]	; (800ceec <USB_FlushRxFifo+0x5c>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d901      	bls.n	800ceae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ceaa:	2303      	movs	r3, #3
 800ceac:	e018      	b.n	800cee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	daf2      	bge.n	800ce9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2210      	movs	r2, #16
 800cebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	3301      	adds	r3, #1
 800cec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	4a08      	ldr	r2, [pc, #32]	; (800ceec <USB_FlushRxFifo+0x5c>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d901      	bls.n	800ced2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cece:	2303      	movs	r3, #3
 800ced0:	e006      	b.n	800cee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	f003 0310 	and.w	r3, r3, #16
 800ceda:	2b10      	cmp	r3, #16
 800cedc:	d0f0      	beq.n	800cec0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3714      	adds	r7, #20
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr
 800ceec:	00030d40 	.word	0x00030d40

0800cef0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	78fb      	ldrb	r3, [r7, #3]
 800cf0a:	68f9      	ldr	r1, [r7, #12]
 800cf0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf10:	4313      	orrs	r3, r2
 800cf12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3714      	adds	r7, #20
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr

0800cf22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf22:	b480      	push	{r7}
 800cf24:	b085      	sub	sp, #20
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf3c:	f023 0303 	bic.w	r3, r3, #3
 800cf40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf50:	f043 0302 	orr.w	r3, r3, #2
 800cf54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3714      	adds	r7, #20
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	695b      	ldr	r3, [r3, #20]
 800cf70:	f003 0301 	and.w	r3, r3, #1
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	4a13      	ldr	r2, [pc, #76]	; (800cfe4 <USB_CoreReset+0x64>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d901      	bls.n	800cf9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	e01b      	b.n	800cfd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	daf2      	bge.n	800cf8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	f043 0201 	orr.w	r2, r3, #1
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	4a09      	ldr	r2, [pc, #36]	; (800cfe4 <USB_CoreReset+0x64>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d901      	bls.n	800cfc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cfc4:	2303      	movs	r3, #3
 800cfc6:	e006      	b.n	800cfd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	f003 0301 	and.w	r3, r3, #1
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d0f0      	beq.n	800cfb6 <USB_CoreReset+0x36>

  return HAL_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	00030d40 	.word	0x00030d40

0800cfe8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	4603      	mov	r3, r0
 800cff0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cff2:	2300      	movs	r3, #0
 800cff4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cffa:	2b84      	cmp	r3, #132	; 0x84
 800cffc:	d005      	beq.n	800d00a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cffe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	4413      	add	r3, r2
 800d006:	3303      	adds	r3, #3
 800d008:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d00a:	68fb      	ldr	r3, [r7, #12]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3714      	adds	r7, #20
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d01c:	f000 fade 	bl	800d5dc <vTaskStartScheduler>
  
  return osOK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	bd80      	pop	{r7, pc}

0800d026 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d026:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d028:	b089      	sub	sp, #36	; 0x24
 800d02a:	af04      	add	r7, sp, #16
 800d02c:	6078      	str	r0, [r7, #4]
 800d02e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	695b      	ldr	r3, [r3, #20]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d020      	beq.n	800d07a <osThreadCreate+0x54>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d01c      	beq.n	800d07a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	685c      	ldr	r4, [r3, #4]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	691e      	ldr	r6, [r3, #16]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff ffc8 	bl	800cfe8 <makeFreeRtosPriority>
 800d058:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	695b      	ldr	r3, [r3, #20]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d062:	9202      	str	r2, [sp, #8]
 800d064:	9301      	str	r3, [sp, #4]
 800d066:	9100      	str	r1, [sp, #0]
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	4632      	mov	r2, r6
 800d06c:	4629      	mov	r1, r5
 800d06e:	4620      	mov	r0, r4
 800d070:	f000 f8ed 	bl	800d24e <xTaskCreateStatic>
 800d074:	4603      	mov	r3, r0
 800d076:	60fb      	str	r3, [r7, #12]
 800d078:	e01c      	b.n	800d0b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	685c      	ldr	r4, [r3, #4]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d086:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff ffaa 	bl	800cfe8 <makeFreeRtosPriority>
 800d094:	4602      	mov	r2, r0
 800d096:	f107 030c 	add.w	r3, r7, #12
 800d09a:	9301      	str	r3, [sp, #4]
 800d09c:	9200      	str	r2, [sp, #0]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	4632      	mov	r2, r6
 800d0a2:	4629      	mov	r1, r5
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f000 f92f 	bl	800d308 <xTaskCreate>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d001      	beq.n	800d0b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	e000      	b.n	800d0b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3714      	adds	r7, #20
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b084      	sub	sp, #16
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d001      	beq.n	800d0d4 <osDelay+0x16>
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	e000      	b.n	800d0d6 <osDelay+0x18>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f000 fa4c 	bl	800d574 <vTaskDelay>
  
  return osOK;
 800d0dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d0e6:	b480      	push	{r7}
 800d0e8:	b083      	sub	sp, #12
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f103 0208 	add.w	r2, r3, #8
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f103 0208 	add.w	r2, r3, #8
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f103 0208 	add.w	r2, r3, #8
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d11a:	bf00      	nop
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d126:	b480      	push	{r7}
 800d128:	b083      	sub	sp, #12
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d134:	bf00      	nop
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	689a      	ldr	r2, [r3, #8]
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	683a      	ldr	r2, [r7, #0]
 800d16a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	1c5a      	adds	r2, r3, #1
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	601a      	str	r2, [r3, #0]
}
 800d17c:	bf00      	nop
 800d17e:	3714      	adds	r7, #20
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19e:	d103      	bne.n	800d1a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	60fb      	str	r3, [r7, #12]
 800d1a6:	e00c      	b.n	800d1c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	3308      	adds	r3, #8
 800d1ac:	60fb      	str	r3, [r7, #12]
 800d1ae:	e002      	b.n	800d1b6 <vListInsert+0x2e>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	60fb      	str	r3, [r7, #12]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d2f6      	bcs.n	800d1b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	683a      	ldr	r2, [r7, #0]
 800d1d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	68fa      	ldr	r2, [r7, #12]
 800d1d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	601a      	str	r2, [r3, #0]
}
 800d1ee:	bf00      	nop
 800d1f0:	3714      	adds	r7, #20
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr

0800d1fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d1fa:	b480      	push	{r7}
 800d1fc:	b085      	sub	sp, #20
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	6892      	ldr	r2, [r2, #8]
 800d210:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	6852      	ldr	r2, [r2, #4]
 800d21a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	429a      	cmp	r2, r3
 800d224:	d103      	bne.n	800d22e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	689a      	ldr	r2, [r3, #8]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	1e5a      	subs	r2, r3, #1
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
}
 800d242:	4618      	mov	r0, r3
 800d244:	3714      	adds	r7, #20
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr

0800d24e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b08e      	sub	sp, #56	; 0x38
 800d252:	af04      	add	r7, sp, #16
 800d254:	60f8      	str	r0, [r7, #12]
 800d256:	60b9      	str	r1, [r7, #8]
 800d258:	607a      	str	r2, [r7, #4]
 800d25a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10a      	bne.n	800d278 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d274:	bf00      	nop
 800d276:	e7fe      	b.n	800d276 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d10a      	bne.n	800d294 <xTaskCreateStatic+0x46>
	__asm volatile
 800d27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	61fb      	str	r3, [r7, #28]
}
 800d290:	bf00      	nop
 800d292:	e7fe      	b.n	800d292 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d294:	2354      	movs	r3, #84	; 0x54
 800d296:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	2b54      	cmp	r3, #84	; 0x54
 800d29c:	d00a      	beq.n	800d2b4 <xTaskCreateStatic+0x66>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	61bb      	str	r3, [r7, #24]
}
 800d2b0:	bf00      	nop
 800d2b2:	e7fe      	b.n	800d2b2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d2b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d01e      	beq.n	800d2fa <xTaskCreateStatic+0xac>
 800d2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d01b      	beq.n	800d2fa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ce:	2202      	movs	r2, #2
 800d2d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	9303      	str	r3, [sp, #12]
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2da:	9302      	str	r3, [sp, #8]
 800d2dc:	f107 0314 	add.w	r3, r7, #20
 800d2e0:	9301      	str	r3, [sp, #4]
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	68b9      	ldr	r1, [r7, #8]
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f000 f850 	bl	800d392 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2f4:	f000 f8d4 	bl	800d4a0 <prvAddNewTaskToReadyList>
 800d2f8:	e001      	b.n	800d2fe <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d2fe:	697b      	ldr	r3, [r7, #20]
	}
 800d300:	4618      	mov	r0, r3
 800d302:	3728      	adds	r7, #40	; 0x28
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b08c      	sub	sp, #48	; 0x30
 800d30c:	af04      	add	r7, sp, #16
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	603b      	str	r3, [r7, #0]
 800d314:	4613      	mov	r3, r2
 800d316:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d318:	88fb      	ldrh	r3, [r7, #6]
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	4618      	mov	r0, r3
 800d31e:	f000 fee3 	bl	800e0e8 <pvPortMalloc>
 800d322:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00e      	beq.n	800d348 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d32a:	2054      	movs	r0, #84	; 0x54
 800d32c:	f000 fedc 	bl	800e0e8 <pvPortMalloc>
 800d330:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d003      	beq.n	800d340 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	631a      	str	r2, [r3, #48]	; 0x30
 800d33e:	e005      	b.n	800d34c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d340:	6978      	ldr	r0, [r7, #20]
 800d342:	f000 ff9d 	bl	800e280 <vPortFree>
 800d346:	e001      	b.n	800d34c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d017      	beq.n	800d382 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	2200      	movs	r2, #0
 800d356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d35a:	88fa      	ldrh	r2, [r7, #6]
 800d35c:	2300      	movs	r3, #0
 800d35e:	9303      	str	r3, [sp, #12]
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	9302      	str	r3, [sp, #8]
 800d364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d366:	9301      	str	r3, [sp, #4]
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	68b9      	ldr	r1, [r7, #8]
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f000 f80e 	bl	800d392 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d376:	69f8      	ldr	r0, [r7, #28]
 800d378:	f000 f892 	bl	800d4a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d37c:	2301      	movs	r3, #1
 800d37e:	61bb      	str	r3, [r7, #24]
 800d380:	e002      	b.n	800d388 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d382:	f04f 33ff 	mov.w	r3, #4294967295
 800d386:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d388:	69bb      	ldr	r3, [r7, #24]
	}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3720      	adds	r7, #32
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d392:	b580      	push	{r7, lr}
 800d394:	b088      	sub	sp, #32
 800d396:	af00      	add	r7, sp, #0
 800d398:	60f8      	str	r0, [r7, #12]
 800d39a:	60b9      	str	r1, [r7, #8]
 800d39c:	607a      	str	r2, [r7, #4]
 800d39e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3a4:	6879      	ldr	r1, [r7, #4]
 800d3a6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d3aa:	440b      	add	r3, r1
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	4413      	add	r3, r2
 800d3b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	f023 0307 	bic.w	r3, r3, #7
 800d3b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	f003 0307 	and.w	r3, r3, #7
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00a      	beq.n	800d3da <prvInitialiseNewTask+0x48>
	__asm volatile
 800d3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c8:	f383 8811 	msr	BASEPRI, r3
 800d3cc:	f3bf 8f6f 	isb	sy
 800d3d0:	f3bf 8f4f 	dsb	sy
 800d3d4:	617b      	str	r3, [r7, #20]
}
 800d3d6:	bf00      	nop
 800d3d8:	e7fe      	b.n	800d3d8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d01f      	beq.n	800d420 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	61fb      	str	r3, [r7, #28]
 800d3e4:	e012      	b.n	800d40c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	7819      	ldrb	r1, [r3, #0]
 800d3ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	3334      	adds	r3, #52	; 0x34
 800d3f6:	460a      	mov	r2, r1
 800d3f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d3fa:	68ba      	ldr	r2, [r7, #8]
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	4413      	add	r3, r2
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d006      	beq.n	800d414 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	3301      	adds	r3, #1
 800d40a:	61fb      	str	r3, [r7, #28]
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	2b0f      	cmp	r3, #15
 800d410:	d9e9      	bls.n	800d3e6 <prvInitialiseNewTask+0x54>
 800d412:	e000      	b.n	800d416 <prvInitialiseNewTask+0x84>
			{
				break;
 800d414:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d418:	2200      	movs	r2, #0
 800d41a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d41e:	e003      	b.n	800d428 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d422:	2200      	movs	r2, #0
 800d424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42a:	2b06      	cmp	r3, #6
 800d42c:	d901      	bls.n	800d432 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d42e:	2306      	movs	r3, #6
 800d430:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d436:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d43c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d440:	2200      	movs	r2, #0
 800d442:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d446:	3304      	adds	r3, #4
 800d448:	4618      	mov	r0, r3
 800d44a:	f7ff fe6c 	bl	800d126 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d450:	3318      	adds	r3, #24
 800d452:	4618      	mov	r0, r3
 800d454:	f7ff fe67 	bl	800d126 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d45c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d460:	f1c3 0207 	rsb	r2, r3, #7
 800d464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d466:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d46c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	2200      	movs	r2, #0
 800d472:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d476:	2200      	movs	r2, #0
 800d478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	68f9      	ldr	r1, [r7, #12]
 800d480:	69b8      	ldr	r0, [r7, #24]
 800d482:	f000 fc23 	bl	800dccc <pxPortInitialiseStack>
 800d486:	4602      	mov	r2, r0
 800d488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d002      	beq.n	800d498 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d496:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d498:	bf00      	nop
 800d49a:	3720      	adds	r7, #32
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d4a8:	f000 fd3c 	bl	800df24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d4ac:	4b2a      	ldr	r3, [pc, #168]	; (800d558 <prvAddNewTaskToReadyList+0xb8>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	4a29      	ldr	r2, [pc, #164]	; (800d558 <prvAddNewTaskToReadyList+0xb8>)
 800d4b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d4b6:	4b29      	ldr	r3, [pc, #164]	; (800d55c <prvAddNewTaskToReadyList+0xbc>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d109      	bne.n	800d4d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d4be:	4a27      	ldr	r2, [pc, #156]	; (800d55c <prvAddNewTaskToReadyList+0xbc>)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d4c4:	4b24      	ldr	r3, [pc, #144]	; (800d558 <prvAddNewTaskToReadyList+0xb8>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d110      	bne.n	800d4ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d4cc:	f000 fabc 	bl	800da48 <prvInitialiseTaskLists>
 800d4d0:	e00d      	b.n	800d4ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d4d2:	4b23      	ldr	r3, [pc, #140]	; (800d560 <prvAddNewTaskToReadyList+0xc0>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d109      	bne.n	800d4ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d4da:	4b20      	ldr	r3, [pc, #128]	; (800d55c <prvAddNewTaskToReadyList+0xbc>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d802      	bhi.n	800d4ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d4e8:	4a1c      	ldr	r2, [pc, #112]	; (800d55c <prvAddNewTaskToReadyList+0xbc>)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d4ee:	4b1d      	ldr	r3, [pc, #116]	; (800d564 <prvAddNewTaskToReadyList+0xc4>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	4a1b      	ldr	r2, [pc, #108]	; (800d564 <prvAddNewTaskToReadyList+0xc4>)
 800d4f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	409a      	lsls	r2, r3
 800d500:	4b19      	ldr	r3, [pc, #100]	; (800d568 <prvAddNewTaskToReadyList+0xc8>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4313      	orrs	r3, r2
 800d506:	4a18      	ldr	r2, [pc, #96]	; (800d568 <prvAddNewTaskToReadyList+0xc8>)
 800d508:	6013      	str	r3, [r2, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d50e:	4613      	mov	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	4413      	add	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4a15      	ldr	r2, [pc, #84]	; (800d56c <prvAddNewTaskToReadyList+0xcc>)
 800d518:	441a      	add	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	3304      	adds	r3, #4
 800d51e:	4619      	mov	r1, r3
 800d520:	4610      	mov	r0, r2
 800d522:	f7ff fe0d 	bl	800d140 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d526:	f000 fd2d 	bl	800df84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d52a:	4b0d      	ldr	r3, [pc, #52]	; (800d560 <prvAddNewTaskToReadyList+0xc0>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00e      	beq.n	800d550 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d532:	4b0a      	ldr	r3, [pc, #40]	; (800d55c <prvAddNewTaskToReadyList+0xbc>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d207      	bcs.n	800d550 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d540:	4b0b      	ldr	r3, [pc, #44]	; (800d570 <prvAddNewTaskToReadyList+0xd0>)
 800d542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d546:	601a      	str	r2, [r3, #0]
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d550:	bf00      	nop
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	24001364 	.word	0x24001364
 800d55c:	24001264 	.word	0x24001264
 800d560:	24001370 	.word	0x24001370
 800d564:	24001380 	.word	0x24001380
 800d568:	2400136c 	.word	0x2400136c
 800d56c:	24001268 	.word	0x24001268
 800d570:	e000ed04 	.word	0xe000ed04

0800d574 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d57c:	2300      	movs	r3, #0
 800d57e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d017      	beq.n	800d5b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d586:	4b13      	ldr	r3, [pc, #76]	; (800d5d4 <vTaskDelay+0x60>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00a      	beq.n	800d5a4 <vTaskDelay+0x30>
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	60bb      	str	r3, [r7, #8]
}
 800d5a0:	bf00      	nop
 800d5a2:	e7fe      	b.n	800d5a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d5a4:	f000 f87a 	bl	800d69c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fb28 	bl	800dc00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d5b0:	f000 f882 	bl	800d6b8 <xTaskResumeAll>
 800d5b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d107      	bne.n	800d5cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d5bc:	4b06      	ldr	r3, [pc, #24]	; (800d5d8 <vTaskDelay+0x64>)
 800d5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5cc:	bf00      	nop
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	2400138c 	.word	0x2400138c
 800d5d8:	e000ed04 	.word	0xe000ed04

0800d5dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b08a      	sub	sp, #40	; 0x28
 800d5e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d5ea:	463a      	mov	r2, r7
 800d5ec:	1d39      	adds	r1, r7, #4
 800d5ee:	f107 0308 	add.w	r3, r7, #8
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7f2 fff2 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d5f8:	6839      	ldr	r1, [r7, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	9202      	str	r2, [sp, #8]
 800d600:	9301      	str	r3, [sp, #4]
 800d602:	2300      	movs	r3, #0
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	2300      	movs	r3, #0
 800d608:	460a      	mov	r2, r1
 800d60a:	491e      	ldr	r1, [pc, #120]	; (800d684 <vTaskStartScheduler+0xa8>)
 800d60c:	481e      	ldr	r0, [pc, #120]	; (800d688 <vTaskStartScheduler+0xac>)
 800d60e:	f7ff fe1e 	bl	800d24e <xTaskCreateStatic>
 800d612:	4603      	mov	r3, r0
 800d614:	4a1d      	ldr	r2, [pc, #116]	; (800d68c <vTaskStartScheduler+0xb0>)
 800d616:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d618:	4b1c      	ldr	r3, [pc, #112]	; (800d68c <vTaskStartScheduler+0xb0>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d620:	2301      	movs	r3, #1
 800d622:	617b      	str	r3, [r7, #20]
 800d624:	e001      	b.n	800d62a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d626:	2300      	movs	r3, #0
 800d628:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d116      	bne.n	800d65e <vTaskStartScheduler+0x82>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	613b      	str	r3, [r7, #16]
}
 800d642:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d644:	4b12      	ldr	r3, [pc, #72]	; (800d690 <vTaskStartScheduler+0xb4>)
 800d646:	f04f 32ff 	mov.w	r2, #4294967295
 800d64a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d64c:	4b11      	ldr	r3, [pc, #68]	; (800d694 <vTaskStartScheduler+0xb8>)
 800d64e:	2201      	movs	r2, #1
 800d650:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d652:	4b11      	ldr	r3, [pc, #68]	; (800d698 <vTaskStartScheduler+0xbc>)
 800d654:	2200      	movs	r2, #0
 800d656:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d658:	f000 fbc2 	bl	800dde0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d65c:	e00e      	b.n	800d67c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d664:	d10a      	bne.n	800d67c <vTaskStartScheduler+0xa0>
	__asm volatile
 800d666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	60fb      	str	r3, [r7, #12]
}
 800d678:	bf00      	nop
 800d67a:	e7fe      	b.n	800d67a <vTaskStartScheduler+0x9e>
}
 800d67c:	bf00      	nop
 800d67e:	3718      	adds	r7, #24
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	0800e5bc 	.word	0x0800e5bc
 800d688:	0800da19 	.word	0x0800da19
 800d68c:	24001388 	.word	0x24001388
 800d690:	24001384 	.word	0x24001384
 800d694:	24001370 	.word	0x24001370
 800d698:	24001368 	.word	0x24001368

0800d69c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d69c:	b480      	push	{r7}
 800d69e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d6a0:	4b04      	ldr	r3, [pc, #16]	; (800d6b4 <vTaskSuspendAll+0x18>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	4a03      	ldr	r2, [pc, #12]	; (800d6b4 <vTaskSuspendAll+0x18>)
 800d6a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d6aa:	bf00      	nop
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr
 800d6b4:	2400138c 	.word	0x2400138c

0800d6b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d6c6:	4b41      	ldr	r3, [pc, #260]	; (800d7cc <xTaskResumeAll+0x114>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10a      	bne.n	800d6e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d2:	f383 8811 	msr	BASEPRI, r3
 800d6d6:	f3bf 8f6f 	isb	sy
 800d6da:	f3bf 8f4f 	dsb	sy
 800d6de:	603b      	str	r3, [r7, #0]
}
 800d6e0:	bf00      	nop
 800d6e2:	e7fe      	b.n	800d6e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d6e4:	f000 fc1e 	bl	800df24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d6e8:	4b38      	ldr	r3, [pc, #224]	; (800d7cc <xTaskResumeAll+0x114>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	4a37      	ldr	r2, [pc, #220]	; (800d7cc <xTaskResumeAll+0x114>)
 800d6f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6f2:	4b36      	ldr	r3, [pc, #216]	; (800d7cc <xTaskResumeAll+0x114>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d161      	bne.n	800d7be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d6fa:	4b35      	ldr	r3, [pc, #212]	; (800d7d0 <xTaskResumeAll+0x118>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d05d      	beq.n	800d7be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d702:	e02e      	b.n	800d762 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d704:	4b33      	ldr	r3, [pc, #204]	; (800d7d4 <xTaskResumeAll+0x11c>)
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	3318      	adds	r3, #24
 800d710:	4618      	mov	r0, r3
 800d712:	f7ff fd72 	bl	800d1fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	3304      	adds	r3, #4
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7ff fd6d 	bl	800d1fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d724:	2201      	movs	r2, #1
 800d726:	409a      	lsls	r2, r3
 800d728:	4b2b      	ldr	r3, [pc, #172]	; (800d7d8 <xTaskResumeAll+0x120>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4313      	orrs	r3, r2
 800d72e:	4a2a      	ldr	r2, [pc, #168]	; (800d7d8 <xTaskResumeAll+0x120>)
 800d730:	6013      	str	r3, [r2, #0]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d736:	4613      	mov	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	4a27      	ldr	r2, [pc, #156]	; (800d7dc <xTaskResumeAll+0x124>)
 800d740:	441a      	add	r2, r3
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	3304      	adds	r3, #4
 800d746:	4619      	mov	r1, r3
 800d748:	4610      	mov	r0, r2
 800d74a:	f7ff fcf9 	bl	800d140 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d752:	4b23      	ldr	r3, [pc, #140]	; (800d7e0 <xTaskResumeAll+0x128>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d758:	429a      	cmp	r2, r3
 800d75a:	d302      	bcc.n	800d762 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d75c:	4b21      	ldr	r3, [pc, #132]	; (800d7e4 <xTaskResumeAll+0x12c>)
 800d75e:	2201      	movs	r2, #1
 800d760:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d762:	4b1c      	ldr	r3, [pc, #112]	; (800d7d4 <xTaskResumeAll+0x11c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1cc      	bne.n	800d704 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d001      	beq.n	800d774 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d770:	f000 fa08 	bl	800db84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d774:	4b1c      	ldr	r3, [pc, #112]	; (800d7e8 <xTaskResumeAll+0x130>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d010      	beq.n	800d7a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d780:	f000 f836 	bl	800d7f0 <xTaskIncrementTick>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d002      	beq.n	800d790 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d78a:	4b16      	ldr	r3, [pc, #88]	; (800d7e4 <xTaskResumeAll+0x12c>)
 800d78c:	2201      	movs	r2, #1
 800d78e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	3b01      	subs	r3, #1
 800d794:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1f1      	bne.n	800d780 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d79c:	4b12      	ldr	r3, [pc, #72]	; (800d7e8 <xTaskResumeAll+0x130>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d7a2:	4b10      	ldr	r3, [pc, #64]	; (800d7e4 <xTaskResumeAll+0x12c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d009      	beq.n	800d7be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d7ae:	4b0f      	ldr	r3, [pc, #60]	; (800d7ec <xTaskResumeAll+0x134>)
 800d7b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d7be:	f000 fbe1 	bl	800df84 <vPortExitCritical>

	return xAlreadyYielded;
 800d7c2:	68bb      	ldr	r3, [r7, #8]
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	2400138c 	.word	0x2400138c
 800d7d0:	24001364 	.word	0x24001364
 800d7d4:	24001324 	.word	0x24001324
 800d7d8:	2400136c 	.word	0x2400136c
 800d7dc:	24001268 	.word	0x24001268
 800d7e0:	24001264 	.word	0x24001264
 800d7e4:	24001378 	.word	0x24001378
 800d7e8:	24001374 	.word	0x24001374
 800d7ec:	e000ed04 	.word	0xe000ed04

0800d7f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7fa:	4b4e      	ldr	r3, [pc, #312]	; (800d934 <xTaskIncrementTick+0x144>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f040 808e 	bne.w	800d920 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d804:	4b4c      	ldr	r3, [pc, #304]	; (800d938 <xTaskIncrementTick+0x148>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	3301      	adds	r3, #1
 800d80a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d80c:	4a4a      	ldr	r2, [pc, #296]	; (800d938 <xTaskIncrementTick+0x148>)
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d120      	bne.n	800d85a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d818:	4b48      	ldr	r3, [pc, #288]	; (800d93c <xTaskIncrementTick+0x14c>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d00a      	beq.n	800d838 <xTaskIncrementTick+0x48>
	__asm volatile
 800d822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d826:	f383 8811 	msr	BASEPRI, r3
 800d82a:	f3bf 8f6f 	isb	sy
 800d82e:	f3bf 8f4f 	dsb	sy
 800d832:	603b      	str	r3, [r7, #0]
}
 800d834:	bf00      	nop
 800d836:	e7fe      	b.n	800d836 <xTaskIncrementTick+0x46>
 800d838:	4b40      	ldr	r3, [pc, #256]	; (800d93c <xTaskIncrementTick+0x14c>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	60fb      	str	r3, [r7, #12]
 800d83e:	4b40      	ldr	r3, [pc, #256]	; (800d940 <xTaskIncrementTick+0x150>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a3e      	ldr	r2, [pc, #248]	; (800d93c <xTaskIncrementTick+0x14c>)
 800d844:	6013      	str	r3, [r2, #0]
 800d846:	4a3e      	ldr	r2, [pc, #248]	; (800d940 <xTaskIncrementTick+0x150>)
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6013      	str	r3, [r2, #0]
 800d84c:	4b3d      	ldr	r3, [pc, #244]	; (800d944 <xTaskIncrementTick+0x154>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	3301      	adds	r3, #1
 800d852:	4a3c      	ldr	r2, [pc, #240]	; (800d944 <xTaskIncrementTick+0x154>)
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	f000 f995 	bl	800db84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d85a:	4b3b      	ldr	r3, [pc, #236]	; (800d948 <xTaskIncrementTick+0x158>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	429a      	cmp	r2, r3
 800d862:	d348      	bcc.n	800d8f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d864:	4b35      	ldr	r3, [pc, #212]	; (800d93c <xTaskIncrementTick+0x14c>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d104      	bne.n	800d878 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d86e:	4b36      	ldr	r3, [pc, #216]	; (800d948 <xTaskIncrementTick+0x158>)
 800d870:	f04f 32ff 	mov.w	r2, #4294967295
 800d874:	601a      	str	r2, [r3, #0]
					break;
 800d876:	e03e      	b.n	800d8f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d878:	4b30      	ldr	r3, [pc, #192]	; (800d93c <xTaskIncrementTick+0x14c>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d888:	693a      	ldr	r2, [r7, #16]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d203      	bcs.n	800d898 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d890:	4a2d      	ldr	r2, [pc, #180]	; (800d948 <xTaskIncrementTick+0x158>)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d896:	e02e      	b.n	800d8f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	3304      	adds	r3, #4
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7ff fcac 	bl	800d1fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d004      	beq.n	800d8b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	3318      	adds	r3, #24
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7ff fca3 	bl	800d1fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	409a      	lsls	r2, r3
 800d8bc:	4b23      	ldr	r3, [pc, #140]	; (800d94c <xTaskIncrementTick+0x15c>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	4a22      	ldr	r2, [pc, #136]	; (800d94c <xTaskIncrementTick+0x15c>)
 800d8c4:	6013      	str	r3, [r2, #0]
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4413      	add	r3, r2
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	4a1f      	ldr	r2, [pc, #124]	; (800d950 <xTaskIncrementTick+0x160>)
 800d8d4:	441a      	add	r2, r3
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	3304      	adds	r3, #4
 800d8da:	4619      	mov	r1, r3
 800d8dc:	4610      	mov	r0, r2
 800d8de:	f7ff fc2f 	bl	800d140 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e6:	4b1b      	ldr	r3, [pc, #108]	; (800d954 <xTaskIncrementTick+0x164>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d3b9      	bcc.n	800d864 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8f4:	e7b6      	b.n	800d864 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d8f6:	4b17      	ldr	r3, [pc, #92]	; (800d954 <xTaskIncrementTick+0x164>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8fc:	4914      	ldr	r1, [pc, #80]	; (800d950 <xTaskIncrementTick+0x160>)
 800d8fe:	4613      	mov	r3, r2
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	4413      	add	r3, r2
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	440b      	add	r3, r1
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d901      	bls.n	800d912 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d90e:	2301      	movs	r3, #1
 800d910:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d912:	4b11      	ldr	r3, [pc, #68]	; (800d958 <xTaskIncrementTick+0x168>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d007      	beq.n	800d92a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d91a:	2301      	movs	r3, #1
 800d91c:	617b      	str	r3, [r7, #20]
 800d91e:	e004      	b.n	800d92a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d920:	4b0e      	ldr	r3, [pc, #56]	; (800d95c <xTaskIncrementTick+0x16c>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3301      	adds	r3, #1
 800d926:	4a0d      	ldr	r2, [pc, #52]	; (800d95c <xTaskIncrementTick+0x16c>)
 800d928:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d92a:	697b      	ldr	r3, [r7, #20]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3718      	adds	r7, #24
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	2400138c 	.word	0x2400138c
 800d938:	24001368 	.word	0x24001368
 800d93c:	2400131c 	.word	0x2400131c
 800d940:	24001320 	.word	0x24001320
 800d944:	2400137c 	.word	0x2400137c
 800d948:	24001384 	.word	0x24001384
 800d94c:	2400136c 	.word	0x2400136c
 800d950:	24001268 	.word	0x24001268
 800d954:	24001264 	.word	0x24001264
 800d958:	24001378 	.word	0x24001378
 800d95c:	24001374 	.word	0x24001374

0800d960 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d960:	b480      	push	{r7}
 800d962:	b087      	sub	sp, #28
 800d964:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d966:	4b27      	ldr	r3, [pc, #156]	; (800da04 <vTaskSwitchContext+0xa4>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d003      	beq.n	800d976 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d96e:	4b26      	ldr	r3, [pc, #152]	; (800da08 <vTaskSwitchContext+0xa8>)
 800d970:	2201      	movs	r2, #1
 800d972:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d974:	e03f      	b.n	800d9f6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d976:	4b24      	ldr	r3, [pc, #144]	; (800da08 <vTaskSwitchContext+0xa8>)
 800d978:	2200      	movs	r2, #0
 800d97a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d97c:	4b23      	ldr	r3, [pc, #140]	; (800da0c <vTaskSwitchContext+0xac>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	fab3 f383 	clz	r3, r3
 800d988:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d98a:	7afb      	ldrb	r3, [r7, #11]
 800d98c:	f1c3 031f 	rsb	r3, r3, #31
 800d990:	617b      	str	r3, [r7, #20]
 800d992:	491f      	ldr	r1, [pc, #124]	; (800da10 <vTaskSwitchContext+0xb0>)
 800d994:	697a      	ldr	r2, [r7, #20]
 800d996:	4613      	mov	r3, r2
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	4413      	add	r3, r2
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	440b      	add	r3, r1
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10a      	bne.n	800d9bc <vTaskSwitchContext+0x5c>
	__asm volatile
 800d9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9aa:	f383 8811 	msr	BASEPRI, r3
 800d9ae:	f3bf 8f6f 	isb	sy
 800d9b2:	f3bf 8f4f 	dsb	sy
 800d9b6:	607b      	str	r3, [r7, #4]
}
 800d9b8:	bf00      	nop
 800d9ba:	e7fe      	b.n	800d9ba <vTaskSwitchContext+0x5a>
 800d9bc:	697a      	ldr	r2, [r7, #20]
 800d9be:	4613      	mov	r3, r2
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	4413      	add	r3, r2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	4a12      	ldr	r2, [pc, #72]	; (800da10 <vTaskSwitchContext+0xb0>)
 800d9c8:	4413      	add	r3, r2
 800d9ca:	613b      	str	r3, [r7, #16]
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	685a      	ldr	r2, [r3, #4]
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	605a      	str	r2, [r3, #4]
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	685a      	ldr	r2, [r3, #4]
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	3308      	adds	r3, #8
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d104      	bne.n	800d9ec <vTaskSwitchContext+0x8c>
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	685a      	ldr	r2, [r3, #4]
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	605a      	str	r2, [r3, #4]
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	4a08      	ldr	r2, [pc, #32]	; (800da14 <vTaskSwitchContext+0xb4>)
 800d9f4:	6013      	str	r3, [r2, #0]
}
 800d9f6:	bf00      	nop
 800d9f8:	371c      	adds	r7, #28
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	2400138c 	.word	0x2400138c
 800da08:	24001378 	.word	0x24001378
 800da0c:	2400136c 	.word	0x2400136c
 800da10:	24001268 	.word	0x24001268
 800da14:	24001264 	.word	0x24001264

0800da18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800da20:	f000 f852 	bl	800dac8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800da24:	4b06      	ldr	r3, [pc, #24]	; (800da40 <prvIdleTask+0x28>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d9f9      	bls.n	800da20 <prvIdleTask+0x8>
			{
				taskYIELD();
 800da2c:	4b05      	ldr	r3, [pc, #20]	; (800da44 <prvIdleTask+0x2c>)
 800da2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da32:	601a      	str	r2, [r3, #0]
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800da3c:	e7f0      	b.n	800da20 <prvIdleTask+0x8>
 800da3e:	bf00      	nop
 800da40:	24001268 	.word	0x24001268
 800da44:	e000ed04 	.word	0xe000ed04

0800da48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da4e:	2300      	movs	r3, #0
 800da50:	607b      	str	r3, [r7, #4]
 800da52:	e00c      	b.n	800da6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	4613      	mov	r3, r2
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	4413      	add	r3, r2
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	4a12      	ldr	r2, [pc, #72]	; (800daa8 <prvInitialiseTaskLists+0x60>)
 800da60:	4413      	add	r3, r2
 800da62:	4618      	mov	r0, r3
 800da64:	f7ff fb3f 	bl	800d0e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	3301      	adds	r3, #1
 800da6c:	607b      	str	r3, [r7, #4]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b06      	cmp	r3, #6
 800da72:	d9ef      	bls.n	800da54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800da74:	480d      	ldr	r0, [pc, #52]	; (800daac <prvInitialiseTaskLists+0x64>)
 800da76:	f7ff fb36 	bl	800d0e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da7a:	480d      	ldr	r0, [pc, #52]	; (800dab0 <prvInitialiseTaskLists+0x68>)
 800da7c:	f7ff fb33 	bl	800d0e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da80:	480c      	ldr	r0, [pc, #48]	; (800dab4 <prvInitialiseTaskLists+0x6c>)
 800da82:	f7ff fb30 	bl	800d0e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da86:	480c      	ldr	r0, [pc, #48]	; (800dab8 <prvInitialiseTaskLists+0x70>)
 800da88:	f7ff fb2d 	bl	800d0e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da8c:	480b      	ldr	r0, [pc, #44]	; (800dabc <prvInitialiseTaskLists+0x74>)
 800da8e:	f7ff fb2a 	bl	800d0e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da92:	4b0b      	ldr	r3, [pc, #44]	; (800dac0 <prvInitialiseTaskLists+0x78>)
 800da94:	4a05      	ldr	r2, [pc, #20]	; (800daac <prvInitialiseTaskLists+0x64>)
 800da96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da98:	4b0a      	ldr	r3, [pc, #40]	; (800dac4 <prvInitialiseTaskLists+0x7c>)
 800da9a:	4a05      	ldr	r2, [pc, #20]	; (800dab0 <prvInitialiseTaskLists+0x68>)
 800da9c:	601a      	str	r2, [r3, #0]
}
 800da9e:	bf00      	nop
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	24001268 	.word	0x24001268
 800daac:	240012f4 	.word	0x240012f4
 800dab0:	24001308 	.word	0x24001308
 800dab4:	24001324 	.word	0x24001324
 800dab8:	24001338 	.word	0x24001338
 800dabc:	24001350 	.word	0x24001350
 800dac0:	2400131c 	.word	0x2400131c
 800dac4:	24001320 	.word	0x24001320

0800dac8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dace:	e019      	b.n	800db04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dad0:	f000 fa28 	bl	800df24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dad4:	4b10      	ldr	r3, [pc, #64]	; (800db18 <prvCheckTasksWaitingTermination+0x50>)
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	3304      	adds	r3, #4
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7ff fb8a 	bl	800d1fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dae6:	4b0d      	ldr	r3, [pc, #52]	; (800db1c <prvCheckTasksWaitingTermination+0x54>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	3b01      	subs	r3, #1
 800daec:	4a0b      	ldr	r2, [pc, #44]	; (800db1c <prvCheckTasksWaitingTermination+0x54>)
 800daee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800daf0:	4b0b      	ldr	r3, [pc, #44]	; (800db20 <prvCheckTasksWaitingTermination+0x58>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	3b01      	subs	r3, #1
 800daf6:	4a0a      	ldr	r2, [pc, #40]	; (800db20 <prvCheckTasksWaitingTermination+0x58>)
 800daf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dafa:	f000 fa43 	bl	800df84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f810 	bl	800db24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db04:	4b06      	ldr	r3, [pc, #24]	; (800db20 <prvCheckTasksWaitingTermination+0x58>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1e1      	bne.n	800dad0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800db0c:	bf00      	nop
 800db0e:	bf00      	nop
 800db10:	3708      	adds	r7, #8
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	24001338 	.word	0x24001338
 800db1c:	24001364 	.word	0x24001364
 800db20:	2400134c 	.word	0x2400134c

0800db24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db32:	2b00      	cmp	r3, #0
 800db34:	d108      	bne.n	800db48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db3a:	4618      	mov	r0, r3
 800db3c:	f000 fba0 	bl	800e280 <vPortFree>
				vPortFree( pxTCB );
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 fb9d 	bl	800e280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800db46:	e018      	b.n	800db7a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d103      	bne.n	800db5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 fb94 	bl	800e280 <vPortFree>
	}
 800db58:	e00f      	b.n	800db7a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db60:	2b02      	cmp	r3, #2
 800db62:	d00a      	beq.n	800db7a <prvDeleteTCB+0x56>
	__asm volatile
 800db64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	60fb      	str	r3, [r7, #12]
}
 800db76:	bf00      	nop
 800db78:	e7fe      	b.n	800db78 <prvDeleteTCB+0x54>
	}
 800db7a:	bf00      	nop
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
	...

0800db84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db8a:	4b0c      	ldr	r3, [pc, #48]	; (800dbbc <prvResetNextTaskUnblockTime+0x38>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d104      	bne.n	800db9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db94:	4b0a      	ldr	r3, [pc, #40]	; (800dbc0 <prvResetNextTaskUnblockTime+0x3c>)
 800db96:	f04f 32ff 	mov.w	r2, #4294967295
 800db9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db9c:	e008      	b.n	800dbb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9e:	4b07      	ldr	r3, [pc, #28]	; (800dbbc <prvResetNextTaskUnblockTime+0x38>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	4a04      	ldr	r2, [pc, #16]	; (800dbc0 <prvResetNextTaskUnblockTime+0x3c>)
 800dbae:	6013      	str	r3, [r2, #0]
}
 800dbb0:	bf00      	nop
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	2400131c 	.word	0x2400131c
 800dbc0:	24001384 	.word	0x24001384

0800dbc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dbca:	4b0b      	ldr	r3, [pc, #44]	; (800dbf8 <xTaskGetSchedulerState+0x34>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d102      	bne.n	800dbd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	607b      	str	r3, [r7, #4]
 800dbd6:	e008      	b.n	800dbea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbd8:	4b08      	ldr	r3, [pc, #32]	; (800dbfc <xTaskGetSchedulerState+0x38>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d102      	bne.n	800dbe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	607b      	str	r3, [r7, #4]
 800dbe4:	e001      	b.n	800dbea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dbea:	687b      	ldr	r3, [r7, #4]
	}
 800dbec:	4618      	mov	r0, r3
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	24001370 	.word	0x24001370
 800dbfc:	2400138c 	.word	0x2400138c

0800dc00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc0a:	4b29      	ldr	r3, [pc, #164]	; (800dcb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc10:	4b28      	ldr	r3, [pc, #160]	; (800dcb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	3304      	adds	r3, #4
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7ff faef 	bl	800d1fa <uxListRemove>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10b      	bne.n	800dc3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dc22:	4b24      	ldr	r3, [pc, #144]	; (800dcb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc28:	2201      	movs	r2, #1
 800dc2a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc2e:	43da      	mvns	r2, r3
 800dc30:	4b21      	ldr	r3, [pc, #132]	; (800dcb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4013      	ands	r3, r2
 800dc36:	4a20      	ldr	r2, [pc, #128]	; (800dcb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc40:	d10a      	bne.n	800dc58 <prvAddCurrentTaskToDelayedList+0x58>
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d007      	beq.n	800dc58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc48:	4b1a      	ldr	r3, [pc, #104]	; (800dcb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	4619      	mov	r1, r3
 800dc50:	481a      	ldr	r0, [pc, #104]	; (800dcbc <prvAddCurrentTaskToDelayedList+0xbc>)
 800dc52:	f7ff fa75 	bl	800d140 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc56:	e026      	b.n	800dca6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc60:	4b14      	ldr	r3, [pc, #80]	; (800dcb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d209      	bcs.n	800dc84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc70:	4b13      	ldr	r3, [pc, #76]	; (800dcc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	4b0f      	ldr	r3, [pc, #60]	; (800dcb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	3304      	adds	r3, #4
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	4610      	mov	r0, r2
 800dc7e:	f7ff fa83 	bl	800d188 <vListInsert>
}
 800dc82:	e010      	b.n	800dca6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc84:	4b0f      	ldr	r3, [pc, #60]	; (800dcc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	4b0a      	ldr	r3, [pc, #40]	; (800dcb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	3304      	adds	r3, #4
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4610      	mov	r0, r2
 800dc92:	f7ff fa79 	bl	800d188 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc96:	4b0c      	ldr	r3, [pc, #48]	; (800dcc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	68ba      	ldr	r2, [r7, #8]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d202      	bcs.n	800dca6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dca0:	4a09      	ldr	r2, [pc, #36]	; (800dcc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	6013      	str	r3, [r2, #0]
}
 800dca6:	bf00      	nop
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	24001368 	.word	0x24001368
 800dcb4:	24001264 	.word	0x24001264
 800dcb8:	2400136c 	.word	0x2400136c
 800dcbc:	24001350 	.word	0x24001350
 800dcc0:	24001320 	.word	0x24001320
 800dcc4:	2400131c 	.word	0x2400131c
 800dcc8:	24001384 	.word	0x24001384

0800dccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	3b04      	subs	r3, #4
 800dcdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	3b04      	subs	r3, #4
 800dcea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	f023 0201 	bic.w	r2, r3, #1
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	3b04      	subs	r3, #4
 800dcfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dcfc:	4a0c      	ldr	r2, [pc, #48]	; (800dd30 <pxPortInitialiseStack+0x64>)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	3b14      	subs	r3, #20
 800dd06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3b04      	subs	r3, #4
 800dd12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f06f 0202 	mvn.w	r2, #2
 800dd1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	3b20      	subs	r3, #32
 800dd20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd22:	68fb      	ldr	r3, [r7, #12]
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3714      	adds	r7, #20
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr
 800dd30:	0800dd35 	.word	0x0800dd35

0800dd34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd34:	b480      	push	{r7}
 800dd36:	b085      	sub	sp, #20
 800dd38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd3e:	4b12      	ldr	r3, [pc, #72]	; (800dd88 <prvTaskExitError+0x54>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd46:	d00a      	beq.n	800dd5e <prvTaskExitError+0x2a>
	__asm volatile
 800dd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4c:	f383 8811 	msr	BASEPRI, r3
 800dd50:	f3bf 8f6f 	isb	sy
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	60fb      	str	r3, [r7, #12]
}
 800dd5a:	bf00      	nop
 800dd5c:	e7fe      	b.n	800dd5c <prvTaskExitError+0x28>
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	60bb      	str	r3, [r7, #8]
}
 800dd70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd72:	bf00      	nop
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d0fc      	beq.n	800dd74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd7a:	bf00      	nop
 800dd7c:	bf00      	nop
 800dd7e:	3714      	adds	r7, #20
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr
 800dd88:	24000010 	.word	0x24000010
 800dd8c:	00000000 	.word	0x00000000

0800dd90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd90:	4b07      	ldr	r3, [pc, #28]	; (800ddb0 <pxCurrentTCBConst2>)
 800dd92:	6819      	ldr	r1, [r3, #0]
 800dd94:	6808      	ldr	r0, [r1, #0]
 800dd96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9a:	f380 8809 	msr	PSP, r0
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f04f 0000 	mov.w	r0, #0
 800dda6:	f380 8811 	msr	BASEPRI, r0
 800ddaa:	4770      	bx	lr
 800ddac:	f3af 8000 	nop.w

0800ddb0 <pxCurrentTCBConst2>:
 800ddb0:	24001264 	.word	0x24001264
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ddb4:	bf00      	nop
 800ddb6:	bf00      	nop

0800ddb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ddb8:	4808      	ldr	r0, [pc, #32]	; (800dddc <prvPortStartFirstTask+0x24>)
 800ddba:	6800      	ldr	r0, [r0, #0]
 800ddbc:	6800      	ldr	r0, [r0, #0]
 800ddbe:	f380 8808 	msr	MSP, r0
 800ddc2:	f04f 0000 	mov.w	r0, #0
 800ddc6:	f380 8814 	msr	CONTROL, r0
 800ddca:	b662      	cpsie	i
 800ddcc:	b661      	cpsie	f
 800ddce:	f3bf 8f4f 	dsb	sy
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	df00      	svc	0
 800ddd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ddda:	bf00      	nop
 800dddc:	e000ed08 	.word	0xe000ed08

0800dde0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b086      	sub	sp, #24
 800dde4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dde6:	4b46      	ldr	r3, [pc, #280]	; (800df00 <xPortStartScheduler+0x120>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a46      	ldr	r2, [pc, #280]	; (800df04 <xPortStartScheduler+0x124>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d10a      	bne.n	800de06 <xPortStartScheduler+0x26>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	613b      	str	r3, [r7, #16]
}
 800de02:	bf00      	nop
 800de04:	e7fe      	b.n	800de04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de06:	4b3e      	ldr	r3, [pc, #248]	; (800df00 <xPortStartScheduler+0x120>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a3f      	ldr	r2, [pc, #252]	; (800df08 <xPortStartScheduler+0x128>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d10a      	bne.n	800de26 <xPortStartScheduler+0x46>
	__asm volatile
 800de10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	60fb      	str	r3, [r7, #12]
}
 800de22:	bf00      	nop
 800de24:	e7fe      	b.n	800de24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de26:	4b39      	ldr	r3, [pc, #228]	; (800df0c <xPortStartScheduler+0x12c>)
 800de28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	22ff      	movs	r2, #255	; 0xff
 800de36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de40:	78fb      	ldrb	r3, [r7, #3]
 800de42:	b2db      	uxtb	r3, r3
 800de44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	4b31      	ldr	r3, [pc, #196]	; (800df10 <xPortStartScheduler+0x130>)
 800de4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de4e:	4b31      	ldr	r3, [pc, #196]	; (800df14 <xPortStartScheduler+0x134>)
 800de50:	2207      	movs	r2, #7
 800de52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de54:	e009      	b.n	800de6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800de56:	4b2f      	ldr	r3, [pc, #188]	; (800df14 <xPortStartScheduler+0x134>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	3b01      	subs	r3, #1
 800de5c:	4a2d      	ldr	r2, [pc, #180]	; (800df14 <xPortStartScheduler+0x134>)
 800de5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de60:	78fb      	ldrb	r3, [r7, #3]
 800de62:	b2db      	uxtb	r3, r3
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	b2db      	uxtb	r3, r3
 800de68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de6a:	78fb      	ldrb	r3, [r7, #3]
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de72:	2b80      	cmp	r3, #128	; 0x80
 800de74:	d0ef      	beq.n	800de56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de76:	4b27      	ldr	r3, [pc, #156]	; (800df14 <xPortStartScheduler+0x134>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f1c3 0307 	rsb	r3, r3, #7
 800de7e:	2b04      	cmp	r3, #4
 800de80:	d00a      	beq.n	800de98 <xPortStartScheduler+0xb8>
	__asm volatile
 800de82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de86:	f383 8811 	msr	BASEPRI, r3
 800de8a:	f3bf 8f6f 	isb	sy
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	60bb      	str	r3, [r7, #8]
}
 800de94:	bf00      	nop
 800de96:	e7fe      	b.n	800de96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de98:	4b1e      	ldr	r3, [pc, #120]	; (800df14 <xPortStartScheduler+0x134>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	021b      	lsls	r3, r3, #8
 800de9e:	4a1d      	ldr	r2, [pc, #116]	; (800df14 <xPortStartScheduler+0x134>)
 800dea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dea2:	4b1c      	ldr	r3, [pc, #112]	; (800df14 <xPortStartScheduler+0x134>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800deaa:	4a1a      	ldr	r2, [pc, #104]	; (800df14 <xPortStartScheduler+0x134>)
 800deac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800deb6:	4b18      	ldr	r3, [pc, #96]	; (800df18 <xPortStartScheduler+0x138>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a17      	ldr	r2, [pc, #92]	; (800df18 <xPortStartScheduler+0x138>)
 800debc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dec2:	4b15      	ldr	r3, [pc, #84]	; (800df18 <xPortStartScheduler+0x138>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a14      	ldr	r2, [pc, #80]	; (800df18 <xPortStartScheduler+0x138>)
 800dec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800decc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dece:	f000 f8dd 	bl	800e08c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ded2:	4b12      	ldr	r3, [pc, #72]	; (800df1c <xPortStartScheduler+0x13c>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ded8:	f000 f8fc 	bl	800e0d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dedc:	4b10      	ldr	r3, [pc, #64]	; (800df20 <xPortStartScheduler+0x140>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4a0f      	ldr	r2, [pc, #60]	; (800df20 <xPortStartScheduler+0x140>)
 800dee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dee8:	f7ff ff66 	bl	800ddb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800deec:	f7ff fd38 	bl	800d960 <vTaskSwitchContext>
	prvTaskExitError();
 800def0:	f7ff ff20 	bl	800dd34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3718      	adds	r7, #24
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	e000ed00 	.word	0xe000ed00
 800df04:	410fc271 	.word	0x410fc271
 800df08:	410fc270 	.word	0x410fc270
 800df0c:	e000e400 	.word	0xe000e400
 800df10:	24001390 	.word	0x24001390
 800df14:	24001394 	.word	0x24001394
 800df18:	e000ed20 	.word	0xe000ed20
 800df1c:	24000010 	.word	0x24000010
 800df20:	e000ef34 	.word	0xe000ef34

0800df24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
	__asm volatile
 800df2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2e:	f383 8811 	msr	BASEPRI, r3
 800df32:	f3bf 8f6f 	isb	sy
 800df36:	f3bf 8f4f 	dsb	sy
 800df3a:	607b      	str	r3, [r7, #4]
}
 800df3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df3e:	4b0f      	ldr	r3, [pc, #60]	; (800df7c <vPortEnterCritical+0x58>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	3301      	adds	r3, #1
 800df44:	4a0d      	ldr	r2, [pc, #52]	; (800df7c <vPortEnterCritical+0x58>)
 800df46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df48:	4b0c      	ldr	r3, [pc, #48]	; (800df7c <vPortEnterCritical+0x58>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d10f      	bne.n	800df70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df50:	4b0b      	ldr	r3, [pc, #44]	; (800df80 <vPortEnterCritical+0x5c>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	b2db      	uxtb	r3, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00a      	beq.n	800df70 <vPortEnterCritical+0x4c>
	__asm volatile
 800df5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5e:	f383 8811 	msr	BASEPRI, r3
 800df62:	f3bf 8f6f 	isb	sy
 800df66:	f3bf 8f4f 	dsb	sy
 800df6a:	603b      	str	r3, [r7, #0]
}
 800df6c:	bf00      	nop
 800df6e:	e7fe      	b.n	800df6e <vPortEnterCritical+0x4a>
	}
}
 800df70:	bf00      	nop
 800df72:	370c      	adds	r7, #12
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr
 800df7c:	24000010 	.word	0x24000010
 800df80:	e000ed04 	.word	0xe000ed04

0800df84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df8a:	4b12      	ldr	r3, [pc, #72]	; (800dfd4 <vPortExitCritical+0x50>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d10a      	bne.n	800dfa8 <vPortExitCritical+0x24>
	__asm volatile
 800df92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df96:	f383 8811 	msr	BASEPRI, r3
 800df9a:	f3bf 8f6f 	isb	sy
 800df9e:	f3bf 8f4f 	dsb	sy
 800dfa2:	607b      	str	r3, [r7, #4]
}
 800dfa4:	bf00      	nop
 800dfa6:	e7fe      	b.n	800dfa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dfa8:	4b0a      	ldr	r3, [pc, #40]	; (800dfd4 <vPortExitCritical+0x50>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	3b01      	subs	r3, #1
 800dfae:	4a09      	ldr	r2, [pc, #36]	; (800dfd4 <vPortExitCritical+0x50>)
 800dfb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dfb2:	4b08      	ldr	r3, [pc, #32]	; (800dfd4 <vPortExitCritical+0x50>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d105      	bne.n	800dfc6 <vPortExitCritical+0x42>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dfc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dfc6:	bf00      	nop
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	24000010 	.word	0x24000010
	...

0800dfe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dfe0:	f3ef 8009 	mrs	r0, PSP
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	4b15      	ldr	r3, [pc, #84]	; (800e040 <pxCurrentTCBConst>)
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	f01e 0f10 	tst.w	lr, #16
 800dff0:	bf08      	it	eq
 800dff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffa:	6010      	str	r0, [r2, #0]
 800dffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e000:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e004:	f380 8811 	msr	BASEPRI, r0
 800e008:	f3bf 8f4f 	dsb	sy
 800e00c:	f3bf 8f6f 	isb	sy
 800e010:	f7ff fca6 	bl	800d960 <vTaskSwitchContext>
 800e014:	f04f 0000 	mov.w	r0, #0
 800e018:	f380 8811 	msr	BASEPRI, r0
 800e01c:	bc09      	pop	{r0, r3}
 800e01e:	6819      	ldr	r1, [r3, #0]
 800e020:	6808      	ldr	r0, [r1, #0]
 800e022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e026:	f01e 0f10 	tst.w	lr, #16
 800e02a:	bf08      	it	eq
 800e02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e030:	f380 8809 	msr	PSP, r0
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	f3af 8000 	nop.w

0800e040 <pxCurrentTCBConst>:
 800e040:	24001264 	.word	0x24001264
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e044:	bf00      	nop
 800e046:	bf00      	nop

0800e048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
	__asm volatile
 800e04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	607b      	str	r3, [r7, #4]
}
 800e060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e062:	f7ff fbc5 	bl	800d7f0 <xTaskIncrementTick>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d003      	beq.n	800e074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e06c:	4b06      	ldr	r3, [pc, #24]	; (800e088 <xPortSysTickHandler+0x40>)
 800e06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	2300      	movs	r3, #0
 800e076:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	f383 8811 	msr	BASEPRI, r3
}
 800e07e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e080:	bf00      	nop
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	e000ed04 	.word	0xe000ed04

0800e08c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e08c:	b480      	push	{r7}
 800e08e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e090:	4b0b      	ldr	r3, [pc, #44]	; (800e0c0 <vPortSetupTimerInterrupt+0x34>)
 800e092:	2200      	movs	r2, #0
 800e094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e096:	4b0b      	ldr	r3, [pc, #44]	; (800e0c4 <vPortSetupTimerInterrupt+0x38>)
 800e098:	2200      	movs	r2, #0
 800e09a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e09c:	4b0a      	ldr	r3, [pc, #40]	; (800e0c8 <vPortSetupTimerInterrupt+0x3c>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a0a      	ldr	r2, [pc, #40]	; (800e0cc <vPortSetupTimerInterrupt+0x40>)
 800e0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0a6:	099b      	lsrs	r3, r3, #6
 800e0a8:	4a09      	ldr	r2, [pc, #36]	; (800e0d0 <vPortSetupTimerInterrupt+0x44>)
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e0ae:	4b04      	ldr	r3, [pc, #16]	; (800e0c0 <vPortSetupTimerInterrupt+0x34>)
 800e0b0:	2207      	movs	r2, #7
 800e0b2:	601a      	str	r2, [r3, #0]
}
 800e0b4:	bf00      	nop
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr
 800e0be:	bf00      	nop
 800e0c0:	e000e010 	.word	0xe000e010
 800e0c4:	e000e018 	.word	0xe000e018
 800e0c8:	24000000 	.word	0x24000000
 800e0cc:	10624dd3 	.word	0x10624dd3
 800e0d0:	e000e014 	.word	0xe000e014

0800e0d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e0d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e0e4 <vPortEnableVFP+0x10>
 800e0d8:	6801      	ldr	r1, [r0, #0]
 800e0da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e0de:	6001      	str	r1, [r0, #0]
 800e0e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0e2:	bf00      	nop
 800e0e4:	e000ed88 	.word	0xe000ed88

0800e0e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b08a      	sub	sp, #40	; 0x28
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e0f4:	f7ff fad2 	bl	800d69c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e0f8:	4b5b      	ldr	r3, [pc, #364]	; (800e268 <pvPortMalloc+0x180>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d101      	bne.n	800e104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e100:	f000 f920 	bl	800e344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e104:	4b59      	ldr	r3, [pc, #356]	; (800e26c <pvPortMalloc+0x184>)
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4013      	ands	r3, r2
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f040 8093 	bne.w	800e238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d01d      	beq.n	800e154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e118:	2208      	movs	r2, #8
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4413      	add	r3, r2
 800e11e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f003 0307 	and.w	r3, r3, #7
 800e126:	2b00      	cmp	r3, #0
 800e128:	d014      	beq.n	800e154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f023 0307 	bic.w	r3, r3, #7
 800e130:	3308      	adds	r3, #8
 800e132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f003 0307 	and.w	r3, r3, #7
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00a      	beq.n	800e154 <pvPortMalloc+0x6c>
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	617b      	str	r3, [r7, #20]
}
 800e150:	bf00      	nop
 800e152:	e7fe      	b.n	800e152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d06e      	beq.n	800e238 <pvPortMalloc+0x150>
 800e15a:	4b45      	ldr	r3, [pc, #276]	; (800e270 <pvPortMalloc+0x188>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	429a      	cmp	r2, r3
 800e162:	d869      	bhi.n	800e238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e164:	4b43      	ldr	r3, [pc, #268]	; (800e274 <pvPortMalloc+0x18c>)
 800e166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e168:	4b42      	ldr	r3, [pc, #264]	; (800e274 <pvPortMalloc+0x18c>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e16e:	e004      	b.n	800e17a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	429a      	cmp	r2, r3
 800e182:	d903      	bls.n	800e18c <pvPortMalloc+0xa4>
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1f1      	bne.n	800e170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e18c:	4b36      	ldr	r3, [pc, #216]	; (800e268 <pvPortMalloc+0x180>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e192:	429a      	cmp	r2, r3
 800e194:	d050      	beq.n	800e238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e196:	6a3b      	ldr	r3, [r7, #32]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2208      	movs	r2, #8
 800e19c:	4413      	add	r3, r2
 800e19e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
 800e1a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1aa:	685a      	ldr	r2, [r3, #4]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	1ad2      	subs	r2, r2, r3
 800e1b0:	2308      	movs	r3, #8
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d91f      	bls.n	800e1f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4413      	add	r3, r2
 800e1be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	f003 0307 	and.w	r3, r3, #7
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00a      	beq.n	800e1e0 <pvPortMalloc+0xf8>
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	613b      	str	r3, [r7, #16]
}
 800e1dc:	bf00      	nop
 800e1de:	e7fe      	b.n	800e1de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e2:	685a      	ldr	r2, [r3, #4]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	1ad2      	subs	r2, r2, r3
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e1f2:	69b8      	ldr	r0, [r7, #24]
 800e1f4:	f000 f908 	bl	800e408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e1f8:	4b1d      	ldr	r3, [pc, #116]	; (800e270 <pvPortMalloc+0x188>)
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	4a1b      	ldr	r2, [pc, #108]	; (800e270 <pvPortMalloc+0x188>)
 800e204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e206:	4b1a      	ldr	r3, [pc, #104]	; (800e270 <pvPortMalloc+0x188>)
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	4b1b      	ldr	r3, [pc, #108]	; (800e278 <pvPortMalloc+0x190>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d203      	bcs.n	800e21a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e212:	4b17      	ldr	r3, [pc, #92]	; (800e270 <pvPortMalloc+0x188>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4a18      	ldr	r2, [pc, #96]	; (800e278 <pvPortMalloc+0x190>)
 800e218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21c:	685a      	ldr	r2, [r3, #4]
 800e21e:	4b13      	ldr	r3, [pc, #76]	; (800e26c <pvPortMalloc+0x184>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	431a      	orrs	r2, r3
 800e224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22a:	2200      	movs	r2, #0
 800e22c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e22e:	4b13      	ldr	r3, [pc, #76]	; (800e27c <pvPortMalloc+0x194>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	3301      	adds	r3, #1
 800e234:	4a11      	ldr	r2, [pc, #68]	; (800e27c <pvPortMalloc+0x194>)
 800e236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e238:	f7ff fa3e 	bl	800d6b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	f003 0307 	and.w	r3, r3, #7
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00a      	beq.n	800e25c <pvPortMalloc+0x174>
	__asm volatile
 800e246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24a:	f383 8811 	msr	BASEPRI, r3
 800e24e:	f3bf 8f6f 	isb	sy
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	60fb      	str	r3, [r7, #12]
}
 800e258:	bf00      	nop
 800e25a:	e7fe      	b.n	800e25a <pvPortMalloc+0x172>
	return pvReturn;
 800e25c:	69fb      	ldr	r3, [r7, #28]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3728      	adds	r7, #40	; 0x28
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	24004fa0 	.word	0x24004fa0
 800e26c:	24004fb4 	.word	0x24004fb4
 800e270:	24004fa4 	.word	0x24004fa4
 800e274:	24004f98 	.word	0x24004f98
 800e278:	24004fa8 	.word	0x24004fa8
 800e27c:	24004fac 	.word	0x24004fac

0800e280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d04d      	beq.n	800e32e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e292:	2308      	movs	r3, #8
 800e294:	425b      	negs	r3, r3
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	4413      	add	r3, r2
 800e29a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	685a      	ldr	r2, [r3, #4]
 800e2a4:	4b24      	ldr	r3, [pc, #144]	; (800e338 <vPortFree+0xb8>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10a      	bne.n	800e2c4 <vPortFree+0x44>
	__asm volatile
 800e2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	60fb      	str	r3, [r7, #12]
}
 800e2c0:	bf00      	nop
 800e2c2:	e7fe      	b.n	800e2c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d00a      	beq.n	800e2e2 <vPortFree+0x62>
	__asm volatile
 800e2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d0:	f383 8811 	msr	BASEPRI, r3
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	60bb      	str	r3, [r7, #8]
}
 800e2de:	bf00      	nop
 800e2e0:	e7fe      	b.n	800e2e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	685a      	ldr	r2, [r3, #4]
 800e2e6:	4b14      	ldr	r3, [pc, #80]	; (800e338 <vPortFree+0xb8>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d01e      	beq.n	800e32e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d11a      	bne.n	800e32e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	4b0e      	ldr	r3, [pc, #56]	; (800e338 <vPortFree+0xb8>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	43db      	mvns	r3, r3
 800e302:	401a      	ands	r2, r3
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e308:	f7ff f9c8 	bl	800d69c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	685a      	ldr	r2, [r3, #4]
 800e310:	4b0a      	ldr	r3, [pc, #40]	; (800e33c <vPortFree+0xbc>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4413      	add	r3, r2
 800e316:	4a09      	ldr	r2, [pc, #36]	; (800e33c <vPortFree+0xbc>)
 800e318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e31a:	6938      	ldr	r0, [r7, #16]
 800e31c:	f000 f874 	bl	800e408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e320:	4b07      	ldr	r3, [pc, #28]	; (800e340 <vPortFree+0xc0>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3301      	adds	r3, #1
 800e326:	4a06      	ldr	r2, [pc, #24]	; (800e340 <vPortFree+0xc0>)
 800e328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e32a:	f7ff f9c5 	bl	800d6b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e32e:	bf00      	nop
 800e330:	3718      	adds	r7, #24
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	24004fb4 	.word	0x24004fb4
 800e33c:	24004fa4 	.word	0x24004fa4
 800e340:	24004fb0 	.word	0x24004fb0

0800e344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e344:	b480      	push	{r7}
 800e346:	b085      	sub	sp, #20
 800e348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e34a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e34e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e350:	4b27      	ldr	r3, [pc, #156]	; (800e3f0 <prvHeapInit+0xac>)
 800e352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f003 0307 	and.w	r3, r3, #7
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d00c      	beq.n	800e378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3307      	adds	r3, #7
 800e362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f023 0307 	bic.w	r3, r3, #7
 800e36a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	4a1f      	ldr	r2, [pc, #124]	; (800e3f0 <prvHeapInit+0xac>)
 800e374:	4413      	add	r3, r2
 800e376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e37c:	4a1d      	ldr	r2, [pc, #116]	; (800e3f4 <prvHeapInit+0xb0>)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e382:	4b1c      	ldr	r3, [pc, #112]	; (800e3f4 <prvHeapInit+0xb0>)
 800e384:	2200      	movs	r2, #0
 800e386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	4413      	add	r3, r2
 800e38e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e390:	2208      	movs	r2, #8
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	1a9b      	subs	r3, r3, r2
 800e396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f023 0307 	bic.w	r3, r3, #7
 800e39e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	4a15      	ldr	r2, [pc, #84]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e3a6:	4b14      	ldr	r3, [pc, #80]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e3ae:	4b12      	ldr	r3, [pc, #72]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	1ad2      	subs	r2, r2, r3
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e3c4:	4b0c      	ldr	r3, [pc, #48]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	4a0a      	ldr	r2, [pc, #40]	; (800e3fc <prvHeapInit+0xb8>)
 800e3d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	4a09      	ldr	r2, [pc, #36]	; (800e400 <prvHeapInit+0xbc>)
 800e3da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e3dc:	4b09      	ldr	r3, [pc, #36]	; (800e404 <prvHeapInit+0xc0>)
 800e3de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e3e2:	601a      	str	r2, [r3, #0]
}
 800e3e4:	bf00      	nop
 800e3e6:	3714      	adds	r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	24001398 	.word	0x24001398
 800e3f4:	24004f98 	.word	0x24004f98
 800e3f8:	24004fa0 	.word	0x24004fa0
 800e3fc:	24004fa8 	.word	0x24004fa8
 800e400:	24004fa4 	.word	0x24004fa4
 800e404:	24004fb4 	.word	0x24004fb4

0800e408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e410:	4b28      	ldr	r3, [pc, #160]	; (800e4b4 <prvInsertBlockIntoFreeList+0xac>)
 800e412:	60fb      	str	r3, [r7, #12]
 800e414:	e002      	b.n	800e41c <prvInsertBlockIntoFreeList+0x14>
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	60fb      	str	r3, [r7, #12]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	429a      	cmp	r2, r3
 800e424:	d8f7      	bhi.n	800e416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	68ba      	ldr	r2, [r7, #8]
 800e430:	4413      	add	r3, r2
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	429a      	cmp	r2, r3
 800e436:	d108      	bne.n	800e44a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	685a      	ldr	r2, [r3, #4]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	441a      	add	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	68ba      	ldr	r2, [r7, #8]
 800e454:	441a      	add	r2, r3
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d118      	bne.n	800e490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	4b15      	ldr	r3, [pc, #84]	; (800e4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	429a      	cmp	r2, r3
 800e468:	d00d      	beq.n	800e486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	685a      	ldr	r2, [r3, #4]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	441a      	add	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	601a      	str	r2, [r3, #0]
 800e484:	e008      	b.n	800e498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e486:	4b0c      	ldr	r3, [pc, #48]	; (800e4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	601a      	str	r2, [r3, #0]
 800e48e:	e003      	b.n	800e498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d002      	beq.n	800e4a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4a6:	bf00      	nop
 800e4a8:	3714      	adds	r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop
 800e4b4:	24004f98 	.word	0x24004f98
 800e4b8:	24004fa0 	.word	0x24004fa0

0800e4bc <memset>:
 800e4bc:	4402      	add	r2, r0
 800e4be:	4603      	mov	r3, r0
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d100      	bne.n	800e4c6 <memset+0xa>
 800e4c4:	4770      	bx	lr
 800e4c6:	f803 1b01 	strb.w	r1, [r3], #1
 800e4ca:	e7f9      	b.n	800e4c0 <memset+0x4>

0800e4cc <__libc_init_array>:
 800e4cc:	b570      	push	{r4, r5, r6, lr}
 800e4ce:	4d0d      	ldr	r5, [pc, #52]	; (800e504 <__libc_init_array+0x38>)
 800e4d0:	4c0d      	ldr	r4, [pc, #52]	; (800e508 <__libc_init_array+0x3c>)
 800e4d2:	1b64      	subs	r4, r4, r5
 800e4d4:	10a4      	asrs	r4, r4, #2
 800e4d6:	2600      	movs	r6, #0
 800e4d8:	42a6      	cmp	r6, r4
 800e4da:	d109      	bne.n	800e4f0 <__libc_init_array+0x24>
 800e4dc:	4d0b      	ldr	r5, [pc, #44]	; (800e50c <__libc_init_array+0x40>)
 800e4de:	4c0c      	ldr	r4, [pc, #48]	; (800e510 <__libc_init_array+0x44>)
 800e4e0:	f000 f826 	bl	800e530 <_init>
 800e4e4:	1b64      	subs	r4, r4, r5
 800e4e6:	10a4      	asrs	r4, r4, #2
 800e4e8:	2600      	movs	r6, #0
 800e4ea:	42a6      	cmp	r6, r4
 800e4ec:	d105      	bne.n	800e4fa <__libc_init_array+0x2e>
 800e4ee:	bd70      	pop	{r4, r5, r6, pc}
 800e4f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4f4:	4798      	blx	r3
 800e4f6:	3601      	adds	r6, #1
 800e4f8:	e7ee      	b.n	800e4d8 <__libc_init_array+0xc>
 800e4fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4fe:	4798      	blx	r3
 800e500:	3601      	adds	r6, #1
 800e502:	e7f2      	b.n	800e4ea <__libc_init_array+0x1e>
 800e504:	0800e604 	.word	0x0800e604
 800e508:	0800e604 	.word	0x0800e604
 800e50c:	0800e604 	.word	0x0800e604
 800e510:	0800e608 	.word	0x0800e608

0800e514 <memcpy>:
 800e514:	440a      	add	r2, r1
 800e516:	4291      	cmp	r1, r2
 800e518:	f100 33ff 	add.w	r3, r0, #4294967295
 800e51c:	d100      	bne.n	800e520 <memcpy+0xc>
 800e51e:	4770      	bx	lr
 800e520:	b510      	push	{r4, lr}
 800e522:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e52a:	4291      	cmp	r1, r2
 800e52c:	d1f9      	bne.n	800e522 <memcpy+0xe>
 800e52e:	bd10      	pop	{r4, pc}

0800e530 <_init>:
 800e530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e532:	bf00      	nop
 800e534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e536:	bc08      	pop	{r3}
 800e538:	469e      	mov	lr, r3
 800e53a:	4770      	bx	lr

0800e53c <_fini>:
 800e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53e:	bf00      	nop
 800e540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e542:	bc08      	pop	{r3}
 800e544:	469e      	mov	lr, r3
 800e546:	4770      	bx	lr
